// Generated from org/apache/shardingsphere/sql/parser/autogen/PostgreSQLStatement.g4 by ANTLR 4.7.2
package org.apache.shardingsphere.sql.parser.autogen;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PostgreSQLStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, AND_=4, OR_=5, NOT_=6, TILDE_=7, VERTICAL_BAR_=8, 
		AMPERSAND_=9, SIGNED_LEFT_SHIFT_=10, SIGNED_RIGHT_SHIFT_=11, CARET_=12, 
		MOD_=13, COLON_=14, PLUS_=15, MINUS_=16, ASTERISK_=17, SLASH_=18, BACKSLASH_=19, 
		DOT_=20, DOT_ASTERISK_=21, SAFE_EQ_=22, DEQ_=23, EQ_=24, CQ_=25, NEQ_=26, 
		GT_=27, GTE_=28, LT_=29, LTE_=30, POUND_=31, LP_=32, RP_=33, LBE_=34, 
		RBE_=35, LBT_=36, RBT_=37, COMMA_=38, DQ_=39, SQ_=40, BQ_=41, QUESTION_=42, 
		AT_=43, SEMI_=44, TILDE_TILDE_=45, NOT_TILDE_TILDE_=46, TYPE_CAST_=47, 
		BLOCK_COMMENT=48, INLINE_COMMENT=49, WS=50, SELECT=51, INSERT=52, UPDATE=53, 
		DELETE=54, CREATE=55, ALTER=56, DROP=57, TRUNCATE=58, SCHEMA=59, GRANT=60, 
		REVOKE=61, ADD=62, SET=63, TABLE=64, COLUMN=65, INDEX=66, CONSTRAINT=67, 
		PRIMARY=68, UNIQUE=69, FOREIGN=70, KEY=71, POSITION=72, PRECISION=73, 
		FUNCTION=74, TRIGGER=75, PROCEDURE=76, VIEW=77, INTO=78, VALUES=79, WITH=80, 
		UNION=81, DISTINCT=82, CASE=83, WHEN=84, CAST=85, TRIM=86, SUBSTRING=87, 
		FROM=88, NATURAL=89, JOIN=90, FULL=91, INNER=92, OUTER=93, LEFT=94, RIGHT=95, 
		CROSS=96, USING=97, WHERE=98, AS=99, ON=100, IF=101, ELSE=102, THEN=103, 
		FOR=104, TO=105, AND=106, OR=107, IS=108, NOT=109, NULL=110, TRUE=111, 
		FALSE=112, EXISTS=113, BETWEEN=114, IN=115, ALL=116, ANY=117, LIKE=118, 
		ORDER=119, GROUP=120, BY=121, ASC=122, DESC=123, HAVING=124, LIMIT=125, 
		OFFSET=126, BEGIN=127, COMMIT=128, ROLLBACK=129, SAVEPOINT=130, BOOLEAN=131, 
		DOUBLE=132, CHAR=133, CHARACTER=134, ARRAY=135, INTERVAL=136, DATE=137, 
		TIME=138, TIMESTAMP=139, LOCALTIME=140, LOCALTIMESTAMP=141, YEAR=142, 
		QUARTER=143, MONTH=144, WEEK=145, DAY=146, HOUR=147, MINUTE=148, SECOND=149, 
		MICROSECOND=150, DEFAULT=151, CURRENT=152, ENABLE=153, DISABLE=154, CALL=155, 
		INSTANCE=156, PRESERVE=157, DO=158, DEFINER=159, CURRENT_USER=160, SQL=161, 
		CASCADED=162, LOCAL=163, CLOSE=164, OPEN=165, NEXT=166, NAME=167, COLLATION=168, 
		NAMES=169, INTEGER=170, REAL=171, DECIMAL=172, TYPE=173, SMALLINT=174, 
		BIGINT=175, NUMERIC=176, TEXT=177, REPEATABLE=178, CURRENT_DATE=179, CURRENT_TIME=180, 
		CURRENT_TIMESTAMP=181, NULLIF=182, VARYING=183, NATIONAL=184, NCHAR=185, 
		VALUE=186, BOTH=187, LEADING=188, TRAILING=189, COALESCE=190, INTERSECT=191, 
		EXCEPT=192, TIES=193, FETCH=194, CUBE=195, GROUPING=196, SETS=197, WINDOW=198, 
		OTHERS=199, OVERLAPS=200, SOME=201, AT=202, DEC=203, END=204, FOR_GENERATOR=205, 
		ADMIN=206, BINARY=207, ESCAPE=208, EXCLUDE=209, MOD=210, PARTITION=211, 
		ROW=212, UNKNOWN=213, ALWAYS=214, CASCADE=215, CHECK=216, GENERATED=217, 
		ISOLATION=218, LEVEL=219, NO=220, OPTION=221, PRIVILEGES=222, READ=223, 
		REFERENCES=224, ROLE=225, ROWS=226, START=227, TRANSACTION=228, USER=229, 
		ACTION=230, CACHE=231, CHARACTERISTICS=232, CLUSTER=233, COLLATE=234, 
		COMMENTS=235, CONCURRENTLY=236, CONNECT=237, CONSTRAINTS=238, CYCLE=239, 
		DATA=240, DATABASE=241, DEFAULTS=242, DEFERRABLE=243, DEFERRED=244, DEPENDS=245, 
		DOMAIN=246, EXCLUDING=247, EXECUTE=248, EXTENDED=249, EXTENSION=250, EXTERNAL=251, 
		EXTRACT=252, FILTER=253, FIRST=254, FOLLOWING=255, FORCE=256, GLOBAL=257, 
		IDENTITY=258, IMMEDIATE=259, INCLUDING=260, INCREMENT=261, INDEXES=262, 
		INHERIT=263, INHERITS=264, INITIALLY=265, INCLUDE=266, LANGUAGE=267, LARGE=268, 
		LAST=269, LOGGED=270, MAIN=271, MATCH=272, MAXVALUE=273, MINVALUE=274, 
		NOTHING=275, NULLS=276, OBJECT=277, OIDS=278, ONLY=279, OVER=280, OWNED=281, 
		OWNER=282, PARTIAL=283, PLAIN=284, PRECEDING=285, RANGE=286, RENAME=287, 
		REPLICA=288, RESET=289, RESTART=290, RESTRICT=291, ROUTINE=292, RULE=293, 
		SECURITY=294, SEQUENCE=295, SESSION=296, SESSION_USER=297, SHOW=298, SIMPLE=299, 
		STATISTICS=300, STORAGE=301, TABLESPACE=302, TEMP=303, TEMPORARY=304, 
		UNBOUNDED=305, UNLOGGED=306, USAGE=307, VALID=308, VALIDATE=309, WITHIN=310, 
		WITHOUT=311, ZONE=312, OF=313, UESCAPE=314, GROUPS=315, RECURSIVE=316, 
		INT=317, INT2=318, INT4=319, INT8=320, FLOAT=321, FLOAT4=322, FLOAT8=323, 
		SMALLSERIAL=324, SERIAL=325, BIGSERIAL=326, MONEY=327, VARCHAR=328, BYTEA=329, 
		ENUM=330, POINT=331, LINE=332, LSEG=333, BOX=334, PATH=335, POLYGON=336, 
		CIRCLE=337, CIDR=338, INET=339, MACADDR=340, MACADDR8=341, BIT=342, VARBIT=343, 
		TSVECTOR=344, TSQUERY=345, XML=346, JSON=347, INT4RANGE=348, INT8RANGE=349, 
		NUMRANGE=350, TSRANGE=351, TSTZRANGE=352, DATERANGE=353, TABLESAMPLE=354, 
		ORDINALITY=355, CURRENT_ROLE=356, CURRENT_CATALOG=357, CURRENT_SCHEMA=358, 
		NORMALIZE=359, OVERLAY=360, XMLCONCAT=361, XMLELEMENT=362, XMLEXISTS=363, 
		XMLFOREST=364, XMLPARSE=365, XMLPI=366, XMLROOT=367, XMLSERIALIZE=368, 
		TREAT=369, SETOF=370, NFC=371, NFD=372, NFKC=373, NFKD=374, XMLATTRIBUTES=375, 
		REF=376, PASSING=377, VERSION=378, YES=379, STANDALONE=380, GREATEST=381, 
		LEAST=382, MATERIALIZED=383, OPERATOR=384, SHARE=385, ROLLUP=386, ILIKE=387, 
		SIMILAR=388, ISNULL=389, NOTNULL=390, SYMMETRIC=391, DOCUMENT=392, NORMALIZED=393, 
		ASYMMETRIC=394, VARIADIC=395, NOWAIT=396, LOCKED=397, XMLTABLE=398, COLUMNS=399, 
		CONTENT=400, STRIP=401, WHITESPACE=402, XMLNAMESPACES=403, PLACING=404, 
		RETURNING=405, LATERAL=406, NONE=407, ANALYSE=408, ANALYZE=409, CONFLICT=410, 
		OVERRIDING=411, SYSTEM=412, ABORT=413, ABSOLUTE=414, ACCESS=415, AFTER=416, 
		AGGREGATE=417, ALSO=418, ATTACH=419, ATTRIBUTE=420, BACKWARD=421, BEFORE=422, 
		ASSERTION=423, ASSIGNMENT=424, CONTINUE=425, CONVERSION=426, COPY=427, 
		COST=428, CSV=429, CALLED=430, CATALOG=431, CHAIN=432, CHECKPOINT=433, 
		CLASS=434, CONFIGURATION=435, COMMENT=436, DETACH=437, DICTIONARY=438, 
		EXPRESSION=439, INSENSITIVE=440, DISCARD=441, OFF=442, INSTEAD=443, EXPLAIN=444, 
		INPUT=445, INLINE=446, PARALLEL=447, LEAKPROOF=448, COMMITTED=449, ENCODING=450, 
		IMPLICIT=451, DELIMITER=452, CURSOR=453, EACH=454, EVENT=455, DEALLOCATE=456, 
		CONNECTION=457, DECLARE=458, FAMILY=459, FORWARD=460, EXCLUSIVE=461, FUNCTIONS=462, 
		LOCATION=463, LABEL=464, DELIMITERS=465, HANDLER=466, HEADER=467, IMMUTABLE=468, 
		GRANTED=469, HOLD=470, MAPPING=471, OLD=472, METHOD=473, LOAD=474, LISTEN=475, 
		MODE=476, MOVE=477, PROCEDURAL=478, PARSER=479, PROCEDURES=480, ENCRYPTED=481, 
		PUBLICATION=482, PROGRAM=483, REFERENCING=484, PLANS=485, REINDEX=486, 
		PRIOR=487, PASSWORD=488, RELATIVE=489, QUOTE=490, ROUTINES=491, REPLACE=492, 
		SNAPSHOT=493, REFRESH=494, PREPARE=495, OPTIONS=496, IMPORT=497, INVOKER=498, 
		NEW=499, PREPARED=500, SCROLL=501, SEQUENCES=502, SYSID=503, REASSIGN=504, 
		SERVER=505, SUBSCRIPTION=506, SEARCH=507, SCHEMAS=508, RECHECK=509, POLICY=510, 
		NOTIFY=511, LOCK=512, RELEASE=513, SERIALIZABLE=514, RETURNS=515, STATEMENT=516, 
		STDIN=517, STDOUT=518, TABLES=519, SUPPORT=520, STABLE=521, TEMPLATE=522, 
		UNENCRYPTED=523, VIEWS=524, UNCOMMITTED=525, TRANSFORM=526, UNLISTEN=527, 
		TRUSTED=528, VALIDATOR=529, UNTIL=530, VACUUM=531, VOLATILE=532, STORED=533, 
		WRITE=534, STRICT=535, TYPES=536, WRAPPER=537, WORK=538, FREEZE=539, AUTHORIZATION=540, 
		VERBOSE=541, PARAM=542, OUT=543, INOUT=544, IDENTIFIER_=545, STRING_=546, 
		NUMBER_=547, HEX_DIGIT_=548, BIT_NUM_=549;
	public static final int
		RULE_execute = 0, RULE_insert = 1, RULE_insertTarget = 2, RULE_insertRest = 3, 
		RULE_overrideKind = 4, RULE_insertColumnList = 5, RULE_insertColumnItem = 6, 
		RULE_optOnConflict = 7, RULE_optConfExpr = 8, RULE_update = 9, RULE_setClauseList = 10, 
		RULE_setClause = 11, RULE_setTarget = 12, RULE_setTargetList = 13, RULE_returningClause = 14, 
		RULE_delete = 15, RULE_relationExprOptAlias = 16, RULE_usingClause = 17, 
		RULE_select = 18, RULE_selectWithParens = 19, RULE_selectNoParens = 20, 
		RULE_selectClauseN = 21, RULE_simpleSelect = 22, RULE_withClause = 23, 
		RULE_intoClause = 24, RULE_optTempTableName = 25, RULE_cteList = 26, RULE_commonTableExpr = 27, 
		RULE_optMaterialized = 28, RULE_optNameList = 29, RULE_preparableStmt = 30, 
		RULE_forLockingClause = 31, RULE_forLockingItems = 32, RULE_forLockingItem = 33, 
		RULE_nowaitOrSkip = 34, RULE_forLockingStrength = 35, RULE_lockedRelsList = 36, 
		RULE_qualifiedNameList = 37, RULE_qualifiedName = 38, RULE_selectLimit = 39, 
		RULE_valuesClause = 40, RULE_limitClause = 41, RULE_offsetClause = 42, 
		RULE_selectLimitValue = 43, RULE_selectOffsetValue = 44, RULE_selectFetchFirstValue = 45, 
		RULE_rowOrRows = 46, RULE_firstOrNext = 47, RULE_targetList = 48, RULE_targetEl = 49, 
		RULE_groupClause = 50, RULE_groupByList = 51, RULE_groupByItem = 52, RULE_emptyGroupingSet = 53, 
		RULE_rollupClause = 54, RULE_cubeClause = 55, RULE_groupingSetsClause = 56, 
		RULE_windowClause = 57, RULE_windowDefinitionList = 58, RULE_windowDefinition = 59, 
		RULE_windowSpecification = 60, RULE_existingWindowName = 61, RULE_partitionClause = 62, 
		RULE_frameClause = 63, RULE_frameExtent = 64, RULE_frameBound = 65, RULE_optWindowExclusionClause = 66, 
		RULE_alias = 67, RULE_fromClause = 68, RULE_fromList = 69, RULE_tableReference = 70, 
		RULE_joinedTable = 71, RULE_joinType = 72, RULE_joinOuter = 73, RULE_joinQual = 74, 
		RULE_relationExpr = 75, RULE_whereClause = 76, RULE_whereOrCurrentClause = 77, 
		RULE_havingClause = 78, RULE_doStatement = 79, RULE_dostmtOptList = 80, 
		RULE_dostmtOptItem = 81, RULE_lock = 82, RULE_lockType = 83, RULE_checkpoint = 84, 
		RULE_copy = 85, RULE_copyOptions = 86, RULE_copyGenericOptList = 87, RULE_copyGenericOptElem = 88, 
		RULE_copyGenericOptArg = 89, RULE_copyGenericOptArgList = 90, RULE_copyGenericOptArgListItem = 91, 
		RULE_copyOptList = 92, RULE_copyOptItem = 93, RULE_copyDelimiter = 94, 
		RULE_deallocate = 95, RULE_fetch = 96, RULE_fetchArgs = 97, RULE_parameterMarker = 98, 
		RULE_reservedKeyword = 99, RULE_numberLiterals = 100, RULE_literalsType = 101, 
		RULE_identifier = 102, RULE_unicodeEscapes = 103, RULE_uescape = 104, 
		RULE_unreservedWord = 105, RULE_typeFuncNameKeyword = 106, RULE_schemaName = 107, 
		RULE_tableName = 108, RULE_columnName = 109, RULE_owner = 110, RULE_name = 111, 
		RULE_tableNames = 112, RULE_columnNames = 113, RULE_collationName = 114, 
		RULE_indexName = 115, RULE_primaryKey = 116, RULE_logicalOperator = 117, 
		RULE_comparisonOperator = 118, RULE_cursorName = 119, RULE_aExpr = 120, 
		RULE_bExpr = 121, RULE_cExpr = 122, RULE_indirection = 123, RULE_optIndirection = 124, 
		RULE_indirectionEl = 125, RULE_sliceBound = 126, RULE_inExpr = 127, RULE_caseExpr = 128, 
		RULE_whenClauseList = 129, RULE_whenClause = 130, RULE_caseDefault = 131, 
		RULE_caseArg = 132, RULE_columnref = 133, RULE_qualOp = 134, RULE_subqueryOp = 135, 
		RULE_allOp = 136, RULE_op = 137, RULE_mathOperator = 138, RULE_qualAllOp = 139, 
		RULE_ascDesc = 140, RULE_anyOperator = 141, RULE_windowExclusionClause = 142, 
		RULE_row = 143, RULE_explicitRow = 144, RULE_implicitRow = 145, RULE_subType = 146, 
		RULE_arrayExpr = 147, RULE_arrayExprList = 148, RULE_funcArgList = 149, 
		RULE_paramName = 150, RULE_funcArgExpr = 151, RULE_typeList = 152, RULE_funcApplication = 153, 
		RULE_funcName = 154, RULE_aexprConst = 155, RULE_colId = 156, RULE_typeFunctionName = 157, 
		RULE_functionTable = 158, RULE_xmlTable = 159, RULE_xmlTableColumnList = 160, 
		RULE_xmlTableColumnEl = 161, RULE_xmlTableColumnOptionList = 162, RULE_xmlTableColumnOptionEl = 163, 
		RULE_xmlNamespaceList = 164, RULE_xmlNamespaceEl = 165, RULE_funcExpr = 166, 
		RULE_withinGroupClause = 167, RULE_filterClause = 168, RULE_functionExprWindowless = 169, 
		RULE_ordinality = 170, RULE_functionExprCommonSubexpr = 171, RULE_typeName = 172, 
		RULE_simpleTypeName = 173, RULE_exprList = 174, RULE_extractList = 175, 
		RULE_extractArg = 176, RULE_genericType = 177, RULE_typeModifiers = 178, 
		RULE_numeric = 179, RULE_constDatetime = 180, RULE_timezone = 181, RULE_character = 182, 
		RULE_characterWithLength = 183, RULE_characterWithoutLength = 184, RULE_characterClause = 185, 
		RULE_optFloat = 186, RULE_attrs = 187, RULE_attrName = 188, RULE_colLable = 189, 
		RULE_bit = 190, RULE_bitWithLength = 191, RULE_bitWithoutLength = 192, 
		RULE_constInterval = 193, RULE_optInterval = 194, RULE_optArrayBounds = 195, 
		RULE_intervalSecond = 196, RULE_unicodeNormalForm = 197, RULE_trimList = 198, 
		RULE_overlayList = 199, RULE_overlayPlacing = 200, RULE_substrFrom = 201, 
		RULE_substrFor = 202, RULE_positionList = 203, RULE_substrList = 204, 
		RULE_xmlAttributes = 205, RULE_xmlAttributeList = 206, RULE_xmlAttributeEl = 207, 
		RULE_xmlExistsArgument = 208, RULE_xmlPassingMech = 209, RULE_documentOrContent = 210, 
		RULE_xmlWhitespaceOption = 211, RULE_xmlRootVersion = 212, RULE_xmlRootStandalone = 213, 
		RULE_rowsFromItem = 214, RULE_rowsFromList = 215, RULE_columnDefList = 216, 
		RULE_tableFuncElementList = 217, RULE_tableFuncElement = 218, RULE_collateClause = 219, 
		RULE_anyName = 220, RULE_aliasClause = 221, RULE_nameList = 222, RULE_funcAliasClause = 223, 
		RULE_tablesampleClause = 224, RULE_repeatableClause = 225, RULE_allOrDistinct = 226, 
		RULE_sortClause = 227, RULE_sortbyList = 228, RULE_sortby = 229, RULE_nullsOrder = 230, 
		RULE_distinctClause = 231, RULE_distinct = 232, RULE_overClause = 233, 
		RULE_windowName = 234, RULE_indexParams = 235, RULE_indexElemOptions = 236, 
		RULE_indexElem = 237, RULE_collate = 238, RULE_optClass = 239, RULE_reloptions = 240, 
		RULE_reloptionList = 241, RULE_reloptionElem = 242, RULE_defArg = 243, 
		RULE_funcType = 244, RULE_dataType = 245, RULE_dataTypeName = 246, RULE_dataTypeLength = 247, 
		RULE_characterSet = 248, RULE_ignoredIdentifier = 249, RULE_ignoredIdentifiers = 250, 
		RULE_signedIconst = 251, RULE_booleanOrString = 252, RULE_nonReservedWord = 253, 
		RULE_colNameKeyword = 254, RULE_databaseName = 255, RULE_roleSpec = 256, 
		RULE_varName = 257, RULE_varList = 258, RULE_varValue = 259, RULE_zoneValue = 260, 
		RULE_numericOnly = 261, RULE_isoLevel = 262, RULE_columnDef = 263, RULE_colQualList = 264, 
		RULE_colConstraint = 265, RULE_constraintAttr = 266, RULE_colConstraintElem = 267, 
		RULE_parenthesizedSeqOptList = 268, RULE_seqOptList = 269, RULE_seqOptElem = 270, 
		RULE_optColumnList = 271, RULE_columnElem = 272, RULE_columnList = 273, 
		RULE_generatedWhen = 274, RULE_noInherit = 275, RULE_consTableSpace = 276, 
		RULE_definition = 277, RULE_defList = 278, RULE_defElem = 279, RULE_colLabel = 280, 
		RULE_keyActions = 281, RULE_keyDelete = 282, RULE_keyUpdate = 283, RULE_keyAction = 284, 
		RULE_keyMatch = 285, RULE_createGenericOptions = 286, RULE_genericOptionList = 287, 
		RULE_genericOptionElem = 288, RULE_genericOptionArg = 289, RULE_genericOptionName = 290, 
		RULE_replicaIdentity = 291, RULE_operArgtypes = 292, RULE_funcArg = 293, 
		RULE_argClass = 294, RULE_funcArgsList = 295, RULE_nonReservedWordOrSconst = 296, 
		RULE_fileName = 297, RULE_roleList = 298, RULE_setResetClause = 299, RULE_setRest = 300, 
		RULE_transactionModeList = 301, RULE_transactionModeItem = 302, RULE_setRestMore = 303, 
		RULE_encoding = 304, RULE_genericSet = 305, RULE_variableResetStmt = 306, 
		RULE_resetRest = 307, RULE_genericReset = 308, RULE_relationExprList = 309, 
		RULE_commonFuncOptItem = 310, RULE_functionSetResetClause = 311, RULE_rowSecurityCmd = 312, 
		RULE_event = 313, RULE_typeNameList = 314, RULE_createTable = 315, RULE_executeParamClause = 316, 
		RULE_partitionBoundSpec = 317, RULE_hashPartbound = 318, RULE_hashPartboundElem = 319, 
		RULE_typedTableElementList = 320, RULE_typedTableElement = 321, RULE_columnOptions = 322, 
		RULE_withData = 323, RULE_tableSpace = 324, RULE_onCommitOption = 325, 
		RULE_withOption = 326, RULE_tableAccessMethodClause = 327, RULE_accessMethod = 328, 
		RULE_createIndex = 329, RULE_include = 330, RULE_indexIncludingParams = 331, 
		RULE_accessMethodClause = 332, RULE_createDatabase = 333, RULE_createView = 334, 
		RULE_dropDatabase = 335, RULE_createDatabaseSpecification = 336, RULE_createdbOptName = 337, 
		RULE_alterTable = 338, RULE_alterIndex = 339, RULE_dropTable = 340, RULE_dropTableOpt = 341, 
		RULE_dropIndex = 342, RULE_dropIndexOpt = 343, RULE_truncateTable = 344, 
		RULE_restartSeqs = 345, RULE_createTableSpecification = 346, RULE_tableNotExistClause = 347, 
		RULE_createDefinitionClause = 348, RULE_createDefinition = 349, RULE_columnDefinition = 350, 
		RULE_columnConstraint = 351, RULE_constraintClause = 352, RULE_columnConstraintOption = 353, 
		RULE_checkOption = 354, RULE_defaultExpr = 355, RULE_sequenceOptions = 356, 
		RULE_sequenceOption = 357, RULE_indexParameters = 358, RULE_action = 359, 
		RULE_constraintOptionalParam = 360, RULE_likeOption = 361, RULE_tableConstraint = 362, 
		RULE_tableConstraintOption = 363, RULE_exclusionWhereClause = 364, RULE_exclusionConstraintList = 365, 
		RULE_exclusionConstraintElem = 366, RULE_inheritClause = 367, RULE_partitionSpec = 368, 
		RULE_partParams = 369, RULE_partElem = 370, RULE_funcExprWindowless = 371, 
		RULE_partStrategy = 372, RULE_createIndexSpecification = 373, RULE_concurrentlyClause = 374, 
		RULE_indexNotExistClause = 375, RULE_onlyClause = 376, RULE_tableExistClause = 377, 
		RULE_asteriskClause = 378, RULE_alterDefinitionClause = 379, RULE_partitionCmd = 380, 
		RULE_alterIndexDefinitionClause = 381, RULE_indexPartitionCmd = 382, RULE_renameIndexSpecification = 383, 
		RULE_alterIndexDependsOnExtension = 384, RULE_alterIndexSetTableSpace = 385, 
		RULE_tableNamesClause = 386, RULE_tableNameClause = 387, RULE_alterTableActions = 388, 
		RULE_alterTableAction = 389, RULE_addColumnSpecification = 390, RULE_dropColumnSpecification = 391, 
		RULE_columnExistClause = 392, RULE_modifyColumnSpecification = 393, RULE_modifyColumn = 394, 
		RULE_alterColumnSetOption = 395, RULE_attributeOptions = 396, RULE_attributeOption = 397, 
		RULE_addConstraintSpecification = 398, RULE_tableConstraintUsingIndex = 399, 
		RULE_storageParameterWithValue = 400, RULE_storageParameter = 401, RULE_renameColumnSpecification = 402, 
		RULE_renameConstraint = 403, RULE_renameTableSpecification = 404, RULE_indexExistClause = 405, 
		RULE_indexNames = 406, RULE_alterDatabase = 407, RULE_alterDatabaseClause = 408, 
		RULE_createdbOptItems = 409, RULE_createdbOptItem = 410, RULE_alterTableCmds = 411, 
		RULE_alterTableCmd = 412, RULE_constraintAttributeSpec = 413, RULE_constraintAttributeElem = 414, 
		RULE_alterGenericOptions = 415, RULE_alterGenericOptionList = 416, RULE_alterGenericOptionElem = 417, 
		RULE_dropBehavior = 418, RULE_alterUsing = 419, RULE_setData = 420, RULE_alterIdentityColumnOptionList = 421, 
		RULE_alterIdentityColumnOption = 422, RULE_alterColumnDefault = 423, RULE_alterOperator = 424, 
		RULE_alterOperatorClass = 425, RULE_alterOperatorClassClauses = 426, RULE_alterOperatorFamily = 427, 
		RULE_alterOperatorFamilyClauses = 428, RULE_opclassItemList = 429, RULE_opclassItem = 430, 
		RULE_opclassPurpose = 431, RULE_alterOperatorClauses = 432, RULE_operatorDefList = 433, 
		RULE_operatorDefElem = 434, RULE_operatorDefArg = 435, RULE_operatorWithArgtypes = 436, 
		RULE_alterAggregate = 437, RULE_aggregateSignature = 438, RULE_aggrArgs = 439, 
		RULE_aggrArgsList = 440, RULE_aggrArg = 441, RULE_alterAggregateDefinitionClause = 442, 
		RULE_alterCollation = 443, RULE_alterCollationClause = 444, RULE_alterConversion = 445, 
		RULE_alterConversionClause = 446, RULE_alterDefaultPrivileges = 447, RULE_defACLAction = 448, 
		RULE_grantGrantOption = 449, RULE_granteeList = 450, RULE_grantee = 451, 
		RULE_defaclPrivilegeTarget = 452, RULE_privileges = 453, RULE_privilegeList = 454, 
		RULE_privilege = 455, RULE_defACLOptionList = 456, RULE_defACLOption = 457, 
		RULE_schemaNameList = 458, RULE_alterDomain = 459, RULE_alterDomainClause = 460, 
		RULE_constraintName = 461, RULE_alterEventTrigger = 462, RULE_alterEventTriggerClause = 463, 
		RULE_tiggerName = 464, RULE_alterExtension = 465, RULE_alterExtensionClauses = 466, 
		RULE_functionWithArgtypes = 467, RULE_funcArgs = 468, RULE_aggregateWithArgtypes = 469, 
		RULE_alterExtensionOptList = 470, RULE_alterExtensionOptItem = 471, RULE_alterForeignDataWrapper = 472, 
		RULE_alterForeignDataWrapperClauses = 473, RULE_fdwOptions = 474, RULE_fdwOption = 475, 
		RULE_handlerName = 476, RULE_alterGroup = 477, RULE_alterGroupClauses = 478, 
		RULE_alterLanguage = 479, RULE_alterLargeObject = 480, RULE_alterMaterializedView = 481, 
		RULE_alterMaterializedViewClauses = 482, RULE_declare = 483, RULE_cursorOptions = 484, 
		RULE_cursorOption = 485, RULE_createMaterializedView = 486, RULE_createMvTarget = 487, 
		RULE_refreshMatViewStmt = 488, RULE_alterPolicy = 489, RULE_alterPolicyClauses = 490, 
		RULE_alterProcedure = 491, RULE_alterProcedureClauses = 492, RULE_alterfuncOptList = 493, 
		RULE_alterFunction = 494, RULE_alterFunctionClauses = 495, RULE_alterPublication = 496, 
		RULE_alterRoutine = 497, RULE_alterRule = 498, RULE_alterSequence = 499, 
		RULE_alterSequenceClauses = 500, RULE_alterServer = 501, RULE_foreignServerVersion = 502, 
		RULE_alterStatistics = 503, RULE_alterSubscription = 504, RULE_publicationNameList = 505, 
		RULE_publicationNameItem = 506, RULE_alterSystem = 507, RULE_alterTablespace = 508, 
		RULE_alterTextSearchConfiguration = 509, RULE_alterTextSearchConfigurationClauses = 510, 
		RULE_anyNameList = 511, RULE_alterTextSearchDictionary = 512, RULE_alterTextSearchParser = 513, 
		RULE_alterTextSearchTemplate = 514, RULE_alterTrigger = 515, RULE_alterType = 516, 
		RULE_alterTypeClauses = 517, RULE_alterTypeCmds = 518, RULE_alterTypeCmd = 519, 
		RULE_alterUserMapping = 520, RULE_authIdent = 521, RULE_alterView = 522, 
		RULE_alterViewClauses = 523, RULE_close = 524, RULE_cluster = 525, RULE_clusterIndexSpecification = 526, 
		RULE_comment = 527, RULE_commentClauses = 528, RULE_objectTypeNameOnAnyName = 529, 
		RULE_objectTypeName = 530, RULE_dropTypeName = 531, RULE_objectTypeAnyName = 532, 
		RULE_commentText = 533, RULE_createAccessMethod = 534, RULE_createAggregate = 535, 
		RULE_oldAggrDefinition = 536, RULE_oldAggrList = 537, RULE_oldAggrElem = 538, 
		RULE_createCast = 539, RULE_castContext = 540, RULE_createCollation = 541, 
		RULE_createConversion = 542, RULE_createDomain = 543, RULE_createEventTrigger = 544, 
		RULE_eventTriggerWhenList = 545, RULE_eventTriggerWhenItem = 546, RULE_eventTriggerValueList = 547, 
		RULE_createExtension = 548, RULE_createExtensionOptList = 549, RULE_createExtensionOptItem = 550, 
		RULE_createForeignDataWrapper = 551, RULE_createForeignTable = 552, RULE_createForeignTableClauses = 553, 
		RULE_tableElementList = 554, RULE_tableElement = 555, RULE_tableLikeClause = 556, 
		RULE_tableLikeOptionList = 557, RULE_tableLikeOption = 558, RULE_createFunction = 559, 
		RULE_tableFuncColumnList = 560, RULE_tableFuncColumn = 561, RULE_createfuncOptList = 562, 
		RULE_createfuncOptItem = 563, RULE_transformTypeList = 564, RULE_funcAs = 565, 
		RULE_funcReturn = 566, RULE_funcArgsWithDefaults = 567, RULE_funcArgsWithDefaultsList = 568, 
		RULE_funcArgWithDefault = 569, RULE_createLanguage = 570, RULE_transformElementList = 571, 
		RULE_validatorClause = 572, RULE_createPolicy = 573, RULE_createProcedure = 574, 
		RULE_createPublication = 575, RULE_publicationForTables = 576, RULE_createRule = 577, 
		RULE_ruleActionList = 578, RULE_ruleActionStmt = 579, RULE_ruleActionMulti = 580, 
		RULE_notifyStmt = 581, RULE_createTrigger = 582, RULE_triggerEvents = 583, 
		RULE_triggerOneEvent = 584, RULE_triggerActionTime = 585, RULE_triggerFuncArgs = 586, 
		RULE_triggerFuncArg = 587, RULE_triggerWhen = 588, RULE_triggerForSpec = 589, 
		RULE_triggerReferencing = 590, RULE_triggerTransitions = 591, RULE_triggerTransition = 592, 
		RULE_transitionRelName = 593, RULE_transitionRowOrTable = 594, RULE_transitionOldOrNew = 595, 
		RULE_createSequence = 596, RULE_tempOption = 597, RULE_createServer = 598, 
		RULE_createStatistics = 599, RULE_createSubscription = 600, RULE_createTablespace = 601, 
		RULE_createTextSearch = 602, RULE_createTransform = 603, RULE_createType = 604, 
		RULE_createTypeClauses = 605, RULE_enumValList = 606, RULE_createUserMapping = 607, 
		RULE_discard = 608, RULE_dropAccessMethod = 609, RULE_dropAggregate = 610, 
		RULE_aggregateWithArgtypesList = 611, RULE_dropCast = 612, RULE_dropCollation = 613, 
		RULE_dropConversion = 614, RULE_dropDomain = 615, RULE_dropEventTrigger = 616, 
		RULE_dropExtension = 617, RULE_dropForeignDataWrapper = 618, RULE_dropForeignTable = 619, 
		RULE_dropFunction = 620, RULE_functionWithArgtypesList = 621, RULE_dropLanguage = 622, 
		RULE_dropMaterializedView = 623, RULE_dropOperator = 624, RULE_operatorWithArgtypesList = 625, 
		RULE_dropOperatorClass = 626, RULE_dropOperatorFamily = 627, RULE_dropOwned = 628, 
		RULE_dropPolicy = 629, RULE_dropProcedure = 630, RULE_dropPublication = 631, 
		RULE_dropRoutine = 632, RULE_dropRule = 633, RULE_dropSequence = 634, 
		RULE_dropServer = 635, RULE_dropStatistics = 636, RULE_dropSubscription = 637, 
		RULE_dropTablespace = 638, RULE_dropTextSearch = 639, RULE_dropTransform = 640, 
		RULE_dropTrigger = 641, RULE_dropType = 642, RULE_dropUserMapping = 643, 
		RULE_dropView = 644, RULE_importForeignSchema = 645, RULE_importQualification = 646, 
		RULE_importQualificationType = 647, RULE_listen = 648, RULE_move = 649, 
		RULE_prepare = 650, RULE_prepTypeClause = 651, RULE_refreshMaterializedView = 652, 
		RULE_reIndex = 653, RULE_reIndexClauses = 654, RULE_reindexOptionList = 655, 
		RULE_reindexOptionElem = 656, RULE_reindexTargetMultitable = 657, RULE_reindexTargetType = 658, 
		RULE_alterForeignTable = 659, RULE_alterForeignTableClauses = 660, RULE_createOperator = 661, 
		RULE_createOperatorClass = 662, RULE_createOperatorFamily = 663, RULE_securityLabelStmt = 664, 
		RULE_securityLabel = 665, RULE_securityLabelClausces = 666, RULE_unlisten = 667, 
		RULE_setTransaction = 668, RULE_beginTransaction = 669, RULE_commit = 670, 
		RULE_savepoint = 671, RULE_abort = 672, RULE_startTransaction = 673, RULE_end = 674, 
		RULE_rollback = 675, RULE_releaseSavepoint = 676, RULE_rollbackToSavepoint = 677, 
		RULE_prepareTransaction = 678, RULE_commitPrepared = 679, RULE_rollbackPrepared = 680, 
		RULE_grant = 681, RULE_revoke = 682, RULE_privilegeClause = 683, RULE_roleClause = 684, 
		RULE_optionForClause = 685, RULE_privilegeTypes = 686, RULE_privilegeType = 687, 
		RULE_onObjectClause = 688, RULE_privilegeLevel = 689, RULE_routineName = 690, 
		RULE_numericOnlyList = 691, RULE_createUser = 692, RULE_createOptRoleElem = 693, 
		RULE_alterOptRoleElem = 694, RULE_dropUser = 695, RULE_alterUser = 696, 
		RULE_alterUserClauses = 697, RULE_alterOptRoleList = 698, RULE_createRole = 699, 
		RULE_dropRole = 700, RULE_alterRole = 701, RULE_alterSchema = 702, RULE_createGroup = 703, 
		RULE_createSchema = 704, RULE_createSchemaClauses = 705, RULE_schemaEltList = 706, 
		RULE_schemaStmt = 707, RULE_dropDroup = 708, RULE_dropSchema = 709, RULE_reassignOwned = 710, 
		RULE_show = 711, RULE_set = 712, RULE_runtimeScope = 713, RULE_timeZoneClause = 714, 
		RULE_configurationParameterClause = 715, RULE_resetParameter = 716, RULE_explain = 717, 
		RULE_explainableStmt = 718, RULE_explainOptionList = 719, RULE_explainOptionElem = 720, 
		RULE_explainOptionArg = 721, RULE_explainOptionName = 722, RULE_analyzeKeyword = 723, 
		RULE_setConstraints = 724, RULE_constraintsSetMode = 725, RULE_constraintsSetList = 726, 
		RULE_analyze = 727, RULE_vacuumRelationList = 728, RULE_vacuumRelation = 729, 
		RULE_vacAnalyzeOptionList = 730, RULE_vacAnalyzeOptionElem = 731, RULE_vacAnalyzeOptionArg = 732, 
		RULE_vacAnalyzeOptionName = 733, RULE_load = 734, RULE_vacuum = 735, RULE_call = 736, 
		RULE_callClauses = 737;
	private static String[] makeRuleNames() {
		return new String[] {
			"execute", "insert", "insertTarget", "insertRest", "overrideKind", "insertColumnList", 
			"insertColumnItem", "optOnConflict", "optConfExpr", "update", "setClauseList", 
			"setClause", "setTarget", "setTargetList", "returningClause", "delete", 
			"relationExprOptAlias", "usingClause", "select", "selectWithParens", 
			"selectNoParens", "selectClauseN", "simpleSelect", "withClause", "intoClause", 
			"optTempTableName", "cteList", "commonTableExpr", "optMaterialized", 
			"optNameList", "preparableStmt", "forLockingClause", "forLockingItems", 
			"forLockingItem", "nowaitOrSkip", "forLockingStrength", "lockedRelsList", 
			"qualifiedNameList", "qualifiedName", "selectLimit", "valuesClause", 
			"limitClause", "offsetClause", "selectLimitValue", "selectOffsetValue", 
			"selectFetchFirstValue", "rowOrRows", "firstOrNext", "targetList", "targetEl", 
			"groupClause", "groupByList", "groupByItem", "emptyGroupingSet", "rollupClause", 
			"cubeClause", "groupingSetsClause", "windowClause", "windowDefinitionList", 
			"windowDefinition", "windowSpecification", "existingWindowName", "partitionClause", 
			"frameClause", "frameExtent", "frameBound", "optWindowExclusionClause", 
			"alias", "fromClause", "fromList", "tableReference", "joinedTable", "joinType", 
			"joinOuter", "joinQual", "relationExpr", "whereClause", "whereOrCurrentClause", 
			"havingClause", "doStatement", "dostmtOptList", "dostmtOptItem", "lock", 
			"lockType", "checkpoint", "copy", "copyOptions", "copyGenericOptList", 
			"copyGenericOptElem", "copyGenericOptArg", "copyGenericOptArgList", "copyGenericOptArgListItem", 
			"copyOptList", "copyOptItem", "copyDelimiter", "deallocate", "fetch", 
			"fetchArgs", "parameterMarker", "reservedKeyword", "numberLiterals", 
			"literalsType", "identifier", "unicodeEscapes", "uescape", "unreservedWord", 
			"typeFuncNameKeyword", "schemaName", "tableName", "columnName", "owner", 
			"name", "tableNames", "columnNames", "collationName", "indexName", "primaryKey", 
			"logicalOperator", "comparisonOperator", "cursorName", "aExpr", "bExpr", 
			"cExpr", "indirection", "optIndirection", "indirectionEl", "sliceBound", 
			"inExpr", "caseExpr", "whenClauseList", "whenClause", "caseDefault", 
			"caseArg", "columnref", "qualOp", "subqueryOp", "allOp", "op", "mathOperator", 
			"qualAllOp", "ascDesc", "anyOperator", "windowExclusionClause", "row", 
			"explicitRow", "implicitRow", "subType", "arrayExpr", "arrayExprList", 
			"funcArgList", "paramName", "funcArgExpr", "typeList", "funcApplication", 
			"funcName", "aexprConst", "colId", "typeFunctionName", "functionTable", 
			"xmlTable", "xmlTableColumnList", "xmlTableColumnEl", "xmlTableColumnOptionList", 
			"xmlTableColumnOptionEl", "xmlNamespaceList", "xmlNamespaceEl", "funcExpr", 
			"withinGroupClause", "filterClause", "functionExprWindowless", "ordinality", 
			"functionExprCommonSubexpr", "typeName", "simpleTypeName", "exprList", 
			"extractList", "extractArg", "genericType", "typeModifiers", "numeric", 
			"constDatetime", "timezone", "character", "characterWithLength", "characterWithoutLength", 
			"characterClause", "optFloat", "attrs", "attrName", "colLable", "bit", 
			"bitWithLength", "bitWithoutLength", "constInterval", "optInterval", 
			"optArrayBounds", "intervalSecond", "unicodeNormalForm", "trimList", 
			"overlayList", "overlayPlacing", "substrFrom", "substrFor", "positionList", 
			"substrList", "xmlAttributes", "xmlAttributeList", "xmlAttributeEl", 
			"xmlExistsArgument", "xmlPassingMech", "documentOrContent", "xmlWhitespaceOption", 
			"xmlRootVersion", "xmlRootStandalone", "rowsFromItem", "rowsFromList", 
			"columnDefList", "tableFuncElementList", "tableFuncElement", "collateClause", 
			"anyName", "aliasClause", "nameList", "funcAliasClause", "tablesampleClause", 
			"repeatableClause", "allOrDistinct", "sortClause", "sortbyList", "sortby", 
			"nullsOrder", "distinctClause", "distinct", "overClause", "windowName", 
			"indexParams", "indexElemOptions", "indexElem", "collate", "optClass", 
			"reloptions", "reloptionList", "reloptionElem", "defArg", "funcType", 
			"dataType", "dataTypeName", "dataTypeLength", "characterSet", "ignoredIdentifier", 
			"ignoredIdentifiers", "signedIconst", "booleanOrString", "nonReservedWord", 
			"colNameKeyword", "databaseName", "roleSpec", "varName", "varList", "varValue", 
			"zoneValue", "numericOnly", "isoLevel", "columnDef", "colQualList", "colConstraint", 
			"constraintAttr", "colConstraintElem", "parenthesizedSeqOptList", "seqOptList", 
			"seqOptElem", "optColumnList", "columnElem", "columnList", "generatedWhen", 
			"noInherit", "consTableSpace", "definition", "defList", "defElem", "colLabel", 
			"keyActions", "keyDelete", "keyUpdate", "keyAction", "keyMatch", "createGenericOptions", 
			"genericOptionList", "genericOptionElem", "genericOptionArg", "genericOptionName", 
			"replicaIdentity", "operArgtypes", "funcArg", "argClass", "funcArgsList", 
			"nonReservedWordOrSconst", "fileName", "roleList", "setResetClause", 
			"setRest", "transactionModeList", "transactionModeItem", "setRestMore", 
			"encoding", "genericSet", "variableResetStmt", "resetRest", "genericReset", 
			"relationExprList", "commonFuncOptItem", "functionSetResetClause", "rowSecurityCmd", 
			"event", "typeNameList", "createTable", "executeParamClause", "partitionBoundSpec", 
			"hashPartbound", "hashPartboundElem", "typedTableElementList", "typedTableElement", 
			"columnOptions", "withData", "tableSpace", "onCommitOption", "withOption", 
			"tableAccessMethodClause", "accessMethod", "createIndex", "include", 
			"indexIncludingParams", "accessMethodClause", "createDatabase", "createView", 
			"dropDatabase", "createDatabaseSpecification", "createdbOptName", "alterTable", 
			"alterIndex", "dropTable", "dropTableOpt", "dropIndex", "dropIndexOpt", 
			"truncateTable", "restartSeqs", "createTableSpecification", "tableNotExistClause", 
			"createDefinitionClause", "createDefinition", "columnDefinition", "columnConstraint", 
			"constraintClause", "columnConstraintOption", "checkOption", "defaultExpr", 
			"sequenceOptions", "sequenceOption", "indexParameters", "action", "constraintOptionalParam", 
			"likeOption", "tableConstraint", "tableConstraintOption", "exclusionWhereClause", 
			"exclusionConstraintList", "exclusionConstraintElem", "inheritClause", 
			"partitionSpec", "partParams", "partElem", "funcExprWindowless", "partStrategy", 
			"createIndexSpecification", "concurrentlyClause", "indexNotExistClause", 
			"onlyClause", "tableExistClause", "asteriskClause", "alterDefinitionClause", 
			"partitionCmd", "alterIndexDefinitionClause", "indexPartitionCmd", "renameIndexSpecification", 
			"alterIndexDependsOnExtension", "alterIndexSetTableSpace", "tableNamesClause", 
			"tableNameClause", "alterTableActions", "alterTableAction", "addColumnSpecification", 
			"dropColumnSpecification", "columnExistClause", "modifyColumnSpecification", 
			"modifyColumn", "alterColumnSetOption", "attributeOptions", "attributeOption", 
			"addConstraintSpecification", "tableConstraintUsingIndex", "storageParameterWithValue", 
			"storageParameter", "renameColumnSpecification", "renameConstraint", 
			"renameTableSpecification", "indexExistClause", "indexNames", "alterDatabase", 
			"alterDatabaseClause", "createdbOptItems", "createdbOptItem", "alterTableCmds", 
			"alterTableCmd", "constraintAttributeSpec", "constraintAttributeElem", 
			"alterGenericOptions", "alterGenericOptionList", "alterGenericOptionElem", 
			"dropBehavior", "alterUsing", "setData", "alterIdentityColumnOptionList", 
			"alterIdentityColumnOption", "alterColumnDefault", "alterOperator", "alterOperatorClass", 
			"alterOperatorClassClauses", "alterOperatorFamily", "alterOperatorFamilyClauses", 
			"opclassItemList", "opclassItem", "opclassPurpose", "alterOperatorClauses", 
			"operatorDefList", "operatorDefElem", "operatorDefArg", "operatorWithArgtypes", 
			"alterAggregate", "aggregateSignature", "aggrArgs", "aggrArgsList", "aggrArg", 
			"alterAggregateDefinitionClause", "alterCollation", "alterCollationClause", 
			"alterConversion", "alterConversionClause", "alterDefaultPrivileges", 
			"defACLAction", "grantGrantOption", "granteeList", "grantee", "defaclPrivilegeTarget", 
			"privileges", "privilegeList", "privilege", "defACLOptionList", "defACLOption", 
			"schemaNameList", "alterDomain", "alterDomainClause", "constraintName", 
			"alterEventTrigger", "alterEventTriggerClause", "tiggerName", "alterExtension", 
			"alterExtensionClauses", "functionWithArgtypes", "funcArgs", "aggregateWithArgtypes", 
			"alterExtensionOptList", "alterExtensionOptItem", "alterForeignDataWrapper", 
			"alterForeignDataWrapperClauses", "fdwOptions", "fdwOption", "handlerName", 
			"alterGroup", "alterGroupClauses", "alterLanguage", "alterLargeObject", 
			"alterMaterializedView", "alterMaterializedViewClauses", "declare", "cursorOptions", 
			"cursorOption", "createMaterializedView", "createMvTarget", "refreshMatViewStmt", 
			"alterPolicy", "alterPolicyClauses", "alterProcedure", "alterProcedureClauses", 
			"alterfuncOptList", "alterFunction", "alterFunctionClauses", "alterPublication", 
			"alterRoutine", "alterRule", "alterSequence", "alterSequenceClauses", 
			"alterServer", "foreignServerVersion", "alterStatistics", "alterSubscription", 
			"publicationNameList", "publicationNameItem", "alterSystem", "alterTablespace", 
			"alterTextSearchConfiguration", "alterTextSearchConfigurationClauses", 
			"anyNameList", "alterTextSearchDictionary", "alterTextSearchParser", 
			"alterTextSearchTemplate", "alterTrigger", "alterType", "alterTypeClauses", 
			"alterTypeCmds", "alterTypeCmd", "alterUserMapping", "authIdent", "alterView", 
			"alterViewClauses", "close", "cluster", "clusterIndexSpecification", 
			"comment", "commentClauses", "objectTypeNameOnAnyName", "objectTypeName", 
			"dropTypeName", "objectTypeAnyName", "commentText", "createAccessMethod", 
			"createAggregate", "oldAggrDefinition", "oldAggrList", "oldAggrElem", 
			"createCast", "castContext", "createCollation", "createConversion", "createDomain", 
			"createEventTrigger", "eventTriggerWhenList", "eventTriggerWhenItem", 
			"eventTriggerValueList", "createExtension", "createExtensionOptList", 
			"createExtensionOptItem", "createForeignDataWrapper", "createForeignTable", 
			"createForeignTableClauses", "tableElementList", "tableElement", "tableLikeClause", 
			"tableLikeOptionList", "tableLikeOption", "createFunction", "tableFuncColumnList", 
			"tableFuncColumn", "createfuncOptList", "createfuncOptItem", "transformTypeList", 
			"funcAs", "funcReturn", "funcArgsWithDefaults", "funcArgsWithDefaultsList", 
			"funcArgWithDefault", "createLanguage", "transformElementList", "validatorClause", 
			"createPolicy", "createProcedure", "createPublication", "publicationForTables", 
			"createRule", "ruleActionList", "ruleActionStmt", "ruleActionMulti", 
			"notifyStmt", "createTrigger", "triggerEvents", "triggerOneEvent", "triggerActionTime", 
			"triggerFuncArgs", "triggerFuncArg", "triggerWhen", "triggerForSpec", 
			"triggerReferencing", "triggerTransitions", "triggerTransition", "transitionRelName", 
			"transitionRowOrTable", "transitionOldOrNew", "createSequence", "tempOption", 
			"createServer", "createStatistics", "createSubscription", "createTablespace", 
			"createTextSearch", "createTransform", "createType", "createTypeClauses", 
			"enumValList", "createUserMapping", "discard", "dropAccessMethod", "dropAggregate", 
			"aggregateWithArgtypesList", "dropCast", "dropCollation", "dropConversion", 
			"dropDomain", "dropEventTrigger", "dropExtension", "dropForeignDataWrapper", 
			"dropForeignTable", "dropFunction", "functionWithArgtypesList", "dropLanguage", 
			"dropMaterializedView", "dropOperator", "operatorWithArgtypesList", "dropOperatorClass", 
			"dropOperatorFamily", "dropOwned", "dropPolicy", "dropProcedure", "dropPublication", 
			"dropRoutine", "dropRule", "dropSequence", "dropServer", "dropStatistics", 
			"dropSubscription", "dropTablespace", "dropTextSearch", "dropTransform", 
			"dropTrigger", "dropType", "dropUserMapping", "dropView", "importForeignSchema", 
			"importQualification", "importQualificationType", "listen", "move", "prepare", 
			"prepTypeClause", "refreshMaterializedView", "reIndex", "reIndexClauses", 
			"reindexOptionList", "reindexOptionElem", "reindexTargetMultitable", 
			"reindexTargetType", "alterForeignTable", "alterForeignTableClauses", 
			"createOperator", "createOperatorClass", "createOperatorFamily", "securityLabelStmt", 
			"securityLabel", "securityLabelClausces", "unlisten", "setTransaction", 
			"beginTransaction", "commit", "savepoint", "abort", "startTransaction", 
			"end", "rollback", "releaseSavepoint", "rollbackToSavepoint", "prepareTransaction", 
			"commitPrepared", "rollbackPrepared", "grant", "revoke", "privilegeClause", 
			"roleClause", "optionForClause", "privilegeTypes", "privilegeType", "onObjectClause", 
			"privilegeLevel", "routineName", "numericOnlyList", "createUser", "createOptRoleElem", 
			"alterOptRoleElem", "dropUser", "alterUser", "alterUserClauses", "alterOptRoleList", 
			"createRole", "dropRole", "alterRole", "alterSchema", "createGroup", 
			"createSchema", "createSchemaClauses", "schemaEltList", "schemaStmt", 
			"dropDroup", "dropSchema", "reassignOwned", "show", "set", "runtimeScope", 
			"timeZoneClause", "configurationParameterClause", "resetParameter", "explain", 
			"explainableStmt", "explainOptionList", "explainOptionElem", "explainOptionArg", 
			"explainOptionName", "analyzeKeyword", "setConstraints", "constraintsSetMode", 
			"constraintsSetList", "analyze", "vacuumRelationList", "vacuumRelation", 
			"vacAnalyzeOptionList", "vacAnalyzeOptionElem", "vacAnalyzeOptionArg", 
			"vacAnalyzeOptionName", "load", "vacuum", "call", "callClauses"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'skip'", "'U'", "'u'", "'&&'", "'||'", "'!'", "'~'", "'|'", "'&'", 
			"'<<'", "'>>'", "'^'", "'%'", "':'", "'+'", "'-'", "'*'", "'/'", "'\\'", 
			"'.'", "'.*'", "'<=>'", "'=='", "'='", "':='", null, "'>'", "'>='", "'<'", 
			"'<='", "'#'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'\"'", 
			"'''", "'`'", "'?'", "'@'", "';'", "'~~'", "'!~~'", "'::'", null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, "'DO NOT MATCH ANY THING, JUST FOR GENERATOR'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, "AND_", "OR_", "NOT_", "TILDE_", "VERTICAL_BAR_", 
			"AMPERSAND_", "SIGNED_LEFT_SHIFT_", "SIGNED_RIGHT_SHIFT_", "CARET_", 
			"MOD_", "COLON_", "PLUS_", "MINUS_", "ASTERISK_", "SLASH_", "BACKSLASH_", 
			"DOT_", "DOT_ASTERISK_", "SAFE_EQ_", "DEQ_", "EQ_", "CQ_", "NEQ_", "GT_", 
			"GTE_", "LT_", "LTE_", "POUND_", "LP_", "RP_", "LBE_", "RBE_", "LBT_", 
			"RBT_", "COMMA_", "DQ_", "SQ_", "BQ_", "QUESTION_", "AT_", "SEMI_", "TILDE_TILDE_", 
			"NOT_TILDE_TILDE_", "TYPE_CAST_", "BLOCK_COMMENT", "INLINE_COMMENT", 
			"WS", "SELECT", "INSERT", "UPDATE", "DELETE", "CREATE", "ALTER", "DROP", 
			"TRUNCATE", "SCHEMA", "GRANT", "REVOKE", "ADD", "SET", "TABLE", "COLUMN", 
			"INDEX", "CONSTRAINT", "PRIMARY", "UNIQUE", "FOREIGN", "KEY", "POSITION", 
			"PRECISION", "FUNCTION", "TRIGGER", "PROCEDURE", "VIEW", "INTO", "VALUES", 
			"WITH", "UNION", "DISTINCT", "CASE", "WHEN", "CAST", "TRIM", "SUBSTRING", 
			"FROM", "NATURAL", "JOIN", "FULL", "INNER", "OUTER", "LEFT", "RIGHT", 
			"CROSS", "USING", "WHERE", "AS", "ON", "IF", "ELSE", "THEN", "FOR", "TO", 
			"AND", "OR", "IS", "NOT", "NULL", "TRUE", "FALSE", "EXISTS", "BETWEEN", 
			"IN", "ALL", "ANY", "LIKE", "ORDER", "GROUP", "BY", "ASC", "DESC", "HAVING", 
			"LIMIT", "OFFSET", "BEGIN", "COMMIT", "ROLLBACK", "SAVEPOINT", "BOOLEAN", 
			"DOUBLE", "CHAR", "CHARACTER", "ARRAY", "INTERVAL", "DATE", "TIME", "TIMESTAMP", 
			"LOCALTIME", "LOCALTIMESTAMP", "YEAR", "QUARTER", "MONTH", "WEEK", "DAY", 
			"HOUR", "MINUTE", "SECOND", "MICROSECOND", "DEFAULT", "CURRENT", "ENABLE", 
			"DISABLE", "CALL", "INSTANCE", "PRESERVE", "DO", "DEFINER", "CURRENT_USER", 
			"SQL", "CASCADED", "LOCAL", "CLOSE", "OPEN", "NEXT", "NAME", "COLLATION", 
			"NAMES", "INTEGER", "REAL", "DECIMAL", "TYPE", "SMALLINT", "BIGINT", 
			"NUMERIC", "TEXT", "REPEATABLE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"NULLIF", "VARYING", "NATIONAL", "NCHAR", "VALUE", "BOTH", "LEADING", 
			"TRAILING", "COALESCE", "INTERSECT", "EXCEPT", "TIES", "FETCH", "CUBE", 
			"GROUPING", "SETS", "WINDOW", "OTHERS", "OVERLAPS", "SOME", "AT", "DEC", 
			"END", "FOR_GENERATOR", "ADMIN", "BINARY", "ESCAPE", "EXCLUDE", "MOD", 
			"PARTITION", "ROW", "UNKNOWN", "ALWAYS", "CASCADE", "CHECK", "GENERATED", 
			"ISOLATION", "LEVEL", "NO", "OPTION", "PRIVILEGES", "READ", "REFERENCES", 
			"ROLE", "ROWS", "START", "TRANSACTION", "USER", "ACTION", "CACHE", "CHARACTERISTICS", 
			"CLUSTER", "COLLATE", "COMMENTS", "CONCURRENTLY", "CONNECT", "CONSTRAINTS", 
			"CYCLE", "DATA", "DATABASE", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEPENDS", 
			"DOMAIN", "EXCLUDING", "EXECUTE", "EXTENDED", "EXTENSION", "EXTERNAL", 
			"EXTRACT", "FILTER", "FIRST", "FOLLOWING", "FORCE", "GLOBAL", "IDENTITY", 
			"IMMEDIATE", "INCLUDING", "INCREMENT", "INDEXES", "INHERIT", "INHERITS", 
			"INITIALLY", "INCLUDE", "LANGUAGE", "LARGE", "LAST", "LOGGED", "MAIN", 
			"MATCH", "MAXVALUE", "MINVALUE", "NOTHING", "NULLS", "OBJECT", "OIDS", 
			"ONLY", "OVER", "OWNED", "OWNER", "PARTIAL", "PLAIN", "PRECEDING", "RANGE", 
			"RENAME", "REPLICA", "RESET", "RESTART", "RESTRICT", "ROUTINE", "RULE", 
			"SECURITY", "SEQUENCE", "SESSION", "SESSION_USER", "SHOW", "SIMPLE", 
			"STATISTICS", "STORAGE", "TABLESPACE", "TEMP", "TEMPORARY", "UNBOUNDED", 
			"UNLOGGED", "USAGE", "VALID", "VALIDATE", "WITHIN", "WITHOUT", "ZONE", 
			"OF", "UESCAPE", "GROUPS", "RECURSIVE", "INT", "INT2", "INT4", "INT8", 
			"FLOAT", "FLOAT4", "FLOAT8", "SMALLSERIAL", "SERIAL", "BIGSERIAL", "MONEY", 
			"VARCHAR", "BYTEA", "ENUM", "POINT", "LINE", "LSEG", "BOX", "PATH", "POLYGON", 
			"CIRCLE", "CIDR", "INET", "MACADDR", "MACADDR8", "BIT", "VARBIT", "TSVECTOR", 
			"TSQUERY", "XML", "JSON", "INT4RANGE", "INT8RANGE", "NUMRANGE", "TSRANGE", 
			"TSTZRANGE", "DATERANGE", "TABLESAMPLE", "ORDINALITY", "CURRENT_ROLE", 
			"CURRENT_CATALOG", "CURRENT_SCHEMA", "NORMALIZE", "OVERLAY", "XMLCONCAT", 
			"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
			"XMLSERIALIZE", "TREAT", "SETOF", "NFC", "NFD", "NFKC", "NFKD", "XMLATTRIBUTES", 
			"REF", "PASSING", "VERSION", "YES", "STANDALONE", "GREATEST", "LEAST", 
			"MATERIALIZED", "OPERATOR", "SHARE", "ROLLUP", "ILIKE", "SIMILAR", "ISNULL", 
			"NOTNULL", "SYMMETRIC", "DOCUMENT", "NORMALIZED", "ASYMMETRIC", "VARIADIC", 
			"NOWAIT", "LOCKED", "XMLTABLE", "COLUMNS", "CONTENT", "STRIP", "WHITESPACE", 
			"XMLNAMESPACES", "PLACING", "RETURNING", "LATERAL", "NONE", "ANALYSE", 
			"ANALYZE", "CONFLICT", "OVERRIDING", "SYSTEM", "ABORT", "ABSOLUTE", "ACCESS", 
			"AFTER", "AGGREGATE", "ALSO", "ATTACH", "ATTRIBUTE", "BACKWARD", "BEFORE", 
			"ASSERTION", "ASSIGNMENT", "CONTINUE", "CONVERSION", "COPY", "COST", 
			"CSV", "CALLED", "CATALOG", "CHAIN", "CHECKPOINT", "CLASS", "CONFIGURATION", 
			"COMMENT", "DETACH", "DICTIONARY", "EXPRESSION", "INSENSITIVE", "DISCARD", 
			"OFF", "INSTEAD", "EXPLAIN", "INPUT", "INLINE", "PARALLEL", "LEAKPROOF", 
			"COMMITTED", "ENCODING", "IMPLICIT", "DELIMITER", "CURSOR", "EACH", "EVENT", 
			"DEALLOCATE", "CONNECTION", "DECLARE", "FAMILY", "FORWARD", "EXCLUSIVE", 
			"FUNCTIONS", "LOCATION", "LABEL", "DELIMITERS", "HANDLER", "HEADER", 
			"IMMUTABLE", "GRANTED", "HOLD", "MAPPING", "OLD", "METHOD", "LOAD", "LISTEN", 
			"MODE", "MOVE", "PROCEDURAL", "PARSER", "PROCEDURES", "ENCRYPTED", "PUBLICATION", 
			"PROGRAM", "REFERENCING", "PLANS", "REINDEX", "PRIOR", "PASSWORD", "RELATIVE", 
			"QUOTE", "ROUTINES", "REPLACE", "SNAPSHOT", "REFRESH", "PREPARE", "OPTIONS", 
			"IMPORT", "INVOKER", "NEW", "PREPARED", "SCROLL", "SEQUENCES", "SYSID", 
			"REASSIGN", "SERVER", "SUBSCRIPTION", "SEARCH", "SCHEMAS", "RECHECK", 
			"POLICY", "NOTIFY", "LOCK", "RELEASE", "SERIALIZABLE", "RETURNS", "STATEMENT", 
			"STDIN", "STDOUT", "TABLES", "SUPPORT", "STABLE", "TEMPLATE", "UNENCRYPTED", 
			"VIEWS", "UNCOMMITTED", "TRANSFORM", "UNLISTEN", "TRUSTED", "VALIDATOR", 
			"UNTIL", "VACUUM", "VOLATILE", "STORED", "WRITE", "STRICT", "TYPES", 
			"WRAPPER", "WORK", "FREEZE", "AUTHORIZATION", "VERBOSE", "PARAM", "OUT", 
			"INOUT", "IDENTIFIER_", "STRING_", "NUMBER_", "HEX_DIGIT_", "BIT_NUM_"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PostgreSQLStatement.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PostgreSQLStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class ExecuteContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public AlterIndexContext alterIndex() {
			return getRuleContext(AlterIndexContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public SetTransactionContext setTransaction() {
			return getRuleContext(SetTransactionContext.class,0);
		}
		public BeginTransactionContext beginTransaction() {
			return getRuleContext(BeginTransactionContext.class,0);
		}
		public CommitContext commit() {
			return getRuleContext(CommitContext.class,0);
		}
		public RollbackContext rollback() {
			return getRuleContext(RollbackContext.class,0);
		}
		public SavepointContext savepoint() {
			return getRuleContext(SavepointContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public RevokeContext revoke() {
			return getRuleContext(RevokeContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public AlterRoleContext alterRole() {
			return getRuleContext(AlterRoleContext.class,0);
		}
		public ShowContext show() {
			return getRuleContext(ShowContext.class,0);
		}
		public SetContext set() {
			return getRuleContext(SetContext.class,0);
		}
		public ResetParameterContext resetParameter() {
			return getRuleContext(ResetParameterContext.class,0);
		}
		public CallContext call() {
			return getRuleContext(CallContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public TerminalNode SEMI_() { return getToken(PostgreSQLStatementParser.SEMI_, 0); }
		public ExecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteContext execute() throws RecognitionException {
		ExecuteContext _localctx = new ExecuteContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_execute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				setState(1476);
				select();
				}
				break;
			case 2:
				{
				setState(1477);
				insert();
				}
				break;
			case 3:
				{
				setState(1478);
				update();
				}
				break;
			case 4:
				{
				setState(1479);
				delete();
				}
				break;
			case 5:
				{
				setState(1480);
				createIndex();
				}
				break;
			case 6:
				{
				setState(1481);
				alterIndex();
				}
				break;
			case 7:
				{
				setState(1482);
				dropIndex();
				}
				break;
			case 8:
				{
				setState(1483);
				createTable();
				}
				break;
			case 9:
				{
				setState(1484);
				alterTable();
				}
				break;
			case 10:
				{
				setState(1485);
				dropTable();
				}
				break;
			case 11:
				{
				setState(1486);
				truncateTable();
				}
				break;
			case 12:
				{
				setState(1487);
				setTransaction();
				}
				break;
			case 13:
				{
				setState(1488);
				beginTransaction();
				}
				break;
			case 14:
				{
				setState(1489);
				commit();
				}
				break;
			case 15:
				{
				setState(1490);
				rollback();
				}
				break;
			case 16:
				{
				setState(1491);
				savepoint();
				}
				break;
			case 17:
				{
				setState(1492);
				grant();
				}
				break;
			case 18:
				{
				setState(1493);
				revoke();
				}
				break;
			case 19:
				{
				setState(1494);
				createUser();
				}
				break;
			case 20:
				{
				setState(1495);
				dropUser();
				}
				break;
			case 21:
				{
				setState(1496);
				alterUser();
				}
				break;
			case 22:
				{
				setState(1497);
				createRole();
				}
				break;
			case 23:
				{
				setState(1498);
				dropRole();
				}
				break;
			case 24:
				{
				setState(1499);
				alterRole();
				}
				break;
			case 25:
				{
				setState(1500);
				show();
				}
				break;
			case 26:
				{
				setState(1501);
				set();
				}
				break;
			case 27:
				{
				setState(1502);
				resetParameter();
				}
				break;
			case 28:
				{
				setState(1503);
				call();
				}
				break;
			case 29:
				{
				setState(1504);
				alterFunction();
				}
				break;
			case 30:
				{
				setState(1505);
				alterDatabase();
				}
				break;
			case 31:
				{
				setState(1506);
				alterProcedure();
				}
				break;
			case 32:
				{
				setState(1507);
				alterServer();
				}
				break;
			case 33:
				{
				setState(1508);
				createDatabase();
				}
				break;
			case 34:
				{
				setState(1509);
				createFunction();
				}
				break;
			case 35:
				{
				setState(1510);
				createProcedure();
				}
				break;
			case 36:
				{
				setState(1511);
				createServer();
				}
				break;
			case 37:
				{
				setState(1512);
				createTrigger();
				}
				break;
			case 38:
				{
				setState(1513);
				createView();
				}
				break;
			case 39:
				{
				setState(1514);
				dropDatabase();
				}
				break;
			case 40:
				{
				setState(1515);
				dropFunction();
				}
				break;
			case 41:
				{
				setState(1516);
				dropProcedure();
				}
				break;
			case 42:
				{
				setState(1517);
				dropServer();
				}
				break;
			case 43:
				{
				setState(1518);
				dropTrigger();
				}
				break;
			case 44:
				{
				setState(1519);
				dropView();
				}
				break;
			}
			setState(1523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI_) {
				{
				setState(1522);
				match(SEMI_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLStatementParser.INTO, 0); }
		public InsertTargetContext insertTarget() {
			return getRuleContext(InsertTargetContext.class,0);
		}
		public InsertRestContext insertRest() {
			return getRuleContext(InsertRestContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public OptOnConflictContext optOnConflict() {
			return getRuleContext(OptOnConflictContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public InsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertContext insert() throws RecognitionException {
		InsertContext _localctx = new InsertContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1525);
				withClause();
				}
			}

			setState(1528);
			match(INSERT);
			setState(1529);
			match(INTO);
			setState(1530);
			insertTarget();
			setState(1531);
			insertRest();
			setState(1533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1532);
				optOnConflict();
				}
			}

			setState(1536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(1535);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertTargetContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public InsertTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertTarget; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitInsertTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertTargetContext insertTarget() throws RecognitionException {
		InsertTargetContext _localctx = new InsertTargetContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_insertTarget);
		try {
			setState(1543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1538);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1539);
				qualifiedName();
				setState(1540);
				match(AS);
				setState(1541);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertRestContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLStatementParser.OVERRIDING, 0); }
		public OverrideKindContext overrideKind() {
			return getRuleContext(OverrideKindContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public InsertColumnListContext insertColumnList() {
			return getRuleContext(InsertColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLStatementParser.VALUES, 0); }
		public InsertRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertRest; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitInsertRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertRestContext insertRest() throws RecognitionException {
		InsertRestContext _localctx = new InsertRestContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_insertRest);
		try {
			setState(1566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1545);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1546);
				match(OVERRIDING);
				setState(1547);
				overrideKind();
				setState(1548);
				match(VALUE);
				setState(1549);
				select();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1551);
				match(LP_);
				setState(1552);
				insertColumnList(0);
				setState(1553);
				match(RP_);
				setState(1554);
				select();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1556);
				match(LP_);
				setState(1557);
				insertColumnList(0);
				setState(1558);
				match(RP_);
				setState(1559);
				match(OVERRIDING);
				setState(1560);
				overrideKind();
				setState(1561);
				match(VALUE);
				setState(1562);
				select();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1564);
				match(DEFAULT);
				setState(1565);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverrideKindContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLStatementParser.SYSTEM, 0); }
		public OverrideKindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overrideKind; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOverrideKind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverrideKindContext overrideKind() throws RecognitionException {
		OverrideKindContext _localctx = new OverrideKindContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_overrideKind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1568);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertColumnListContext extends ParserRuleContext {
		public InsertColumnItemContext insertColumnItem() {
			return getRuleContext(InsertColumnItemContext.class,0);
		}
		public InsertColumnListContext insertColumnList() {
			return getRuleContext(InsertColumnListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public InsertColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumnList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitInsertColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnListContext insertColumnList() throws RecognitionException {
		return insertColumnList(0);
	}

	private InsertColumnListContext insertColumnList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		InsertColumnListContext _localctx = new InsertColumnListContext(_ctx, _parentState);
		InsertColumnListContext _prevctx = _localctx;
		int _startState = 10;
		enterRecursionRule(_localctx, 10, RULE_insertColumnList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1571);
			insertColumnItem();
			}
			_ctx.stop = _input.LT(-1);
			setState(1578);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InsertColumnListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insertColumnList);
					setState(1573);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1574);
					match(COMMA_);
					setState(1575);
					insertColumnItem();
					}
					} 
				}
				setState(1580);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class InsertColumnItemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public InsertColumnItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumnItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitInsertColumnItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnItemContext insertColumnItem() throws RecognitionException {
		InsertColumnItemContext _localctx = new InsertColumnItemContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_insertColumnItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1581);
			colId();
			setState(1582);
			optIndirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptOnConflictContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLStatementParser.CONFLICT, 0); }
		public OptConfExprContext optConfExpr() {
			return getRuleContext(OptConfExprContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLStatementParser.DO, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(PostgreSQLStatementParser.NOTHING, 0); }
		public OptOnConflictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optOnConflict; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptOnConflict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptOnConflictContext optOnConflict() throws RecognitionException {
		OptOnConflictContext _localctx = new OptOnConflictContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_optOnConflict);
		int _la;
		try {
			setState(1600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1584);
				match(ON);
				setState(1585);
				match(CONFLICT);
				setState(1586);
				optConfExpr();
				setState(1587);
				match(DO);
				setState(1588);
				match(UPDATE);
				setState(1589);
				match(SET);
				setState(1590);
				setClauseList(0);
				setState(1592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1591);
					whereClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1594);
				match(ON);
				setState(1595);
				match(CONFLICT);
				setState(1596);
				optConfExpr();
				setState(1597);
				match(DO);
				setState(1598);
				match(NOTHING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConfExprContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public IndexParamsContext indexParams() {
			return getRuleContext(IndexParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptConfExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConfExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptConfExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConfExprContext optConfExpr() throws RecognitionException {
		OptConfExprContext _localctx = new OptConfExprContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_optConfExpr);
		int _la;
		try {
			setState(1612);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1602);
				match(LP_);
				setState(1603);
				indexParams();
				setState(1604);
				match(RP_);
				setState(1606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1605);
					whereClause();
					}
				}

				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(1608);
				match(ON);
				setState(1609);
				match(CONSTRAINT);
				setState(1610);
				name();
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public RelationExprOptAliasContext relationExprOptAlias() {
			return getRuleContext(RelationExprOptAliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereOrCurrentClauseContext whereOrCurrentClause() {
			return getRuleContext(WhereOrCurrentClauseContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateContext update() throws RecognitionException {
		UpdateContext _localctx = new UpdateContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_update);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1614);
				withClause();
				}
			}

			setState(1617);
			match(UPDATE);
			setState(1618);
			relationExprOptAlias();
			setState(1619);
			match(SET);
			setState(1620);
			setClauseList(0);
			setState(1622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1621);
				fromClause();
				}
			}

			setState(1625);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1624);
				whereOrCurrentClause();
				}
			}

			setState(1628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(1627);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetClauseListContext extends ParserRuleContext {
		public SetClauseContext setClause() {
			return getRuleContext(SetClauseContext.class,0);
		}
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public SetClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClauseList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSetClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseListContext setClauseList() throws RecognitionException {
		return setClauseList(0);
	}

	private SetClauseListContext setClauseList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SetClauseListContext _localctx = new SetClauseListContext(_ctx, _parentState);
		SetClauseListContext _prevctx = _localctx;
		int _startState = 20;
		enterRecursionRule(_localctx, 20, RULE_setClauseList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1631);
			setClause();
			}
			_ctx.stop = _input.LT(-1);
			setState(1638);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetClauseListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_setClauseList);
					setState(1633);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1634);
					match(COMMA_);
					setState(1635);
					setClause();
					}
					} 
				}
				setState(1640);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SetClauseContext extends ParserRuleContext {
		public SetTargetContext setTarget() {
			return getRuleContext(SetTargetContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public SetTargetListContext setTargetList() {
			return getRuleContext(SetTargetListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public SetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseContext setClause() throws RecognitionException {
		SetClauseContext _localctx = new SetClauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_setClause);
		try {
			setState(1651);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1641);
				setTarget();
				setState(1642);
				match(EQ_);
				setState(1643);
				aExpr(0);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1645);
				match(LP_);
				setState(1646);
				setTargetList(0);
				setState(1647);
				match(RP_);
				setState(1648);
				match(EQ_);
				setState(1649);
				aExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTargetContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public SetTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTarget; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSetTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTargetContext setTarget() throws RecognitionException {
		SetTargetContext _localctx = new SetTargetContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_setTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1653);
			colId();
			setState(1654);
			optIndirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTargetListContext extends ParserRuleContext {
		public SetTargetContext setTarget() {
			return getRuleContext(SetTargetContext.class,0);
		}
		public SetTargetListContext setTargetList() {
			return getRuleContext(SetTargetListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public SetTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTargetList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSetTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTargetListContext setTargetList() throws RecognitionException {
		return setTargetList(0);
	}

	private SetTargetListContext setTargetList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SetTargetListContext _localctx = new SetTargetListContext(_ctx, _parentState);
		SetTargetListContext _prevctx = _localctx;
		int _startState = 26;
		enterRecursionRule(_localctx, 26, RULE_setTargetList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1657);
			setTarget();
			}
			_ctx.stop = _input.LT(-1);
			setState(1664);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetTargetListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_setTargetList);
					setState(1659);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1660);
					match(COMMA_);
					setState(1661);
					setTarget();
					}
					} 
				}
				setState(1666);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ReturningClauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PostgreSQLStatementParser.RETURNING, 0); }
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public ReturningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returningClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReturningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturningClauseContext returningClause() throws RecognitionException {
		ReturningClauseContext _localctx = new ReturningClauseContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_returningClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1667);
			match(RETURNING);
			setState(1668);
			targetList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public RelationExprOptAliasContext relationExprOptAlias() {
			return getRuleContext(RelationExprOptAliasContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public UsingClauseContext usingClause() {
			return getRuleContext(UsingClauseContext.class,0);
		}
		public WhereOrCurrentClauseContext whereOrCurrentClause() {
			return getRuleContext(WhereOrCurrentClauseContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteContext delete() throws RecognitionException {
		DeleteContext _localctx = new DeleteContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_delete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1670);
				withClause();
				}
			}

			setState(1673);
			match(DELETE);
			setState(1674);
			match(FROM);
			setState(1675);
			relationExprOptAlias();
			setState(1677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1676);
				usingClause();
				}
			}

			setState(1680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1679);
				whereOrCurrentClause();
				}
			}

			setState(1683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(1682);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprOptAliasContext extends ParserRuleContext {
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public RelationExprOptAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExprOptAlias; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRelationExprOptAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprOptAliasContext relationExprOptAlias() throws RecognitionException {
		RelationExprOptAliasContext _localctx = new RelationExprOptAliasContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_relationExprOptAlias);
		try {
			setState(1693);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1685);
				relationExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1686);
				relationExpr();
				setState(1687);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1689);
				relationExpr();
				setState(1690);
				match(AS);
				setState(1691);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public UsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingClauseContext usingClause() throws RecognitionException {
		UsingClauseContext _localctx = new UsingClauseContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_usingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1695);
			match(USING);
			setState(1696);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectContext extends ParserRuleContext {
		public SelectNoParensContext selectNoParens() {
			return getRuleContext(SelectNoParensContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_select);
		try {
			setState(1700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1698);
				selectNoParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1699);
				selectWithParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectWithParensContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public SelectNoParensContext selectNoParens() {
			return getRuleContext(SelectNoParensContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public SelectWithParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectWithParens; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSelectWithParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectWithParensContext selectWithParens() throws RecognitionException {
		SelectWithParensContext _localctx = new SelectWithParensContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_selectWithParens);
		try {
			setState(1710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1702);
				match(LP_);
				setState(1703);
				selectNoParens();
				setState(1704);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1706);
				match(LP_);
				setState(1707);
				selectWithParens();
				setState(1708);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectNoParensContext extends ParserRuleContext {
		public SelectClauseNContext selectClauseN() {
			return getRuleContext(SelectClauseNContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public ForLockingClauseContext forLockingClause() {
			return getRuleContext(ForLockingClauseContext.class,0);
		}
		public SelectLimitContext selectLimit() {
			return getRuleContext(SelectLimitContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public SelectNoParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectNoParens; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSelectNoParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectNoParensContext selectNoParens() throws RecognitionException {
		SelectNoParensContext _localctx = new SelectNoParensContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_selectNoParens);
		int _la;
		try {
			setState(1757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1712);
				selectClauseN(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1713);
				selectClauseN(0);
				setState(1714);
				sortClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1716);
				selectClauseN(0);
				setState(1718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(1717);
					sortClause();
					}
				}

				setState(1720);
				forLockingClause();
				setState(1722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==OFFSET || _la==FETCH) {
					{
					setState(1721);
					selectLimit();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1724);
				selectClauseN(0);
				setState(1726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(1725);
					sortClause();
					}
				}

				setState(1728);
				selectLimit();
				setState(1730);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1729);
					forLockingClause();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1732);
				withClause();
				setState(1733);
				selectClauseN(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1735);
				withClause();
				setState(1736);
				selectClauseN(0);
				setState(1737);
				sortClause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1739);
				withClause();
				setState(1740);
				selectClauseN(0);
				setState(1742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(1741);
					sortClause();
					}
				}

				setState(1744);
				forLockingClause();
				setState(1746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==OFFSET || _la==FETCH) {
					{
					setState(1745);
					selectLimit();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1748);
				withClause();
				setState(1749);
				selectClauseN(0);
				setState(1751);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(1750);
					sortClause();
					}
				}

				setState(1753);
				selectLimit();
				setState(1755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1754);
					forLockingClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseNContext extends ParserRuleContext {
		public SimpleSelectContext simpleSelect() {
			return getRuleContext(SimpleSelectContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public List<SelectClauseNContext> selectClauseN() {
			return getRuleContexts(SelectClauseNContext.class);
		}
		public SelectClauseNContext selectClauseN(int i) {
			return getRuleContext(SelectClauseNContext.class,i);
		}
		public TerminalNode UNION() { return getToken(PostgreSQLStatementParser.UNION, 0); }
		public AllOrDistinctContext allOrDistinct() {
			return getRuleContext(AllOrDistinctContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(PostgreSQLStatementParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLStatementParser.EXCEPT, 0); }
		public SelectClauseNContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClauseN; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSelectClauseN(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseNContext selectClauseN() throws RecognitionException {
		return selectClauseN(0);
	}

	private SelectClauseNContext selectClauseN(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SelectClauseNContext _localctx = new SelectClauseNContext(_ctx, _parentState);
		SelectClauseNContext _prevctx = _localctx;
		int _startState = 42;
		enterRecursionRule(_localctx, 42, RULE_selectClauseN, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1762);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
			case VALUES:
				{
				setState(1760);
				simpleSelect();
				}
				break;
			case LP_:
				{
				setState(1761);
				selectWithParens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(1784);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1782);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
					case 1:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(1764);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1765);
						match(UNION);
						setState(1767);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(1766);
							allOrDistinct();
							}
						}

						setState(1769);
						selectClauseN(4);
						}
						break;
					case 2:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(1770);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1771);
						match(INTERSECT);
						setState(1773);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(1772);
							allOrDistinct();
							}
						}

						setState(1775);
						selectClauseN(3);
						}
						break;
					case 3:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(1776);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(1777);
						match(EXCEPT);
						setState(1779);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(1778);
							allOrDistinct();
							}
						}

						setState(1781);
						selectClauseN(2);
						}
						break;
					}
					} 
				}
				setState(1786);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleSelectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupClauseContext groupClause() {
			return getRuleContext(GroupClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public DistinctClauseContext distinctClause() {
			return getRuleContext(DistinctClauseContext.class,0);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public SimpleSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleSelect; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleSelectContext simpleSelect() throws RecognitionException {
		SimpleSelectContext _localctx = new SimpleSelectContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_simpleSelect);
		try {
			setState(1836);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1787);
				match(SELECT);
				setState(1789);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(1788);
					match(ALL);
					}
					break;
				}
				setState(1792);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(1791);
					targetList(0);
					}
					break;
				}
				setState(1795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(1794);
					intoClause();
					}
					break;
				}
				setState(1798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(1797);
					fromClause();
					}
					break;
				}
				setState(1801);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(1800);
					whereClause();
					}
					break;
				}
				setState(1804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(1803);
					groupClause();
					}
					break;
				}
				setState(1807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					setState(1806);
					havingClause();
					}
					break;
				}
				setState(1810);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(1809);
					windowClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1812);
				match(SELECT);
				setState(1813);
				distinctClause();
				setState(1814);
				targetList(0);
				setState(1816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(1815);
					intoClause();
					}
					break;
				}
				setState(1819);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(1818);
					fromClause();
					}
					break;
				}
				setState(1822);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					setState(1821);
					whereClause();
					}
					break;
				}
				setState(1825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					setState(1824);
					groupClause();
					}
					break;
				}
				setState(1828);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					setState(1827);
					havingClause();
					}
					break;
				}
				setState(1831);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1830);
					windowClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1833);
				valuesClause(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1834);
				match(TABLE);
				setState(1835);
				relationExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public CteListContext cteList() {
			return getRuleContext(CteListContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLStatementParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_withClause);
		try {
			setState(1843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1838);
				match(WITH);
				setState(1839);
				cteList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1840);
				match(WITH);
				setState(1841);
				match(RECURSIVE);
				setState(1842);
				cteList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLStatementParser.INTO, 0); }
		public OptTempTableNameContext optTempTableName() {
			return getRuleContext(OptTempTableNameContext.class,0);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_intoClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1845);
			match(INTO);
			setState(1846);
			optTempTableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempTableNameContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLStatementParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public OptTempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTempTableName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptTempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempTableNameContext optTempTableName() throws RecognitionException {
		OptTempTableNameContext _localctx = new OptTempTableNameContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_optTempTableName);
		int _la;
		try {
			setState(1892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1848);
				match(TEMPORARY);
				setState(1850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1849);
					match(TABLE);
					}
				}

				setState(1852);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1853);
				match(TEMP);
				setState(1855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1854);
					match(TABLE);
					}
				}

				setState(1857);
				qualifiedName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1858);
				match(LOCAL);
				setState(1859);
				match(TEMPORARY);
				setState(1861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1860);
					match(TABLE);
					}
				}

				setState(1863);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1864);
				match(LOCAL);
				setState(1865);
				match(TEMP);
				setState(1867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1866);
					match(TABLE);
					}
				}

				setState(1869);
				qualifiedName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1870);
				match(GLOBAL);
				setState(1871);
				match(TEMPORARY);
				setState(1873);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1872);
					match(TABLE);
					}
				}

				setState(1875);
				qualifiedName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1876);
				match(GLOBAL);
				setState(1877);
				match(TEMP);
				setState(1879);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1878);
					match(TABLE);
					}
				}

				setState(1881);
				qualifiedName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1882);
				match(UNLOGGED);
				setState(1884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1883);
					match(TABLE);
					}
				}

				setState(1886);
				qualifiedName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1887);
					match(TABLE);
					}
				}

				setState(1890);
				qualifiedName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1891);
				qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteListContext extends ParserRuleContext {
		public CommonTableExprContext commonTableExpr() {
			return getRuleContext(CommonTableExprContext.class,0);
		}
		public CteListContext cteList() {
			return getRuleContext(CteListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public CteListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCteList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteListContext cteList() throws RecognitionException {
		return cteList(0);
	}

	private CteListContext cteList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		CteListContext _localctx = new CteListContext(_ctx, _parentState);
		CteListContext _prevctx = _localctx;
		int _startState = 52;
		enterRecursionRule(_localctx, 52, RULE_cteList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1895);
			commonTableExpr();
			}
			_ctx.stop = _input.LT(-1);
			setState(1902);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,66,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CteListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_cteList);
					setState(1897);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1898);
					match(COMMA_);
					setState(1899);
					commonTableExpr();
					}
					} 
				}
				setState(1904);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,66,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CommonTableExprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public OptMaterializedContext optMaterialized() {
			return getRuleContext(OptMaterializedContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CommonTableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCommonTableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExprContext commonTableExpr() throws RecognitionException {
		CommonTableExprContext _localctx = new CommonTableExprContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_commonTableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1905);
			name();
			setState(1906);
			optNameList();
			setState(1907);
			match(AS);
			setState(1908);
			optMaterialized();
			setState(1909);
			match(LP_);
			setState(1910);
			preparableStmt();
			setState(1911);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptMaterializedContext extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public OptMaterializedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optMaterialized; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptMaterialized(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptMaterializedContext optMaterialized() throws RecognitionException {
		OptMaterializedContext _localctx = new OptMaterializedContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_optMaterialized);
		try {
			setState(1917);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				enterOuterAlt(_localctx, 1);
				{
				setState(1913);
				match(MATERIALIZED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1914);
				match(NOT);
				setState(1915);
				match(MATERIALIZED);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptNameListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public OptNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optNameList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptNameListContext optNameList() throws RecognitionException {
		OptNameListContext _localctx = new OptNameListContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_optNameList);
		try {
			setState(1924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1919);
				match(LP_);
				setState(1920);
				nameList(0);
				setState(1921);
				match(RP_);
				}
				break;
			case EOF:
			case COMMA_:
			case AS:
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparableStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public PreparableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPreparableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparableStmtContext preparableStmt() throws RecognitionException {
		PreparableStmtContext _localctx = new PreparableStmtContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_preparableStmt);
		try {
			setState(1930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1926);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1927);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1928);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1929);
				delete();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingClauseContext extends ParserRuleContext {
		public ForLockingItemsContext forLockingItems() {
			return getRuleContext(ForLockingItemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public ForLockingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitForLockingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingClauseContext forLockingClause() throws RecognitionException {
		ForLockingClauseContext _localctx = new ForLockingClauseContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_forLockingClause);
		try {
			setState(1936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1932);
				forLockingItems(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1933);
				match(FOR);
				setState(1934);
				match(READ);
				setState(1935);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingItemsContext extends ParserRuleContext {
		public ForLockingItemContext forLockingItem() {
			return getRuleContext(ForLockingItemContext.class,0);
		}
		public ForLockingItemsContext forLockingItems() {
			return getRuleContext(ForLockingItemsContext.class,0);
		}
		public ForLockingItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingItems; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitForLockingItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingItemsContext forLockingItems() throws RecognitionException {
		return forLockingItems(0);
	}

	private ForLockingItemsContext forLockingItems(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ForLockingItemsContext _localctx = new ForLockingItemsContext(_ctx, _parentState);
		ForLockingItemsContext _prevctx = _localctx;
		int _startState = 64;
		enterRecursionRule(_localctx, 64, RULE_forLockingItems, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1939);
			forLockingItem();
			}
			_ctx.stop = _input.LT(-1);
			setState(1945);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ForLockingItemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_forLockingItems);
					setState(1941);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1942);
					forLockingItem();
					}
					} 
				}
				setState(1947);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ForLockingItemContext extends ParserRuleContext {
		public ForLockingStrengthContext forLockingStrength() {
			return getRuleContext(ForLockingStrengthContext.class,0);
		}
		public LockedRelsListContext lockedRelsList() {
			return getRuleContext(LockedRelsListContext.class,0);
		}
		public NowaitOrSkipContext nowaitOrSkip() {
			return getRuleContext(NowaitOrSkipContext.class,0);
		}
		public ForLockingItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitForLockingItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingItemContext forLockingItem() throws RecognitionException {
		ForLockingItemContext _localctx = new ForLockingItemContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_forLockingItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1948);
			forLockingStrength();
			setState(1950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				setState(1949);
				lockedRelsList();
				}
				break;
			}
			setState(1953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(1952);
				nowaitOrSkip();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NowaitOrSkipContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLStatementParser.LOCKED, 0); }
		public NowaitOrSkipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nowaitOrSkip; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNowaitOrSkip(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NowaitOrSkipContext nowaitOrSkip() throws RecognitionException {
		NowaitOrSkipContext _localctx = new NowaitOrSkipContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_nowaitOrSkip);
		try {
			setState(1958);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1955);
				match(NOWAIT);
				}
				break;
			case T__0:
				enterOuterAlt(_localctx, 2);
				{
				setState(1956);
				match(T__0);
				setState(1957);
				match(LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingStrengthContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLStatementParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLStatementParser.SHARE, 0); }
		public ForLockingStrengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingStrength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitForLockingStrength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingStrengthContext forLockingStrength() throws RecognitionException {
		ForLockingStrengthContext _localctx = new ForLockingStrengthContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_forLockingStrength);
		try {
			setState(1971);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1960);
				match(FOR);
				setState(1961);
				match(UPDATE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1962);
				match(FOR);
				setState(1963);
				match(NO);
				setState(1964);
				match(KEY);
				setState(1965);
				match(UPDATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1966);
				match(FOR);
				setState(1967);
				match(SHARE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1968);
				match(FOR);
				setState(1969);
				match(KEY);
				setState(1970);
				match(SHARE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockedRelsListContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public LockedRelsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockedRelsList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitLockedRelsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockedRelsListContext lockedRelsList() throws RecognitionException {
		LockedRelsListContext _localctx = new LockedRelsListContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_lockedRelsList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1973);
			match(OF);
			setState(1974);
			qualifiedNameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedNameListContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedNameList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitQualifiedNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
		return qualifiedNameList(0);
	}

	private QualifiedNameListContext qualifiedNameList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, _parentState);
		QualifiedNameListContext _prevctx = _localctx;
		int _startState = 74;
		enterRecursionRule(_localctx, 74, RULE_qualifiedNameList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1977);
			qualifiedName();
			}
			_ctx.stop = _input.LT(-1);
			setState(1984);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_qualifiedNameList);
					setState(1979);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1980);
					match(COMMA_);
					setState(1981);
					qualifiedName();
					}
					} 
				}
				setState(1986);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class QualifiedNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitQualifiedName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameContext qualifiedName() throws RecognitionException {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_qualifiedName);
		try {
			setState(1991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1987);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1988);
				colId();
				setState(1989);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLimitContext extends ParserRuleContext {
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public SelectLimitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLimit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSelectLimit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLimitContext selectLimit() throws RecognitionException {
		SelectLimitContext _localctx = new SelectLimitContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_selectLimit);
		try {
			setState(2001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1993);
				limitClause();
				setState(1994);
				offsetClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1996);
				offsetClause();
				setState(1997);
				limitClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1999);
				limitClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2000);
				offsetClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PostgreSQLStatementParser.VALUES, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		return valuesClause(0);
	}

	private ValuesClauseContext valuesClause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, _parentState);
		ValuesClauseContext _prevctx = _localctx;
		int _startState = 80;
		enterRecursionRule(_localctx, 80, RULE_valuesClause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2004);
			match(VALUES);
			setState(2005);
			match(LP_);
			setState(2006);
			exprList(0);
			setState(2007);
			match(RP_);
			}
			_ctx.stop = _input.LT(-1);
			setState(2017);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValuesClauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_valuesClause);
					setState(2009);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2010);
					match(COMMA_);
					setState(2011);
					match(LP_);
					setState(2012);
					exprList(0);
					setState(2013);
					match(RP_);
					}
					} 
				}
				setState(2019);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLStatementParser.LIMIT, 0); }
		public SelectLimitValueContext selectLimitValue() {
			return getRuleContext(SelectLimitValueContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public SelectOffsetValueContext selectOffsetValue() {
			return getRuleContext(SelectOffsetValueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(PostgreSQLStatementParser.FETCH, 0); }
		public FirstOrNextContext firstOrNext() {
			return getRuleContext(FirstOrNextContext.class,0);
		}
		public SelectFetchFirstValueContext selectFetchFirstValue() {
			return getRuleContext(SelectFetchFirstValueContext.class,0);
		}
		public RowOrRowsContext rowOrRows() {
			return getRuleContext(RowOrRowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLStatementParser.TIES, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_limitClause);
		try {
			setState(2051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2020);
				match(LIMIT);
				setState(2021);
				selectLimitValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2022);
				match(LIMIT);
				setState(2023);
				selectLimitValue();
				setState(2024);
				match(COMMA_);
				setState(2025);
				selectOffsetValue();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2027);
				match(FETCH);
				setState(2028);
				firstOrNext();
				setState(2029);
				selectFetchFirstValue();
				setState(2030);
				rowOrRows();
				setState(2031);
				match(ONLY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2033);
				match(FETCH);
				setState(2034);
				firstOrNext();
				setState(2035);
				selectFetchFirstValue();
				setState(2036);
				rowOrRows();
				setState(2037);
				match(WITH);
				setState(2038);
				match(TIES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2040);
				match(FETCH);
				setState(2041);
				firstOrNext();
				setState(2042);
				rowOrRows();
				setState(2043);
				match(ONLY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2045);
				match(FETCH);
				setState(2046);
				firstOrNext();
				setState(2047);
				rowOrRows();
				setState(2048);
				match(WITH);
				setState(2049);
				match(TIES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OffsetClauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PostgreSQLStatementParser.OFFSET, 0); }
		public SelectOffsetValueContext selectOffsetValue() {
			return getRuleContext(SelectOffsetValueContext.class,0);
		}
		public SelectFetchFirstValueContext selectFetchFirstValue() {
			return getRuleContext(SelectFetchFirstValueContext.class,0);
		}
		public RowOrRowsContext rowOrRows() {
			return getRuleContext(RowOrRowsContext.class,0);
		}
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_offsetClause);
		try {
			setState(2059);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2053);
				match(OFFSET);
				setState(2054);
				selectOffsetValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2055);
				match(OFFSET);
				setState(2056);
				selectFetchFirstValue();
				setState(2057);
				rowOrRows();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLimitValueContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public SelectLimitValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLimitValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSelectLimitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLimitValueContext selectLimitValue() throws RecognitionException {
		SelectLimitValueContext _localctx = new SelectLimitValueContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_selectLimitValue);
		try {
			setState(2063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case UNIQUE:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2061);
				aExpr(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2062);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectOffsetValueContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SelectOffsetValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOffsetValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSelectOffsetValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectOffsetValueContext selectOffsetValue() throws RecognitionException {
		SelectOffsetValueContext _localctx = new SelectOffsetValueContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_selectOffsetValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2065);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFetchFirstValueContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public SelectFetchFirstValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFetchFirstValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSelectFetchFirstValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFetchFirstValueContext selectFetchFirstValue() throws RecognitionException {
		SelectFetchFirstValueContext _localctx = new SelectFetchFirstValueContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_selectFetchFirstValue);
		try {
			setState(2072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case LP_:
			case QUESTION_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2067);
				cExpr();
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2068);
				match(PLUS_);
				setState(2069);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(2070);
				match(MINUS_);
				setState(2071);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowOrRowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public RowOrRowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowOrRows; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRowOrRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowOrRowsContext rowOrRows() throws RecognitionException {
		RowOrRowsContext _localctx = new RowOrRowsContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_rowOrRows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2074);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstOrNextContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(PostgreSQLStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLStatementParser.NEXT, 0); }
		public FirstOrNextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstOrNext; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFirstOrNext(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstOrNextContext firstOrNext() throws RecognitionException {
		FirstOrNextContext _localctx = new FirstOrNextContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_firstOrNext);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2076);
			_la = _input.LA(1);
			if ( !(_la==NEXT || _la==FIRST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetListContext extends ParserRuleContext {
		public TargetElContext targetEl() {
			return getRuleContext(TargetElContext.class,0);
		}
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetListContext targetList() throws RecognitionException {
		return targetList(0);
	}

	private TargetListContext targetList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TargetListContext _localctx = new TargetListContext(_ctx, _parentState);
		TargetListContext _prevctx = _localctx;
		int _startState = 96;
		enterRecursionRule(_localctx, 96, RULE_targetList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2079);
			targetEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(2086);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TargetListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_targetList);
					setState(2081);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2082);
					match(COMMA_);
					setState(2083);
					targetEl();
					}
					} 
				}
				setState(2088);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TargetElContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DOT_ASTERISK_() { return getToken(PostgreSQLStatementParser.DOT_ASTERISK_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TargetElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetEl; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTargetEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetElContext targetEl() throws RecognitionException {
		TargetElContext _localctx = new TargetElContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_targetEl);
		try {
			setState(2101);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2089);
				colId();
				setState(2090);
				match(DOT_ASTERISK_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2092);
				aExpr(0);
				setState(2093);
				match(AS);
				setState(2094);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2096);
				aExpr(0);
				setState(2097);
				identifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2099);
				aExpr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2100);
				match(ASTERISK_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public GroupByListContext groupByList() {
			return getRuleContext(GroupByListContext.class,0);
		}
		public GroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupClauseContext groupClause() throws RecognitionException {
		GroupClauseContext _localctx = new GroupClauseContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_groupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2103);
			match(GROUP);
			setState(2104);
			match(BY);
			setState(2105);
			groupByList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByListContext extends ParserRuleContext {
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public GroupByListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGroupByList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByListContext groupByList() throws RecognitionException {
		GroupByListContext _localctx = new GroupByListContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_groupByList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2107);
			groupByItem();
			setState(2112);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2108);
					match(COMMA_);
					setState(2109);
					groupByItem();
					}
					} 
				}
				setState(2114);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public EmptyGroupingSetContext emptyGroupingSet() {
			return getRuleContext(EmptyGroupingSetContext.class,0);
		}
		public CubeClauseContext cubeClause() {
			return getRuleContext(CubeClauseContext.class,0);
		}
		public RollupClauseContext rollupClause() {
			return getRuleContext(RollupClauseContext.class,0);
		}
		public GroupingSetsClauseContext groupingSetsClause() {
			return getRuleContext(GroupingSetsClauseContext.class,0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_groupByItem);
		try {
			setState(2120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2115);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2116);
				emptyGroupingSet();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2117);
				cubeClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2118);
				rollupClause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2119);
				groupingSetsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyGroupingSetContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public EmptyGroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyGroupingSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitEmptyGroupingSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyGroupingSetContext emptyGroupingSet() throws RecognitionException {
		EmptyGroupingSetContext _localctx = new EmptyGroupingSetContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_emptyGroupingSet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2122);
			match(LP_);
			setState(2123);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollupClauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(PostgreSQLStatementParser.ROLLUP, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public RollupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollupClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRollupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollupClauseContext rollupClause() throws RecognitionException {
		RollupClauseContext _localctx = new RollupClauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_rollupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2125);
			match(ROLLUP);
			setState(2126);
			match(LP_);
			setState(2127);
			exprList(0);
			setState(2128);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CubeClauseContext extends ParserRuleContext {
		public TerminalNode CUBE() { return getToken(PostgreSQLStatementParser.CUBE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CubeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cubeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCubeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CubeClauseContext cubeClause() throws RecognitionException {
		CubeClauseContext _localctx = new CubeClauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_cubeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2130);
			match(CUBE);
			setState(2131);
			match(LP_);
			setState(2132);
			exprList(0);
			setState(2133);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsClauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PostgreSQLStatementParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLStatementParser.SETS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public GroupByListContext groupByList() {
			return getRuleContext(GroupByListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public GroupingSetsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGroupingSetsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsClauseContext groupingSetsClause() throws RecognitionException {
		GroupingSetsClauseContext _localctx = new GroupingSetsClauseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_groupingSetsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2135);
			match(GROUPING);
			setState(2136);
			match(SETS);
			setState(2137);
			match(LP_);
			setState(2138);
			groupByList();
			setState(2139);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PostgreSQLStatementParser.WINDOW, 0); }
		public WindowDefinitionListContext windowDefinitionList() {
			return getRuleContext(WindowDefinitionListContext.class,0);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_windowClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2141);
			match(WINDOW);
			setState(2142);
			windowDefinitionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowDefinitionListContext extends ParserRuleContext {
		public WindowDefinitionContext windowDefinition() {
			return getRuleContext(WindowDefinitionContext.class,0);
		}
		public WindowDefinitionListContext windowDefinitionList() {
			return getRuleContext(WindowDefinitionListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public WindowDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinitionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWindowDefinitionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionListContext windowDefinitionList() throws RecognitionException {
		return windowDefinitionList(0);
	}

	private WindowDefinitionListContext windowDefinitionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		WindowDefinitionListContext _localctx = new WindowDefinitionListContext(_ctx, _parentState);
		WindowDefinitionListContext _prevctx = _localctx;
		int _startState = 116;
		enterRecursionRule(_localctx, 116, RULE_windowDefinitionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2145);
			windowDefinition();
			}
			_ctx.stop = _input.LT(-1);
			setState(2152);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,88,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new WindowDefinitionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_windowDefinitionList);
					setState(2147);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2148);
					match(COMMA_);
					setState(2149);
					windowDefinition();
					}
					} 
				}
				setState(2154);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,88,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class WindowDefinitionContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public WindowSpecificationContext windowSpecification() {
			return getRuleContext(WindowSpecificationContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWindowDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_windowDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2155);
			colId();
			setState(2156);
			match(AS);
			setState(2157);
			windowSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecificationContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExistingWindowNameContext existingWindowName() {
			return getRuleContext(ExistingWindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWindowSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecificationContext windowSpecification() throws RecognitionException {
		WindowSpecificationContext _localctx = new WindowSpecificationContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_windowSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159);
			match(LP_);
			setState(2161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				setState(2160);
				existingWindowName();
				}
				break;
			}
			setState(2164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2163);
				partitionClause();
				}
			}

			setState(2167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2166);
				sortClause();
				}
			}

			setState(2170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS || _la==RANGE || _la==GROUPS) {
				{
				setState(2169);
				frameClause();
				}
			}

			setState(2172);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingWindowNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ExistingWindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingWindowName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExistingWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingWindowNameContext existingWindowName() throws RecognitionException {
		ExistingWindowNameContext _localctx = new ExistingWindowNameContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_existingWindowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2174);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2176);
			match(PARTITION);
			setState(2177);
			match(BY);
			setState(2178);
			exprList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(PostgreSQLStatementParser.RANGE, 0); }
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public OptWindowExclusionClauseContext optWindowExclusionClause() {
			return getRuleContext(OptWindowExclusionClauseContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLStatementParser.GROUPS, 0); }
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_frameClause);
		try {
			setState(2192);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2180);
				match(RANGE);
				setState(2181);
				frameExtent();
				setState(2182);
				optWindowExclusionClause();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2184);
				match(ROWS);
				setState(2185);
				frameExtent();
				setState(2186);
				optWindowExclusionClause();
				}
				break;
			case GROUPS:
				enterOuterAlt(_localctx, 3);
				{
				setState(2188);
				match(GROUPS);
				setState(2189);
				frameExtent();
				setState(2190);
				optWindowExclusionClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public List<FrameBoundContext> frameBound() {
			return getRuleContexts(FrameBoundContext.class);
		}
		public FrameBoundContext frameBound(int i) {
			return getRuleContext(FrameBoundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PostgreSQLStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_frameExtent);
		try {
			setState(2200);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case UNIQUE:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2194);
				frameBound();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2195);
				match(BETWEEN);
				setState(2196);
				frameBound();
				setState(2197);
				match(AND);
				setState(2198);
				frameBound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBoundContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLStatementParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLStatementParser.FOLLOWING, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public FrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBound; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBoundContext frameBound() throws RecognitionException {
		FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_frameBound);
		try {
			setState(2214);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2202);
				match(UNBOUNDED);
				setState(2203);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2204);
				match(UNBOUNDED);
				setState(2205);
				match(FOLLOWING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2206);
				match(CURRENT);
				setState(2207);
				match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2208);
				aExpr(0);
				setState(2209);
				match(PRECEDING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2211);
				aExpr(0);
				setState(2212);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptWindowExclusionClauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLStatementParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLStatementParser.TIES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLStatementParser.OTHERS, 0); }
		public OptWindowExclusionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optWindowExclusionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptWindowExclusionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptWindowExclusionClauseContext optWindowExclusionClause() throws RecognitionException {
		OptWindowExclusionClauseContext _localctx = new OptWindowExclusionClauseContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_optWindowExclusionClause);
		try {
			setState(2227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2216);
				match(EXCLUDE);
				setState(2217);
				match(CURRENT);
				setState(2218);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2219);
				match(EXCLUDE);
				setState(2220);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2221);
				match(EXCLUDE);
				setState(2222);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2223);
				match(EXCLUDE);
				setState(2224);
				match(NO);
				setState(2225);
				match(OTHERS);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alias);
		try {
			setState(2231);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2229);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2230);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2233);
			match(FROM);
			setState(2234);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromListContext extends ParserRuleContext {
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public FromListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFromList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromListContext fromList() throws RecognitionException {
		return fromList(0);
	}

	private FromListContext fromList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FromListContext _localctx = new FromListContext(_ctx, _parentState);
		FromListContext _prevctx = _localctx;
		int _startState = 138;
		enterRecursionRule(_localctx, 138, RULE_fromList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2237);
			tableReference(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(2244);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,98,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FromListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fromList);
					setState(2239);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2240);
					match(COMMA_);
					setState(2241);
					tableReference(0);
					}
					} 
				}
				setState(2246);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,98,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TablesampleClauseContext tablesampleClause() {
			return getRuleContext(TablesampleClauseContext.class,0);
		}
		public FunctionTableContext functionTable() {
			return getRuleContext(FunctionTableContext.class,0);
		}
		public FuncAliasClauseContext funcAliasClause() {
			return getRuleContext(FuncAliasClauseContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(PostgreSQLStatementParser.LATERAL, 0); }
		public XmlTableContext xmlTable() {
			return getRuleContext(XmlTableContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public JoinedTableContext joinedTable() {
			return getRuleContext(JoinedTableContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		return tableReference(0);
	}

	private TableReferenceContext tableReference(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, _parentState);
		TableReferenceContext _prevctx = _localctx;
		int _startState = 140;
		enterRecursionRule(_localctx, 140, RULE_tableReference, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(2248);
				relationExpr();
				setState(2250);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(2249);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2252);
				relationExpr();
				setState(2254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (AS - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
					{
					setState(2253);
					aliasClause();
					}
				}

				setState(2256);
				tablesampleClause();
				}
				break;
			case 3:
				{
				setState(2258);
				functionTable();
				setState(2260);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					setState(2259);
					funcAliasClause();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(2262);
				match(LATERAL);
				setState(2263);
				functionTable();
				setState(2265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
				case 1:
					{
					setState(2264);
					funcAliasClause();
					}
					break;
				}
				}
				break;
			case 5:
				{
				setState(2267);
				xmlTable();
				setState(2269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					setState(2268);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(2271);
				match(LATERAL);
				setState(2272);
				xmlTable();
				setState(2274);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					setState(2273);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 7:
				{
				setState(2276);
				selectWithParens();
				setState(2278);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(2277);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 8:
				{
				setState(2280);
				match(LATERAL);
				setState(2281);
				selectWithParens();
				setState(2283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
				case 1:
					{
					setState(2282);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 9:
				{
				setState(2285);
				match(LP_);
				setState(2286);
				tableReference(0);
				setState(2287);
				joinedTable();
				setState(2288);
				match(RP_);
				setState(2290);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
				case 1:
					{
					setState(2289);
					aliasClause();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2298);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,109,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableReferenceContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableReference);
					setState(2294);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2295);
					joinedTable();
					}
					} 
				}
				setState(2300);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,109,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public TerminalNode CROSS() { return getToken(PostgreSQLStatementParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLStatementParser.JOIN, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public JoinQualContext joinQual() {
			return getRuleContext(JoinQualContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(PostgreSQLStatementParser.NATURAL, 0); }
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_joinedTable);
		try {
			setState(2321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2301);
				match(CROSS);
				setState(2302);
				match(JOIN);
				setState(2303);
				tableReference(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2304);
				joinType();
				setState(2305);
				match(JOIN);
				setState(2306);
				tableReference(0);
				setState(2307);
				joinQual();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2309);
				match(JOIN);
				setState(2310);
				tableReference(0);
				setState(2311);
				joinQual();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2313);
				match(NATURAL);
				setState(2314);
				joinType();
				setState(2315);
				match(JOIN);
				setState(2316);
				tableReference(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2318);
				match(NATURAL);
				setState(2319);
				match(JOIN);
				setState(2320);
				tableReference(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public JoinOuterContext joinOuter() {
			return getRuleContext(JoinOuterContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(PostgreSQLStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLStatementParser.RIGHT, 0); }
		public TerminalNode INNER() { return getToken(PostgreSQLStatementParser.INNER, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_joinType);
		int _la;
		try {
			setState(2336);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2323);
				match(FULL);
				setState(2325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(2324);
					joinOuter();
					}
				}

				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2327);
				match(LEFT);
				setState(2329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(2328);
					joinOuter();
					}
				}

				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2331);
				match(RIGHT);
				setState(2333);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(2332);
					joinOuter();
					}
				}

				}
				break;
			case INNER:
				enterOuterAlt(_localctx, 4);
				{
				setState(2335);
				match(INNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinOuterContext extends ParserRuleContext {
		public TerminalNode OUTER() { return getToken(PostgreSQLStatementParser.OUTER, 0); }
		public JoinOuterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinOuter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitJoinOuter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinOuterContext joinOuter() throws RecognitionException {
		JoinOuterContext _localctx = new JoinOuterContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_joinOuter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2338);
			match(OUTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinQualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public JoinQualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinQual; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitJoinQual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinQualContext joinQual() throws RecognitionException {
		JoinQualContext _localctx = new JoinQualContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_joinQual);
		try {
			setState(2347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2340);
				match(USING);
				setState(2341);
				match(LP_);
				setState(2342);
				nameList(0);
				setState(2343);
				match(RP_);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2345);
				match(ON);
				setState(2346);
				aExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public RelationExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRelationExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprContext relationExpr() throws RecognitionException {
		RelationExprContext _localctx = new RelationExprContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_relationExpr);
		try {
			setState(2360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2349);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2350);
				qualifiedName();
				setState(2351);
				match(ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2353);
				match(ONLY);
				setState(2354);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2355);
				match(ONLY);
				setState(2356);
				match(LP_);
				setState(2357);
				qualifiedName();
				setState(2358);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2362);
			match(WHERE);
			setState(2363);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereOrCurrentClauseContext extends ParserRuleContext {
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public WhereOrCurrentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereOrCurrentClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWhereOrCurrentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereOrCurrentClauseContext whereOrCurrentClause() throws RecognitionException {
		WhereOrCurrentClauseContext _localctx = new WhereOrCurrentClauseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_whereOrCurrentClause);
		try {
			setState(2370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2365);
				whereClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2366);
				match(WHERE);
				setState(2367);
				match(CURRENT);
				setState(2368);
				match(OF);
				setState(2369);
				cursorName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PostgreSQLStatementParser.HAVING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			match(HAVING);
			setState(2373);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PostgreSQLStatementParser.DO, 0); }
		public DostmtOptListContext dostmtOptList() {
			return getRuleContext(DostmtOptListContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2375);
			match(DO);
			setState(2376);
			dostmtOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtOptListContext extends ParserRuleContext {
		public List<DostmtOptItemContext> dostmtOptItem() {
			return getRuleContexts(DostmtOptItemContext.class);
		}
		public DostmtOptItemContext dostmtOptItem(int i) {
			return getRuleContext(DostmtOptItemContext.class,i);
		}
		public DostmtOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmtOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDostmtOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtOptListContext dostmtOptList() throws RecognitionException {
		DostmtOptListContext _localctx = new DostmtOptListContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dostmtOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2379); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2378);
				dostmtOptItem();
				}
				}
				setState(2381); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==LANGUAGE || _la==STRING_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtOptItemContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public DostmtOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmtOptItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDostmtOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtOptItemContext dostmtOptItem() throws RecognitionException {
		DostmtOptItemContext _localctx = new DostmtOptItemContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_dostmtOptItem);
		try {
			setState(2386);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2383);
				match(STRING_);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2384);
				match(LANGUAGE);
				setState(2385);
				nonReservedWordOrSconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(PostgreSQLStatementParser.LOCK, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public LockTypeContext lockType() {
			return getRuleContext(LockTypeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PostgreSQLStatementParser.MODE, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public LockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitLock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockContext lock() throws RecognitionException {
		LockContext _localctx = new LockContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_lock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2388);
			match(LOCK);
			setState(2390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2389);
				match(TABLE);
				}
			}

			setState(2392);
			relationExprList();
			setState(2397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(2393);
				match(IN);
				setState(2394);
				lockType();
				setState(2395);
				match(MODE);
				}
			}

			setState(2400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(2399);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTypeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLStatementParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public LockTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitLockType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTypeContext lockType() throws RecognitionException {
		LockTypeContext _localctx = new LockTypeContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_lockType);
		try {
			setState(2418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2402);
				match(ACCESS);
				setState(2403);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2404);
				match(ROW);
				setState(2405);
				match(SHARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2406);
				match(ROW);
				setState(2407);
				match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2408);
				match(SHARE);
				setState(2409);
				match(UPDATE);
				setState(2410);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2411);
				match(SHARE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2412);
				match(SHARE);
				setState(2413);
				match(ROW);
				setState(2414);
				match(EXCLUSIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2415);
				match(EXCLUSIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2416);
				match(ACCESS);
				setState(2417);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckpointContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLStatementParser.CHECKPOINT, 0); }
		public CheckpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkpoint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCheckpoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckpointContext checkpoint() throws RecognitionException {
		CheckpointContext _localctx = new CheckpointContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_checkpoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2420);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PostgreSQLStatementParser.COPY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public CopyOptionsContext copyOptions() {
			return getRuleContext(CopyOptionsContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLStatementParser.STDOUT, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLStatementParser.BINARY, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode PROGRAM() { return getToken(PostgreSQLStatementParser.PROGRAM, 0); }
		public CopyDelimiterContext copyDelimiter() {
			return getRuleContext(CopyDelimiterContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public CopyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCopy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyContext copy() throws RecognitionException {
		CopyContext _localctx = new CopyContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_copy);
		int _la;
		try {
			setState(2462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2422);
				match(COPY);
				setState(2424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2423);
					match(BINARY);
					}
				}

				setState(2426);
				qualifiedName();
				setState(2431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2427);
					match(LP_);
					setState(2428);
					columnList();
					setState(2429);
					match(RP_);
					}
				}

				setState(2433);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(2434);
					match(PROGRAM);
					}
				}

				setState(2437);
				_la = _input.LA(1);
				if ( !(((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (STRING_ - 517)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING || _la==DELIMITERS) {
					{
					setState(2438);
					copyDelimiter();
					}
				}

				setState(2442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2441);
					match(WITH);
					}
				}

				setState(2444);
				copyOptions();
				setState(2446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2445);
					whereClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2448);
				match(COPY);
				setState(2449);
				match(LP_);
				setState(2450);
				preparableStmt();
				setState(2451);
				match(RP_);
				setState(2452);
				match(TO);
				setState(2454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(2453);
					match(PROGRAM);
					}
				}

				setState(2456);
				_la = _input.LA(1);
				if ( !(((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (STRING_ - 517)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2457);
					match(WITH);
					}
				}

				setState(2460);
				copyOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionsContext extends ParserRuleContext {
		public CopyOptListContext copyOptList() {
			return getRuleContext(CopyOptListContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public CopyGenericOptListContext copyGenericOptList() {
			return getRuleContext(CopyGenericOptListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CopyOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCopyOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionsContext copyOptions() throws RecognitionException {
		CopyOptionsContext _localctx = new CopyOptionsContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_copyOptions);
		try {
			setState(2469);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case WHERE:
			case NULL:
			case BINARY:
			case ESCAPE:
			case FORCE:
			case CSV:
			case ENCODING:
			case DELIMITER:
			case HEADER:
			case QUOTE:
			case FREEZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2464);
				copyOptList();
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2465);
				match(LP_);
				setState(2466);
				copyGenericOptList();
				setState(2467);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptListContext extends ParserRuleContext {
		public List<CopyGenericOptElemContext> copyGenericOptElem() {
			return getRuleContexts(CopyGenericOptElemContext.class);
		}
		public CopyGenericOptElemContext copyGenericOptElem(int i) {
			return getRuleContext(CopyGenericOptElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public CopyGenericOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCopyGenericOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptListContext copyGenericOptList() throws RecognitionException {
		CopyGenericOptListContext _localctx = new CopyGenericOptListContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_copyGenericOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2471);
			copyGenericOptElem();
			setState(2476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2472);
				match(COMMA_);
				setState(2473);
				copyGenericOptElem();
				}
				}
				setState(2478);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public CopyGenericOptArgContext copyGenericOptArg() {
			return getRuleContext(CopyGenericOptArgContext.class,0);
		}
		public CopyGenericOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCopyGenericOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptElemContext copyGenericOptElem() throws RecognitionException {
		CopyGenericOptElemContext _localctx = new CopyGenericOptElemContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_copyGenericOptElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2479);
			colLabel();
			setState(2480);
			copyGenericOptArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public CopyGenericOptArgListContext copyGenericOptArgList() {
			return getRuleContext(CopyGenericOptArgListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CopyGenericOptArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgContext copyGenericOptArg() throws RecognitionException {
		CopyGenericOptArgContext _localctx = new CopyGenericOptArgContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_copyGenericOptArg);
		try {
			setState(2489);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2482);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2483);
				numericOnly();
				}
				break;
			case ASTERISK_:
				enterOuterAlt(_localctx, 3);
				{
				setState(2484);
				match(ASTERISK_);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 4);
				{
				setState(2485);
				match(LP_);
				setState(2486);
				copyGenericOptArgList();
				setState(2487);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgListContext extends ParserRuleContext {
		public List<CopyGenericOptArgListItemContext> copyGenericOptArgListItem() {
			return getRuleContexts(CopyGenericOptArgListItemContext.class);
		}
		public CopyGenericOptArgListItemContext copyGenericOptArgListItem(int i) {
			return getRuleContext(CopyGenericOptArgListItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public CopyGenericOptArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArgList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArgList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgListContext copyGenericOptArgList() throws RecognitionException {
		CopyGenericOptArgListContext _localctx = new CopyGenericOptArgListContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_copyGenericOptArgList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2491);
			copyGenericOptArgListItem();
			setState(2496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2492);
				match(COMMA_);
				setState(2493);
				copyGenericOptArgListItem();
				}
				}
				setState(2498);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgListItemContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public CopyGenericOptArgListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArgListItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArgListItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgListItemContext copyGenericOptArgListItem() throws RecognitionException {
		CopyGenericOptArgListItemContext _localctx = new CopyGenericOptArgListItemContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_copyGenericOptArgListItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2499);
			booleanOrString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptListContext extends ParserRuleContext {
		public List<CopyOptItemContext> copyOptItem() {
			return getRuleContexts(CopyOptItemContext.class);
		}
		public CopyOptItemContext copyOptItem(int i) {
			return getRuleContext(CopyOptItemContext.class,i);
		}
		public CopyOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCopyOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptListContext copyOptList() throws RecognitionException {
		CopyOptListContext _localctx = new CopyOptListContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_copyOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NULL || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (BINARY - 207)) | (1L << (ESCAPE - 207)) | (1L << (FORCE - 207)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (CSV - 429)) | (1L << (ENCODING - 429)) | (1L << (DELIMITER - 429)) | (1L << (HEADER - 429)) | (1L << (QUOTE - 429)))) != 0) || _la==FREEZE) {
				{
				{
				setState(2501);
				copyOptItem();
				}
				}
				setState(2506);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptItemContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLStatementParser.BINARY, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLStatementParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLStatementParser.DELIMITER, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLStatementParser.CSV, 0); }
		public TerminalNode HEADER() { return getToken(PostgreSQLStatementParser.HEADER, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLStatementParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLStatementParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLStatementParser.FORCE, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLStatementParser.ENCODING, 0); }
		public CopyOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCopyOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptItemContext copyOptItem() throws RecognitionException {
		CopyOptItemContext _localctx = new CopyOptItemContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_copyOptItem);
		int _la;
		try {
			setState(2546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2507);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2508);
				match(FREEZE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2509);
				match(DELIMITER);
				setState(2511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2510);
					match(AS);
					}
				}

				setState(2513);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2514);
				match(NULL);
				setState(2516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2515);
					match(AS);
					}
				}

				setState(2518);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2519);
				match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2520);
				match(HEADER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2521);
				match(QUOTE);
				setState(2523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2522);
					match(AS);
					}
				}

				setState(2525);
				match(STRING_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2526);
				match(ESCAPE);
				setState(2528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2527);
					match(AS);
					}
				}

				setState(2530);
				match(STRING_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2531);
				match(FORCE);
				setState(2532);
				match(QUOTE);
				setState(2533);
				columnList();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2534);
				match(FORCE);
				setState(2535);
				match(QUOTE);
				setState(2536);
				match(ASTERISK_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2537);
				match(FORCE);
				setState(2538);
				match(NOT);
				setState(2539);
				match(NULL);
				setState(2540);
				columnList();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2541);
				match(FORCE);
				setState(2542);
				match(NULL);
				setState(2543);
				columnList();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2544);
				match(ENCODING);
				setState(2545);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyDelimiterContext extends ParserRuleContext {
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLStatementParser.DELIMITERS, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public CopyDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyDelimiter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCopyDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyDelimiterContext copyDelimiter() throws RecognitionException {
		CopyDelimiterContext _localctx = new CopyDelimiterContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_copyDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2548);
				match(USING);
				}
			}

			setState(2551);
			match(DELIMITERS);
			setState(2552);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocateContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLStatementParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLStatementParser.PREPARE, 0); }
		public DeallocateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDeallocate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocateContext deallocate() throws RecognitionException {
		DeallocateContext _localctx = new DeallocateContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_deallocate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2554);
			match(DEALLOCATE);
			setState(2556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				setState(2555);
				match(PREPARE);
				}
				break;
			}
			setState(2560);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(2558);
				name();
				}
				break;
			case ALL:
				{
				setState(2559);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PostgreSQLStatementParser.FETCH, 0); }
		public FetchArgsContext fetchArgs() {
			return getRuleContext(FetchArgsContext.class,0);
		}
		public FetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchContext fetch() throws RecognitionException {
		FetchContext _localctx = new FetchContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_fetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2562);
			match(FETCH);
			setState(2563);
			fetchArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchArgsContext extends ParserRuleContext {
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLStatementParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLStatementParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PostgreSQLStatementParser.LAST, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PostgreSQLStatementParser.ABSOLUTE, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode RELATIVE() { return getToken(PostgreSQLStatementParser.RELATIVE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLStatementParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLStatementParser.BACKWARD, 0); }
		public FetchArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchArgs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFetchArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchArgsContext fetchArgs() throws RecognitionException {
		FetchArgsContext _localctx = new FetchArgsContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_fetchArgs);
		int _la;
		try {
			setState(2649);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2565);
				cursorName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2566);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2567);
				cursorName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2568);
				match(NEXT);
				setState(2570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2569);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2572);
				cursorName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2573);
				match(PRIOR);
				setState(2575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2574);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2577);
				cursorName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2578);
				match(FIRST);
				setState(2580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2579);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2582);
				cursorName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2583);
				match(LAST);
				setState(2585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2584);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2587);
				cursorName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2588);
				match(ABSOLUTE);
				setState(2589);
				signedIconst();
				setState(2591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2590);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2593);
				cursorName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2595);
				match(RELATIVE);
				setState(2596);
				signedIconst();
				setState(2598);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2597);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2600);
				cursorName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2602);
				signedIconst();
				setState(2604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2603);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2606);
				cursorName();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2608);
				match(ALL);
				setState(2610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2609);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2612);
				cursorName();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2613);
				match(FORWARD);
				setState(2615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2614);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2617);
				cursorName();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2618);
				match(FORWARD);
				setState(2619);
				signedIconst();
				setState(2621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2620);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2623);
				cursorName();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2625);
				match(FORWARD);
				setState(2626);
				match(ALL);
				setState(2628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2627);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2630);
				cursorName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2631);
				match(BACKWARD);
				setState(2633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2632);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2635);
				cursorName();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2636);
				match(BACKWARD);
				setState(2637);
				signedIconst();
				setState(2639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2638);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2641);
				cursorName();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2643);
				match(BACKWARD);
				setState(2644);
				match(ALL);
				setState(2646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2645);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2648);
				cursorName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTION_() { return getToken(PostgreSQLStatementParser.QUESTION_, 0); }
		public LiteralsTypeContext literalsType() {
			return getRuleContext(LiteralsTypeContext.class,0);
		}
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2651);
			match(QUESTION_);
			setState(2653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(2652);
				literalsType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReservedKeywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLStatementParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLStatementParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PostgreSQLStatementParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLStatementParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLStatementParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLStatementParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLStatementParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(PostgreSQLStatementParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLStatementParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLStatementParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLStatementParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLStatementParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(PostgreSQLStatementParser.ELSE, 0); }
		public TerminalNode END() { return getToken(PostgreSQLStatementParser.END, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLStatementParser.EXCEPT, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLStatementParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLStatementParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public TerminalNode HAVING() { return getToken(PostgreSQLStatementParser.HAVING, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLStatementParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(PostgreSQLStatementParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLStatementParser.INTO, 0); }
		public TerminalNode LATERAL() { return getToken(PostgreSQLStatementParser.LATERAL, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLStatementParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLStatementParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode OFFSET() { return getToken(PostgreSQLStatementParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLStatementParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(PostgreSQLStatementParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLStatementParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(PostgreSQLStatementParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLStatementParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLStatementParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLStatementParser.THEN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLStatementParser.TRAILING, 0); }
		public TerminalNode TRUE() { return getToken(PostgreSQLStatementParser.TRUE, 0); }
		public TerminalNode UNION() { return getToken(PostgreSQLStatementParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLStatementParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLStatementParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(PostgreSQLStatementParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public ReservedKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reservedKeyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReservedKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReservedKeywordContext reservedKeyword() throws RecognitionException {
		ReservedKeywordContext _localctx = new ReservedKeywordContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_reservedKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2655);
			_la = _input.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (SELECT - 51)) | (1L << (CREATE - 51)) | (1L << (GRANT - 51)) | (1L << (TABLE - 51)) | (1L << (COLUMN - 51)) | (1L << (CONSTRAINT - 51)) | (1L << (PRIMARY - 51)) | (1L << (UNIQUE - 51)) | (1L << (FOREIGN - 51)) | (1L << (INTO - 51)) | (1L << (WITH - 51)) | (1L << (UNION - 51)) | (1L << (DISTINCT - 51)) | (1L << (CASE - 51)) | (1L << (WHEN - 51)) | (1L << (CAST - 51)) | (1L << (FROM - 51)) | (1L << (USING - 51)) | (1L << (WHERE - 51)) | (1L << (AS - 51)) | (1L << (ON - 51)) | (1L << (ELSE - 51)) | (1L << (THEN - 51)) | (1L << (FOR - 51)) | (1L << (TO - 51)) | (1L << (AND - 51)) | (1L << (OR - 51)) | (1L << (NOT - 51)) | (1L << (NULL - 51)) | (1L << (TRUE - 51)) | (1L << (FALSE - 51)))) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (IN - 115)) | (1L << (ALL - 115)) | (1L << (ANY - 115)) | (1L << (ORDER - 115)) | (1L << (GROUP - 115)) | (1L << (ASC - 115)) | (1L << (DESC - 115)) | (1L << (HAVING - 115)) | (1L << (LIMIT - 115)) | (1L << (OFFSET - 115)) | (1L << (ARRAY - 115)) | (1L << (LOCALTIME - 115)) | (1L << (LOCALTIMESTAMP - 115)) | (1L << (DEFAULT - 115)) | (1L << (DO - 115)) | (1L << (CURRENT_USER - 115)))) != 0) || ((((_la - 179)) & ~0x3f) == 0 && ((1L << (_la - 179)) & ((1L << (CURRENT_DATE - 179)) | (1L << (CURRENT_TIME - 179)) | (1L << (CURRENT_TIMESTAMP - 179)) | (1L << (BOTH - 179)) | (1L << (LEADING - 179)) | (1L << (TRAILING - 179)) | (1L << (INTERSECT - 179)) | (1L << (EXCEPT - 179)) | (1L << (FETCH - 179)) | (1L << (WINDOW - 179)) | (1L << (SOME - 179)) | (1L << (END - 179)) | (1L << (CHECK - 179)) | (1L << (REFERENCES - 179)) | (1L << (USER - 179)) | (1L << (COLLATE - 179)))) != 0) || ((((_la - 243)) & ~0x3f) == 0 && ((1L << (_la - 243)) & ((1L << (DEFERRABLE - 243)) | (1L << (INITIALLY - 243)) | (1L << (ONLY - 243)) | (1L << (SESSION_USER - 243)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (CURRENT_ROLE - 356)) | (1L << (CURRENT_CATALOG - 356)) | (1L << (SYMMETRIC - 356)) | (1L << (ASYMMETRIC - 356)) | (1L << (VARIADIC - 356)) | (1L << (PLACING - 356)) | (1L << (RETURNING - 356)) | (1L << (LATERAL - 356)) | (1L << (ANALYSE - 356)) | (1L << (ANALYZE - 356)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberLiteralsContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public LiteralsTypeContext literalsType() {
			return getRuleContext(LiteralsTypeContext.class,0);
		}
		public NumberLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberLiterals; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNumberLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberLiteralsContext numberLiterals() throws RecognitionException {
		NumberLiteralsContext _localctx = new NumberLiteralsContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_numberLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_) {
				{
				setState(2657);
				match(MINUS_);
				}
			}

			setState(2660);
			match(NUMBER_);
			setState(2662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE_CAST_) {
				{
				setState(2661);
				literalsType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralsTypeContext extends ParserRuleContext {
		public TerminalNode TYPE_CAST_() { return getToken(PostgreSQLStatementParser.TYPE_CAST_, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(PostgreSQLStatementParser.IDENTIFIER_, 0); }
		public LiteralsTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literalsType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitLiteralsType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralsTypeContext literalsType() throws RecognitionException {
		LiteralsTypeContext _localctx = new LiteralsTypeContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_literalsType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2664);
			match(TYPE_CAST_);
			setState(2665);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(PostgreSQLStatementParser.IDENTIFIER_, 0); }
		public UnicodeEscapesContext unicodeEscapes() {
			return getRuleContext(UnicodeEscapesContext.class,0);
		}
		public UescapeContext uescape() {
			return getRuleContext(UescapeContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_identifier);
		int _la;
		try {
			setState(2675);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1 || _la==T__2) {
					{
					setState(2667);
					unicodeEscapes();
					}
				}

				setState(2670);
				match(IDENTIFIER_);
				setState(2672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					setState(2671);
					uescape();
					}
					break;
				}
				}
				break;
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2674);
				unreservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeEscapesContext extends ParserRuleContext {
		public TerminalNode AMPERSAND_() { return getToken(PostgreSQLStatementParser.AMPERSAND_, 0); }
		public UnicodeEscapesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicodeEscapes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitUnicodeEscapes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeEscapesContext unicodeEscapes() throws RecognitionException {
		UnicodeEscapesContext _localctx = new UnicodeEscapesContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_unicodeEscapes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2677);
			_la = _input.LA(1);
			if ( !(_la==T__1 || _la==T__2) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2678);
			match(AMPERSAND_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UescapeContext extends ParserRuleContext {
		public TerminalNode UESCAPE() { return getToken(PostgreSQLStatementParser.UESCAPE, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public UescapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uescape; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitUescape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UescapeContext uescape() throws RecognitionException {
		UescapeContext _localctx = new UescapeContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_uescape);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2680);
			match(UESCAPE);
			setState(2681);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnreservedWordContext extends ParserRuleContext {
		public TerminalNode ABORT() { return getToken(PostgreSQLStatementParser.ABORT, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PostgreSQLStatementParser.ABSOLUTE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLStatementParser.ACTION, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLStatementParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLStatementParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLStatementParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLStatementParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLStatementParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLStatementParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(PostgreSQLStatementParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLStatementParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLStatementParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLStatementParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(PostgreSQLStatementParser.BEGIN, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLStatementParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLStatementParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSQLStatementParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLStatementParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(PostgreSQLStatementParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLStatementParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLStatementParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLStatementParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLStatementParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(PostgreSQLStatementParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSQLStatementParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(PostgreSQLStatementParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLStatementParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLStatementParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLStatementParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLStatementParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT() { return getToken(PostgreSQLStatementParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(PostgreSQLStatementParser.CONTINUE, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public TerminalNode COPY() { return getToken(PostgreSQLStatementParser.COPY, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLStatementParser.COST, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLStatementParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLStatementParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLStatementParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLStatementParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(PostgreSQLStatementParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLStatementParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSQLStatementParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLStatementParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLStatementParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLStatementParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLStatementParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLStatementParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(PostgreSQLStatementParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSQLStatementParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(PostgreSQLStatementParser.DISCARD, 0); }
		public TerminalNode DOCUMENT() { return getToken(PostgreSQLStatementParser.DOCUMENT, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public TerminalNode DOUBLE() { return getToken(PostgreSQLStatementParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLStatementParser.EACH, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLStatementParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLStatementParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLStatementParser.ENCRYPTED, 0); }
		public TerminalNode ENUM() { return getToken(PostgreSQLStatementParser.ENUM, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLStatementParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLStatementParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLStatementParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLStatementParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLStatementParser.EXPRESSION, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(PostgreSQLStatementParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLStatementParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLStatementParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLStatementParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLStatementParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLStatementParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLStatementParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLStatementParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLStatementParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLStatementParser.HANDLER, 0); }
		public TerminalNode HEADER() { return getToken(PostgreSQLStatementParser.HEADER, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLStatementParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(PostgreSQLStatementParser.HOUR, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLStatementParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLStatementParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT() { return getToken(PostgreSQLStatementParser.IMPLICIT, 0); }
		public TerminalNode IMPORT() { return getToken(PostgreSQLStatementParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(PostgreSQLStatementParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSQLStatementParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLStatementParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLStatementParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSQLStatementParser.INHERITS, 0); }
		public TerminalNode INLINE() { return getToken(PostgreSQLStatementParser.INLINE, 0); }
		public TerminalNode INPUT() { return getToken(PostgreSQLStatementParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLStatementParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLStatementParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLStatementParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLStatementParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLStatementParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLStatementParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLStatementParser.LARGE, 0); }
		public TerminalNode LAST() { return getToken(PostgreSQLStatementParser.LAST, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLStatementParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSQLStatementParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSQLStatementParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLStatementParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(PostgreSQLStatementParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLStatementParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLStatementParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLStatementParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSQLStatementParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLStatementParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLStatementParser.METHOD, 0); }
		public TerminalNode MINUTE() { return getToken(PostgreSQLStatementParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLStatementParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLStatementParser.MODE, 0); }
		public TerminalNode MONTH() { return getToken(PostgreSQLStatementParser.MONTH, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLStatementParser.MOVE, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLStatementParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLStatementParser.NAMES, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLStatementParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLStatementParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(PostgreSQLStatementParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLStatementParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLStatementParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLStatementParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLStatementParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLStatementParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSQLStatementParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public TerminalNode NULLS() { return getToken(PostgreSQLStatementParser.NULLS, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLStatementParser.OBJECT, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLStatementParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLStatementParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLStatementParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLStatementParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLStatementParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLStatementParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(PostgreSQLStatementParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLStatementParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSQLStatementParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLStatementParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PostgreSQLStatementParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLStatementParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLStatementParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLStatementParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLStatementParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLStatementParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLStatementParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLStatementParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLStatementParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLStatementParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(PostgreSQLStatementParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLStatementParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSQLStatementParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLStatementParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(PostgreSQLStatementParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(PostgreSQLStatementParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLStatementParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLStatementParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSQLStatementParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLStatementParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSQLStatementParser.REINDEX, 0); }
		public TerminalNode RELATIVE() { return getToken(PostgreSQLStatementParser.RELATIVE, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSQLStatementParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLStatementParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLStatementParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLStatementParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLStatementParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSQLStatementParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSQLStatementParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLStatementParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLStatementParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLStatementParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLStatementParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(PostgreSQLStatementParser.SECOND, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLStatementParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLStatementParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLStatementParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLStatementParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLStatementParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSQLStatementParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLStatementParser.SIMPLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLStatementParser.SNAPSHOT, 0); }
		public TerminalNode SQL() { return getToken(PostgreSQLStatementParser.SQL, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLStatementParser.STABLE, 0); }
		public TerminalNode STANDALONE() { return getToken(PostgreSQLStatementParser.STANDALONE, 0); }
		public TerminalNode START() { return getToken(PostgreSQLStatementParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLStatementParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLStatementParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLStatementParser.STORED, 0); }
		public TerminalNode STRICT() { return getToken(PostgreSQLStatementParser.STRICT, 0); }
		public TerminalNode STRIP() { return getToken(PostgreSQLStatementParser.STRIP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLStatementParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLStatementParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSQLStatementParser.SYSID, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLStatementParser.SYSTEM, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLStatementParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLStatementParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLStatementParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLStatementParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(PostgreSQLStatementParser.TYPES, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSQLStatementParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLStatementParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLStatementParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLStatementParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLStatementParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLStatementParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSQLStatementParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLStatementParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLStatementParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLStatementParser.VALIDATOR, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLStatementParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(PostgreSQLStatementParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(PostgreSQLStatementParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLStatementParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE() { return getToken(PostgreSQLStatementParser.WHITESPACE, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLStatementParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLStatementParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(PostgreSQLStatementParser.XML, 0); }
		public TerminalNode YEAR() { return getToken(PostgreSQLStatementParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(PostgreSQLStatementParser.YES, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public UnreservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreservedWord; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitUnreservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnreservedWordContext unreservedWord() throws RecognitionException {
		UnreservedWordContext _localctx = new UnreservedWordContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_unreservedWord);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2683);
			_la = _input.LA(1);
			if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & ((1L << (INSERT - 52)) | (1L << (UPDATE - 52)) | (1L << (DELETE - 52)) | (1L << (ALTER - 52)) | (1L << (DROP - 52)) | (1L << (TRUNCATE - 52)) | (1L << (SCHEMA - 52)) | (1L << (REVOKE - 52)) | (1L << (ADD - 52)) | (1L << (SET - 52)) | (1L << (INDEX - 52)) | (1L << (KEY - 52)) | (1L << (FUNCTION - 52)) | (1L << (TRIGGER - 52)) | (1L << (PROCEDURE - 52)) | (1L << (VIEW - 52)) | (1L << (IF - 52)))) != 0) || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (BY - 121)) | (1L << (BEGIN - 121)) | (1L << (COMMIT - 121)) | (1L << (ROLLBACK - 121)) | (1L << (SAVEPOINT - 121)) | (1L << (DOUBLE - 121)) | (1L << (YEAR - 121)) | (1L << (MONTH - 121)) | (1L << (DAY - 121)) | (1L << (HOUR - 121)) | (1L << (MINUTE - 121)) | (1L << (SECOND - 121)) | (1L << (CURRENT - 121)) | (1L << (ENABLE - 121)) | (1L << (DISABLE - 121)) | (1L << (CALL - 121)) | (1L << (PRESERVE - 121)) | (1L << (DEFINER - 121)) | (1L << (SQL - 121)) | (1L << (CASCADED - 121)) | (1L << (LOCAL - 121)) | (1L << (CLOSE - 121)) | (1L << (NEXT - 121)) | (1L << (NAME - 121)) | (1L << (NAMES - 121)) | (1L << (TYPE - 121)) | (1L << (TEXT - 121)) | (1L << (REPEATABLE - 121)) | (1L << (VARYING - 121)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (VALUE - 186)) | (1L << (TIES - 186)) | (1L << (CUBE - 186)) | (1L << (SETS - 186)) | (1L << (OTHERS - 186)) | (1L << (AT - 186)) | (1L << (ADMIN - 186)) | (1L << (ESCAPE - 186)) | (1L << (EXCLUDE - 186)) | (1L << (PARTITION - 186)) | (1L << (UNKNOWN - 186)) | (1L << (ALWAYS - 186)) | (1L << (CASCADE - 186)) | (1L << (GENERATED - 186)) | (1L << (ISOLATION - 186)) | (1L << (LEVEL - 186)) | (1L << (NO - 186)) | (1L << (OPTION - 186)) | (1L << (PRIVILEGES - 186)) | (1L << (READ - 186)) | (1L << (ROLE - 186)) | (1L << (ROWS - 186)) | (1L << (START - 186)) | (1L << (TRANSACTION - 186)) | (1L << (ACTION - 186)) | (1L << (CACHE - 186)) | (1L << (CHARACTERISTICS - 186)) | (1L << (CLUSTER - 186)) | (1L << (COMMENTS - 186)) | (1L << (CONSTRAINTS - 186)) | (1L << (CYCLE - 186)) | (1L << (DATA - 186)) | (1L << (DATABASE - 186)) | (1L << (DEFAULTS - 186)) | (1L << (DEFERRED - 186)) | (1L << (DEPENDS - 186)) | (1L << (DOMAIN - 186)) | (1L << (EXCLUDING - 186)) | (1L << (EXECUTE - 186)))) != 0) || ((((_la - 250)) & ~0x3f) == 0 && ((1L << (_la - 250)) & ((1L << (EXTENSION - 250)) | (1L << (EXTERNAL - 250)) | (1L << (FILTER - 250)) | (1L << (FIRST - 250)) | (1L << (FOLLOWING - 250)) | (1L << (FORCE - 250)) | (1L << (GLOBAL - 250)) | (1L << (IDENTITY - 250)) | (1L << (IMMEDIATE - 250)) | (1L << (INCLUDING - 250)) | (1L << (INCREMENT - 250)) | (1L << (INDEXES - 250)) | (1L << (INHERIT - 250)) | (1L << (INHERITS - 250)) | (1L << (INCLUDE - 250)) | (1L << (LANGUAGE - 250)) | (1L << (LARGE - 250)) | (1L << (LAST - 250)) | (1L << (LOGGED - 250)) | (1L << (MATCH - 250)) | (1L << (MAXVALUE - 250)) | (1L << (MINVALUE - 250)) | (1L << (NOTHING - 250)) | (1L << (NULLS - 250)) | (1L << (OBJECT - 250)) | (1L << (OIDS - 250)) | (1L << (OVER - 250)) | (1L << (OWNED - 250)) | (1L << (OWNER - 250)) | (1L << (PARTIAL - 250)) | (1L << (PRECEDING - 250)) | (1L << (RANGE - 250)) | (1L << (RENAME - 250)) | (1L << (REPLICA - 250)) | (1L << (RESET - 250)) | (1L << (RESTART - 250)) | (1L << (RESTRICT - 250)) | (1L << (ROUTINE - 250)) | (1L << (RULE - 250)) | (1L << (SECURITY - 250)) | (1L << (SEQUENCE - 250)) | (1L << (SESSION - 250)) | (1L << (SHOW - 250)) | (1L << (SIMPLE - 250)) | (1L << (STATISTICS - 250)) | (1L << (STORAGE - 250)) | (1L << (TABLESPACE - 250)) | (1L << (TEMP - 250)) | (1L << (TEMPORARY - 250)) | (1L << (UNBOUNDED - 250)) | (1L << (UNLOGGED - 250)) | (1L << (VALID - 250)) | (1L << (VALIDATE - 250)) | (1L << (WITHIN - 250)) | (1L << (WITHOUT - 250)) | (1L << (ZONE - 250)) | (1L << (OF - 250)))) != 0) || ((((_la - 314)) & ~0x3f) == 0 && ((1L << (_la - 314)) & ((1L << (UESCAPE - 314)) | (1L << (GROUPS - 314)) | (1L << (RECURSIVE - 314)) | (1L << (ENUM - 314)) | (1L << (XML - 314)) | (1L << (ORDINALITY - 314)) | (1L << (NFC - 314)) | (1L << (NFD - 314)) | (1L << (NFKC - 314)) | (1L << (NFKD - 314)) | (1L << (REF - 314)) | (1L << (PASSING - 314)))) != 0) || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (VERSION - 378)) | (1L << (YES - 378)) | (1L << (STANDALONE - 378)) | (1L << (MATERIALIZED - 378)) | (1L << (OPERATOR - 378)) | (1L << (SHARE - 378)) | (1L << (ROLLUP - 378)) | (1L << (DOCUMENT - 378)) | (1L << (NORMALIZED - 378)) | (1L << (NOWAIT - 378)) | (1L << (LOCKED - 378)) | (1L << (COLUMNS - 378)) | (1L << (CONTENT - 378)) | (1L << (STRIP - 378)) | (1L << (WHITESPACE - 378)) | (1L << (CONFLICT - 378)) | (1L << (OVERRIDING - 378)) | (1L << (SYSTEM - 378)) | (1L << (ABORT - 378)) | (1L << (ABSOLUTE - 378)) | (1L << (ACCESS - 378)) | (1L << (AFTER - 378)) | (1L << (AGGREGATE - 378)) | (1L << (ALSO - 378)) | (1L << (ATTACH - 378)) | (1L << (ATTRIBUTE - 378)) | (1L << (BACKWARD - 378)) | (1L << (BEFORE - 378)) | (1L << (ASSERTION - 378)) | (1L << (ASSIGNMENT - 378)) | (1L << (CONTINUE - 378)) | (1L << (CONVERSION - 378)) | (1L << (COPY - 378)) | (1L << (COST - 378)) | (1L << (CSV - 378)) | (1L << (CALLED - 378)) | (1L << (CATALOG - 378)) | (1L << (CHAIN - 378)) | (1L << (CHECKPOINT - 378)) | (1L << (CLASS - 378)) | (1L << (CONFIGURATION - 378)) | (1L << (COMMENT - 378)) | (1L << (DETACH - 378)) | (1L << (DICTIONARY - 378)) | (1L << (EXPRESSION - 378)) | (1L << (INSENSITIVE - 378)) | (1L << (DISCARD - 378)))) != 0) || ((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (OFF - 442)) | (1L << (INSTEAD - 442)) | (1L << (EXPLAIN - 442)) | (1L << (INPUT - 442)) | (1L << (INLINE - 442)) | (1L << (PARALLEL - 442)) | (1L << (LEAKPROOF - 442)) | (1L << (COMMITTED - 442)) | (1L << (ENCODING - 442)) | (1L << (IMPLICIT - 442)) | (1L << (DELIMITER - 442)) | (1L << (CURSOR - 442)) | (1L << (EACH - 442)) | (1L << (EVENT - 442)) | (1L << (DEALLOCATE - 442)) | (1L << (CONNECTION - 442)) | (1L << (DECLARE - 442)) | (1L << (FAMILY - 442)) | (1L << (FORWARD - 442)) | (1L << (EXCLUSIVE - 442)) | (1L << (FUNCTIONS - 442)) | (1L << (LOCATION - 442)) | (1L << (LABEL - 442)) | (1L << (DELIMITERS - 442)) | (1L << (HANDLER - 442)) | (1L << (HEADER - 442)) | (1L << (IMMUTABLE - 442)) | (1L << (GRANTED - 442)) | (1L << (HOLD - 442)) | (1L << (MAPPING - 442)) | (1L << (OLD - 442)) | (1L << (METHOD - 442)) | (1L << (LOAD - 442)) | (1L << (LISTEN - 442)) | (1L << (MODE - 442)) | (1L << (MOVE - 442)) | (1L << (PROCEDURAL - 442)) | (1L << (PARSER - 442)) | (1L << (PROCEDURES - 442)) | (1L << (ENCRYPTED - 442)) | (1L << (PUBLICATION - 442)) | (1L << (PROGRAM - 442)) | (1L << (REFERENCING - 442)) | (1L << (PLANS - 442)) | (1L << (REINDEX - 442)) | (1L << (PRIOR - 442)) | (1L << (PASSWORD - 442)) | (1L << (RELATIVE - 442)) | (1L << (QUOTE - 442)) | (1L << (ROUTINES - 442)) | (1L << (REPLACE - 442)) | (1L << (SNAPSHOT - 442)) | (1L << (REFRESH - 442)) | (1L << (PREPARE - 442)) | (1L << (OPTIONS - 442)) | (1L << (IMPORT - 442)) | (1L << (INVOKER - 442)) | (1L << (NEW - 442)) | (1L << (PREPARED - 442)) | (1L << (SCROLL - 442)) | (1L << (SEQUENCES - 442)) | (1L << (SYSID - 442)) | (1L << (REASSIGN - 442)) | (1L << (SERVER - 442)))) != 0) || ((((_la - 506)) & ~0x3f) == 0 && ((1L << (_la - 506)) & ((1L << (SUBSCRIPTION - 506)) | (1L << (SEARCH - 506)) | (1L << (SCHEMAS - 506)) | (1L << (RECHECK - 506)) | (1L << (POLICY - 506)) | (1L << (NOTIFY - 506)) | (1L << (LOCK - 506)) | (1L << (RELEASE - 506)) | (1L << (SERIALIZABLE - 506)) | (1L << (RETURNS - 506)) | (1L << (STATEMENT - 506)) | (1L << (STDIN - 506)) | (1L << (STDOUT - 506)) | (1L << (TABLES - 506)) | (1L << (SUPPORT - 506)) | (1L << (STABLE - 506)) | (1L << (TEMPLATE - 506)) | (1L << (UNENCRYPTED - 506)) | (1L << (VIEWS - 506)) | (1L << (UNCOMMITTED - 506)) | (1L << (TRANSFORM - 506)) | (1L << (UNLISTEN - 506)) | (1L << (TRUSTED - 506)) | (1L << (VALIDATOR - 506)) | (1L << (UNTIL - 506)) | (1L << (VACUUM - 506)) | (1L << (VOLATILE - 506)) | (1L << (STORED - 506)) | (1L << (WRITE - 506)) | (1L << (STRICT - 506)) | (1L << (TYPES - 506)) | (1L << (WRAPPER - 506)) | (1L << (WORK - 506)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeFuncNameKeywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLStatementParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSQLStatementParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLStatementParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLStatementParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLStatementParser.ILIKE, 0); }
		public TerminalNode INNER() { return getToken(PostgreSQLStatementParser.INNER, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLStatementParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLStatementParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLStatementParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLStatementParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLStatementParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(PostgreSQLStatementParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLStatementParser.NOTNULL, 0); }
		public TerminalNode OUTER() { return getToken(PostgreSQLStatementParser.OUTER, 0); }
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLStatementParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLStatementParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLStatementParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLStatementParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public TypeFuncNameKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeFuncNameKeyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTypeFuncNameKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeFuncNameKeywordContext typeFuncNameKeyword() throws RecognitionException {
		TypeFuncNameKeywordContext _localctx = new TypeFuncNameKeywordContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_typeFuncNameKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2685);
			_la = _input.LA(1);
			if ( !(((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (NATURAL - 89)) | (1L << (JOIN - 89)) | (1L << (FULL - 89)) | (1L << (INNER - 89)) | (1L << (OUTER - 89)) | (1L << (LEFT - 89)) | (1L << (RIGHT - 89)) | (1L << (CROSS - 89)) | (1L << (IS - 89)) | (1L << (LIKE - 89)))) != 0) || ((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (COLLATION - 168)) | (1L << (OVERLAPS - 168)) | (1L << (BINARY - 168)))) != 0) || _la==CONCURRENTLY || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (TABLESAMPLE - 354)) | (1L << (CURRENT_SCHEMA - 354)) | (1L << (ILIKE - 354)) | (1L << (SIMILAR - 354)) | (1L << (ISNULL - 354)) | (1L << (NOTNULL - 354)))) != 0) || ((((_la - 539)) & ~0x3f) == 0 && ((1L << (_la - 539)) & ((1L << (FREEZE - 539)) | (1L << (AUTHORIZATION - 539)) | (1L << (VERBOSE - 539)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2687);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(2689);
				owner();
				setState(2690);
				match(DOT_);
				}
				break;
			}
			setState(2694);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2699);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(2696);
				owner();
				setState(2697);
				match(DOT_);
				}
				break;
			}
			setState(2701);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2703);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2705);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNames; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesContext tableNames() throws RecognitionException {
		TableNamesContext _localctx = new TableNamesContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_tableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2707);
				match(LP_);
				}
			}

			setState(2710);
			tableName();
			setState(2715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2711);
				match(COMMA_);
				setState(2712);
				tableName();
				}
				}
				setState(2717);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2719);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(2718);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNamesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNames; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNamesContext columnNames() throws RecognitionException {
		ColumnNamesContext _localctx = new ColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_columnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2721);
			match(LP_);
			setState(2722);
			columnName();
			setState(2727);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2723);
				match(COMMA_);
				setState(2724);
				columnName();
				}
				}
				setState(2729);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2730);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_collationName);
		try {
			setState(2734);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2732);
				match(STRING_);
				}
				break;
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2733);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2736);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimaryKeyContext extends ParserRuleContext {
		public TerminalNode KEY() { return getToken(PostgreSQLStatementParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLStatementParser.PRIMARY, 0); }
		public PrimaryKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKey; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyContext primaryKey() throws RecognitionException {
		PrimaryKeyContext _localctx = new PrimaryKeyContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_primaryKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(2738);
				match(PRIMARY);
				}
			}

			setState(2741);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode OR_() { return getToken(PostgreSQLStatementParser.OR_, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode AND_() { return getToken(PostgreSQLStatementParser.AND_, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_logicalOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2743);
			_la = _input.LA(1);
			if ( !(_la==AND_ || _la==OR_ || _la==AND || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public TerminalNode GTE_() { return getToken(PostgreSQLStatementParser.GTE_, 0); }
		public TerminalNode GT_() { return getToken(PostgreSQLStatementParser.GT_, 0); }
		public TerminalNode LTE_() { return getToken(PostgreSQLStatementParser.LTE_, 0); }
		public TerminalNode LT_() { return getToken(PostgreSQLStatementParser.LT_, 0); }
		public TerminalNode NEQ_() { return getToken(PostgreSQLStatementParser.NEQ_, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2745);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CursorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCursorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorNameContext cursorName() throws RecognitionException {
		CursorNameContext _localctx = new CursorNameContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_cursorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2747);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AExprContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public QualOpContext qualOp() {
			return getRuleContext(QualOpContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLStatementParser.OVERLAPS, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLStatementParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(PostgreSQLStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(PostgreSQLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(PostgreSQLStatementParser.CARET_, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PostgreSQLStatementParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLStatementParser.ESCAPE, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLStatementParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLStatementParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLStatementParser.BETWEEN, 0); }
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLStatementParser.ASYMMETRIC, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLStatementParser.SYMMETRIC, 0); }
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public TerminalNode TYPE_CAST_() { return getToken(PostgreSQLStatementParser.TYPE_CAST_, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLStatementParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLStatementParser.NOTNULL, 0); }
		public TerminalNode TRUE() { return getToken(PostgreSQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLStatementParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLStatementParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public InExprContext inExpr() {
			return getRuleContext(InExprContext.class,0);
		}
		public SubqueryOpContext subqueryOp() {
			return getRuleContext(SubqueryOpContext.class,0);
		}
		public SubTypeContext subType() {
			return getRuleContext(SubTypeContext.class,0);
		}
		public TerminalNode DOCUMENT() { return getToken(PostgreSQLStatementParser.DOCUMENT, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLStatementParser.NORMALIZED, 0); }
		public UnicodeNormalFormContext unicodeNormalForm() {
			return getRuleContext(UnicodeNormalFormContext.class,0);
		}
		public AExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AExprContext aExpr() throws RecognitionException {
		return aExpr(0);
	}

	private AExprContext aExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AExprContext _localctx = new AExprContext(_ctx, _parentState);
		AExprContext _prevctx = _localctx;
		int _startState = 240;
		enterRecursionRule(_localctx, 240, RULE_aExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(2750);
				cExpr();
				}
				break;
			case 2:
				{
				setState(2751);
				match(PLUS_);
				setState(2752);
				aExpr(57);
				}
				break;
			case 3:
				{
				setState(2753);
				match(MINUS_);
				setState(2754);
				aExpr(56);
				}
				break;
			case 4:
				{
				setState(2755);
				qualOp();
				setState(2756);
				aExpr(47);
				}
				break;
			case 5:
				{
				setState(2758);
				match(NOT);
				setState(2759);
				aExpr(45);
				}
				break;
			case 6:
				{
				setState(2760);
				row();
				setState(2761);
				match(OVERLAPS);
				setState(2762);
				row();
				}
				break;
			case 7:
				{
				setState(2764);
				match(UNIQUE);
				setState(2765);
				selectWithParens();
				}
				break;
			case 8:
				{
				setState(2766);
				match(DEFAULT);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3014);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,179,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3012);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
					case 1:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2769);
						if (!(precpred(_ctx, 58))) throw new FailedPredicateException(this, "precpred(_ctx, 58)");
						setState(2770);
						match(AT);
						setState(2771);
						match(TIME);
						setState(2772);
						match(ZONE);
						setState(2773);
						aExpr(59);
						}
						break;
					case 2:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2774);
						if (!(precpred(_ctx, 55))) throw new FailedPredicateException(this, "precpred(_ctx, 55)");
						setState(2775);
						match(PLUS_);
						setState(2776);
						aExpr(56);
						}
						break;
					case 3:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2777);
						if (!(precpred(_ctx, 54))) throw new FailedPredicateException(this, "precpred(_ctx, 54)");
						setState(2778);
						match(MINUS_);
						setState(2779);
						aExpr(55);
						}
						break;
					case 4:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2780);
						if (!(precpred(_ctx, 53))) throw new FailedPredicateException(this, "precpred(_ctx, 53)");
						setState(2781);
						match(ASTERISK_);
						setState(2782);
						aExpr(54);
						}
						break;
					case 5:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2783);
						if (!(precpred(_ctx, 52))) throw new FailedPredicateException(this, "precpred(_ctx, 52)");
						setState(2784);
						match(SLASH_);
						setState(2785);
						aExpr(53);
						}
						break;
					case 6:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2786);
						if (!(precpred(_ctx, 51))) throw new FailedPredicateException(this, "precpred(_ctx, 51)");
						setState(2787);
						match(MOD_);
						setState(2788);
						aExpr(52);
						}
						break;
					case 7:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2789);
						if (!(precpred(_ctx, 50))) throw new FailedPredicateException(this, "precpred(_ctx, 50)");
						setState(2790);
						match(CARET_);
						setState(2791);
						aExpr(51);
						}
						break;
					case 8:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2792);
						if (!(precpred(_ctx, 49))) throw new FailedPredicateException(this, "precpred(_ctx, 49)");
						setState(2793);
						comparisonOperator();
						setState(2794);
						aExpr(50);
						}
						break;
					case 9:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2796);
						if (!(precpred(_ctx, 48))) throw new FailedPredicateException(this, "precpred(_ctx, 48)");
						setState(2797);
						qualOp();
						setState(2798);
						aExpr(49);
						}
						break;
					case 10:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2800);
						if (!(precpred(_ctx, 44))) throw new FailedPredicateException(this, "precpred(_ctx, 44)");
						setState(2801);
						match(LIKE);
						setState(2802);
						aExpr(45);
						}
						break;
					case 11:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2803);
						if (!(precpred(_ctx, 43))) throw new FailedPredicateException(this, "precpred(_ctx, 43)");
						setState(2804);
						match(LIKE);
						setState(2805);
						aExpr(0);
						setState(2806);
						match(ESCAPE);
						setState(2807);
						aExpr(44);
						}
						break;
					case 12:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2809);
						if (!(precpred(_ctx, 42))) throw new FailedPredicateException(this, "precpred(_ctx, 42)");
						setState(2810);
						match(NOT);
						setState(2811);
						match(LIKE);
						setState(2812);
						aExpr(43);
						}
						break;
					case 13:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2813);
						if (!(precpred(_ctx, 41))) throw new FailedPredicateException(this, "precpred(_ctx, 41)");
						setState(2814);
						match(NOT);
						setState(2815);
						match(LIKE);
						setState(2816);
						aExpr(0);
						setState(2817);
						match(ESCAPE);
						setState(2818);
						aExpr(42);
						}
						break;
					case 14:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2820);
						if (!(precpred(_ctx, 40))) throw new FailedPredicateException(this, "precpred(_ctx, 40)");
						setState(2821);
						match(ILIKE);
						setState(2822);
						aExpr(41);
						}
						break;
					case 15:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2823);
						if (!(precpred(_ctx, 39))) throw new FailedPredicateException(this, "precpred(_ctx, 39)");
						setState(2824);
						match(ILIKE);
						setState(2825);
						aExpr(0);
						setState(2826);
						match(ESCAPE);
						setState(2827);
						aExpr(40);
						}
						break;
					case 16:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2829);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(2830);
						match(NOT);
						setState(2831);
						match(ILIKE);
						setState(2832);
						aExpr(39);
						}
						break;
					case 17:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2833);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(2834);
						match(NOT);
						setState(2835);
						match(ILIKE);
						setState(2836);
						aExpr(0);
						setState(2837);
						match(ESCAPE);
						setState(2838);
						aExpr(38);
						}
						break;
					case 18:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2840);
						if (!(precpred(_ctx, 36))) throw new FailedPredicateException(this, "precpred(_ctx, 36)");
						setState(2841);
						match(SIMILAR);
						setState(2842);
						match(TO);
						setState(2843);
						aExpr(37);
						}
						break;
					case 19:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2844);
						if (!(precpred(_ctx, 35))) throw new FailedPredicateException(this, "precpred(_ctx, 35)");
						setState(2845);
						match(SIMILAR);
						setState(2846);
						match(TO);
						setState(2847);
						aExpr(0);
						setState(2848);
						match(ESCAPE);
						setState(2849);
						aExpr(36);
						}
						break;
					case 20:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2851);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(2852);
						match(NOT);
						setState(2853);
						match(SIMILAR);
						setState(2854);
						match(TO);
						setState(2855);
						aExpr(35);
						}
						break;
					case 21:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2856);
						if (!(precpred(_ctx, 33))) throw new FailedPredicateException(this, "precpred(_ctx, 33)");
						setState(2857);
						match(NOT);
						setState(2858);
						match(SIMILAR);
						setState(2859);
						match(TO);
						setState(2860);
						aExpr(0);
						setState(2861);
						match(ESCAPE);
						setState(2862);
						aExpr(34);
						}
						break;
					case 22:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2864);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(2865);
						match(IS);
						setState(2866);
						match(DISTINCT);
						setState(2867);
						match(FROM);
						setState(2868);
						aExpr(22);
						}
						break;
					case 23:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2869);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(2870);
						match(IS);
						setState(2871);
						match(NOT);
						setState(2872);
						match(DISTINCT);
						setState(2873);
						match(FROM);
						setState(2874);
						aExpr(21);
						}
						break;
					case 24:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2875);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(2876);
						match(BETWEEN);
						setState(2878);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC) {
							{
							setState(2877);
							match(ASYMMETRIC);
							}
						}

						setState(2880);
						bExpr(0);
						setState(2881);
						match(AND);
						setState(2882);
						aExpr(18);
						}
						break;
					case 25:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2884);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(2885);
						match(NOT);
						setState(2886);
						match(BETWEEN);
						setState(2888);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC) {
							{
							setState(2887);
							match(ASYMMETRIC);
							}
						}

						setState(2890);
						bExpr(0);
						setState(2891);
						match(AND);
						setState(2892);
						aExpr(17);
						}
						break;
					case 26:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2894);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(2895);
						match(BETWEEN);
						setState(2896);
						match(SYMMETRIC);
						setState(2897);
						bExpr(0);
						setState(2898);
						match(AND);
						setState(2899);
						aExpr(16);
						}
						break;
					case 27:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2901);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(2902);
						match(NOT);
						setState(2903);
						match(BETWEEN);
						setState(2904);
						match(SYMMETRIC);
						setState(2905);
						bExpr(0);
						setState(2906);
						match(AND);
						setState(2907);
						aExpr(15);
						}
						break;
					case 28:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2909);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2910);
						logicalOperator();
						setState(2911);
						aExpr(3);
						}
						break;
					case 29:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2913);
						if (!(precpred(_ctx, 60))) throw new FailedPredicateException(this, "precpred(_ctx, 60)");
						setState(2914);
						match(TYPE_CAST_);
						setState(2915);
						typeName();
						}
						break;
					case 30:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2916);
						if (!(precpred(_ctx, 59))) throw new FailedPredicateException(this, "precpred(_ctx, 59)");
						setState(2917);
						match(COLLATE);
						setState(2918);
						anyName();
						}
						break;
					case 31:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2919);
						if (!(precpred(_ctx, 46))) throw new FailedPredicateException(this, "precpred(_ctx, 46)");
						setState(2920);
						qualOp();
						}
						break;
					case 32:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2921);
						if (!(precpred(_ctx, 32))) throw new FailedPredicateException(this, "precpred(_ctx, 32)");
						setState(2922);
						match(IS);
						setState(2923);
						match(NULL);
						}
						break;
					case 33:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2924);
						if (!(precpred(_ctx, 31))) throw new FailedPredicateException(this, "precpred(_ctx, 31)");
						setState(2925);
						match(ISNULL);
						}
						break;
					case 34:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2926);
						if (!(precpred(_ctx, 30))) throw new FailedPredicateException(this, "precpred(_ctx, 30)");
						setState(2927);
						match(IS);
						setState(2928);
						match(NOT);
						setState(2929);
						match(NULL);
						}
						break;
					case 35:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2930);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(2931);
						match(NOTNULL);
						}
						break;
					case 36:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2932);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(2933);
						match(IS);
						setState(2934);
						match(TRUE);
						}
						break;
					case 37:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2935);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(2936);
						match(IS);
						setState(2937);
						match(NOT);
						setState(2938);
						match(TRUE);
						}
						break;
					case 38:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2939);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(2940);
						match(IS);
						setState(2941);
						match(FALSE);
						}
						break;
					case 39:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2942);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(2943);
						match(IS);
						setState(2944);
						match(NOT);
						setState(2945);
						match(FALSE);
						}
						break;
					case 40:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2946);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(2947);
						match(IS);
						setState(2948);
						match(UNKNOWN);
						}
						break;
					case 41:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2949);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(2950);
						match(IS);
						setState(2951);
						match(NOT);
						setState(2952);
						match(UNKNOWN);
						}
						break;
					case 42:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2953);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(2954);
						match(IS);
						setState(2955);
						match(OF);
						setState(2956);
						match(LP_);
						setState(2957);
						typeList();
						setState(2958);
						match(RP_);
						}
						break;
					case 43:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2960);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(2961);
						match(IS);
						setState(2962);
						match(NOT);
						setState(2963);
						match(OF);
						setState(2964);
						match(LP_);
						setState(2965);
						typeList();
						setState(2966);
						match(RP_);
						}
						break;
					case 44:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2968);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(2969);
						match(IN);
						setState(2970);
						inExpr();
						}
						break;
					case 45:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2971);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(2972);
						match(NOT);
						setState(2973);
						match(IN);
						setState(2974);
						inExpr();
						}
						break;
					case 46:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2975);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(2976);
						subqueryOp();
						setState(2977);
						subType();
						setState(2978);
						selectWithParens();
						}
						break;
					case 47:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2980);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(2981);
						subqueryOp();
						setState(2982);
						subType();
						setState(2983);
						match(LP_);
						setState(2984);
						aExpr(0);
						setState(2985);
						match(RP_);
						}
						break;
					case 48:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2987);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(2988);
						match(IS);
						setState(2989);
						match(DOCUMENT);
						}
						break;
					case 49:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2990);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(2991);
						match(IS);
						setState(2992);
						match(NOT);
						setState(2993);
						match(DOCUMENT);
						}
						break;
					case 50:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2994);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(2995);
						match(IS);
						setState(2996);
						match(NORMALIZED);
						}
						break;
					case 51:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2997);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(2998);
						match(IS);
						setState(2999);
						unicodeNormalForm();
						setState(3000);
						match(NORMALIZED);
						}
						break;
					case 52:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3002);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3003);
						match(IS);
						setState(3004);
						match(NOT);
						setState(3005);
						match(NORMALIZED);
						}
						break;
					case 53:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(3006);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3007);
						match(IS);
						setState(3008);
						match(NOT);
						setState(3009);
						unicodeNormalForm();
						setState(3010);
						match(NORMALIZED);
						}
						break;
					}
					} 
				}
				setState(3016);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,179,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class BExprContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public List<BExprContext> bExpr() {
			return getRuleContexts(BExprContext.class);
		}
		public BExprContext bExpr(int i) {
			return getRuleContext(BExprContext.class,i);
		}
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public QualOpContext qualOp() {
			return getRuleContext(QualOpContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode TYPE_CAST_() { return getToken(PostgreSQLStatementParser.TYPE_CAST_, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode DOCUMENT() { return getToken(PostgreSQLStatementParser.DOCUMENT, 0); }
		public BExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitBExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BExprContext bExpr() throws RecognitionException {
		return bExpr(0);
	}

	private BExprContext bExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BExprContext _localctx = new BExprContext(_ctx, _parentState);
		BExprContext _prevctx = _localctx;
		int _startState = 242;
		enterRecursionRule(_localctx, 242, RULE_bExpr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(3018);
				cExpr();
				}
				break;
			case 2:
				{
				setState(3019);
				match(PLUS_);
				setState(3020);
				bExpr(11);
				}
				break;
			case 3:
				{
				setState(3021);
				match(MINUS_);
				setState(3022);
				bExpr(10);
				}
				break;
			case 4:
				{
				setState(3023);
				qualOp();
				setState(3024);
				bExpr(8);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3072);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,182,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3070);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
					case 1:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3028);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(3029);
						qualOp();
						setState(3030);
						bExpr(10);
						}
						break;
					case 2:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3032);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3033);
						match(IS);
						setState(3034);
						match(DISTINCT);
						setState(3035);
						match(FROM);
						setState(3036);
						bExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3037);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3038);
						match(IS);
						setState(3039);
						match(NOT);
						setState(3040);
						match(DISTINCT);
						setState(3041);
						match(FROM);
						setState(3042);
						bExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3043);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(3044);
						match(TYPE_CAST_);
						setState(3045);
						typeName();
						}
						break;
					case 5:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3046);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3047);
						qualOp();
						}
						break;
					case 6:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3048);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3049);
						match(IS);
						setState(3050);
						match(OF);
						setState(3051);
						match(LP_);
						setState(3052);
						typeList();
						setState(3053);
						match(RP_);
						}
						break;
					case 7:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3055);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3056);
						match(IS);
						setState(3057);
						match(NOT);
						setState(3058);
						match(OF);
						setState(3059);
						match(LP_);
						setState(3060);
						typeList();
						setState(3061);
						match(RP_);
						}
						break;
					case 8:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3063);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3064);
						match(IS);
						setState(3065);
						match(DOCUMENT);
						}
						break;
					case 9:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(3066);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3067);
						match(IS);
						setState(3068);
						match(NOT);
						setState(3069);
						match(DOCUMENT);
						}
						break;
					}
					} 
				}
				setState(3074);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,182,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CExprContext extends ParserRuleContext {
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLStatementParser.PARAM, 0); }
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public CaseExprContext caseExpr() {
			return getRuleContext(CaseExprContext.class,0);
		}
		public FuncExprContext funcExpr() {
			return getRuleContext(FuncExprContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLStatementParser.ARRAY, 0); }
		public ArrayExprContext arrayExpr() {
			return getRuleContext(ArrayExprContext.class,0);
		}
		public ExplicitRowContext explicitRow() {
			return getRuleContext(ExplicitRowContext.class,0);
		}
		public ImplicitRowContext implicitRow() {
			return getRuleContext(ImplicitRowContext.class,0);
		}
		public TerminalNode GROUPING() { return getToken(PostgreSQLStatementParser.GROUPING, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public CExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CExprContext cExpr() throws RecognitionException {
		CExprContext _localctx = new CExprContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_cExpr);
		try {
			setState(3106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3075);
				parameterMarker();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3076);
				columnref();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3077);
				aexprConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3078);
				match(PARAM);
				setState(3080);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
				case 1:
					{
					setState(3079);
					indirectionEl();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3082);
				match(LP_);
				setState(3083);
				aExpr(0);
				setState(3084);
				match(RP_);
				setState(3085);
				optIndirection(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3087);
				caseExpr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3088);
				funcExpr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3089);
				selectWithParens();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3090);
				selectWithParens();
				setState(3091);
				indirection(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3093);
				match(EXISTS);
				setState(3094);
				selectWithParens();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3095);
				match(ARRAY);
				setState(3096);
				selectWithParens();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3097);
				match(ARRAY);
				setState(3098);
				arrayExpr();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3099);
				explicitRow();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3100);
				implicitRow();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3101);
				match(GROUPING);
				setState(3102);
				match(LP_);
				setState(3103);
				exprList(0);
				setState(3104);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndirectionContext _localctx = new IndirectionContext(_ctx, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 246;
		enterRecursionRule(_localctx, 246, RULE_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3109);
			indirectionEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(3115);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indirection);
					setState(3111);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3112);
					indirectionEl();
					}
					} 
				}
				setState(3117);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OptIndirectionContext extends ParserRuleContext {
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public OptIndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optIndirection; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptIndirectionContext optIndirection() throws RecognitionException {
		return optIndirection(0);
	}

	private OptIndirectionContext optIndirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptIndirectionContext _localctx = new OptIndirectionContext(_ctx, _parentState);
		OptIndirectionContext _prevctx = _localctx;
		int _startState = 248;
		enterRecursionRule(_localctx, 248, RULE_optIndirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3123);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,186,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptIndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optIndirection);
					setState(3119);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3120);
					indirectionEl();
					}
					} 
				}
				setState(3125);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,186,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IndirectionElContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public AttrNameContext attrName() {
			return getRuleContext(AttrNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode LBT_() { return getToken(PostgreSQLStatementParser.LBT_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RBT_() { return getToken(PostgreSQLStatementParser.RBT_, 0); }
		public TerminalNode COLON_() { return getToken(PostgreSQLStatementParser.COLON_, 0); }
		public List<SliceBoundContext> sliceBound() {
			return getRuleContexts(SliceBoundContext.class);
		}
		public SliceBoundContext sliceBound(int i) {
			return getRuleContext(SliceBoundContext.class,i);
		}
		public IndirectionElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirectionEl; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndirectionEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionElContext indirectionEl() throws RecognitionException {
		IndirectionElContext _localctx = new IndirectionElContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_indirectionEl);
		int _la;
		try {
			setState(3143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3126);
				match(DOT_);
				setState(3127);
				attrName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3128);
				match(DOT_);
				setState(3129);
				match(ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3130);
				match(LBT_);
				setState(3131);
				aExpr(0);
				setState(3132);
				match(RBT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3134);
				match(LBT_);
				setState(3136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << LP_) | (1L << QUESTION_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (UNIQUE - 66)) | (1L << (KEY - 66)) | (1L << (POSITION - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (CASE - 66)) | (1L << (CAST - 66)) | (1L << (TRIM - 66)) | (1L << (SUBSTRING - 66)) | (1L << (NATURAL - 66)) | (1L << (JOIN - 66)) | (1L << (FULL - 66)) | (1L << (INNER - 66)) | (1L << (OUTER - 66)) | (1L << (LEFT - 66)) | (1L << (RIGHT - 66)) | (1L << (CROSS - 66)) | (1L << (IF - 66)) | (1L << (IS - 66)) | (1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (TRUE - 66)) | (1L << (FALSE - 66)) | (1L << (EXISTS - 66)) | (1L << (LIKE - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (ARRAY - 130)) | (1L << (LOCALTIME - 130)) | (1L << (LOCALTIMESTAMP - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (DEFAULT - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (CURRENT_USER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (COLLATION - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (CURRENT_DATE - 130)) | (1L << (CURRENT_TIME - 130)) | (1L << (CURRENT_TIMESTAMP - 130)) | (1L << (NULLIF - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (COALESCE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (GROUPING - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (OVERLAPS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (BINARY - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (ROW - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (USER - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONCURRENTLY - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SESSION_USER - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (TABLESAMPLE - 330)) | (1L << (ORDINALITY - 330)) | (1L << (CURRENT_ROLE - 330)) | (1L << (CURRENT_CATALOG - 330)) | (1L << (CURRENT_SCHEMA - 330)) | (1L << (NORMALIZE - 330)) | (1L << (OVERLAY - 330)) | (1L << (XMLCONCAT - 330)) | (1L << (XMLELEMENT - 330)) | (1L << (XMLEXISTS - 330)) | (1L << (XMLFOREST - 330)) | (1L << (XMLPARSE - 330)) | (1L << (XMLPI - 330)) | (1L << (XMLROOT - 330)) | (1L << (XMLSERIALIZE - 330)) | (1L << (TREAT - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (GREATEST - 330)) | (1L << (LEAST - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (ILIKE - 330)) | (1L << (SIMILAR - 330)) | (1L << (ISNULL - 330)) | (1L << (NOTNULL - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (FREEZE - 524)) | (1L << (AUTHORIZATION - 524)) | (1L << (VERBOSE - 524)) | (1L << (PARAM - 524)) | (1L << (IDENTIFIER_ - 524)) | (1L << (STRING_ - 524)) | (1L << (NUMBER_ - 524)))) != 0)) {
					{
					setState(3135);
					sliceBound();
					}
				}

				setState(3138);
				match(COLON_);
				setState(3140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << LP_) | (1L << QUESTION_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (UNIQUE - 66)) | (1L << (KEY - 66)) | (1L << (POSITION - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (CASE - 66)) | (1L << (CAST - 66)) | (1L << (TRIM - 66)) | (1L << (SUBSTRING - 66)) | (1L << (NATURAL - 66)) | (1L << (JOIN - 66)) | (1L << (FULL - 66)) | (1L << (INNER - 66)) | (1L << (OUTER - 66)) | (1L << (LEFT - 66)) | (1L << (RIGHT - 66)) | (1L << (CROSS - 66)) | (1L << (IF - 66)) | (1L << (IS - 66)) | (1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (TRUE - 66)) | (1L << (FALSE - 66)) | (1L << (EXISTS - 66)) | (1L << (LIKE - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (ARRAY - 130)) | (1L << (LOCALTIME - 130)) | (1L << (LOCALTIMESTAMP - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (DEFAULT - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (CURRENT_USER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (COLLATION - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (CURRENT_DATE - 130)) | (1L << (CURRENT_TIME - 130)) | (1L << (CURRENT_TIMESTAMP - 130)) | (1L << (NULLIF - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (COALESCE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (GROUPING - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (OVERLAPS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (BINARY - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (ROW - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (USER - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONCURRENTLY - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SESSION_USER - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (TABLESAMPLE - 330)) | (1L << (ORDINALITY - 330)) | (1L << (CURRENT_ROLE - 330)) | (1L << (CURRENT_CATALOG - 330)) | (1L << (CURRENT_SCHEMA - 330)) | (1L << (NORMALIZE - 330)) | (1L << (OVERLAY - 330)) | (1L << (XMLCONCAT - 330)) | (1L << (XMLELEMENT - 330)) | (1L << (XMLEXISTS - 330)) | (1L << (XMLFOREST - 330)) | (1L << (XMLPARSE - 330)) | (1L << (XMLPI - 330)) | (1L << (XMLROOT - 330)) | (1L << (XMLSERIALIZE - 330)) | (1L << (TREAT - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (GREATEST - 330)) | (1L << (LEAST - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (ILIKE - 330)) | (1L << (SIMILAR - 330)) | (1L << (ISNULL - 330)) | (1L << (NOTNULL - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (FREEZE - 524)) | (1L << (AUTHORIZATION - 524)) | (1L << (VERBOSE - 524)) | (1L << (PARAM - 524)) | (1L << (IDENTIFIER_ - 524)) | (1L << (STRING_ - 524)) | (1L << (NUMBER_ - 524)))) != 0)) {
					{
					setState(3139);
					sliceBound();
					}
				}

				setState(3142);
				match(RBT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SliceBoundContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SliceBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sliceBound; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSliceBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SliceBoundContext sliceBound() throws RecognitionException {
		SliceBoundContext _localctx = new SliceBoundContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_sliceBound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3145);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InExprContext extends ParserRuleContext {
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public InExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitInExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InExprContext inExpr() throws RecognitionException {
		InExprContext _localctx = new InExprContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_inExpr);
		try {
			setState(3152);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3147);
				selectWithParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3148);
				match(LP_);
				setState(3149);
				exprList(0);
				setState(3150);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PostgreSQLStatementParser.CASE, 0); }
		public WhenClauseListContext whenClauseList() {
			return getRuleContext(WhenClauseListContext.class,0);
		}
		public TerminalNode END() { return getToken(PostgreSQLStatementParser.END, 0); }
		public CaseArgContext caseArg() {
			return getRuleContext(CaseArgContext.class,0);
		}
		public CaseDefaultContext caseDefault() {
			return getRuleContext(CaseDefaultContext.class,0);
		}
		public CaseExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCaseExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprContext caseExpr() throws RecognitionException {
		CaseExprContext _localctx = new CaseExprContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_caseExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3154);
			match(CASE);
			setState(3156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << LP_) | (1L << QUESTION_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (UNIQUE - 66)) | (1L << (KEY - 66)) | (1L << (POSITION - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (CASE - 66)) | (1L << (CAST - 66)) | (1L << (TRIM - 66)) | (1L << (SUBSTRING - 66)) | (1L << (NATURAL - 66)) | (1L << (JOIN - 66)) | (1L << (FULL - 66)) | (1L << (INNER - 66)) | (1L << (OUTER - 66)) | (1L << (LEFT - 66)) | (1L << (RIGHT - 66)) | (1L << (CROSS - 66)) | (1L << (IF - 66)) | (1L << (IS - 66)) | (1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (TRUE - 66)) | (1L << (FALSE - 66)) | (1L << (EXISTS - 66)) | (1L << (LIKE - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (ARRAY - 130)) | (1L << (LOCALTIME - 130)) | (1L << (LOCALTIMESTAMP - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (DEFAULT - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (CURRENT_USER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (COLLATION - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (CURRENT_DATE - 130)) | (1L << (CURRENT_TIME - 130)) | (1L << (CURRENT_TIMESTAMP - 130)) | (1L << (NULLIF - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (COALESCE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (GROUPING - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (OVERLAPS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (BINARY - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (ROW - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (USER - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONCURRENTLY - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SESSION_USER - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (TABLESAMPLE - 330)) | (1L << (ORDINALITY - 330)) | (1L << (CURRENT_ROLE - 330)) | (1L << (CURRENT_CATALOG - 330)) | (1L << (CURRENT_SCHEMA - 330)) | (1L << (NORMALIZE - 330)) | (1L << (OVERLAY - 330)) | (1L << (XMLCONCAT - 330)) | (1L << (XMLELEMENT - 330)) | (1L << (XMLEXISTS - 330)) | (1L << (XMLFOREST - 330)) | (1L << (XMLPARSE - 330)) | (1L << (XMLPI - 330)) | (1L << (XMLROOT - 330)) | (1L << (XMLSERIALIZE - 330)) | (1L << (TREAT - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (GREATEST - 330)) | (1L << (LEAST - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (ILIKE - 330)) | (1L << (SIMILAR - 330)) | (1L << (ISNULL - 330)) | (1L << (NOTNULL - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (FREEZE - 524)) | (1L << (AUTHORIZATION - 524)) | (1L << (VERBOSE - 524)) | (1L << (PARAM - 524)) | (1L << (IDENTIFIER_ - 524)) | (1L << (STRING_ - 524)) | (1L << (NUMBER_ - 524)))) != 0)) {
				{
				setState(3155);
				caseArg();
				}
			}

			setState(3158);
			whenClauseList();
			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3159);
				caseDefault();
				}
			}

			setState(3162);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseListContext extends ParserRuleContext {
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public WhenClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClauseList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWhenClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseListContext whenClauseList() throws RecognitionException {
		WhenClauseListContext _localctx = new WhenClauseListContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_whenClauseList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3165); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3164);
				whenClause();
				}
				}
				setState(3167); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLStatementParser.WHEN, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLStatementParser.THEN, 0); }
		public WhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseContext whenClause() throws RecognitionException {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_whenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3169);
			match(WHEN);
			setState(3170);
			aExpr(0);
			setState(3171);
			match(THEN);
			setState(3172);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseDefaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLStatementParser.ELSE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseDefault; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCaseDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseDefaultContext caseDefault() throws RecognitionException {
		CaseDefaultContext _localctx = new CaseDefaultContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_caseDefault);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3174);
			match(ELSE);
			setState(3175);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseArgContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public CaseArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCaseArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseArgContext caseArg() throws RecognitionException {
		CaseArgContext _localctx = new CaseArgContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_caseArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3177);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_columnref);
		try {
			setState(3183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3179);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3180);
				colId();
				setState(3181);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualOpContext extends ParserRuleContext {
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public TerminalNode TILDE_TILDE_() { return getToken(PostgreSQLStatementParser.TILDE_TILDE_, 0); }
		public TerminalNode NOT_TILDE_TILDE_() { return getToken(PostgreSQLStatementParser.NOT_TILDE_TILDE_, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public QualOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualOp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitQualOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualOpContext qualOp() throws RecognitionException {
		QualOpContext _localctx = new QualOpContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_qualOp);
		try {
			setState(3193);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3185);
				mathOperator();
				}
				break;
			case TILDE_TILDE_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3186);
				match(TILDE_TILDE_);
				}
				break;
			case NOT_TILDE_TILDE_:
				enterOuterAlt(_localctx, 3);
				{
				setState(3187);
				match(NOT_TILDE_TILDE_);
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 4);
				{
				setState(3188);
				match(OPERATOR);
				setState(3189);
				match(LP_);
				setState(3190);
				anyOperator();
				setState(3191);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryOpContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLStatementParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLStatementParser.ILIKE, 0); }
		public SubqueryOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subqueryOp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSubqueryOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryOpContext subqueryOp() throws RecognitionException {
		SubqueryOpContext _localctx = new SubqueryOpContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_subqueryOp);
		try {
			setState(3207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3195);
				allOp();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3196);
				match(OPERATOR);
				setState(3197);
				match(LP_);
				setState(3198);
				anyOperator();
				setState(3199);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3201);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3202);
				match(NOT);
				setState(3203);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3204);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3205);
				match(NOT);
				setState(3206);
				match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOpContext extends ParserRuleContext {
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public AllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOpContext allOp() throws RecognitionException {
		AllOpContext _localctx = new AllOpContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_allOp);
		try {
			setState(3211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3209);
				op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3210);
				mathOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpContext extends ParserRuleContext {
		public List<TerminalNode> AND_() { return getTokens(PostgreSQLStatementParser.AND_); }
		public TerminalNode AND_(int i) {
			return getToken(PostgreSQLStatementParser.AND_, i);
		}
		public List<TerminalNode> OR_() { return getTokens(PostgreSQLStatementParser.OR_); }
		public TerminalNode OR_(int i) {
			return getToken(PostgreSQLStatementParser.OR_, i);
		}
		public List<TerminalNode> NOT_() { return getTokens(PostgreSQLStatementParser.NOT_); }
		public TerminalNode NOT_(int i) {
			return getToken(PostgreSQLStatementParser.NOT_, i);
		}
		public List<TerminalNode> TILDE_() { return getTokens(PostgreSQLStatementParser.TILDE_); }
		public TerminalNode TILDE_(int i) {
			return getToken(PostgreSQLStatementParser.TILDE_, i);
		}
		public List<TerminalNode> VERTICAL_BAR_() { return getTokens(PostgreSQLStatementParser.VERTICAL_BAR_); }
		public TerminalNode VERTICAL_BAR_(int i) {
			return getToken(PostgreSQLStatementParser.VERTICAL_BAR_, i);
		}
		public List<TerminalNode> AMPERSAND_() { return getTokens(PostgreSQLStatementParser.AMPERSAND_); }
		public TerminalNode AMPERSAND_(int i) {
			return getToken(PostgreSQLStatementParser.AMPERSAND_, i);
		}
		public List<TerminalNode> SIGNED_LEFT_SHIFT_() { return getTokens(PostgreSQLStatementParser.SIGNED_LEFT_SHIFT_); }
		public TerminalNode SIGNED_LEFT_SHIFT_(int i) {
			return getToken(PostgreSQLStatementParser.SIGNED_LEFT_SHIFT_, i);
		}
		public List<TerminalNode> SIGNED_RIGHT_SHIFT_() { return getTokens(PostgreSQLStatementParser.SIGNED_RIGHT_SHIFT_); }
		public TerminalNode SIGNED_RIGHT_SHIFT_(int i) {
			return getToken(PostgreSQLStatementParser.SIGNED_RIGHT_SHIFT_, i);
		}
		public List<TerminalNode> CARET_() { return getTokens(PostgreSQLStatementParser.CARET_); }
		public TerminalNode CARET_(int i) {
			return getToken(PostgreSQLStatementParser.CARET_, i);
		}
		public List<TerminalNode> MOD_() { return getTokens(PostgreSQLStatementParser.MOD_); }
		public TerminalNode MOD_(int i) {
			return getToken(PostgreSQLStatementParser.MOD_, i);
		}
		public List<TerminalNode> COLON_() { return getTokens(PostgreSQLStatementParser.COLON_); }
		public TerminalNode COLON_(int i) {
			return getToken(PostgreSQLStatementParser.COLON_, i);
		}
		public List<TerminalNode> PLUS_() { return getTokens(PostgreSQLStatementParser.PLUS_); }
		public TerminalNode PLUS_(int i) {
			return getToken(PostgreSQLStatementParser.PLUS_, i);
		}
		public List<TerminalNode> MINUS_() { return getTokens(PostgreSQLStatementParser.MINUS_); }
		public TerminalNode MINUS_(int i) {
			return getToken(PostgreSQLStatementParser.MINUS_, i);
		}
		public List<TerminalNode> ASTERISK_() { return getTokens(PostgreSQLStatementParser.ASTERISK_); }
		public TerminalNode ASTERISK_(int i) {
			return getToken(PostgreSQLStatementParser.ASTERISK_, i);
		}
		public List<TerminalNode> SLASH_() { return getTokens(PostgreSQLStatementParser.SLASH_); }
		public TerminalNode SLASH_(int i) {
			return getToken(PostgreSQLStatementParser.SLASH_, i);
		}
		public List<TerminalNode> BACKSLASH_() { return getTokens(PostgreSQLStatementParser.BACKSLASH_); }
		public TerminalNode BACKSLASH_(int i) {
			return getToken(PostgreSQLStatementParser.BACKSLASH_, i);
		}
		public List<TerminalNode> DOT_() { return getTokens(PostgreSQLStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(PostgreSQLStatementParser.DOT_, i);
		}
		public List<TerminalNode> DOT_ASTERISK_() { return getTokens(PostgreSQLStatementParser.DOT_ASTERISK_); }
		public TerminalNode DOT_ASTERISK_(int i) {
			return getToken(PostgreSQLStatementParser.DOT_ASTERISK_, i);
		}
		public List<TerminalNode> SAFE_EQ_() { return getTokens(PostgreSQLStatementParser.SAFE_EQ_); }
		public TerminalNode SAFE_EQ_(int i) {
			return getToken(PostgreSQLStatementParser.SAFE_EQ_, i);
		}
		public List<TerminalNode> DEQ_() { return getTokens(PostgreSQLStatementParser.DEQ_); }
		public TerminalNode DEQ_(int i) {
			return getToken(PostgreSQLStatementParser.DEQ_, i);
		}
		public List<TerminalNode> EQ_() { return getTokens(PostgreSQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(PostgreSQLStatementParser.EQ_, i);
		}
		public List<TerminalNode> CQ_() { return getTokens(PostgreSQLStatementParser.CQ_); }
		public TerminalNode CQ_(int i) {
			return getToken(PostgreSQLStatementParser.CQ_, i);
		}
		public List<TerminalNode> NEQ_() { return getTokens(PostgreSQLStatementParser.NEQ_); }
		public TerminalNode NEQ_(int i) {
			return getToken(PostgreSQLStatementParser.NEQ_, i);
		}
		public List<TerminalNode> GT_() { return getTokens(PostgreSQLStatementParser.GT_); }
		public TerminalNode GT_(int i) {
			return getToken(PostgreSQLStatementParser.GT_, i);
		}
		public List<TerminalNode> GTE_() { return getTokens(PostgreSQLStatementParser.GTE_); }
		public TerminalNode GTE_(int i) {
			return getToken(PostgreSQLStatementParser.GTE_, i);
		}
		public List<TerminalNode> LT_() { return getTokens(PostgreSQLStatementParser.LT_); }
		public TerminalNode LT_(int i) {
			return getToken(PostgreSQLStatementParser.LT_, i);
		}
		public List<TerminalNode> LTE_() { return getTokens(PostgreSQLStatementParser.LTE_); }
		public TerminalNode LTE_(int i) {
			return getToken(PostgreSQLStatementParser.LTE_, i);
		}
		public List<TerminalNode> POUND_() { return getTokens(PostgreSQLStatementParser.POUND_); }
		public TerminalNode POUND_(int i) {
			return getToken(PostgreSQLStatementParser.POUND_, i);
		}
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public List<TerminalNode> LBE_() { return getTokens(PostgreSQLStatementParser.LBE_); }
		public TerminalNode LBE_(int i) {
			return getToken(PostgreSQLStatementParser.LBE_, i);
		}
		public List<TerminalNode> RBE_() { return getTokens(PostgreSQLStatementParser.RBE_); }
		public TerminalNode RBE_(int i) {
			return getToken(PostgreSQLStatementParser.RBE_, i);
		}
		public List<TerminalNode> LBT_() { return getTokens(PostgreSQLStatementParser.LBT_); }
		public TerminalNode LBT_(int i) {
			return getToken(PostgreSQLStatementParser.LBT_, i);
		}
		public List<TerminalNode> RBT_() { return getTokens(PostgreSQLStatementParser.RBT_); }
		public TerminalNode RBT_(int i) {
			return getToken(PostgreSQLStatementParser.RBT_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public List<TerminalNode> DQ_() { return getTokens(PostgreSQLStatementParser.DQ_); }
		public TerminalNode DQ_(int i) {
			return getToken(PostgreSQLStatementParser.DQ_, i);
		}
		public List<TerminalNode> SQ_() { return getTokens(PostgreSQLStatementParser.SQ_); }
		public TerminalNode SQ_(int i) {
			return getToken(PostgreSQLStatementParser.SQ_, i);
		}
		public List<TerminalNode> BQ_() { return getTokens(PostgreSQLStatementParser.BQ_); }
		public TerminalNode BQ_(int i) {
			return getToken(PostgreSQLStatementParser.BQ_, i);
		}
		public List<TerminalNode> QUESTION_() { return getTokens(PostgreSQLStatementParser.QUESTION_); }
		public TerminalNode QUESTION_(int i) {
			return getToken(PostgreSQLStatementParser.QUESTION_, i);
		}
		public List<TerminalNode> AT_() { return getTokens(PostgreSQLStatementParser.AT_); }
		public TerminalNode AT_(int i) {
			return getToken(PostgreSQLStatementParser.AT_, i);
		}
		public List<TerminalNode> SEMI_() { return getTokens(PostgreSQLStatementParser.SEMI_); }
		public TerminalNode SEMI_(int i) {
			return getToken(PostgreSQLStatementParser.SEMI_, i);
		}
		public List<TerminalNode> TILDE_TILDE_() { return getTokens(PostgreSQLStatementParser.TILDE_TILDE_); }
		public TerminalNode TILDE_TILDE_(int i) {
			return getToken(PostgreSQLStatementParser.TILDE_TILDE_, i);
		}
		public List<TerminalNode> NOT_TILDE_TILDE_() { return getTokens(PostgreSQLStatementParser.NOT_TILDE_TILDE_); }
		public TerminalNode NOT_TILDE_TILDE_(int i) {
			return getToken(PostgreSQLStatementParser.NOT_TILDE_TILDE_, i);
		}
		public List<TerminalNode> TYPE_CAST_() { return getTokens(PostgreSQLStatementParser.TYPE_CAST_); }
		public TerminalNode TYPE_CAST_(int i) {
			return getToken(PostgreSQLStatementParser.TYPE_CAST_, i);
		}
		public OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_op; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpContext op() throws RecognitionException {
		OpContext _localctx = new OpContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_op);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3214); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3213);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND_) | (1L << OR_) | (1L << NOT_) | (1L << TILDE_) | (1L << VERTICAL_BAR_) | (1L << AMPERSAND_) | (1L << SIGNED_LEFT_SHIFT_) | (1L << SIGNED_RIGHT_SHIFT_) | (1L << CARET_) | (1L << MOD_) | (1L << COLON_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << BACKSLASH_) | (1L << DOT_) | (1L << DOT_ASTERISK_) | (1L << SAFE_EQ_) | (1L << DEQ_) | (1L << EQ_) | (1L << CQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << POUND_) | (1L << LP_) | (1L << RP_) | (1L << LBE_) | (1L << RBE_) | (1L << LBT_) | (1L << RBT_) | (1L << COMMA_) | (1L << DQ_) | (1L << SQ_) | (1L << BQ_) | (1L << QUESTION_) | (1L << AT_) | (1L << SEMI_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << TYPE_CAST_))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3216); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(PostgreSQLStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(PostgreSQLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(PostgreSQLStatementParser.CARET_, 0); }
		public TerminalNode LT_() { return getToken(PostgreSQLStatementParser.LT_, 0); }
		public TerminalNode GT_() { return getToken(PostgreSQLStatementParser.GT_, 0); }
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public TerminalNode LTE_() { return getToken(PostgreSQLStatementParser.LTE_, 0); }
		public TerminalNode GTE_() { return getToken(PostgreSQLStatementParser.GTE_, 0); }
		public TerminalNode NEQ_() { return getToken(PostgreSQLStatementParser.NEQ_, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3218);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualAllOpContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public QualAllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualAllOp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitQualAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualAllOpContext qualAllOp() throws RecognitionException {
		QualAllOpContext _localctx = new QualAllOpContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_qualAllOp);
		try {
			setState(3226);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3220);
				allOp();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3221);
				match(OPERATOR);
				setState(3222);
				match(LP_);
				setState(3223);
				anyOperator();
				setState(3224);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AscDescContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(PostgreSQLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLStatementParser.DESC, 0); }
		public AscDescContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascDesc; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAscDesc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AscDescContext ascDesc() throws RecognitionException {
		AscDescContext _localctx = new AscDescContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_ascDesc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3228);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyOperatorContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public AnyOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAnyOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyOperatorContext anyOperator() throws RecognitionException {
		AnyOperatorContext _localctx = new AnyOperatorContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_anyOperator);
		try {
			setState(3235);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3230);
				allOp();
				}
				break;
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3231);
				colId();
				setState(3232);
				match(DOT_);
				setState(3233);
				anyOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowExclusionClauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLStatementParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLStatementParser.TIES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLStatementParser.OTHERS, 0); }
		public WindowExclusionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowExclusionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWindowExclusionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowExclusionClauseContext windowExclusionClause() throws RecognitionException {
		WindowExclusionClauseContext _localctx = new WindowExclusionClauseContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_windowExclusionClause);
		try {
			setState(3247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3237);
				match(EXCLUDE);
				setState(3238);
				match(CURRENT);
				setState(3239);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3240);
				match(EXCLUDE);
				setState(3241);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3242);
				match(EXCLUDE);
				setState(3243);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3244);
				match(EXCLUDE);
				setState(3245);
				match(NO);
				setState(3246);
				match(OTHERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_row);
		try {
			setState(3263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3249);
				match(ROW);
				setState(3250);
				match(LP_);
				setState(3251);
				exprList(0);
				setState(3252);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3254);
				match(ROW);
				setState(3255);
				match(LP_);
				setState(3256);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3257);
				match(LP_);
				setState(3258);
				exprList(0);
				setState(3259);
				match(COMMA_);
				setState(3260);
				aExpr(0);
				setState(3261);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplicitRowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExplicitRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicitRow; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExplicitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplicitRowContext explicitRow() throws RecognitionException {
		ExplicitRowContext _localctx = new ExplicitRowContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_explicitRow);
		try {
			setState(3273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3265);
				match(ROW);
				setState(3266);
				match(LP_);
				setState(3267);
				exprList(0);
				setState(3268);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3270);
				match(ROW);
				setState(3271);
				match(LP_);
				setState(3272);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImplicitRowContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ImplicitRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicitRow; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitImplicitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImplicitRowContext implicitRow() throws RecognitionException {
		ImplicitRowContext _localctx = new ImplicitRowContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_implicitRow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3275);
			match(LP_);
			setState(3276);
			exprList(0);
			setState(3277);
			match(COMMA_);
			setState(3278);
			aExpr(0);
			setState(3279);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubTypeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(PostgreSQLStatementParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLStatementParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public SubTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSubType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubTypeContext subType() throws RecognitionException {
		SubTypeContext _localctx = new SubTypeContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_subType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3281);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExprContext extends ParserRuleContext {
		public TerminalNode LBT_() { return getToken(PostgreSQLStatementParser.LBT_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RBT_() { return getToken(PostgreSQLStatementParser.RBT_, 0); }
		public ArrayExprListContext arrayExprList() {
			return getRuleContext(ArrayExprListContext.class,0);
		}
		public ArrayExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitArrayExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprContext arrayExpr() throws RecognitionException {
		ArrayExprContext _localctx = new ArrayExprContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_arrayExpr);
		try {
			setState(3293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3283);
				match(LBT_);
				setState(3284);
				exprList(0);
				setState(3285);
				match(RBT_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3287);
				match(LBT_);
				setState(3288);
				arrayExprList();
				setState(3289);
				match(RBT_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3291);
				match(LBT_);
				setState(3292);
				match(RBT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExprListContext extends ParserRuleContext {
		public List<ArrayExprContext> arrayExpr() {
			return getRuleContexts(ArrayExprContext.class);
		}
		public ArrayExprContext arrayExpr(int i) {
			return getRuleContext(ArrayExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ArrayExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExprList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitArrayExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprListContext arrayExprList() throws RecognitionException {
		ArrayExprListContext _localctx = new ArrayExprListContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_arrayExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3295);
			arrayExpr();
			setState(3300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3296);
				match(COMMA_);
				setState(3297);
				arrayExpr();
				}
				}
				setState(3302);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgListContext extends ParserRuleContext {
		public List<FuncArgExprContext> funcArgExpr() {
			return getRuleContexts(FuncArgExprContext.class);
		}
		public FuncArgExprContext funcArgExpr(int i) {
			return getRuleContext(FuncArgExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public FuncArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncArgList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgListContext funcArgList() throws RecognitionException {
		FuncArgListContext _localctx = new FuncArgListContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_funcArgList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3303);
			funcArgExpr();
			setState(3308);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,206,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3304);
					match(COMMA_);
					setState(3305);
					funcArgExpr();
					}
					} 
				}
				setState(3310);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,206,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamNameContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public ParamNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paramName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitParamName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamNameContext paramName() throws RecognitionException {
		ParamNameContext _localctx = new ParamNameContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_paramName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3311);
			typeFunctionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgExprContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public TerminalNode CQ_() { return getToken(PostgreSQLStatementParser.CQ_, 0); }
		public TerminalNode GTE_() { return getToken(PostgreSQLStatementParser.GTE_, 0); }
		public FuncArgExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncArgExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgExprContext funcArgExpr() throws RecognitionException {
		FuncArgExprContext _localctx = new FuncArgExprContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_funcArgExpr);
		try {
			setState(3322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3313);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3314);
				paramName();
				setState(3315);
				match(CQ_);
				setState(3316);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3318);
				paramName();
				setState(3319);
				match(GTE_);
				setState(3320);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeListContext extends ParserRuleContext {
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeListContext typeList() throws RecognitionException {
		TypeListContext _localctx = new TypeListContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_typeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3324);
			typeName();
			setState(3329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3325);
				match(COMMA_);
				setState(3326);
				typeName();
				}
				}
				setState(3331);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncApplicationContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(PostgreSQLStatementParser.VARIADIC, 0); }
		public FuncArgExprContext funcArgExpr() {
			return getRuleContext(FuncArgExprContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public FuncApplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcApplication; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncApplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncApplicationContext funcApplication() throws RecognitionException {
		FuncApplicationContext _localctx = new FuncApplicationContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_funcApplication);
		int _la;
		try {
			setState(3387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3332);
				funcName();
				setState(3333);
				match(LP_);
				setState(3334);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3336);
				funcName();
				setState(3337);
				match(LP_);
				setState(3338);
				funcArgList();
				setState(3340);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3339);
					sortClause();
					}
				}

				setState(3342);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3344);
				funcName();
				setState(3345);
				match(LP_);
				setState(3346);
				match(VARIADIC);
				setState(3347);
				funcArgExpr();
				setState(3349);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3348);
					sortClause();
					}
				}

				setState(3351);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3353);
				funcName();
				setState(3354);
				match(LP_);
				setState(3355);
				funcArgList();
				setState(3356);
				match(COMMA_);
				setState(3357);
				match(VARIADIC);
				setState(3358);
				funcArgExpr();
				setState(3360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3359);
					sortClause();
					}
				}

				setState(3362);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3364);
				funcName();
				setState(3365);
				match(LP_);
				setState(3366);
				match(ALL);
				setState(3367);
				funcArgList();
				setState(3369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3368);
					sortClause();
					}
				}

				setState(3371);
				match(RP_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3373);
				funcName();
				setState(3374);
				match(LP_);
				setState(3375);
				match(DISTINCT);
				setState(3376);
				funcArgList();
				setState(3378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3377);
					sortClause();
					}
				}

				setState(3380);
				match(RP_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3382);
				funcName();
				setState(3383);
				match(LP_);
				setState(3384);
				match(ASTERISK_);
				setState(3385);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncNameContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public FuncNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncNameContext funcName() throws RecognitionException {
		FuncNameContext _localctx = new FuncNameContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_funcName);
		try {
			setState(3393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3389);
				typeFunctionName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3390);
				colId();
				setState(3391);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprConstContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode TRUE() { return getToken(PostgreSQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLStatementParser.FALSE, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public AexprConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprConst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAexprConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprConstContext aexprConst() throws RecognitionException {
		AexprConstContext _localctx = new AexprConstContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_aexprConst);
		int _la;
		try {
			setState(3412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3395);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3396);
				match(STRING_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3397);
				funcName();
				setState(3398);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3400);
				funcName();
				setState(3401);
				match(LP_);
				setState(3402);
				funcArgList();
				setState(3404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3403);
					sortClause();
					}
				}

				setState(3406);
				match(RP_);
				setState(3407);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3409);
				match(TRUE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3410);
				match(FALSE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3411);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColIdContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColIdContext colId() throws RecognitionException {
		ColIdContext _localctx = new ColIdContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_colId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3414);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeFunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public TypeFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeFunctionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTypeFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeFunctionNameContext typeFunctionName() throws RecognitionException {
		TypeFunctionNameContext _localctx = new TypeFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_typeFunctionName);
		try {
			setState(3419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3416);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3417);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3418);
				typeFuncNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTableContext extends ParserRuleContext {
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public OrdinalityContext ordinality() {
			return getRuleContext(OrdinalityContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public RowsFromListContext rowsFromList() {
			return getRuleContext(RowsFromListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FunctionTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFunctionTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableContext functionTable() throws RecognitionException {
		FunctionTableContext _localctx = new FunctionTableContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_functionTable);
		try {
			setState(3433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3421);
				functionExprWindowless();
				setState(3423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
				case 1:
					{
					setState(3422);
					ordinality();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3425);
				match(ROWS);
				setState(3426);
				match(FROM);
				setState(3427);
				match(LP_);
				setState(3428);
				rowsFromList();
				setState(3429);
				match(RP_);
				setState(3431);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					setState(3430);
					ordinality();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLStatementParser.XMLTABLE, 0); }
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public XmlExistsArgumentContext xmlExistsArgument() {
			return getRuleContext(XmlExistsArgumentContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PostgreSQLStatementParser.COLUMNS, 0); }
		public XmlTableColumnListContext xmlTableColumnList() {
			return getRuleContext(XmlTableColumnListContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLStatementParser.XMLNAMESPACES, 0); }
		public XmlNamespaceListContext xmlNamespaceList() {
			return getRuleContext(XmlNamespaceListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public XmlTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableContext xmlTable() throws RecognitionException {
		XmlTableContext _localctx = new XmlTableContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_xmlTable);
		try {
			setState(3456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3435);
				match(XMLTABLE);
				setState(3436);
				match(LP_);
				setState(3437);
				cExpr();
				setState(3438);
				xmlExistsArgument();
				setState(3439);
				match(COLUMNS);
				setState(3440);
				xmlTableColumnList();
				setState(3441);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3443);
				match(XMLTABLE);
				setState(3444);
				match(LP_);
				setState(3445);
				match(XMLNAMESPACES);
				setState(3446);
				match(LP_);
				setState(3447);
				xmlNamespaceList();
				setState(3448);
				match(RP_);
				setState(3449);
				match(COMMA_);
				setState(3450);
				cExpr();
				setState(3451);
				xmlExistsArgument();
				setState(3452);
				match(COLUMNS);
				setState(3453);
				xmlTableColumnList();
				setState(3454);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnListContext extends ParserRuleContext {
		public List<XmlTableColumnElContext> xmlTableColumnEl() {
			return getRuleContexts(XmlTableColumnElContext.class);
		}
		public XmlTableColumnElContext xmlTableColumnEl(int i) {
			return getRuleContext(XmlTableColumnElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public XmlTableColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlTableColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnListContext xmlTableColumnList() throws RecognitionException {
		XmlTableColumnListContext _localctx = new XmlTableColumnListContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_xmlTableColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3458);
			xmlTableColumnEl();
			setState(3463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3459);
				match(COMMA_);
				setState(3460);
				xmlTableColumnEl();
				}
				}
				setState(3465);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnElContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public XmlTableColumnOptionListContext xmlTableColumnOptionList() {
			return getRuleContext(XmlTableColumnOptionListContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLStatementParser.ORDINALITY, 0); }
		public XmlTableColumnElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnEl; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlTableColumnEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnElContext xmlTableColumnEl() throws RecognitionException {
		XmlTableColumnElContext _localctx = new XmlTableColumnElContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_xmlTableColumnEl);
		try {
			setState(3477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3466);
				colId();
				setState(3467);
				typeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3469);
				colId();
				setState(3470);
				typeName();
				setState(3471);
				xmlTableColumnOptionList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3473);
				colId();
				setState(3474);
				match(FOR);
				setState(3475);
				match(ORDINALITY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnOptionListContext extends ParserRuleContext {
		public XmlTableColumnOptionElContext xmlTableColumnOptionEl() {
			return getRuleContext(XmlTableColumnOptionElContext.class,0);
		}
		public XmlTableColumnOptionListContext xmlTableColumnOptionList() {
			return getRuleContext(XmlTableColumnOptionListContext.class,0);
		}
		public XmlTableColumnOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlTableColumnOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnOptionListContext xmlTableColumnOptionList() throws RecognitionException {
		return xmlTableColumnOptionList(0);
	}

	private XmlTableColumnOptionListContext xmlTableColumnOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		XmlTableColumnOptionListContext _localctx = new XmlTableColumnOptionListContext(_ctx, _parentState);
		XmlTableColumnOptionListContext _prevctx = _localctx;
		int _startState = 324;
		enterRecursionRule(_localctx, 324, RULE_xmlTableColumnOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3480);
			xmlTableColumnOptionEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(3486);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new XmlTableColumnOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xmlTableColumnOptionList);
					setState(3482);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3483);
					xmlTableColumnOptionEl();
					}
					} 
				}
				setState(3488);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class XmlTableColumnOptionElContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public XmlTableColumnOptionElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnOptionEl; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlTableColumnOptionEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnOptionElContext xmlTableColumnOptionEl() throws RecognitionException {
		XmlTableColumnOptionElContext _localctx = new XmlTableColumnOptionElContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_xmlTableColumnOptionEl);
		try {
			setState(3497);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3489);
				identifier();
				setState(3490);
				bExpr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3492);
				match(DEFAULT);
				setState(3493);
				bExpr(0);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3494);
				match(NOT);
				setState(3495);
				match(NULL);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3496);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlNamespaceListContext extends ParserRuleContext {
		public List<XmlNamespaceElContext> xmlNamespaceEl() {
			return getRuleContexts(XmlNamespaceElContext.class);
		}
		public XmlNamespaceElContext xmlNamespaceEl(int i) {
			return getRuleContext(XmlNamespaceElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public XmlNamespaceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlNamespaceList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceListContext xmlNamespaceList() throws RecognitionException {
		XmlNamespaceListContext _localctx = new XmlNamespaceListContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_xmlNamespaceList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3499);
			xmlNamespaceEl();
			setState(3504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3500);
				match(COMMA_);
				setState(3501);
				xmlNamespaceEl();
				}
				}
				setState(3506);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlNamespaceElContext extends ParserRuleContext {
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public XmlNamespaceElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceEl; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlNamespaceEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceElContext xmlNamespaceEl() throws RecognitionException {
		XmlNamespaceElContext _localctx = new XmlNamespaceElContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_xmlNamespaceEl);
		try {
			setState(3513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3507);
				bExpr(0);
				setState(3508);
				match(AS);
				setState(3509);
				identifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3511);
				match(DEFAULT);
				setState(3512);
				bExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncExprContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public WithinGroupClauseContext withinGroupClause() {
			return getRuleContext(WithinGroupClauseContext.class,0);
		}
		public FilterClauseContext filterClause() {
			return getRuleContext(FilterClauseContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FuncExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncExprContext funcExpr() throws RecognitionException {
		FuncExprContext _localctx = new FuncExprContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_funcExpr);
		try {
			setState(3526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3515);
				funcApplication();
				setState(3517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
				case 1:
					{
					setState(3516);
					withinGroupClause();
					}
					break;
				}
				setState(3520);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					setState(3519);
					filterClause();
					}
					break;
				}
				setState(3523);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					setState(3522);
					overClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3525);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithinGroupClauseContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PostgreSQLStatementParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public WithinGroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withinGroupClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWithinGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithinGroupClauseContext withinGroupClause() throws RecognitionException {
		WithinGroupClauseContext _localctx = new WithinGroupClauseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_withinGroupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3528);
			match(WITHIN);
			setState(3529);
			match(GROUP);
			setState(3530);
			match(LP_);
			setState(3531);
			sortClause();
			setState(3532);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterClauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(PostgreSQLStatementParser.FILTER, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FilterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFilterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterClauseContext filterClause() throws RecognitionException {
		FilterClauseContext _localctx = new FilterClauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_filterClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3534);
			match(FILTER);
			setState(3535);
			match(LP_);
			setState(3536);
			match(WHERE);
			setState(3537);
			aExpr(0);
			setState(3538);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionExprWindowlessContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FunctionExprWindowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionExprWindowless; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFunctionExprWindowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionExprWindowlessContext functionExprWindowless() throws RecognitionException {
		FunctionExprWindowlessContext _localctx = new FunctionExprWindowlessContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_functionExprWindowless);
		try {
			setState(3542);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3540);
				funcApplication();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3541);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrdinalityContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLStatementParser.ORDINALITY, 0); }
		public OrdinalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinality; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOrdinality(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrdinalityContext ordinality() throws RecognitionException {
		OrdinalityContext _localctx = new OrdinalityContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_ordinality);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3544);
			match(WITH);
			setState(3545);
			match(ORDINALITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionExprCommonSubexprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLStatementParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLStatementParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(PostgreSQLStatementParser.EXTRACT, 0); }
		public ExtractListContext extractList() {
			return getRuleContext(ExtractListContext.class,0);
		}
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLStatementParser.NORMALIZE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public UnicodeNormalFormContext unicodeNormalForm() {
			return getRuleContext(UnicodeNormalFormContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(PostgreSQLStatementParser.OVERLAY, 0); }
		public OverlayListContext overlayList() {
			return getRuleContext(OverlayListContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(PostgreSQLStatementParser.POSITION, 0); }
		public PositionListContext positionList() {
			return getRuleContext(PositionListContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLStatementParser.SUBSTRING, 0); }
		public SubstrListContext substrList() {
			return getRuleContext(SubstrListContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(PostgreSQLStatementParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLStatementParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLStatementParser.BOTH, 0); }
		public TrimListContext trimList() {
			return getRuleContext(TrimListContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(PostgreSQLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLStatementParser.TRAILING, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLStatementParser.NULLIF, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLStatementParser.COALESCE, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PostgreSQLStatementParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLStatementParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLStatementParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLStatementParser.XMLELEMENT, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLStatementParser.NAME, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlAttributesContext xmlAttributes() {
			return getRuleContext(XmlAttributesContext.class,0);
		}
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLStatementParser.XMLEXISTS, 0); }
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public XmlExistsArgumentContext xmlExistsArgument() {
			return getRuleContext(XmlExistsArgumentContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLStatementParser.XMLFOREST, 0); }
		public XmlAttributeListContext xmlAttributeList() {
			return getRuleContext(XmlAttributeListContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLStatementParser.XMLPARSE, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public XmlWhitespaceOptionContext xmlWhitespaceOption() {
			return getRuleContext(XmlWhitespaceOptionContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(PostgreSQLStatementParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLStatementParser.XMLROOT, 0); }
		public XmlRootVersionContext xmlRootVersion() {
			return getRuleContext(XmlRootVersionContext.class,0);
		}
		public XmlRootStandaloneContext xmlRootStandalone() {
			return getRuleContext(XmlRootStandaloneContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLStatementParser.XMLSERIALIZE, 0); }
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public FunctionExprCommonSubexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionExprCommonSubexpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFunctionExprCommonSubexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionExprCommonSubexprContext functionExprCommonSubexpr() throws RecognitionException {
		FunctionExprCommonSubexprContext _localctx = new FunctionExprCommonSubexprContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_functionExprCommonSubexpr);
		int _la;
		try {
			setState(3759);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3547);
				match(COLLATION);
				setState(3548);
				match(FOR);
				setState(3549);
				match(LP_);
				setState(3550);
				aExpr(0);
				setState(3551);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3553);
				match(CURRENT_DATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3554);
				match(CURRENT_TIME);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3555);
				match(CURRENT_TIME);
				setState(3556);
				match(LP_);
				setState(3557);
				match(NUMBER_);
				setState(3558);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3559);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3560);
				match(CURRENT_TIMESTAMP);
				setState(3561);
				match(LP_);
				setState(3562);
				match(NUMBER_);
				setState(3563);
				match(RP_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3564);
				match(LOCALTIME);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3565);
				match(LOCALTIME);
				setState(3566);
				match(LP_);
				setState(3567);
				match(NUMBER_);
				setState(3568);
				match(RP_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3569);
				match(LOCALTIMESTAMP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3570);
				match(LOCALTIMESTAMP);
				setState(3571);
				match(LP_);
				setState(3572);
				match(NUMBER_);
				setState(3573);
				match(RP_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3574);
				match(CURRENT_ROLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3575);
				match(CURRENT_USER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3576);
				match(SESSION_USER);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3577);
				match(USER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3578);
				match(CURRENT_CATALOG);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3579);
				match(CURRENT_SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3580);
				match(CAST);
				setState(3581);
				match(LP_);
				setState(3582);
				aExpr(0);
				setState(3583);
				match(AS);
				setState(3584);
				typeName();
				setState(3585);
				match(RP_);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3587);
				match(EXTRACT);
				setState(3588);
				match(LP_);
				setState(3590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
					{
					setState(3589);
					extractList();
					}
				}

				setState(3592);
				match(RP_);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3593);
				match(NORMALIZE);
				setState(3594);
				match(LP_);
				setState(3595);
				aExpr(0);
				setState(3596);
				match(RP_);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3598);
				match(NORMALIZE);
				setState(3599);
				match(LP_);
				setState(3600);
				aExpr(0);
				setState(3601);
				match(COMMA_);
				setState(3602);
				unicodeNormalForm();
				setState(3603);
				match(RP_);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3605);
				match(OVERLAY);
				setState(3606);
				match(LP_);
				setState(3607);
				overlayList();
				setState(3608);
				match(RP_);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3610);
				match(POSITION);
				setState(3611);
				match(LP_);
				setState(3612);
				positionList();
				setState(3613);
				match(RP_);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3615);
				match(SUBSTRING);
				setState(3616);
				match(LP_);
				setState(3617);
				substrList();
				setState(3618);
				match(RP_);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3620);
				match(TREAT);
				setState(3621);
				match(LP_);
				setState(3622);
				aExpr(0);
				setState(3623);
				match(AS);
				setState(3624);
				typeName();
				setState(3625);
				match(RP_);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3627);
				match(TRIM);
				setState(3628);
				match(LP_);
				setState(3629);
				match(BOTH);
				setState(3630);
				trimList();
				setState(3631);
				match(RP_);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3633);
				match(TRIM);
				setState(3634);
				match(LP_);
				setState(3635);
				match(LEADING);
				setState(3636);
				trimList();
				setState(3637);
				match(RP_);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3639);
				match(TRIM);
				setState(3640);
				match(LP_);
				setState(3641);
				match(TRAILING);
				setState(3642);
				trimList();
				setState(3643);
				match(RP_);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3645);
				match(TRIM);
				setState(3646);
				match(LP_);
				setState(3647);
				trimList();
				setState(3648);
				match(RP_);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3650);
				match(NULLIF);
				setState(3651);
				match(LP_);
				setState(3652);
				aExpr(0);
				setState(3653);
				match(COMMA_);
				setState(3654);
				aExpr(0);
				setState(3655);
				match(RP_);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(3657);
				match(COALESCE);
				setState(3658);
				match(LP_);
				setState(3659);
				exprList(0);
				setState(3660);
				match(RP_);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(3662);
				match(GREATEST);
				setState(3663);
				match(LP_);
				setState(3664);
				exprList(0);
				setState(3665);
				match(RP_);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(3667);
				match(LEAST);
				setState(3668);
				match(LP_);
				setState(3669);
				exprList(0);
				setState(3670);
				match(RP_);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(3672);
				match(XMLCONCAT);
				setState(3673);
				match(LP_);
				setState(3674);
				exprList(0);
				setState(3675);
				match(RP_);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(3677);
				match(XMLELEMENT);
				setState(3678);
				match(LP_);
				setState(3679);
				match(NAME);
				setState(3680);
				identifier();
				setState(3681);
				match(RP_);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(3683);
				match(XMLELEMENT);
				setState(3684);
				match(LP_);
				setState(3685);
				match(NAME);
				setState(3686);
				identifier();
				setState(3687);
				match(COMMA_);
				setState(3688);
				xmlAttributes();
				setState(3689);
				match(RP_);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(3691);
				match(XMLELEMENT);
				setState(3692);
				match(LP_);
				setState(3693);
				match(NAME);
				setState(3694);
				identifier();
				setState(3695);
				match(COMMA_);
				setState(3696);
				exprList(0);
				setState(3697);
				match(RP_);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(3699);
				match(XMLELEMENT);
				setState(3700);
				match(LP_);
				setState(3701);
				match(NAME);
				setState(3702);
				identifier();
				setState(3703);
				match(COMMA_);
				setState(3704);
				xmlAttributes();
				setState(3705);
				match(COMMA_);
				setState(3706);
				exprList(0);
				setState(3707);
				match(RP_);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(3709);
				match(XMLEXISTS);
				setState(3710);
				match(LP_);
				setState(3711);
				cExpr();
				setState(3712);
				xmlExistsArgument();
				setState(3713);
				match(RP_);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(3715);
				match(XMLFOREST);
				setState(3716);
				match(LP_);
				setState(3717);
				xmlAttributeList();
				setState(3718);
				match(RP_);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(3720);
				match(XMLPARSE);
				setState(3721);
				match(LP_);
				setState(3722);
				documentOrContent();
				setState(3723);
				aExpr(0);
				setState(3724);
				xmlWhitespaceOption();
				setState(3725);
				match(RP_);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(3727);
				match(XMLPI);
				setState(3728);
				match(LP_);
				setState(3729);
				match(NAME);
				setState(3730);
				identifier();
				setState(3731);
				match(RP_);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(3733);
				match(XMLPI);
				setState(3734);
				match(LP_);
				setState(3735);
				match(NAME);
				setState(3736);
				identifier();
				setState(3737);
				match(COMMA_);
				setState(3738);
				aExpr(0);
				setState(3739);
				match(RP_);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(3741);
				match(XMLROOT);
				setState(3742);
				match(LP_);
				setState(3743);
				aExpr(0);
				setState(3744);
				match(COMMA_);
				setState(3745);
				xmlRootVersion();
				setState(3747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(3746);
					xmlRootStandalone();
					}
				}

				setState(3749);
				match(RP_);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(3751);
				match(XMLSERIALIZE);
				setState(3752);
				match(LP_);
				setState(3753);
				documentOrContent();
				setState(3754);
				aExpr(0);
				setState(3755);
				match(AS);
				setState(3756);
				simpleTypeName();
				setState(3757);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameContext extends ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public OptArrayBoundsContext optArrayBounds() {
			return getRuleContext(OptArrayBoundsContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(PostgreSQLStatementParser.SETOF, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLStatementParser.ARRAY, 0); }
		public TerminalNode LBT_() { return getToken(PostgreSQLStatementParser.LBT_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RBT_() { return getToken(PostgreSQLStatementParser.RBT_, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameContext typeName() throws RecognitionException {
		TypeNameContext _localctx = new TypeNameContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_typeName);
		try {
			setState(3788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3761);
				simpleTypeName();
				setState(3762);
				optArrayBounds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3764);
				match(SETOF);
				setState(3765);
				simpleTypeName();
				setState(3766);
				optArrayBounds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3768);
				simpleTypeName();
				setState(3769);
				match(ARRAY);
				setState(3770);
				match(LBT_);
				setState(3771);
				match(NUMBER_);
				setState(3772);
				match(RBT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3774);
				match(SETOF);
				setState(3775);
				simpleTypeName();
				setState(3776);
				match(ARRAY);
				setState(3777);
				match(LBT_);
				setState(3778);
				match(NUMBER_);
				setState(3779);
				match(RBT_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3781);
				simpleTypeName();
				setState(3782);
				match(ARRAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3784);
				match(SETOF);
				setState(3785);
				simpleTypeName();
				setState(3786);
				match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleTypeNameContext extends ParserRuleContext {
		public GenericTypeContext genericType() {
			return getRuleContext(GenericTypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public OptIntervalContext optInterval() {
			return getRuleContext(OptIntervalContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleTypeName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSimpleTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleTypeNameContext simpleTypeName() throws RecognitionException {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_simpleTypeName);
		try {
			setState(3803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3790);
				genericType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3791);
				numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3792);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3793);
				character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3794);
				constDatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3795);
				constInterval();
				setState(3796);
				optInterval();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3798);
				constInterval();
				setState(3799);
				match(LP_);
				setState(3800);
				match(NUMBER_);
				setState(3801);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprListContext exprList() throws RecognitionException {
		return exprList(0);
	}

	private ExprListContext exprList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprListContext _localctx = new ExprListContext(_ctx, _parentState);
		ExprListContext _prevctx = _localctx;
		int _startState = 348;
		enterRecursionRule(_localctx, 348, RULE_exprList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3806);
			aExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(3813);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,239,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exprList);
					setState(3808);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3809);
					match(COMMA_);
					setState(3810);
					aExpr(0);
					}
					} 
				}
				setState(3815);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,239,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExtractListContext extends ParserRuleContext {
		public ExtractArgContext extractArg() {
			return getRuleContext(ExtractArgContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ExtractListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExtractList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractListContext extractList() throws RecognitionException {
		ExtractListContext _localctx = new ExtractListContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_extractList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3816);
			extractArg();
			setState(3817);
			match(FROM);
			setState(3818);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractArgContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(PostgreSQLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PostgreSQLStatementParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PostgreSQLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PostgreSQLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PostgreSQLStatementParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PostgreSQLStatementParser.SECOND, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExtractArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExtractArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractArgContext extractArg() throws RecognitionException {
		ExtractArgContext _localctx = new ExtractArgContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_extractArg);
		try {
			setState(3827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3820);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3821);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3822);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3823);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3824);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3825);
				match(SECOND);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3826);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericTypeContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public TypeModifiersContext typeModifiers() {
			return getRuleContext(TypeModifiersContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGenericType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericTypeContext genericType() throws RecognitionException {
		GenericTypeContext _localctx = new GenericTypeContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_genericType);
		try {
			setState(3838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3829);
				typeFunctionName();
				setState(3831);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					setState(3830);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3833);
				typeFunctionName();
				setState(3834);
				attrs(0);
				setState(3836);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					setState(3835);
					typeModifiers();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeModifiersContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TypeModifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeModifiers; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTypeModifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeModifiersContext typeModifiers() throws RecognitionException {
		TypeModifiersContext _localctx = new TypeModifiersContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_typeModifiers);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3840);
			match(LP_);
			setState(3841);
			exprList(0);
			setState(3842);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(PostgreSQLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLStatementParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLStatementParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLStatementParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLStatementParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(PostgreSQLStatementParser.FLOAT, 0); }
		public OptFloatContext optFloat() {
			return getRuleContext(OptFloatContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(PostgreSQLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLStatementParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSQLStatementParser.DECIMAL, 0); }
		public TypeModifiersContext typeModifiers() {
			return getRuleContext(TypeModifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(PostgreSQLStatementParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLStatementParser.NUMERIC, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSQLStatementParser.BOOLEAN, 0); }
		public TerminalNode FLOAT8() { return getToken(PostgreSQLStatementParser.FLOAT8, 0); }
		public TerminalNode FLOAT4() { return getToken(PostgreSQLStatementParser.FLOAT4, 0); }
		public TerminalNode INT2() { return getToken(PostgreSQLStatementParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(PostgreSQLStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(PostgreSQLStatementParser.INT8, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_numeric);
		try {
			setState(3871);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3844);
				match(INT);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3845);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3846);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3847);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3848);
				match(REAL);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3849);
				match(FLOAT);
				setState(3850);
				optFloat();
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3851);
				match(DOUBLE);
				setState(3852);
				match(PRECISION);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 8);
				{
				setState(3853);
				match(DECIMAL);
				setState(3855);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(3854);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(3857);
				match(DEC);
				setState(3859);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(3858);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(3861);
				match(NUMERIC);
				setState(3863);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(3862);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 11);
				{
				setState(3865);
				match(BOOLEAN);
				}
				break;
			case FLOAT8:
				enterOuterAlt(_localctx, 12);
				{
				setState(3866);
				match(FLOAT8);
				}
				break;
			case FLOAT4:
				enterOuterAlt(_localctx, 13);
				{
				setState(3867);
				match(FLOAT4);
				}
				break;
			case INT2:
				enterOuterAlt(_localctx, 14);
				{
				setState(3868);
				match(INT2);
				}
				break;
			case INT4:
				enterOuterAlt(_localctx, 15);
				{
				setState(3869);
				match(INT4);
				}
				break;
			case INT8:
				enterOuterAlt(_localctx, 16);
				{
				setState(3870);
				match(INT8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstDatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TimezoneContext timezone() {
			return getRuleContext(TimezoneContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode DATE() { return getToken(PostgreSQLStatementParser.DATE, 0); }
		public ConstDatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constDatetime; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConstDatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstDatetimeContext constDatetime() throws RecognitionException {
		ConstDatetimeContext _localctx = new ConstDatetimeContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_constDatetime);
		try {
			setState(3896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3873);
				match(TIMESTAMP);
				setState(3874);
				match(LP_);
				setState(3875);
				match(NUMBER_);
				setState(3876);
				match(RP_);
				setState(3878);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(3877);
					timezone();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3880);
				match(TIMESTAMP);
				setState(3882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(3881);
					timezone();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3884);
				match(TIME);
				setState(3885);
				match(LP_);
				setState(3886);
				match(NUMBER_);
				setState(3887);
				match(RP_);
				setState(3889);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(3888);
					timezone();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3891);
				match(TIME);
				setState(3893);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(3892);
					timezone();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3895);
				match(DATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimezoneContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTimezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimezoneContext timezone() throws RecognitionException {
		TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_timezone);
		try {
			setState(3904);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3898);
				match(WITH);
				setState(3899);
				match(TIME);
				setState(3900);
				match(ZONE);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3901);
				match(WITHOUT);
				setState(3902);
				match(TIME);
				setState(3903);
				match(ZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_character);
		try {
			setState(3908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3906);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3907);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithLengthContext extends ParserRuleContext {
		public CharacterClauseContext characterClause() {
			return getRuleContext(CharacterClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CharacterWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCharacterWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithLengthContext characterWithLength() throws RecognitionException {
		CharacterWithLengthContext _localctx = new CharacterWithLengthContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_characterWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3910);
			characterClause();
			setState(3911);
			match(LP_);
			setState(3912);
			match(NUMBER_);
			setState(3913);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithoutLengthContext extends ParserRuleContext {
		public CharacterClauseContext characterClause() {
			return getRuleContext(CharacterClauseContext.class,0);
		}
		public CharacterWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithoutLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCharacterWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithoutLengthContext characterWithoutLength() throws RecognitionException {
		CharacterWithoutLengthContext _localctx = new CharacterWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_characterWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3915);
			characterClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterClauseContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(PostgreSQLStatementParser.CHARACTER, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLStatementParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLStatementParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLStatementParser.VARCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLStatementParser.NCHAR, 0); }
		public CharacterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCharacterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterClauseContext characterClause() throws RecognitionException {
		CharacterClauseContext _localctx = new CharacterClauseContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_characterClause);
		try {
			setState(3940);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3917);
				match(CHARACTER);
				setState(3919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					setState(3918);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3921);
				match(CHAR);
				setState(3923);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					setState(3922);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3925);
				match(VARCHAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3926);
				match(NATIONAL);
				setState(3927);
				match(CHARACTER);
				setState(3929);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(3928);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3931);
				match(NATIONAL);
				setState(3932);
				match(CHAR);
				setState(3934);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					setState(3933);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3936);
				match(NCHAR);
				setState(3938);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					setState(3937);
					match(VARYING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptFloatContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public OptFloatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optFloat; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptFloat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptFloatContext optFloat() throws RecognitionException {
		OptFloatContext _localctx = new OptFloatContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_optFloat);
		try {
			setState(3946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3942);
				match(LP_);
				setState(3943);
				match(NUMBER_);
				setState(3944);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public AttrNameContext attrName() {
			return getRuleContext(AttrNameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AttrsContext _localctx = new AttrsContext(_ctx, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 374;
		enterRecursionRule(_localctx, 374, RULE_attrs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3949);
			match(DOT_);
			setState(3950);
			attrName();
			}
			_ctx.stop = _input.LT(-1);
			setState(3957);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,262,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_attrs);
					setState(3952);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3953);
					match(DOT_);
					setState(3954);
					attrName();
					}
					} 
				}
				setState(3959);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,262,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AttrNameContext extends ParserRuleContext {
		public ColLableContext colLable() {
			return getRuleContext(ColLableContext.class,0);
		}
		public AttrNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAttrName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrNameContext attrName() throws RecognitionException {
		AttrNameContext _localctx = new AttrNameContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_attrName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3960);
			colLable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public ColLableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColLable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLableContext colLable() throws RecognitionException {
		ColLableContext _localctx = new ColLableContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_colLable);
		try {
			setState(3966);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3962);
				identifier();
				}
				break;
			case POSITION:
			case PRECISION:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case EXISTS:
			case BETWEEN:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case NULLIF:
			case NATIONAL:
			case NCHAR:
			case COALESCE:
			case GROUPING:
			case DEC:
			case ROW:
			case EXTRACT:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BIT:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case XMLATTRIBUTES:
			case GREATEST:
			case LEAST:
			case XMLTABLE:
			case XMLNAMESPACES:
			case NONE:
			case OUT:
			case INOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3963);
				colNameKeyword();
				}
				break;
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IS:
			case LIKE:
			case COLLATION:
			case OVERLAPS:
			case BINARY:
			case CONCURRENTLY:
			case TABLESAMPLE:
			case CURRENT_SCHEMA:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3964);
				typeFuncNameKeyword();
				}
				break;
			case SELECT:
			case CREATE:
			case GRANT:
			case TABLE:
			case COLUMN:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case INTO:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case FROM:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case IN:
			case ALL:
			case ANY:
			case ORDER:
			case GROUP:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case DEFAULT:
			case DO:
			case CURRENT_USER:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case BOTH:
			case LEADING:
			case TRAILING:
			case INTERSECT:
			case EXCEPT:
			case FETCH:
			case WINDOW:
			case SOME:
			case END:
			case CHECK:
			case REFERENCES:
			case USER:
			case COLLATE:
			case DEFERRABLE:
			case INITIALLY:
			case ONLY:
			case SESSION_USER:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case SYMMETRIC:
			case ASYMMETRIC:
			case VARIADIC:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3965);
				reservedKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_bit);
		try {
			setState(3970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3968);
				bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3969);
				bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLStatementParser.BIT, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLStatementParser.VARYING, 0); }
		public BitWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitBitWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithLengthContext bitWithLength() throws RecognitionException {
		BitWithLengthContext _localctx = new BitWithLengthContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_bitWithLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3972);
			match(BIT);
			setState(3974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(3973);
				match(VARYING);
				}
			}

			setState(3976);
			match(LP_);
			setState(3977);
			exprList(0);
			setState(3978);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithoutLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLStatementParser.BIT, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLStatementParser.VARYING, 0); }
		public BitWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithoutLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitBitWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithoutLengthContext bitWithoutLength() throws RecognitionException {
		BitWithoutLengthContext _localctx = new BitWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_bitWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3980);
			match(BIT);
			setState(3982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				setState(3981);
				match(VARYING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstIntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(PostgreSQLStatementParser.INTERVAL, 0); }
		public ConstIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constInterval; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConstInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstIntervalContext constInterval() throws RecognitionException {
		ConstIntervalContext _localctx = new ConstIntervalContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_constInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3984);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptIntervalContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(PostgreSQLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PostgreSQLStatementParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PostgreSQLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PostgreSQLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PostgreSQLStatementParser.MINUTE, 0); }
		public IntervalSecondContext intervalSecond() {
			return getRuleContext(IntervalSecondContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public OptIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInterval; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptIntervalContext optInterval() throws RecognitionException {
		OptIntervalContext _localctx = new OptIntervalContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_optInterval);
		try {
			setState(4014);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3986);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3987);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3988);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3989);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3990);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3991);
				intervalSecond();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3992);
				match(YEAR);
				setState(3993);
				match(TO);
				setState(3994);
				match(MONTH);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3995);
				match(DAY);
				setState(3996);
				match(TO);
				setState(3997);
				match(HOUR);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3998);
				match(DAY);
				setState(3999);
				match(TO);
				setState(4000);
				match(MINUTE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4001);
				match(DAY);
				setState(4002);
				match(TO);
				setState(4003);
				intervalSecond();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4004);
				match(HOUR);
				setState(4005);
				match(TO);
				setState(4006);
				match(MINUTE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4007);
				match(HOUR);
				setState(4008);
				match(TO);
				setState(4009);
				intervalSecond();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4010);
				match(MINUTE);
				setState(4011);
				match(TO);
				setState(4012);
				intervalSecond();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptArrayBoundsContext extends ParserRuleContext {
		public OptArrayBoundsContext optArrayBounds() {
			return getRuleContext(OptArrayBoundsContext.class,0);
		}
		public TerminalNode LBT_() { return getToken(PostgreSQLStatementParser.LBT_, 0); }
		public TerminalNode RBT_() { return getToken(PostgreSQLStatementParser.RBT_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public OptArrayBoundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optArrayBounds; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptArrayBounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptArrayBoundsContext optArrayBounds() throws RecognitionException {
		return optArrayBounds(0);
	}

	private OptArrayBoundsContext optArrayBounds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptArrayBoundsContext _localctx = new OptArrayBoundsContext(_ctx, _parentState);
		OptArrayBoundsContext _prevctx = _localctx;
		int _startState = 390;
		enterRecursionRule(_localctx, 390, RULE_optArrayBounds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(4026);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4024);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
					case 1:
						{
						_localctx = new OptArrayBoundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_optArrayBounds);
						setState(4017);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(4018);
						match(LBT_);
						setState(4019);
						match(RBT_);
						}
						break;
					case 2:
						{
						_localctx = new OptArrayBoundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_optArrayBounds);
						setState(4020);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(4021);
						match(LBT_);
						setState(4022);
						match(NUMBER_);
						setState(4023);
						match(RBT_);
						}
						break;
					}
					} 
				}
				setState(4028);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IntervalSecondContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(PostgreSQLStatementParser.SECOND, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public IntervalSecondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalSecond; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIntervalSecond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalSecondContext intervalSecond() throws RecognitionException {
		IntervalSecondContext _localctx = new IntervalSecondContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_intervalSecond);
		try {
			setState(4034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4029);
				match(SECOND);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4030);
				match(SECOND);
				setState(4031);
				match(LP_);
				setState(4032);
				match(NUMBER_);
				setState(4033);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeNormalFormContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(PostgreSQLStatementParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLStatementParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLStatementParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLStatementParser.NFKD, 0); }
		public UnicodeNormalFormContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicodeNormalForm; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitUnicodeNormalForm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeNormalFormContext unicodeNormalForm() throws RecognitionException {
		UnicodeNormalFormContext _localctx = new UnicodeNormalFormContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_unicodeNormalForm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4036);
			_la = _input.LA(1);
			if ( !(((((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & ((1L << (NFC - 371)) | (1L << (NFD - 371)) | (1L << (NFKC - 371)) | (1L << (NFKD - 371)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TrimListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTrimList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimListContext trimList() throws RecognitionException {
		TrimListContext _localctx = new TrimListContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_trimList);
		try {
			setState(4045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4038);
				aExpr(0);
				setState(4039);
				match(FROM);
				setState(4040);
				exprList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4042);
				match(FROM);
				setState(4043);
				exprList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4044);
				exprList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverlayListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public OverlayPlacingContext overlayPlacing() {
			return getRuleContext(OverlayPlacingContext.class,0);
		}
		public SubstrFromContext substrFrom() {
			return getRuleContext(SubstrFromContext.class,0);
		}
		public SubstrForContext substrFor() {
			return getRuleContext(SubstrForContext.class,0);
		}
		public OverlayListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlayList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOverlayList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverlayListContext overlayList() throws RecognitionException {
		OverlayListContext _localctx = new OverlayListContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_overlayList);
		try {
			setState(4056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4047);
				aExpr(0);
				setState(4048);
				overlayPlacing();
				setState(4049);
				substrFrom();
				setState(4050);
				substrFor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4052);
				aExpr(0);
				setState(4053);
				overlayPlacing();
				setState(4054);
				substrFrom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverlayPlacingContext extends ParserRuleContext {
		public TerminalNode PLACING() { return getToken(PostgreSQLStatementParser.PLACING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public OverlayPlacingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlayPlacing; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOverlayPlacing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverlayPlacingContext overlayPlacing() throws RecognitionException {
		OverlayPlacingContext _localctx = new OverlayPlacingContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_overlayPlacing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4058);
			match(PLACING);
			setState(4059);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrFromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrFromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrFrom; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSubstrFrom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrFromContext substrFrom() throws RecognitionException {
		SubstrFromContext _localctx = new SubstrFromContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_substrFrom);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4061);
			match(FROM);
			setState(4062);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrForContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrFor; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSubstrFor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrForContext substrFor() throws RecognitionException {
		SubstrForContext _localctx = new SubstrForContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_substrFor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4064);
			match(FOR);
			setState(4065);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionListContext extends ParserRuleContext {
		public List<BExprContext> bExpr() {
			return getRuleContexts(BExprContext.class);
		}
		public BExprContext bExpr(int i) {
			return getRuleContext(BExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public PositionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPositionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionListContext positionList() throws RecognitionException {
		PositionListContext _localctx = new PositionListContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_positionList);
		try {
			setState(4072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4067);
				bExpr(0);
				setState(4068);
				match(IN);
				setState(4069);
				bExpr(0);
				}
				break;
			case RP_:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrFromContext substrFrom() {
			return getRuleContext(SubstrFromContext.class,0);
		}
		public SubstrForContext substrFor() {
			return getRuleContext(SubstrForContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public SubstrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSubstrList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrListContext substrList() throws RecognitionException {
		SubstrListContext _localctx = new SubstrListContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_substrList);
		try {
			setState(4090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4074);
				aExpr(0);
				setState(4075);
				substrFrom();
				setState(4076);
				substrFor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4078);
				aExpr(0);
				setState(4079);
				substrFor();
				setState(4080);
				substrFrom();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4082);
				aExpr(0);
				setState(4083);
				substrFrom();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4085);
				aExpr(0);
				setState(4086);
				substrFor();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4088);
				exprList(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public XmlAttributeListContext xmlAttributeList() {
			return getRuleContext(XmlAttributeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public XmlAttributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlAttributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributesContext xmlAttributes() throws RecognitionException {
		XmlAttributesContext _localctx = new XmlAttributesContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_xmlAttributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4092);
			match(XMLATTRIBUTES);
			setState(4093);
			match(LP_);
			setState(4094);
			xmlAttributeList();
			setState(4095);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributeListContext extends ParserRuleContext {
		public List<XmlAttributeElContext> xmlAttributeEl() {
			return getRuleContexts(XmlAttributeElContext.class);
		}
		public XmlAttributeElContext xmlAttributeEl(int i) {
			return getRuleContext(XmlAttributeElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public XmlAttributeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributeList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlAttributeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributeListContext xmlAttributeList() throws RecognitionException {
		XmlAttributeListContext _localctx = new XmlAttributeListContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_xmlAttributeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4097);
			xmlAttributeEl();
			setState(4102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4098);
				match(COMMA_);
				setState(4099);
				xmlAttributeEl();
				}
				}
				setState(4104);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributeElContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlAttributeElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributeEl; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlAttributeEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributeElContext xmlAttributeEl() throws RecognitionException {
		XmlAttributeElContext _localctx = new XmlAttributeElContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_xmlAttributeEl);
		try {
			setState(4110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4105);
				aExpr(0);
				setState(4106);
				match(AS);
				setState(4107);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4109);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlExistsArgumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PostgreSQLStatementParser.PASSING, 0); }
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public List<XmlPassingMechContext> xmlPassingMech() {
			return getRuleContexts(XmlPassingMechContext.class);
		}
		public XmlPassingMechContext xmlPassingMech(int i) {
			return getRuleContext(XmlPassingMechContext.class,i);
		}
		public XmlExistsArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlExistsArgument; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlExistsArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlExistsArgumentContext xmlExistsArgument() throws RecognitionException {
		XmlExistsArgumentContext _localctx = new XmlExistsArgumentContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_xmlExistsArgument);
		try {
			setState(4127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4112);
				match(PASSING);
				setState(4113);
				cExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4114);
				match(PASSING);
				setState(4115);
				cExpr();
				setState(4116);
				xmlPassingMech();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4118);
				match(PASSING);
				setState(4119);
				xmlPassingMech();
				setState(4120);
				cExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4122);
				match(PASSING);
				setState(4123);
				xmlPassingMech();
				setState(4124);
				cExpr();
				setState(4125);
				xmlPassingMech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlPassingMechContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLStatementParser.REF, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public XmlPassingMechContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlPassingMech; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlPassingMech(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlPassingMechContext xmlPassingMech() throws RecognitionException {
		XmlPassingMechContext _localctx = new XmlPassingMechContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_xmlPassingMech);
		try {
			setState(4133);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4129);
				match(BY);
				setState(4130);
				match(REF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4131);
				match(BY);
				setState(4132);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DocumentOrContentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT() { return getToken(PostgreSQLStatementParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PostgreSQLStatementParser.CONTENT, 0); }
		public DocumentOrContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_documentOrContent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDocumentOrContent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DocumentOrContentContext documentOrContent() throws RecognitionException {
		DocumentOrContentContext _localctx = new DocumentOrContentContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_documentOrContent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4135);
			_la = _input.LA(1);
			if ( !(_la==DOCUMENT || _la==CONTENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlWhitespaceOptionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(PostgreSQLStatementParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE() { return getToken(PostgreSQLStatementParser.WHITESPACE, 0); }
		public TerminalNode STRIP() { return getToken(PostgreSQLStatementParser.STRIP, 0); }
		public XmlWhitespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlWhitespaceOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlWhitespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlWhitespaceOptionContext xmlWhitespaceOption() throws RecognitionException {
		XmlWhitespaceOptionContext _localctx = new XmlWhitespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_xmlWhitespaceOption);
		try {
			setState(4142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4137);
				match(PRESERVE);
				setState(4138);
				match(WHITESPACE);
				}
				break;
			case STRIP:
				enterOuterAlt(_localctx, 2);
				{
				setState(4139);
				match(STRIP);
				setState(4140);
				match(WHITESPACE);
				}
				break;
			case RP_:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRootVersionContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PostgreSQLStatementParser.VERSION, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public XmlRootVersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRootVersion; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlRootVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRootVersionContext xmlRootVersion() throws RecognitionException {
		XmlRootVersionContext _localctx = new XmlRootVersionContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_xmlRootVersion);
		try {
			setState(4149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4144);
				match(VERSION);
				setState(4145);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4146);
				match(VERSION);
				setState(4147);
				match(NO);
				setState(4148);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRootStandaloneContext extends ParserRuleContext {
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TerminalNode STANDALONE() { return getToken(PostgreSQLStatementParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(PostgreSQLStatementParser.YES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public XmlRootStandaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRootStandalone; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitXmlRootStandalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRootStandaloneContext xmlRootStandalone() throws RecognitionException {
		XmlRootStandaloneContext _localctx = new XmlRootStandaloneContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_xmlRootStandalone);
		try {
			setState(4161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4151);
				match(COMMA_);
				setState(4152);
				match(STANDALONE);
				setState(4153);
				match(YES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4154);
				match(COMMA_);
				setState(4155);
				match(STANDALONE);
				setState(4156);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4157);
				match(COMMA_);
				setState(4158);
				match(STANDALONE);
				setState(4159);
				match(NO);
				setState(4160);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsFromItemContext extends ParserRuleContext {
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public ColumnDefListContext columnDefList() {
			return getRuleContext(ColumnDefListContext.class,0);
		}
		public RowsFromItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsFromItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRowsFromItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsFromItemContext rowsFromItem() throws RecognitionException {
		RowsFromItemContext _localctx = new RowsFromItemContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_rowsFromItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4163);
			functionExprWindowless();
			setState(4164);
			columnDefList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsFromListContext extends ParserRuleContext {
		public List<RowsFromItemContext> rowsFromItem() {
			return getRuleContexts(RowsFromItemContext.class);
		}
		public RowsFromItemContext rowsFromItem(int i) {
			return getRuleContext(RowsFromItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public RowsFromListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsFromList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRowsFromList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsFromListContext rowsFromList() throws RecognitionException {
		RowsFromListContext _localctx = new RowsFromListContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_rowsFromList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4166);
			rowsFromItem();
			setState(4171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4167);
				match(COMMA_);
				setState(4168);
				rowsFromItem();
				}
				}
				setState(4173);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefListContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ColumnDefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefListContext columnDefList() throws RecognitionException {
		ColumnDefListContext _localctx = new ColumnDefListContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_columnDefList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4174);
			match(AS);
			setState(4175);
			match(LP_);
			setState(4176);
			tableFuncElementList();
			setState(4177);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementListContext extends ParserRuleContext {
		public List<TableFuncElementContext> tableFuncElement() {
			return getRuleContexts(TableFuncElementContext.class);
		}
		public TableFuncElementContext tableFuncElement(int i) {
			return getRuleContext(TableFuncElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementListContext tableFuncElementList() throws RecognitionException {
		TableFuncElementListContext _localctx = new TableFuncElementListContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_tableFuncElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4179);
			tableFuncElement();
			setState(4184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4180);
				match(COMMA_);
				setState(4181);
				tableFuncElement();
				}
				}
				setState(4186);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TableFuncElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableFuncElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementContext tableFuncElement() throws RecognitionException {
		TableFuncElementContext _localctx = new TableFuncElementContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_tableFuncElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4187);
			colId();
			setState(4188);
			typeName();
			setState(4190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(4189);
				collateClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateClauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public CollateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCollateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateClauseContext collateClause() throws RecognitionException {
		CollateClauseContext _localctx = new CollateClauseContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_collateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4192);
			match(COLLATE);
			setState(4194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(4193);
				match(EQ_);
				}
			}

			setState(4196);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyNameContext anyName() throws RecognitionException {
		AnyNameContext _localctx = new AnyNameContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_anyName);
		try {
			setState(4202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4198);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4199);
				colId();
				setState(4200);
				attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public AliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasClauseContext aliasClause() throws RecognitionException {
		AliasClauseContext _localctx = new AliasClauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_aliasClause);
		try {
			setState(4218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4204);
				match(AS);
				setState(4205);
				colId();
				setState(4206);
				match(LP_);
				setState(4207);
				nameList(0);
				setState(4208);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4210);
				match(AS);
				setState(4211);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4212);
				colId();
				setState(4213);
				match(LP_);
				setState(4214);
				nameList(0);
				setState(4215);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4217);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameListContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public NameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nameList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameListContext nameList() throws RecognitionException {
		return nameList(0);
	}

	private NameListContext nameList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		NameListContext _localctx = new NameListContext(_ctx, _parentState);
		NameListContext _prevctx = _localctx;
		int _startState = 444;
		enterRecursionRule(_localctx, 444, RULE_nameList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4221);
			name();
			}
			_ctx.stop = _input.LT(-1);
			setState(4228);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,288,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NameListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_nameList);
					setState(4223);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4224);
					match(COMMA_);
					setState(4225);
					name();
					}
					} 
				}
				setState(4230);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,288,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FuncAliasClauseContext extends ParserRuleContext {
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public FuncAliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAliasClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncAliasClauseContext funcAliasClause() throws RecognitionException {
		FuncAliasClauseContext _localctx = new FuncAliasClauseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_funcAliasClause);
		try {
			setState(4248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4231);
				aliasClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4232);
				match(AS);
				setState(4233);
				match(LP_);
				setState(4234);
				tableFuncElementList();
				setState(4235);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4237);
				match(AS);
				setState(4238);
				colId();
				setState(4239);
				match(LP_);
				setState(4240);
				tableFuncElementList();
				setState(4241);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4243);
				colId();
				setState(4244);
				match(LP_);
				setState(4245);
				tableFuncElementList();
				setState(4246);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesampleClauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLStatementParser.TABLESAMPLE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public RepeatableClauseContext repeatableClause() {
			return getRuleContext(RepeatableClauseContext.class,0);
		}
		public TablesampleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesampleClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTablesampleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesampleClauseContext tablesampleClause() throws RecognitionException {
		TablesampleClauseContext _localctx = new TablesampleClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_tablesampleClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4250);
			match(TABLESAMPLE);
			setState(4251);
			funcName();
			setState(4252);
			match(LP_);
			setState(4253);
			exprList(0);
			setState(4254);
			match(RP_);
			setState(4256);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				setState(4255);
				repeatableClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatableClauseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLStatementParser.REPEATABLE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public RepeatableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatableClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRepeatableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatableClauseContext repeatableClause() throws RecognitionException {
		RepeatableClauseContext _localctx = new RepeatableClauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_repeatableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4258);
			match(REPEATABLE);
			setState(4259);
			match(LP_);
			setState(4260);
			aExpr(0);
			setState(4261);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOrDistinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public AllOrDistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOrDistinct; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAllOrDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOrDistinctContext allOrDistinct() throws RecognitionException {
		AllOrDistinctContext _localctx = new AllOrDistinctContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_allOrDistinct);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4263);
			_la = _input.LA(1);
			if ( !(_la==DISTINCT || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public SortbyListContext sortbyList() {
			return getRuleContext(SortbyListContext.class,0);
		}
		public SortClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSortClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortClauseContext sortClause() throws RecognitionException {
		SortClauseContext _localctx = new SortClauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_sortClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4265);
			match(ORDER);
			setState(4266);
			match(BY);
			setState(4267);
			sortbyList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyListContext extends ParserRuleContext {
		public List<SortbyContext> sortby() {
			return getRuleContexts(SortbyContext.class);
		}
		public SortbyContext sortby(int i) {
			return getRuleContext(SortbyContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public SortbyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortbyList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSortbyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyListContext sortbyList() throws RecognitionException {
		SortbyListContext _localctx = new SortbyListContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_sortbyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4269);
			sortby();
			setState(4274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4270);
				match(COMMA_);
				setState(4271);
				sortby();
				}
				}
				setState(4276);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public NullsOrderContext nullsOrder() {
			return getRuleContext(NullsOrderContext.class,0);
		}
		public AscDescContext ascDesc() {
			return getRuleContext(AscDescContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_sortby);
		int _la;
		try {
			setState(4290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4277);
				aExpr(0);
				setState(4278);
				match(USING);
				setState(4279);
				qualAllOp();
				setState(4281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(4280);
					nullsOrder();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4283);
				aExpr(0);
				setState(4285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(4284);
					ascDesc();
					}
				}

				setState(4288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(4287);
					nullsOrder();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullsOrderContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(PostgreSQLStatementParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PostgreSQLStatementParser.LAST, 0); }
		public NullsOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullsOrder; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNullsOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullsOrderContext nullsOrder() throws RecognitionException {
		NullsOrderContext _localctx = new NullsOrderContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_nullsOrder);
		try {
			setState(4296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4292);
				match(NULLS);
				setState(4293);
				match(FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4294);
				match(NULLS);
				setState(4295);
				match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctClauseContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public DistinctClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDistinctClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctClauseContext distinctClause() throws RecognitionException {
		DistinctClauseContext _localctx = new DistinctClauseContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_distinctClause);
		try {
			setState(4305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4298);
				match(DISTINCT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4299);
				match(DISTINCT);
				setState(4300);
				match(ON);
				setState(4301);
				match(LP_);
				setState(4302);
				exprList(0);
				setState(4303);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public DistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctContext distinct() throws RecognitionException {
		DistinctContext _localctx = new DistinctContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4307);
			match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PostgreSQLStatementParser.OVER, 0); }
		public WindowSpecificationContext windowSpecification() {
			return getRuleContext(WindowSpecificationContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_overClause);
		try {
			setState(4313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4309);
				match(OVER);
				setState(4310);
				windowSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4311);
				match(OVER);
				setState(4312);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4315);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexParamsContext extends ParserRuleContext {
		public List<IndexElemContext> indexElem() {
			return getRuleContexts(IndexElemContext.class);
		}
		public IndexElemContext indexElem(int i) {
			return getRuleContext(IndexElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public IndexParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexParams; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndexParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexParamsContext indexParams() throws RecognitionException {
		IndexParamsContext _localctx = new IndexParamsContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_indexParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4317);
			indexElem();
			setState(4322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4318);
				match(COMMA_);
				setState(4319);
				indexElem();
				}
				}
				setState(4324);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexElemOptionsContext extends ParserRuleContext {
		public OptClassContext optClass() {
			return getRuleContext(OptClassContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public AscDescContext ascDesc() {
			return getRuleContext(AscDescContext.class,0);
		}
		public NullsOrderContext nullsOrder() {
			return getRuleContext(NullsOrderContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public IndexElemOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexElemOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndexElemOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexElemOptionsContext indexElemOptions() throws RecognitionException {
		IndexElemOptionsContext _localctx = new IndexElemOptionsContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_indexElemOptions);
		int _la;
		try {
			setState(4346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(4325);
					collate();
					}
				}

				setState(4328);
				optClass();
				setState(4330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(4329);
					ascDesc();
					}
				}

				setState(4333);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(4332);
					nullsOrder();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(4335);
					collate();
					}
				}

				setState(4338);
				anyName();
				setState(4339);
				reloptions();
				setState(4341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(4340);
					ascDesc();
					}
				}

				setState(4344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(4343);
					nullsOrder();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndexElemOptionsContext indexElemOptions() {
			return getRuleContext(IndexElemOptionsContext.class,0);
		}
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public IndexElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndexElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexElemContext indexElem() throws RecognitionException {
		IndexElemContext _localctx = new IndexElemContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_indexElem);
		try {
			setState(4359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4348);
				colId();
				setState(4349);
				indexElemOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4351);
				functionExprWindowless();
				setState(4352);
				indexElemOptions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4354);
				match(LP_);
				setState(4355);
				aExpr(0);
				setState(4356);
				match(RP_);
				setState(4357);
				indexElemOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCollate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateContext collate() throws RecognitionException {
		CollateContext _localctx = new CollateContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4361);
			match(COLLATE);
			setState(4362);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptClassContext extends ParserRuleContext {
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OptClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optClass; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptClassContext optClass() throws RecognitionException {
		OptClassContext _localctx = new OptClassContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_optClass);
		try {
			setState(4366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4364);
				anyName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ReloptionListContext reloptionList() {
			return getRuleContext(ReloptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4368);
			match(LP_);
			setState(4369);
			reloptionList();
			setState(4370);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionListContext extends ParserRuleContext {
		public List<ReloptionElemContext> reloptionElem() {
			return getRuleContexts(ReloptionElemContext.class);
		}
		public ReloptionElemContext reloptionElem(int i) {
			return getRuleContext(ReloptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ReloptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReloptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionListContext reloptionList() throws RecognitionException {
		ReloptionListContext _localctx = new ReloptionListContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_reloptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4372);
			reloptionElem();
			setState(4377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4373);
				match(COMMA_);
				setState(4374);
				reloptionElem();
				}
				}
				setState(4379);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionElemContext extends ParserRuleContext {
		public List<AliasContext> alias() {
			return getRuleContexts(AliasContext.class);
		}
		public AliasContext alias(int i) {
			return getRuleContext(AliasContext.class,i);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public ReloptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptionElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReloptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionElemContext reloptionElem() throws RecognitionException {
		ReloptionElemContext _localctx = new ReloptionElemContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_reloptionElem);
		try {
			setState(4395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4380);
				alias();
				setState(4381);
				match(EQ_);
				setState(4382);
				defArg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4384);
				alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4385);
				alias();
				setState(4386);
				match(DOT_);
				setState(4387);
				alias();
				setState(4388);
				match(EQ_);
				setState(4389);
				defArg();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4391);
				alias();
				setState(4392);
				match(DOT_);
				setState(4393);
				alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefArgContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLStatementParser.NONE, 0); }
		public DefArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDefArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefArgContext defArg() throws RecognitionException {
		DefArgContext _localctx = new DefArgContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_defArg);
		try {
			setState(4403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4397);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4398);
				reservedKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4399);
				qualAllOp();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4400);
				match(NUMBER_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4401);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4402);
				match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncTypeContext extends ParserRuleContext {
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode MOD_() { return getToken(PostgreSQLStatementParser.MOD_, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLStatementParser.SETOF, 0); }
		public FuncTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncTypeContext funcType() throws RecognitionException {
		FuncTypeContext _localctx = new FuncTypeContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_funcType);
		try {
			setState(4417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4405);
				typeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4406);
				typeFunctionName();
				setState(4407);
				attrs(0);
				setState(4408);
				match(MOD_);
				setState(4409);
				match(TYPE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4411);
				match(SETOF);
				setState(4412);
				typeFunctionName();
				setState(4413);
				attrs(0);
				setState(4414);
				match(MOD_);
				setState(4415);
				match(TYPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public DataTypeLengthContext dataTypeLength() {
			return getRuleContext(DataTypeLengthContext.class,0);
		}
		public CharacterSetContext characterSet() {
			return getRuleContext(CharacterSetContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_dataType);
		int _la;
		try {
			setState(4446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4419);
				dataTypeName();
				setState(4421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(4420);
					dataTypeLength();
					}
				}

				setState(4424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(4423);
					characterSet();
					}
				}

				setState(4427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(4426);
					collateClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4429);
				dataTypeName();
				setState(4430);
				match(LP_);
				setState(4431);
				match(STRING_);
				setState(4436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4432);
					match(COMMA_);
					setState(4433);
					match(STRING_);
					}
					}
					setState(4438);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4439);
				match(RP_);
				setState(4441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(4440);
					characterSet();
					}
				}

				setState(4444);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					setState(4443);
					collateClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeNameContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(PostgreSQLStatementParser.INT, 0); }
		public TerminalNode INT2() { return getToken(PostgreSQLStatementParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(PostgreSQLStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(PostgreSQLStatementParser.INT8, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLStatementParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLStatementParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLStatementParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSQLStatementParser.DECIMAL, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLStatementParser.NUMERIC, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLStatementParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(PostgreSQLStatementParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(PostgreSQLStatementParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(PostgreSQLStatementParser.FLOAT8, 0); }
		public TerminalNode DOUBLE() { return getToken(PostgreSQLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLStatementParser.PRECISION, 0); }
		public TerminalNode SMALLSERIAL() { return getToken(PostgreSQLStatementParser.SMALLSERIAL, 0); }
		public TerminalNode SERIAL() { return getToken(PostgreSQLStatementParser.SERIAL, 0); }
		public TerminalNode BIGSERIAL() { return getToken(PostgreSQLStatementParser.BIGSERIAL, 0); }
		public TerminalNode MONEY() { return getToken(PostgreSQLStatementParser.MONEY, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLStatementParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PostgreSQLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLStatementParser.CHAR, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLStatementParser.NAME, 0); }
		public TerminalNode BYTEA() { return getToken(PostgreSQLStatementParser.BYTEA, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode DATE() { return getToken(PostgreSQLStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLStatementParser.INTERVAL, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSQLStatementParser.BOOLEAN, 0); }
		public TerminalNode ENUM() { return getToken(PostgreSQLStatementParser.ENUM, 0); }
		public TerminalNode POINT() { return getToken(PostgreSQLStatementParser.POINT, 0); }
		public TerminalNode LINE() { return getToken(PostgreSQLStatementParser.LINE, 0); }
		public TerminalNode LSEG() { return getToken(PostgreSQLStatementParser.LSEG, 0); }
		public TerminalNode BOX() { return getToken(PostgreSQLStatementParser.BOX, 0); }
		public TerminalNode PATH() { return getToken(PostgreSQLStatementParser.PATH, 0); }
		public TerminalNode POLYGON() { return getToken(PostgreSQLStatementParser.POLYGON, 0); }
		public TerminalNode CIRCLE() { return getToken(PostgreSQLStatementParser.CIRCLE, 0); }
		public TerminalNode CIDR() { return getToken(PostgreSQLStatementParser.CIDR, 0); }
		public TerminalNode INET() { return getToken(PostgreSQLStatementParser.INET, 0); }
		public TerminalNode MACADDR() { return getToken(PostgreSQLStatementParser.MACADDR, 0); }
		public TerminalNode MACADDR8() { return getToken(PostgreSQLStatementParser.MACADDR8, 0); }
		public TerminalNode BIT() { return getToken(PostgreSQLStatementParser.BIT, 0); }
		public TerminalNode VARBIT() { return getToken(PostgreSQLStatementParser.VARBIT, 0); }
		public TerminalNode TSVECTOR() { return getToken(PostgreSQLStatementParser.TSVECTOR, 0); }
		public TerminalNode TSQUERY() { return getToken(PostgreSQLStatementParser.TSQUERY, 0); }
		public TerminalNode XML() { return getToken(PostgreSQLStatementParser.XML, 0); }
		public TerminalNode JSON() { return getToken(PostgreSQLStatementParser.JSON, 0); }
		public TerminalNode INT4RANGE() { return getToken(PostgreSQLStatementParser.INT4RANGE, 0); }
		public TerminalNode INT8RANGE() { return getToken(PostgreSQLStatementParser.INT8RANGE, 0); }
		public TerminalNode NUMRANGE() { return getToken(PostgreSQLStatementParser.NUMRANGE, 0); }
		public TerminalNode TSRANGE() { return getToken(PostgreSQLStatementParser.TSRANGE, 0); }
		public TerminalNode TSTZRANGE() { return getToken(PostgreSQLStatementParser.TSTZRANGE, 0); }
		public TerminalNode DATERANGE() { return getToken(PostgreSQLStatementParser.DATERANGE, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLStatementParser.ARRAY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public DataTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDataTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeNameContext dataTypeName() throws RecognitionException {
		DataTypeNameContext _localctx = new DataTypeNameContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_dataTypeName);
		try {
			setState(4506);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4448);
				match(INT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4449);
				match(INT2);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4450);
				match(INT4);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4451);
				match(INT8);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4452);
				match(SMALLINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4453);
				match(INTEGER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4454);
				match(BIGINT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4455);
				match(DECIMAL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4456);
				match(NUMERIC);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4457);
				match(REAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4458);
				match(FLOAT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4459);
				match(FLOAT4);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4460);
				match(FLOAT8);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4461);
				match(DOUBLE);
				setState(4462);
				match(PRECISION);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4463);
				match(SMALLSERIAL);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4464);
				match(SERIAL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4465);
				match(BIGSERIAL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4466);
				match(MONEY);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4467);
				match(VARCHAR);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4468);
				match(CHARACTER);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4469);
				match(CHAR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4470);
				match(TEXT);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4471);
				match(NAME);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4472);
				match(BYTEA);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(4473);
				match(TIMESTAMP);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(4474);
				match(DATE);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(4475);
				match(TIME);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(4476);
				match(INTERVAL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(4477);
				match(BOOLEAN);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(4478);
				match(ENUM);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(4479);
				match(POINT);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(4480);
				match(LINE);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(4481);
				match(LSEG);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(4482);
				match(BOX);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(4483);
				match(PATH);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(4484);
				match(POLYGON);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(4485);
				match(CIRCLE);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(4486);
				match(CIDR);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(4487);
				match(INET);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(4488);
				match(MACADDR);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(4489);
				match(MACADDR8);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(4490);
				match(BIT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(4491);
				match(VARBIT);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(4492);
				match(TSVECTOR);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(4493);
				match(TSQUERY);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(4494);
				match(XML);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(4495);
				match(JSON);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(4496);
				match(INT4RANGE);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(4497);
				match(INT8RANGE);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(4498);
				match(NUMRANGE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(4499);
				match(TSRANGE);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(4500);
				match(TSTZRANGE);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(4501);
				match(DATERANGE);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(4502);
				match(ARRAY);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(4503);
				identifier();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(4504);
				constDatetime();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(4505);
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeLengthContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(PostgreSQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(PostgreSQLStatementParser.NUMBER_, i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public DataTypeLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDataTypeLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeLengthContext dataTypeLength() throws RecognitionException {
		DataTypeLengthContext _localctx = new DataTypeLengthContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_dataTypeLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4508);
			match(LP_);
			setState(4509);
			match(NUMBER_);
			setState(4512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(4510);
				match(COMMA_);
				setState(4511);
				match(NUMBER_);
				}
			}

			setState(4514);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterSetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(PostgreSQLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLStatementParser.CHAR, 0); }
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public CharacterSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCharacterSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSetContext characterSet() throws RecognitionException {
		CharacterSetContext _localctx = new CharacterSetContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_characterSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4516);
			_la = _input.LA(1);
			if ( !(_la==CHAR || _la==CHARACTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4517);
			match(SET);
			setState(4519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(4518);
				match(EQ_);
				}
			}

			setState(4521);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifierContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public IgnoredIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifier; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIgnoredIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifierContext ignoredIdentifier() throws RecognitionException {
		IgnoredIdentifierContext _localctx = new IgnoredIdentifierContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_ignoredIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4523);
			identifier();
			setState(4526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_) {
				{
				setState(4524);
				match(DOT_);
				setState(4525);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifiersContext extends ParserRuleContext {
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public IgnoredIdentifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifiers; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIgnoredIdentifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifiersContext ignoredIdentifiers() throws RecognitionException {
		IgnoredIdentifiersContext _localctx = new IgnoredIdentifiersContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_ignoredIdentifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4528);
			ignoredIdentifier();
			setState(4533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4529);
				match(COMMA_);
				setState(4530);
				ignoredIdentifier();
				}
				}
				setState(4535);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedIconstContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public SignedIconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedIconst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSignedIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedIconstContext signedIconst() throws RecognitionException {
		SignedIconstContext _localctx = new SignedIconstContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_signedIconst);
		try {
			setState(4541);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4536);
				match(NUMBER_);
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4537);
				match(PLUS_);
				setState(4538);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(4539);
				match(MINUS_);
				setState(4540);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanOrStringContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(PostgreSQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLStatementParser.FALSE, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public BooleanOrStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanOrString; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitBooleanOrString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanOrStringContext booleanOrString() throws RecognitionException {
		BooleanOrStringContext _localctx = new BooleanOrStringContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_booleanOrString);
		try {
			setState(4548);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4543);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4544);
				match(FALSE);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(4545);
				match(ON);
				}
				break;
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 4);
				{
				setState(4546);
				nonReservedWord();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 5);
				{
				setState(4547);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedWordContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public NonReservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWord; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNonReservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedWordContext nonReservedWord() throws RecognitionException {
		NonReservedWordContext _localctx = new NonReservedWordContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_nonReservedWord);
		try {
			setState(4554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4550);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4551);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4552);
				colNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4553);
				typeFuncNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColNameKeywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PostgreSQLStatementParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLStatementParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(PostgreSQLStatementParser.BIT, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSQLStatementParser.BOOLEAN, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLStatementParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PostgreSQLStatementParser.CHARACTER, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLStatementParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSQLStatementParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSQLStatementParser.DECIMAL, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLStatementParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(PostgreSQLStatementParser.FLOAT, 0); }
		public TerminalNode GREATEST() { return getToken(PostgreSQLStatementParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSQLStatementParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLStatementParser.INOUT, 0); }
		public TerminalNode INT() { return getToken(PostgreSQLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLStatementParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLStatementParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLStatementParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLStatementParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLStatementParser.NONE, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLStatementParser.NULLIF, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLStatementParser.NUMERIC, 0); }
		public TerminalNode OUT() { return getToken(PostgreSQLStatementParser.OUT, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSQLStatementParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSQLStatementParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLStatementParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLStatementParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLStatementParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLStatementParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLStatementParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSQLStatementParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLStatementParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLStatementParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLStatementParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLStatementParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLStatementParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLStatementParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLStatementParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLStatementParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLStatementParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PostgreSQLStatementParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLStatementParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLStatementParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLStatementParser.XMLTABLE, 0); }
		public ColNameKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colNameKeyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColNameKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColNameKeywordContext colNameKeyword() throws RecognitionException {
		ColNameKeywordContext _localctx = new ColNameKeywordContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_colNameKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4556);
			_la = _input.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (POSITION - 72)) | (1L << (PRECISION - 72)) | (1L << (VALUES - 72)) | (1L << (TRIM - 72)) | (1L << (SUBSTRING - 72)) | (1L << (EXISTS - 72)) | (1L << (BETWEEN - 72)) | (1L << (BOOLEAN - 72)) | (1L << (CHAR - 72)) | (1L << (CHARACTER - 72)))) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (INTERVAL - 136)) | (1L << (TIME - 136)) | (1L << (TIMESTAMP - 136)) | (1L << (INTEGER - 136)) | (1L << (REAL - 136)) | (1L << (DECIMAL - 136)) | (1L << (SMALLINT - 136)) | (1L << (BIGINT - 136)) | (1L << (NUMERIC - 136)) | (1L << (NULLIF - 136)) | (1L << (NATIONAL - 136)) | (1L << (NCHAR - 136)) | (1L << (COALESCE - 136)) | (1L << (GROUPING - 136)))) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & ((1L << (DEC - 203)) | (1L << (ROW - 203)) | (1L << (EXTRACT - 203)))) != 0) || ((((_la - 317)) & ~0x3f) == 0 && ((1L << (_la - 317)) & ((1L << (INT - 317)) | (1L << (FLOAT - 317)) | (1L << (VARCHAR - 317)) | (1L << (BIT - 317)) | (1L << (OVERLAY - 317)) | (1L << (XMLCONCAT - 317)) | (1L << (XMLELEMENT - 317)) | (1L << (XMLEXISTS - 317)) | (1L << (XMLFOREST - 317)) | (1L << (XMLPARSE - 317)) | (1L << (XMLPI - 317)) | (1L << (XMLROOT - 317)) | (1L << (XMLSERIALIZE - 317)) | (1L << (TREAT - 317)) | (1L << (SETOF - 317)) | (1L << (XMLATTRIBUTES - 317)))) != 0) || ((((_la - 381)) & ~0x3f) == 0 && ((1L << (_la - 381)) & ((1L << (GREATEST - 381)) | (1L << (LEAST - 381)) | (1L << (XMLTABLE - 381)) | (1L << (XMLNAMESPACES - 381)) | (1L << (NONE - 381)))) != 0) || _la==OUT || _la==INOUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public DatabaseNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDatabaseName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseNameContext databaseName() throws RecognitionException {
		DatabaseNameContext _localctx = new DatabaseNameContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_databaseName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4558);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleSpecContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public RoleSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRoleSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleSpecContext roleSpec() throws RecognitionException {
		RoleSpecContext _localctx = new RoleSpecContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_roleSpec);
		try {
			setState(4564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4560);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4561);
				nonReservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4562);
				match(CURRENT_USER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4563);
				match(SESSION_USER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVarName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarNameContext varName() throws RecognitionException {
		return varName(0);
	}

	private VarNameContext varName(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		VarNameContext _localctx = new VarNameContext(_ctx, _parentState);
		VarNameContext _prevctx = _localctx;
		int _startState = 514;
		enterRecursionRule(_localctx, 514, RULE_varName, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4567);
			colId();
			}
			_ctx.stop = _input.LT(-1);
			setState(4574);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VarNameContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_varName);
					setState(4569);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4570);
					match(DOT_);
					setState(4571);
					colId();
					}
					} 
				}
				setState(4576);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class VarListContext extends ParserRuleContext {
		public List<VarValueContext> varValue() {
			return getRuleContexts(VarValueContext.class);
		}
		public VarValueContext varValue(int i) {
			return getRuleContext(VarValueContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public VarListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVarList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarListContext varList() throws RecognitionException {
		VarListContext _localctx = new VarListContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_varList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4577);
			varValue();
			setState(4582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4578);
				match(COMMA_);
				setState(4579);
				varValue();
				}
				}
				setState(4584);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarValueContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public VarValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVarValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarValueContext varValue() throws RecognitionException {
		VarValueContext _localctx = new VarValueContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_varValue);
		try {
			setState(4587);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4585);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4586);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ZoneValueContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(PostgreSQLStatementParser.INTERVAL, 0); }
		public OptIntervalContext optInterval() {
			return getRuleContext(OptIntervalContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public ZoneValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zoneValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitZoneValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ZoneValueContext zoneValue() throws RecognitionException {
		ZoneValueContext _localctx = new ZoneValueContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_zoneValue);
		try {
			setState(4602);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4589);
				match(STRING_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4590);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4591);
				match(INTERVAL);
				setState(4592);
				match(STRING_);
				setState(4593);
				optInterval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4594);
				match(INTERVAL);
				setState(4595);
				match(LP_);
				setState(4596);
				match(NUMBER_);
				setState(4597);
				match(RP_);
				setState(4598);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4599);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4600);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4601);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnlyContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(PostgreSQLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(PostgreSQLStatementParser.MINUS_, 0); }
		public NumericOnlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNumericOnly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyContext numericOnly() throws RecognitionException {
		NumericOnlyContext _localctx = new NumericOnlyContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_numericOnly);
		try {
			setState(4609);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4604);
				match(NUMBER_);
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4605);
				match(PLUS_);
				setState(4606);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(4607);
				match(MINUS_);
				setState(4608);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsoLevelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(PostgreSQLStatementParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLStatementParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLStatementParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLStatementParser.SERIALIZABLE, 0); }
		public IsoLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isoLevel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIsoLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsoLevelContext isoLevel() throws RecognitionException {
		IsoLevelContext _localctx = new IsoLevelContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_isoLevel);
		try {
			setState(4618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4611);
				match(READ);
				setState(4612);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4613);
				match(READ);
				setState(4614);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4615);
				match(REPEATABLE);
				setState(4616);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4617);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_columnDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4620);
			colId();
			setState(4621);
			typeName();
			setState(4623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(4622);
				createGenericOptions();
				}
			}

			setState(4625);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColQualListContext extends ParserRuleContext {
		public List<ColConstraintContext> colConstraint() {
			return getRuleContexts(ColConstraintContext.class);
		}
		public ColConstraintContext colConstraint(int i) {
			return getRuleContext(ColConstraintContext.class,i);
		}
		public ColQualListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colQualList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColQualList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColQualListContext colQualList() throws RecognitionException {
		ColQualListContext _localctx = new ColQualListContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_colQualList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CONSTRAINT - 67)) | (1L << (PRIMARY - 67)) | (1L << (UNIQUE - 67)) | (1L << (NOT - 67)) | (1L << (NULL - 67)))) != 0) || _la==DEFAULT || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (CHECK - 216)) | (1L << (GENERATED - 216)) | (1L << (REFERENCES - 216)) | (1L << (COLLATE - 216)) | (1L << (DEFERRABLE - 216)) | (1L << (INITIALLY - 216)))) != 0)) {
				{
				{
				setState(4627);
				colConstraint();
				}
				}
				setState(4632);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColConstraintElemContext colConstraintElem() {
			return getRuleContext(ColConstraintElemContext.class,0);
		}
		public ConstraintAttrContext constraintAttr() {
			return getRuleContext(ConstraintAttrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintContext colConstraint() throws RecognitionException {
		ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_colConstraint);
		try {
			setState(4641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4633);
				match(CONSTRAINT);
				setState(4634);
				name();
				setState(4635);
				colConstraintElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4637);
				colConstraintElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4638);
				constraintAttr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4639);
				match(COLLATE);
				setState(4640);
				anyName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLStatementParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLStatementParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLStatementParser.IMMEDIATE, 0); }
		public ConstraintAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConstraintAttr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttrContext constraintAttr() throws RecognitionException {
		ConstraintAttrContext _localctx = new ConstraintAttrContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_constraintAttr);
		try {
			setState(4650);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4643);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4644);
				match(NOT);
				setState(4645);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4646);
				match(INITIALLY);
				setState(4647);
				match(DEFERRED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4648);
				match(INITIALLY);
				setState(4649);
				match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColConstraintElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public ConsTableSpaceContext consTableSpace() {
			return getRuleContext(ConsTableSpaceContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLStatementParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public NoInheritContext noInherit() {
			return getRuleContext(NoInheritContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public ParenthesizedSeqOptListContext parenthesizedSeqOptList() {
			return getRuleContext(ParenthesizedSeqOptListContext.class,0);
		}
		public TerminalNode STORED() { return getToken(PostgreSQLStatementParser.STORED, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public KeyMatchContext keyMatch() {
			return getRuleContext(KeyMatchContext.class,0);
		}
		public KeyActionsContext keyActions() {
			return getRuleContext(KeyActionsContext.class,0);
		}
		public ColConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraintElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintElemContext colConstraintElem() throws RecognitionException {
		ColConstraintElemContext _localctx = new ColConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_colConstraintElem);
		int _la;
		try {
			setState(4703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4652);
				match(NOT);
				setState(4653);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4654);
				match(NULL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4655);
				match(UNIQUE);
				setState(4658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4656);
					match(WITH);
					setState(4657);
					definition();
					}
				}

				setState(4660);
				consTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4661);
				match(PRIMARY);
				setState(4662);
				match(KEY);
				setState(4665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4663);
					match(WITH);
					setState(4664);
					definition();
					}
				}

				setState(4667);
				consTableSpace();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4668);
				match(CHECK);
				setState(4669);
				match(LP_);
				setState(4670);
				aExpr(0);
				setState(4671);
				match(RP_);
				setState(4673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4672);
					noInherit();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4675);
				match(DEFAULT);
				setState(4676);
				bExpr(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4677);
				match(GENERATED);
				setState(4678);
				generatedWhen();
				setState(4679);
				match(AS);
				setState(4680);
				match(IDENTITY);
				setState(4682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(4681);
					parenthesizedSeqOptList();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4684);
				match(GENERATED);
				setState(4685);
				generatedWhen();
				setState(4686);
				match(AS);
				setState(4687);
				match(LP_);
				setState(4688);
				aExpr(0);
				setState(4689);
				match(RP_);
				setState(4690);
				match(STORED);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4692);
				match(REFERENCES);
				setState(4693);
				qualifiedName();
				setState(4695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(4694);
					optColumnList();
					}
				}

				setState(4698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATCH) {
					{
					setState(4697);
					keyMatch();
					}
				}

				setState(4701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(4700);
					keyActions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParenthesizedSeqOptListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ParenthesizedSeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedSeqOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitParenthesizedSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParenthesizedSeqOptListContext parenthesizedSeqOptList() throws RecognitionException {
		ParenthesizedSeqOptListContext _localctx = new ParenthesizedSeqOptListContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_parenthesizedSeqOptList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4705);
			match(LP_);
			setState(4706);
			seqOptList();
			setState(4707);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptListContext extends ParserRuleContext {
		public List<SeqOptElemContext> seqOptElem() {
			return getRuleContexts(SeqOptElemContext.class);
		}
		public SeqOptElemContext seqOptElem(int i) {
			return getRuleContext(SeqOptElemContext.class,i);
		}
		public SeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptListContext seqOptList() throws RecognitionException {
		SeqOptListContext _localctx = new SeqOptListContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_seqOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4710); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4709);
				seqOptElem();
				}
				}
				setState(4712); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AS || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (NO - 220)) | (1L << (START - 220)) | (1L << (CACHE - 220)) | (1L << (CYCLE - 220)) | (1L << (INCREMENT - 220)) | (1L << (MAXVALUE - 220)) | (1L << (MINVALUE - 220)) | (1L << (OWNED - 220)))) != 0) || _la==RESTART || _la==SEQUENCE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptElemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(PostgreSQLStatementParser.CACHE, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(PostgreSQLStatementParser.CYCLE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLStatementParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLStatementParser.MINVALUE, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLStatementParser.NAME, 0); }
		public TerminalNode START() { return getToken(PostgreSQLStatementParser.START, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLStatementParser.RESTART, 0); }
		public SeqOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSeqOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptElemContext seqOptElem() throws RecognitionException {
		SeqOptElemContext _localctx = new SeqOptElemContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_seqOptElem);
		int _la;
		try {
			setState(4751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4714);
				match(AS);
				setState(4715);
				simpleTypeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4716);
				match(CACHE);
				setState(4717);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4718);
				match(CYCLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4719);
				match(NO);
				setState(4720);
				match(CYCLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4721);
				match(INCREMENT);
				setState(4723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(4722);
					match(BY);
					}
				}

				setState(4725);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4726);
				match(MAXVALUE);
				setState(4727);
				numericOnly();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4728);
				match(MINVALUE);
				setState(4729);
				numericOnly();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4730);
				match(NO);
				setState(4731);
				match(MAXVALUE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4732);
				match(NO);
				setState(4733);
				match(MINVALUE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4734);
				match(OWNED);
				setState(4735);
				match(BY);
				setState(4736);
				anyName();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4737);
				match(SEQUENCE);
				setState(4738);
				match(NAME);
				setState(4739);
				anyName();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4740);
				match(START);
				setState(4742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4741);
					match(WITH);
					}
				}

				setState(4744);
				numericOnly();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4745);
				match(RESTART);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4746);
				match(RESTART);
				setState(4748);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4747);
					match(WITH);
					}
				}

				setState(4750);
				numericOnly();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptColumnListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public OptColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optColumnList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptColumnListContext optColumnList() throws RecognitionException {
		OptColumnListContext _localctx = new OptColumnListContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_optColumnList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4753);
			match(LP_);
			setState(4754);
			columnList();
			setState(4755);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4757);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnListContext extends ParserRuleContext {
		public List<ColumnElemContext> columnElem() {
			return getRuleContexts(ColumnElemContext.class);
		}
		public ColumnElemContext columnElem(int i) {
			return getRuleContext(ColumnElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnListContext columnList() throws RecognitionException {
		ColumnListContext _localctx = new ColumnListContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_columnList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4759);
			columnElem();
			setState(4764);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4760);
					match(COMMA_);
					setState(4761);
					columnElem();
					}
					} 
				}
				setState(4766);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneratedWhenContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public GeneratedWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedWhen; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGeneratedWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedWhenContext generatedWhen() throws RecognitionException {
		GeneratedWhenContext _localctx = new GeneratedWhenContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_generatedWhen);
		try {
			setState(4770);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4767);
				match(ALWAYS);
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4768);
				match(BY);
				setState(4769);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoInheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public NoInheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noInherit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNoInherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoInheritContext noInherit() throws RecognitionException {
		NoInheritContext _localctx = new NoInheritContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_noInherit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4772);
			match(NO);
			setState(4773);
			match(INHERIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConsTableSpaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConsTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consTableSpace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConsTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsTableSpaceContext consTableSpace() throws RecognitionException {
		ConsTableSpaceContext _localctx = new ConsTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_consTableSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4775);
			match(USING);
			setState(4776);
			match(INDEX);
			setState(4777);
			match(TABLESPACE);
			setState(4778);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public DefListContext defList() {
			return getRuleContext(DefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4780);
			match(LP_);
			setState(4781);
			defList();
			setState(4782);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefListContext extends ParserRuleContext {
		public List<DefElemContext> defElem() {
			return getRuleContexts(DefElemContext.class);
		}
		public DefElemContext defElem(int i) {
			return getRuleContext(DefElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public DefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefListContext defList() throws RecognitionException {
		DefListContext _localctx = new DefListContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_defList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4784);
			defElem();
			setState(4789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4785);
				match(COMMA_);
				setState(4786);
				defElem();
				}
				}
				setState(4791);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public DefElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDefElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefElemContext defElem() throws RecognitionException {
		DefElemContext _localctx = new DefElemContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_defElem);
		try {
			setState(4797);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4792);
				colLabel();
				setState(4793);
				match(EQ_);
				setState(4794);
				defArg();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4796);
				colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_colLabel);
		try {
			setState(4804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4799);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4800);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4801);
				colNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4802);
				typeFuncNameKeyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4803);
				reservedKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyActionsContext extends ParserRuleContext {
		public KeyUpdateContext keyUpdate() {
			return getRuleContext(KeyUpdateContext.class,0);
		}
		public KeyDeleteContext keyDelete() {
			return getRuleContext(KeyDeleteContext.class,0);
		}
		public KeyActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyActions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitKeyActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyActionsContext keyActions() throws RecognitionException {
		KeyActionsContext _localctx = new KeyActionsContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_keyActions);
		try {
			setState(4814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4806);
				keyUpdate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4807);
				keyDelete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4808);
				keyUpdate();
				setState(4809);
				keyDelete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4811);
				keyDelete();
				setState(4812);
				keyUpdate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyDeleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public KeyActionContext keyAction() {
			return getRuleContext(KeyActionContext.class,0);
		}
		public KeyDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyDelete; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitKeyDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyDeleteContext keyDelete() throws RecognitionException {
		KeyDeleteContext _localctx = new KeyDeleteContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_keyDelete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4816);
			match(ON);
			setState(4817);
			match(DELETE);
			setState(4818);
			keyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUpdateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public KeyActionContext keyAction() {
			return getRuleContext(KeyActionContext.class,0);
		}
		public KeyUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUpdate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitKeyUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyUpdateContext keyUpdate() throws RecognitionException {
		KeyUpdateContext _localctx = new KeyUpdateContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_keyUpdate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4820);
			match(ON);
			setState(4821);
			match(UPDATE);
			setState(4822);
			keyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyActionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLStatementParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public KeyActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitKeyAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyActionContext keyAction() throws RecognitionException {
		KeyActionContext _localctx = new KeyActionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_keyAction);
		try {
			setState(4832);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4824);
				match(NO);
				setState(4825);
				match(ACTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4826);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4827);
				match(CASCADE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4828);
				match(SET);
				setState(4829);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4830);
				match(SET);
				setState(4831);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyMatchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(PostgreSQLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLStatementParser.SIMPLE, 0); }
		public KeyMatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyMatch; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitKeyMatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyMatchContext keyMatch() throws RecognitionException {
		KeyMatchContext _localctx = new KeyMatchContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_keyMatch);
		try {
			setState(4840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4834);
				match(MATCH);
				setState(4835);
				match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4836);
				match(MATCH);
				setState(4837);
				match(PARTIAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4838);
				match(MATCH);
				setState(4839);
				match(SIMPLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGenericOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public GenericOptionListContext genericOptionList() {
			return getRuleContext(GenericOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CreateGenericOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGenericOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateGenericOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGenericOptionsContext createGenericOptions() throws RecognitionException {
		CreateGenericOptionsContext _localctx = new CreateGenericOptionsContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_createGenericOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4842);
			match(OPTIONS);
			setState(4843);
			match(LP_);
			setState(4844);
			genericOptionList();
			setState(4845);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionListContext extends ParserRuleContext {
		public List<GenericOptionElemContext> genericOptionElem() {
			return getRuleContexts(GenericOptionElemContext.class);
		}
		public GenericOptionElemContext genericOptionElem(int i) {
			return getRuleContext(GenericOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public GenericOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGenericOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionListContext genericOptionList() throws RecognitionException {
		GenericOptionListContext _localctx = new GenericOptionListContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_genericOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4847);
			genericOptionElem();
			setState(4852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4848);
				match(COMMA_);
				setState(4849);
				genericOptionElem();
				}
				}
				setState(4854);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionElemContext extends ParserRuleContext {
		public GenericOptionNameContext genericOptionName() {
			return getRuleContext(GenericOptionNameContext.class,0);
		}
		public GenericOptionArgContext genericOptionArg() {
			return getRuleContext(GenericOptionArgContext.class,0);
		}
		public GenericOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGenericOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionElemContext genericOptionElem() throws RecognitionException {
		GenericOptionElemContext _localctx = new GenericOptionElemContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_genericOptionElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4855);
			genericOptionName();
			setState(4856);
			genericOptionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionArgContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public GenericOptionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGenericOptionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionArgContext genericOptionArg() throws RecognitionException {
		GenericOptionArgContext _localctx = new GenericOptionArgContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_genericOptionArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4858);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionNameContext extends ParserRuleContext {
		public ColLableContext colLable() {
			return getRuleContext(ColLableContext.class,0);
		}
		public GenericOptionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGenericOptionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionNameContext genericOptionName() throws RecognitionException {
		GenericOptionNameContext _localctx = new GenericOptionNameContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_genericOptionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4860);
			colLable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicaIdentityContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLStatementParser.NOTHING, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReplicaIdentityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicaIdentity; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReplicaIdentity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicaIdentityContext replicaIdentity() throws RecognitionException {
		ReplicaIdentityContext _localctx = new ReplicaIdentityContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_replicaIdentity);
		try {
			setState(4868);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4862);
				match(NOTHING);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4863);
				match(FULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4864);
				match(DEFAULT);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 4);
				{
				setState(4865);
				match(USING);
				setState(4866);
				match(INDEX);
				setState(4867);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperArgtypesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLStatementParser.NONE, 0); }
		public OperArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operArgtypes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOperArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperArgtypesContext operArgtypes() throws RecognitionException {
		OperArgtypesContext _localctx = new OperArgtypesContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_operArgtypes);
		try {
			setState(4892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4870);
				match(LP_);
				setState(4871);
				typeName();
				setState(4872);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4874);
				match(LP_);
				setState(4875);
				typeName();
				setState(4876);
				match(COMMA_);
				setState(4877);
				typeName();
				setState(4878);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4880);
				match(LP_);
				setState(4881);
				match(NONE);
				setState(4882);
				match(COMMA_);
				setState(4883);
				typeName();
				setState(4884);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4886);
				match(LP_);
				setState(4887);
				typeName();
				setState(4888);
				match(COMMA_);
				setState(4889);
				match(NONE);
				setState(4890);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgContext extends ParserRuleContext {
		public ArgClassContext argClass() {
			return getRuleContext(ArgClassContext.class,0);
		}
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public FuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgContext funcArg() throws RecognitionException {
		FuncArgContext _localctx = new FuncArgContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_funcArg);
		try {
			setState(4909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4894);
				argClass();
				setState(4895);
				paramName();
				setState(4896);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4898);
				paramName();
				setState(4899);
				argClass();
				setState(4900);
				funcType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4902);
				paramName();
				setState(4903);
				funcType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4905);
				argClass();
				setState(4906);
				funcType();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4908);
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgClassContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PostgreSQLStatementParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLStatementParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLStatementParser.VARIADIC, 0); }
		public ArgClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argClass; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitArgClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgClassContext argClass() throws RecognitionException {
		ArgClassContext _localctx = new ArgClassContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_argClass);
		try {
			setState(4917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4911);
				match(IN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4912);
				match(OUT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4913);
				match(INOUT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4914);
				match(IN);
				setState(4915);
				match(OUT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4916);
				match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsListContext extends ParserRuleContext {
		public List<FuncArgContext> funcArg() {
			return getRuleContexts(FuncArgContext.class);
		}
		public FuncArgContext funcArg(int i) {
			return getRuleContext(FuncArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public FuncArgsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncArgsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsListContext funcArgsList() throws RecognitionException {
		FuncArgsListContext _localctx = new FuncArgsListContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_funcArgsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4919);
			funcArg();
			setState(4924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4920);
				match(COMMA_);
				setState(4921);
				funcArg();
				}
				}
				setState(4926);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedWordOrSconstContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public NonReservedWordOrSconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWordOrSconst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNonReservedWordOrSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedWordOrSconstContext nonReservedWordOrSconst() throws RecognitionException {
		NonReservedWordOrSconstContext _localctx = new NonReservedWordOrSconstContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_nonReservedWordOrSconst);
		try {
			setState(4929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4927);
				nonReservedWord();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4928);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public FileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFileName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileNameContext fileName() throws RecognitionException {
		FileNameContext _localctx = new FileNameContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_fileName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4931);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleListContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleListContext roleList() throws RecognitionException {
		RoleListContext _localctx = new RoleListContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_roleList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			roleSpec();
			setState(4938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4934);
				match(COMMA_);
				setState(4935);
				roleSpec();
				}
				}
				setState(4940);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SetRestContext setRest() {
			return getRuleContext(SetRestContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public SetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResetClauseContext setResetClause() throws RecognitionException {
		SetResetClauseContext _localctx = new SetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_setResetClause);
		try {
			setState(4944);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(4941);
				match(SET);
				setState(4942);
				setRest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(4943);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRestContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public SetRestMoreContext setRestMore() {
			return getRuleContext(SetRestMoreContext.class,0);
		}
		public SetRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRest; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSetRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRestContext setRest() throws RecognitionException {
		SetRestContext _localctx = new SetRestContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_setRest);
		try {
			setState(4954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4946);
				match(TRANSACTION);
				setState(4947);
				transactionModeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4948);
				match(SESSION);
				setState(4949);
				match(CHARACTERISTICS);
				setState(4950);
				match(AS);
				setState(4951);
				match(TRANSACTION);
				setState(4952);
				transactionModeList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4953);
				setRestMore();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeListContext extends ParserRuleContext {
		public List<TransactionModeItemContext> transactionModeItem() {
			return getRuleContexts(TransactionModeItemContext.class);
		}
		public TransactionModeItemContext transactionModeItem(int i) {
			return getRuleContext(TransactionModeItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TransactionModeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionModeList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTransactionModeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeListContext transactionModeList() throws RecognitionException {
		TransactionModeListContext _localctx = new TransactionModeListContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_transactionModeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4956);
			transactionModeItem();
			setState(4963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_ || _la==NOT || ((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (ISOLATION - 218)) | (1L << (READ - 218)) | (1L << (DEFERRABLE - 218)))) != 0)) {
				{
				{
				setState(4958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(4957);
					match(COMMA_);
					}
				}

				setState(4960);
				transactionModeItem();
				}
				}
				setState(4965);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeItemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PostgreSQLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public IsoLevelContext isoLevel() {
			return getRuleContext(IsoLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(PostgreSQLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLStatementParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLStatementParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TransactionModeItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionModeItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTransactionModeItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeItemContext transactionModeItem() throws RecognitionException {
		TransactionModeItemContext _localctx = new TransactionModeItemContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_transactionModeItem);
		try {
			setState(4976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4966);
				match(ISOLATION);
				setState(4967);
				match(LEVEL);
				setState(4968);
				isoLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4969);
				match(READ);
				setState(4970);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4971);
				match(READ);
				setState(4972);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4973);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4974);
				match(NOT);
				setState(4975);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRestMoreContext extends ParserRuleContext {
		public GenericSetContext genericSet() {
			return getRuleContext(GenericSetContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public ZoneValueContext zoneValue() {
			return getRuleContext(ZoneValueContext.class,0);
		}
		public TerminalNode CATALOG() { return getToken(PostgreSQLStatementParser.CATALOG, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLStatementParser.NAMES, 0); }
		public EncodingContext encoding() {
			return getRuleContext(EncodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode XML() { return getToken(PostgreSQLStatementParser.XML, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLStatementParser.SNAPSHOT, 0); }
		public SetRestMoreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRestMore; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSetRestMore(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRestMoreContext setRestMore() throws RecognitionException {
		SetRestMoreContext _localctx = new SetRestMoreContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_setRestMore);
		int _la;
		try {
			setState(5010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4978);
				genericSet();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4979);
				varName(0);
				setState(4980);
				match(FROM);
				setState(4981);
				match(CURRENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4983);
				match(TIME);
				setState(4984);
				match(ZONE);
				setState(4985);
				zoneValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4986);
				match(CATALOG);
				setState(4987);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4988);
				match(SCHEMA);
				setState(4989);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4990);
				match(NAMES);
				setState(4992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==STRING_) {
					{
					setState(4991);
					encoding();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4994);
				match(ROLE);
				setState(4995);
				nonReservedWord();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4996);
				match(STRING_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4997);
				match(SESSION);
				setState(4998);
				match(AUTHORIZATION);
				setState(4999);
				nonReservedWord();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5000);
				match(STRING_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5001);
				match(SESSION);
				setState(5002);
				match(AUTHORIZATION);
				setState(5003);
				match(DEFAULT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5004);
				match(XML);
				setState(5005);
				match(OPTION);
				setState(5006);
				documentOrContent();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5007);
				match(TRANSACTION);
				setState(5008);
				match(SNAPSHOT);
				setState(5009);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncodingContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public EncodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encoding; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitEncoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncodingContext encoding() throws RecognitionException {
		EncodingContext _localctx = new EncodingContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_encoding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5012);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericSetContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public VarListContext varList() {
			return getRuleContext(VarListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public GenericSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGenericSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericSetContext genericSet() throws RecognitionException {
		GenericSetContext _localctx = new GenericSetContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_genericSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5014);
			varName(0);
			setState(5015);
			_la = _input.LA(1);
			if ( !(_la==EQ_ || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5018);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case PLUS_:
			case MINUS_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(5016);
				varList();
				}
				break;
			case DEFAULT:
				{
				setState(5017);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableResetStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public ResetRestContext resetRest() {
			return getRuleContext(ResetRestContext.class,0);
		}
		public VariableResetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableResetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVariableResetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableResetStmtContext variableResetStmt() throws RecognitionException {
		VariableResetStmtContext _localctx = new VariableResetStmtContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_variableResetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5020);
			match(RESET);
			setState(5021);
			resetRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetRestContext extends ParserRuleContext {
		public GenericResetContext genericReset() {
			return getRuleContext(GenericResetContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public ResetRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetRest; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitResetRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetRestContext resetRest() throws RecognitionException {
		ResetRestContext _localctx = new ResetRestContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_resetRest);
		try {
			setState(5031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5023);
				genericReset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5024);
				match(TIME);
				setState(5025);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5026);
				match(TRANSACTION);
				setState(5027);
				match(ISOLATION);
				setState(5028);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5029);
				match(SESSION);
				setState(5030);
				match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericResetContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public GenericResetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericReset; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGenericReset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericResetContext genericReset() throws RecognitionException {
		GenericResetContext _localctx = new GenericResetContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_genericReset);
		try {
			setState(5035);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5033);
				varName(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5034);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprListContext extends ParserRuleContext {
		public List<RelationExprContext> relationExpr() {
			return getRuleContexts(RelationExprContext.class);
		}
		public RelationExprContext relationExpr(int i) {
			return getRuleContext(RelationExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public RelationExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExprList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRelationExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprListContext relationExprList() throws RecognitionException {
		RelationExprListContext _localctx = new RelationExprListContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_relationExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5037);
			relationExpr();
			setState(5042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5038);
				match(COMMA_);
				setState(5039);
				relationExpr();
				}
				}
				setState(5044);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonFuncOptItemContext extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(PostgreSQLStatementParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(PostgreSQLStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PostgreSQLStatementParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(PostgreSQLStatementParser.INPUT, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLStatementParser.RETURNS, 0); }
		public TerminalNode STRICT() { return getToken(PostgreSQLStatementParser.STRICT, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLStatementParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLStatementParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLStatementParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLStatementParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLStatementParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLStatementParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLStatementParser.COST, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLStatementParser.SUPPORT, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public FunctionSetResetClauseContext functionSetResetClause() {
			return getRuleContext(FunctionSetResetClauseContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(PostgreSQLStatementParser.PARALLEL, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public CommonFuncOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonFuncOptItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCommonFuncOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonFuncOptItemContext commonFuncOptItem() throws RecognitionException {
		CommonFuncOptItemContext _localctx = new CommonFuncOptItemContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_commonFuncOptItem);
		try {
			setState(5080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5045);
				match(CALLED);
				setState(5046);
				match(ON);
				setState(5047);
				match(NULL);
				setState(5048);
				match(INPUT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5049);
				match(RETURNS);
				setState(5050);
				match(NULL);
				setState(5051);
				match(ON);
				setState(5052);
				match(NULL);
				setState(5053);
				match(INPUT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5054);
				match(STRICT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5055);
				match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5056);
				match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5057);
				match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5058);
				match(EXTERNAL);
				setState(5059);
				match(SECURITY);
				setState(5060);
				match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5061);
				match(EXTERNAL);
				setState(5062);
				match(SECURITY);
				setState(5063);
				match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5064);
				match(SECURITY);
				setState(5065);
				match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5066);
				match(SECURITY);
				setState(5067);
				match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5068);
				match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5069);
				match(NOT);
				setState(5070);
				match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5071);
				match(COST);
				setState(5072);
				numericOnly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5073);
				match(ROWS);
				setState(5074);
				numericOnly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5075);
				match(SUPPORT);
				setState(5076);
				anyName();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5077);
				functionSetResetClause();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5078);
				match(PARALLEL);
				setState(5079);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionSetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SetRestMoreContext setRestMore() {
			return getRuleContext(SetRestMoreContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public FunctionSetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionSetResetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFunctionSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionSetResetClauseContext functionSetResetClause() throws RecognitionException {
		FunctionSetResetClauseContext _localctx = new FunctionSetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_functionSetResetClause);
		try {
			setState(5085);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(5082);
				match(SET);
				setState(5083);
				setRestMore();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(5084);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowSecurityCmdContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public RowSecurityCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowSecurityCmd; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRowSecurityCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowSecurityCmdContext rowSecurityCmd() throws RecognitionException {
		RowSecurityCmdContext _localctx = new RowSecurityCmdContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_rowSecurityCmd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5087);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SELECT) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE))) != 0) || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5089);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SELECT) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameListContext extends ParserRuleContext {
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TypeNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeNameList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTypeNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameListContext typeNameList() throws RecognitionException {
		TypeNameListContext _localctx = new TypeNameListContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_typeNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5091);
			typeName();
			setState(5096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5092);
				match(COMMA_);
				setState(5093);
				typeName();
				}
				}
				setState(5098);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public CreateTableSpecificationContext createTableSpecification() {
			return getRuleContext(CreateTableSpecificationContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InheritClauseContext inheritClause() {
			return getRuleContext(InheritClauseContext.class,0);
		}
		public CreateDefinitionClauseContext createDefinitionClause() {
			return getRuleContext(CreateDefinitionClauseContext.class,0);
		}
		public TableNotExistClauseContext tableNotExistClause() {
			return getRuleContext(TableNotExistClauseContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TableAccessMethodClauseContext tableAccessMethodClause() {
			return getRuleContext(TableAccessMethodClauseContext.class,0);
		}
		public WithOptionContext withOption() {
			return getRuleContext(WithOptionContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExecuteParamClauseContext executeParamClause() {
			return getRuleContext(ExecuteParamClauseContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public List<WithDataContext> withData() {
			return getRuleContexts(WithDataContext.class);
		}
		public WithDataContext withData(int i) {
			return getRuleContext(WithDataContext.class,i);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5099);
			match(CREATE);
			setState(5100);
			createTableSpecification();
			setState(5101);
			match(TABLE);
			setState(5103);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(5102);
				tableNotExistClause();
				}
				break;
			}
			setState(5105);
			tableName();
			setState(5126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				{
				setState(5106);
				createDefinitionClause();
				}
				break;
			case OF:
				{
				{
				setState(5107);
				match(OF);
				setState(5108);
				anyName();
				setState(5113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(5109);
					match(LP_);
					setState(5110);
					typedTableElementList();
					setState(5111);
					match(RP_);
					}
				}

				}
				}
				break;
			case PARTITION:
				{
				{
				setState(5115);
				match(PARTITION);
				setState(5116);
				match(OF);
				setState(5117);
				qualifiedName();
				setState(5122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(5118);
					match(LP_);
					setState(5119);
					typedTableElementList();
					setState(5120);
					match(RP_);
					}
				}

				setState(5124);
				partitionBoundSpec();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5128);
			inheritClause();
			setState(5130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5129);
				partitionSpec();
				}
			}

			setState(5133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5132);
				tableAccessMethodClause();
				}
			}

			setState(5136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				setState(5135);
				withOption();
				}
			}

			setState(5139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5138);
				onCommitOption();
				}
			}

			setState(5142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(5141);
				tableSpace();
				}
			}

			setState(5149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5144);
				match(AS);
				setState(5145);
				select();
				setState(5147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5146);
					withData();
					}
				}

				}
			}

			setState(5157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXECUTE) {
				{
				setState(5151);
				match(EXECUTE);
				setState(5152);
				name();
				setState(5153);
				executeParamClause();
				setState(5155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5154);
					withData();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteParamClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExecuteParamClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeParamClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExecuteParamClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteParamClauseContext executeParamClause() throws RecognitionException {
		ExecuteParamClauseContext _localctx = new ExecuteParamClauseContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_executeParamClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5159);
			match(LP_);
			setState(5160);
			exprList(0);
			setState(5161);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionBoundSpecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLStatementParser.VALUES, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public HashPartboundContext hashPartbound() {
			return getRuleContext(HashPartboundContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public List<ExprListContext> exprList() {
			return getRuleContexts(ExprListContext.class);
		}
		public ExprListContext exprList(int i) {
			return getRuleContext(ExprListContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public PartitionBoundSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionBoundSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPartitionBoundSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionBoundSpecContext partitionBoundSpec() throws RecognitionException {
		PartitionBoundSpecContext _localctx = new PartitionBoundSpecContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_partitionBoundSpec);
		try {
			setState(5189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5163);
				match(FOR);
				setState(5164);
				match(VALUES);
				setState(5165);
				match(WITH);
				setState(5166);
				match(LP_);
				setState(5167);
				hashPartbound();
				setState(5168);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5170);
				match(FOR);
				setState(5171);
				match(VALUES);
				setState(5172);
				match(IN);
				setState(5173);
				match(LP_);
				setState(5174);
				exprList(0);
				setState(5175);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5177);
				match(FOR);
				setState(5178);
				match(VALUES);
				setState(5179);
				match(FROM);
				setState(5180);
				match(LP_);
				setState(5181);
				exprList(0);
				setState(5182);
				match(RP_);
				setState(5183);
				match(TO);
				setState(5184);
				match(LP_);
				setState(5185);
				exprList(0);
				setState(5186);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5188);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HashPartboundContext extends ParserRuleContext {
		public List<HashPartboundElemContext> hashPartboundElem() {
			return getRuleContexts(HashPartboundElemContext.class);
		}
		public HashPartboundElemContext hashPartboundElem(int i) {
			return getRuleContext(HashPartboundElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public HashPartboundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hashPartbound; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitHashPartbound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HashPartboundContext hashPartbound() throws RecognitionException {
		HashPartboundContext _localctx = new HashPartboundContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_hashPartbound);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5191);
			hashPartboundElem();
			setState(5196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5192);
				match(COMMA_);
				setState(5193);
				hashPartboundElem();
				}
				}
				setState(5198);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HashPartboundElemContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public HashPartboundElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hashPartboundElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitHashPartboundElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HashPartboundElemContext hashPartboundElem() throws RecognitionException {
		HashPartboundElemContext _localctx = new HashPartboundElemContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_hashPartboundElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5199);
			nonReservedWord();
			setState(5200);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedTableElementListContext extends ParserRuleContext {
		public List<TypedTableElementContext> typedTableElement() {
			return getRuleContexts(TypedTableElementContext.class);
		}
		public TypedTableElementContext typedTableElement(int i) {
			return getRuleContext(TypedTableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TypedTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTypedTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementListContext typedTableElementList() throws RecognitionException {
		TypedTableElementListContext _localctx = new TypedTableElementListContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_typedTableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5202);
			typedTableElement();
			setState(5207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5203);
				match(COMMA_);
				setState(5204);
				typedTableElement();
				}
				}
				setState(5209);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedTableElementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TypedTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTypedTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementContext typedTableElement() throws RecognitionException {
		TypedTableElementContext _localctx = new TypedTableElementContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_typedTableElement);
		try {
			setState(5212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5210);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5211);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLStatementParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_columnOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5214);
			colId();
			setState(5217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5215);
				match(WITH);
				setState(5216);
				match(OPTIONS);
				}
			}

			setState(5219);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithDataContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public WithDataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withData; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWithData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithDataContext withData() throws RecognitionException {
		WithDataContext _localctx = new WithDataContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_withData);
		try {
			setState(5226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5221);
				match(WITH);
				setState(5222);
				match(DATA);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5223);
				match(WITH);
				setState(5224);
				match(NO);
				setState(5225);
				match(DATA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSpace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSpaceContext tableSpace() throws RecognitionException {
		TableSpaceContext _localctx = new TableSpaceContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_tableSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5228);
			match(TABLESPACE);
			setState(5229);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnCommitOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLStatementParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLStatementParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLStatementParser.PRESERVE, 0); }
		public OnCommitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onCommitOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOnCommitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnCommitOptionContext onCommitOption() throws RecognitionException {
		OnCommitOptionContext _localctx = new OnCommitOptionContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_onCommitOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5231);
			match(ON);
			setState(5232);
			match(COMMIT);
			setState(5238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
				{
				setState(5233);
				match(DROP);
				}
				break;
			case DELETE:
				{
				setState(5234);
				match(DELETE);
				setState(5235);
				match(ROWS);
				}
				break;
			case PRESERVE:
				{
				setState(5236);
				match(PRESERVE);
				setState(5237);
				match(ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLStatementParser.OIDS, 0); }
		public WithOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitWithOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithOptionContext withOption() throws RecognitionException {
		WithOptionContext _localctx = new WithOptionContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_withOption);
		try {
			setState(5244);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5240);
				match(WITH);
				setState(5241);
				reloptions();
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5242);
				match(WITHOUT);
				setState(5243);
				match(OIDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAccessMethodClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public TableAccessMethodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAccessMethodClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableAccessMethodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAccessMethodClauseContext tableAccessMethodClause() throws RecognitionException {
		TableAccessMethodClauseContext _localctx = new TableAccessMethodClauseContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_tableAccessMethodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5246);
			match(USING);
			setState(5247);
			accessMethod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccessMethodContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public AccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessMethod; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccessMethodContext accessMethod() throws RecognitionException {
		AccessMethodContext _localctx = new AccessMethodContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_accessMethod);
		try {
			setState(5252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5249);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5250);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5251);
				colNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public CreateIndexSpecificationContext createIndexSpecification() {
			return getRuleContext(CreateIndexSpecificationContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public ConcurrentlyClauseContext concurrentlyClause() {
			return getRuleContext(ConcurrentlyClauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public IndexParamsContext indexParams() {
			return getRuleContext(IndexParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public IndexNotExistClauseContext indexNotExistClause() {
			return getRuleContext(IndexNotExistClauseContext.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public AccessMethodClauseContext accessMethodClause() {
			return getRuleContext(AccessMethodClauseContext.class,0);
		}
		public IncludeContext include() {
			return getRuleContext(IncludeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_createIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5254);
			match(CREATE);
			setState(5255);
			createIndexSpecification();
			setState(5256);
			match(INDEX);
			setState(5257);
			concurrentlyClause();
			setState(5261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
				{
				setState(5258);
				indexNotExistClause();
				setState(5259);
				indexName();
				}
			}

			setState(5263);
			match(ON);
			setState(5264);
			onlyClause();
			setState(5265);
			tableName();
			setState(5267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5266);
				accessMethodClause();
				}
			}

			setState(5269);
			match(LP_);
			setState(5270);
			indexParams();
			setState(5271);
			match(RP_);
			setState(5273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(5272);
				include();
				}
			}

			setState(5277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5275);
				match(WITH);
				setState(5276);
				reloptions();
				}
			}

			setState(5280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(5279);
				tableSpace();
				}
			}

			setState(5283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5282);
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLStatementParser.INCLUDE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public IndexIncludingParamsContext indexIncludingParams() {
			return getRuleContext(IndexIncludingParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_include; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitInclude(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeContext include() throws RecognitionException {
		IncludeContext _localctx = new IncludeContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_include);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5285);
			match(INCLUDE);
			setState(5286);
			match(LP_);
			setState(5287);
			indexIncludingParams();
			setState(5288);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexIncludingParamsContext extends ParserRuleContext {
		public List<IndexElemContext> indexElem() {
			return getRuleContexts(IndexElemContext.class);
		}
		public IndexElemContext indexElem(int i) {
			return getRuleContext(IndexElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public IndexIncludingParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexIncludingParams; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndexIncludingParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexIncludingParamsContext indexIncludingParams() throws RecognitionException {
		IndexIncludingParamsContext _localctx = new IndexIncludingParamsContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_indexIncludingParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5290);
			indexElem();
			setState(5295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5291);
				match(COMMA_);
				setState(5292);
				indexElem();
				}
				}
				setState(5297);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccessMethodClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public AccessMethodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessMethodClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAccessMethodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccessMethodClauseContext accessMethodClause() throws RecognitionException {
		AccessMethodClauseContext _localctx = new AccessMethodClauseContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_accessMethodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5298);
			match(USING);
			setState(5299);
			accessMethod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public List<CreateDatabaseSpecificationContext> createDatabaseSpecification() {
			return getRuleContexts(CreateDatabaseSpecificationContext.class);
		}
		public CreateDatabaseSpecificationContext createDatabaseSpecification(int i) {
			return getRuleContext(CreateDatabaseSpecificationContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5301);
			match(CREATE);
			setState(5302);
			match(DATABASE);
			setState(5303);
			name();
			setState(5305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5304);
				match(WITH);
				}
			}

			setState(5310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
				{
				{
				setState(5307);
				createDatabaseSpecification();
				}
				}
				setState(5312);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLStatementParser.RECURSIVE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLStatementParser.WITH, i);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public List<ColumnListContext> columnList() {
			return getRuleContexts(ColumnListContext.class);
		}
		public ColumnListContext columnList(int i) {
			return getRuleContext(ColumnListContext.class,i);
		}
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5313);
			match(CREATE);
			setState(5316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(5314);
				match(OR);
				setState(5315);
				match(REPLACE);
				}
			}

			setState(5319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(5318);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(5321);
				match(RECURSIVE);
				}
			}

			setState(5324);
			match(VIEW);
			setState(5325);
			qualifiedName();
			setState(5338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5326);
				match(LP_);
				setState(5335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
					{
					setState(5327);
					columnList();
					setState(5332);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(5328);
						match(COMMA_);
						setState(5329);
						columnList();
						}
						}
						setState(5334);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5337);
				match(RP_);
				}
			}

			setState(5342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5340);
				match(WITH);
				setState(5341);
				reloptions();
				}
			}

			setState(5344);
			match(AS);
			setState(5345);
			select();
			setState(5352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5346);
				match(WITH);
				setState(5348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==CASCADE) {
					{
					setState(5347);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==CASCADE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5350);
				match(CHECK);
				setState(5351);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_dropDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5354);
			match(DROP);
			setState(5355);
			match(DATABASE);
			setState(5358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(5356);
				match(IF);
				setState(5357);
				match(EXISTS);
				}
				break;
			}
			setState(5360);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseSpecificationContext extends ParserRuleContext {
		public CreatedbOptNameContext createdbOptName() {
			return getRuleContext(CreatedbOptNameContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public CreateDatabaseSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateDatabaseSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseSpecificationContext createDatabaseSpecification() throws RecognitionException {
		CreateDatabaseSpecificationContext _localctx = new CreateDatabaseSpecificationContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_createDatabaseSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5362);
			createdbOptName();
			setState(5364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(5363);
				match(EQ_);
				}
			}

			setState(5369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				{
				setState(5366);
				signedIconst();
				}
				break;
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				{
				setState(5367);
				booleanOrString();
				}
				break;
			case DEFAULT:
				{
				setState(5368);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbOptNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLStatementParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLStatementParser.LIMIT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLStatementParser.ENCODING, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLStatementParser.LOCATION, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public CreatedbOptNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreatedbOptName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptNameContext createdbOptName() throws RecognitionException {
		CreatedbOptNameContext _localctx = new CreatedbOptNameContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_createdbOptName);
		try {
			setState(5379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5371);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5372);
				match(CONNECTION);
				setState(5373);
				match(LIMIT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5374);
				match(ENCODING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5375);
				match(LOCATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5376);
				match(OWNER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5377);
				match(TABLESPACE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5378);
				match(TEMPLATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TableExistClauseContext tableExistClause() {
			return getRuleContext(TableExistClauseContext.class,0);
		}
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNameClauseContext tableNameClause() {
			return getRuleContext(TableNameClauseContext.class,0);
		}
		public AlterDefinitionClauseContext alterDefinitionClause() {
			return getRuleContext(AlterDefinitionClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSQLStatementParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSQLStatementParser.TABLESPACE, i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5381);
			match(ALTER);
			setState(5382);
			match(TABLE);
			setState(5403);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(5383);
				tableExistClause();
				setState(5384);
				onlyClause();
				setState(5385);
				tableNameClause();
				setState(5386);
				alterDefinitionClause();
				}
				break;
			case ALL:
				{
				setState(5388);
				match(ALL);
				setState(5389);
				match(IN);
				setState(5390);
				match(TABLESPACE);
				setState(5391);
				tableNameClause();
				setState(5395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(5392);
					match(OWNED);
					setState(5393);
					match(BY);
					setState(5394);
					roleList();
					}
				}

				setState(5397);
				match(SET);
				setState(5398);
				match(TABLESPACE);
				setState(5399);
				name();
				setState(5401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(5400);
					match(NOWAIT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public AlterIndexDefinitionClauseContext alterIndexDefinitionClause() {
			return getRuleContext(AlterIndexDefinitionClauseContext.class,0);
		}
		public IndexExistClauseContext indexExistClause() {
			return getRuleContext(IndexExistClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public AlterIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexContext alterIndex() throws RecognitionException {
		AlterIndexContext _localctx = new AlterIndexContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_alterIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5405);
			match(ALTER);
			setState(5406);
			match(INDEX);
			setState(5411);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(5407);
				indexExistClause();
				}
				break;
			case ALL:
				{
				setState(5408);
				match(ALL);
				setState(5409);
				match(IN);
				setState(5410);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5413);
			indexName();
			setState(5414);
			alterIndexDefinitionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TableExistClauseContext tableExistClause() {
			return getRuleContext(TableExistClauseContext.class,0);
		}
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public DropTableOptContext dropTableOpt() {
			return getRuleContext(DropTableOptContext.class,0);
		}
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5416);
			match(DROP);
			setState(5417);
			match(TABLE);
			setState(5418);
			tableExistClause();
			setState(5419);
			tableNames();
			setState(5421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5420);
				dropTableOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableOptContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public DropTableOptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableOpt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropTableOpt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableOptContext dropTableOpt() throws RecognitionException {
		DropTableOptContext _localctx = new DropTableOptContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_dropTableOpt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5423);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public ConcurrentlyClauseContext concurrentlyClause() {
			return getRuleContext(ConcurrentlyClauseContext.class,0);
		}
		public IndexExistClauseContext indexExistClause() {
			return getRuleContext(IndexExistClauseContext.class,0);
		}
		public IndexNamesContext indexNames() {
			return getRuleContext(IndexNamesContext.class,0);
		}
		public DropIndexOptContext dropIndexOpt() {
			return getRuleContext(DropIndexOptContext.class,0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5425);
			match(DROP);
			setState(5426);
			match(INDEX);
			setState(5427);
			concurrentlyClause();
			setState(5428);
			indexExistClause();
			setState(5429);
			indexNames();
			setState(5431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5430);
				dropIndexOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexOptContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public DropIndexOptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexOpt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropIndexOpt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexOptContext dropIndexOpt() throws RecognitionException {
		DropIndexOptContext _localctx = new DropIndexOptContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_dropIndexOpt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5433);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLStatementParser.TRUNCATE, 0); }
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNamesClauseContext tableNamesClause() {
			return getRuleContext(TableNamesClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public RestartSeqsContext restartSeqs() {
			return getRuleContext(RestartSeqsContext.class,0);
		}
		public DropTableOptContext dropTableOpt() {
			return getRuleContext(DropTableOptContext.class,0);
		}
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5435);
			match(TRUNCATE);
			setState(5437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(5436);
				match(TABLE);
				}
			}

			setState(5439);
			onlyClause();
			setState(5440);
			tableNamesClause();
			setState(5442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTART || _la==CONTINUE) {
				{
				setState(5441);
				restartSeqs();
				}
			}

			setState(5445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5444);
				dropTableOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartSeqsContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(PostgreSQLStatementParser.CONTINUE, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLStatementParser.RESTART, 0); }
		public RestartSeqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restartSeqs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRestartSeqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestartSeqsContext restartSeqs() throws RecognitionException {
		RestartSeqsContext _localctx = new RestartSeqsContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_restartSeqs);
		try {
			setState(5451);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTINUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5447);
				match(CONTINUE);
				setState(5448);
				match(IDENTITY);
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(5449);
				match(RESTART);
				setState(5450);
				match(IDENTITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableSpecificationContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLStatementParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public CreateTableSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateTableSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableSpecificationContext createTableSpecification() throws RecognitionException {
		CreateTableSpecificationContext _localctx = new CreateTableSpecificationContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_createTableSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5458);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
			case GLOBAL:
			case TEMP:
			case TEMPORARY:
				{
				setState(5454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==GLOBAL) {
					{
					setState(5453);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==GLOBAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5456);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				{
				setState(5457);
				match(UNLOGGED);
				}
				break;
			case TABLE:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNotExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TableNotExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNotExistClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableNotExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNotExistClauseContext tableNotExistClause() throws RecognitionException {
		TableNotExistClauseContext _localctx = new TableNotExistClauseContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_tableNotExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5460);
			match(IF);
			setState(5461);
			match(NOT);
			setState(5462);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public CreateDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionClauseContext createDefinitionClause() throws RecognitionException {
		CreateDefinitionClauseContext _localctx = new CreateDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_createDefinitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5464);
			match(LP_);
			setState(5473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (PRIMARY - 66)) | (1L << (UNIQUE - 66)) | (1L << (FOREIGN - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (LIKE - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (CHECK - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
				{
				setState(5465);
				createDefinition();
				setState(5470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5466);
					match(COMMA_);
					setState(5467);
					createDefinition();
					}
					}
					setState(5472);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5475);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PostgreSQLStatementParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<LikeOptionContext> likeOption() {
			return getRuleContexts(LikeOptionContext.class);
		}
		public LikeOptionContext likeOption(int i) {
			return getRuleContext(LikeOptionContext.class,i);
		}
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_createDefinition);
		int _la;
		try {
			setState(5487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5477);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5478);
				tableConstraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5479);
				match(LIKE);
				setState(5480);
				tableName();
				setState(5484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCLUDING || _la==INCLUDING) {
					{
					{
					setState(5481);
					likeOption();
					}
					}
					setState(5486);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5489);
			columnName();
			setState(5490);
			dataType();
			setState(5492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(5491);
				collateClause();
				}
			}

			setState(5497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CONSTRAINT - 67)) | (1L << (PRIMARY - 67)) | (1L << (UNIQUE - 67)) | (1L << (KEY - 67)) | (1L << (NOT - 67)) | (1L << (NULL - 67)))) != 0) || _la==DEFAULT || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (CHECK - 216)) | (1L << (GENERATED - 216)) | (1L << (REFERENCES - 216)))) != 0)) {
				{
				{
				setState(5494);
				columnConstraint();
				}
				}
				setState(5499);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintOptionContext columnConstraintOption() {
			return getRuleContext(ColumnConstraintOptionContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public ConstraintClauseContext constraintClause() {
			return getRuleContext(ConstraintClauseContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_columnConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(5500);
				constraintClause();
				}
			}

			setState(5503);
			columnConstraintOption();
			setState(5504);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintClauseContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public ConstraintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConstraintClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintClauseContext constraintClause() throws RecognitionException {
		ConstraintClauseContext _localctx = new ConstraintClauseContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_constraintClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5506);
			match(CONSTRAINT);
			setState(5507);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintOptionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public CheckOptionContext checkOption() {
			return getRuleContext(CheckOptionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public DefaultExprContext defaultExpr() {
			return getRuleContext(DefaultExprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLStatementParser.STORED, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public SequenceOptionsContext sequenceOptions() {
			return getRuleContext(SequenceOptionsContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public IndexParametersContext indexParameters() {
			return getRuleContext(IndexParametersContext.class,0);
		}
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(PostgreSQLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLStatementParser.SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLStatementParser.ON, i);
		}
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public List<TerminalNode> DELETE() { return getTokens(PostgreSQLStatementParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(PostgreSQLStatementParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(PostgreSQLStatementParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(PostgreSQLStatementParser.UPDATE, i);
		}
		public ColumnConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraintOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintOptionContext columnConstraintOption() throws RecognitionException {
		ColumnConstraintOptionContext _localctx = new ColumnConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_columnConstraintOption);
		int _la;
		try {
			setState(5564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5509);
					match(NOT);
					}
				}

				setState(5512);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5513);
				checkOption();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5514);
				match(DEFAULT);
				setState(5515);
				defaultExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5516);
				match(GENERATED);
				setState(5517);
				match(ALWAYS);
				setState(5518);
				match(AS);
				setState(5519);
				match(LP_);
				setState(5520);
				aExpr(0);
				setState(5521);
				match(RP_);
				setState(5522);
				match(STORED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5524);
				match(GENERATED);
				setState(5528);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(5525);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					setState(5526);
					match(BY);
					setState(5527);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5530);
				match(AS);
				setState(5531);
				match(IDENTITY);
				setState(5536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(5532);
					match(LP_);
					setState(5533);
					sequenceOptions();
					setState(5534);
					match(RP_);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5538);
				match(UNIQUE);
				setState(5539);
				indexParameters();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5540);
				primaryKey();
				setState(5541);
				indexParameters();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5543);
				match(REFERENCES);
				setState(5544);
				tableName();
				setState(5546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(5545);
					columnNames();
					}
				}

				setState(5554);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
				case 1:
					{
					setState(5548);
					match(MATCH);
					setState(5549);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(5550);
					match(MATCH);
					setState(5551);
					match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(5552);
					match(MATCH);
					setState(5553);
					match(SIMPLE);
					}
					break;
				}
				setState(5561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(5556);
					match(ON);
					setState(5557);
					_la = _input.LA(1);
					if ( !(_la==UPDATE || _la==DELETE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5558);
					action();
					}
					}
					setState(5563);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOptionContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckOptionContext checkOption() throws RecognitionException {
		CheckOptionContext _localctx = new CheckOptionContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_checkOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5566);
			match(CHECK);
			setState(5567);
			aExpr(0);
			setState(5570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(5568);
				match(NO);
				setState(5569);
				match(INHERIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultExprContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public DefaultExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDefaultExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultExprContext defaultExpr() throws RecognitionException {
		DefaultExprContext _localctx = new DefaultExprContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_defaultExpr);
		try {
			setState(5574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5572);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5573);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceOptionsContext extends ParserRuleContext {
		public List<SequenceOptionContext> sequenceOption() {
			return getRuleContexts(SequenceOptionContext.class);
		}
		public SequenceOptionContext sequenceOption(int i) {
			return getRuleContext(SequenceOptionContext.class,i);
		}
		public SequenceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSequenceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionsContext sequenceOptions() throws RecognitionException {
		SequenceOptionsContext _localctx = new SequenceOptionsContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_sequenceOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5577); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5576);
				sequenceOption();
				}
				}
				setState(5579); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (NO - 220)) | (1L << (START - 220)) | (1L << (CACHE - 220)) | (1L << (CYCLE - 220)) | (1L << (INCREMENT - 220)) | (1L << (MAXVALUE - 220)) | (1L << (MINVALUE - 220)) | (1L << (OWNED - 220)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceOptionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PostgreSQLStatementParser.START, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLStatementParser.MAXVALUE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLStatementParser.MINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLStatementParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLStatementParser.CACHE, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public SequenceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSequenceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionContext sequenceOption() throws RecognitionException {
		SequenceOptionContext _localctx = new SequenceOptionContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_sequenceOption);
		int _la;
		try {
			setState(5606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5581);
				match(START);
				setState(5583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5582);
					match(WITH);
					}
				}

				setState(5585);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5586);
				match(INCREMENT);
				setState(5588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(5587);
					match(BY);
					}
				}

				setState(5590);
				match(NUMBER_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5591);
				match(MAXVALUE);
				setState(5592);
				match(NUMBER_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5593);
				match(NO);
				setState(5594);
				match(MAXVALUE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5595);
				match(MINVALUE);
				setState(5596);
				match(NUMBER_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5597);
				match(NO);
				setState(5598);
				match(MINVALUE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5599);
				match(CYCLE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5600);
				match(NO);
				setState(5601);
				match(CYCLE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5602);
				match(CACHE);
				setState(5603);
				match(NUMBER_);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5604);
				match(OWNED);
				setState(5605);
				match(BY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexParametersContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(PostgreSQLStatementParser.INCLUDE, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public IndexParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexParameters; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndexParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexParametersContext indexParameters() throws RecognitionException {
		IndexParametersContext _localctx = new IndexParametersContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_indexParameters);
		int _la;
		try {
			setState(5618);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case RP_:
			case COMMA_:
			case SEMI_:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case KEY:
			case USING:
			case WHERE:
			case NOT:
			case NULL:
			case DEFAULT:
			case CHECK:
			case GENERATED:
			case REFERENCES:
			case DEFERRABLE:
			case INITIALLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5608);
					match(USING);
					setState(5609);
					match(INDEX);
					setState(5610);
					match(TABLESPACE);
					setState(5611);
					ignoredIdentifier();
					}
				}

				}
				break;
			case INCLUDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5614);
				match(INCLUDE);
				setState(5615);
				columnNames();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(5616);
				match(WITH);
				setState(5617);
				definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ActionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLStatementParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_action);
		int _la;
		try {
			setState(5626);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5620);
				match(NO);
				setState(5621);
				match(ACTION);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5622);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5623);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(5624);
				match(SET);
				setState(5625);
				_la = _input.LA(1);
				if ( !(_la==NULL || _la==DEFAULT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintOptionalParamContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLStatementParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLStatementParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLStatementParser.IMMEDIATE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public ConstraintOptionalParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintOptionalParam; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConstraintOptionalParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintOptionalParamContext constraintOptionalParam() throws RecognitionException {
		ConstraintOptionalParamContext _localctx = new ConstraintOptionalParamContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_constraintOptionalParam);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5632);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(5629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5628);
					match(NOT);
					}
				}

				setState(5631);
				match(DEFERRABLE);
				}
				break;
			}
			setState(5636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(5634);
				match(INITIALLY);
				setState(5635);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeOptionContext extends ParserRuleContext {
		public TerminalNode INCLUDING() { return getToken(PostgreSQLStatementParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLStatementParser.EXCLUDING, 0); }
		public TerminalNode COMMENTS() { return getToken(PostgreSQLStatementParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLStatementParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLStatementParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public LikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeOptionContext likeOption() throws RecognitionException {
		LikeOptionContext _localctx = new LikeOptionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_likeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5638);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5639);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (COMMENTS - 235)) | (1L << (CONSTRAINTS - 235)) | (1L << (DEFAULTS - 235)) | (1L << (IDENTITY - 235)) | (1L << (INDEXES - 235)))) != 0) || _la==STATISTICS || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintOptionContext tableConstraintOption() {
			return getRuleContext(TableConstraintOptionContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public ConstraintClauseContext constraintClause() {
			return getRuleContext(ConstraintClauseContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_tableConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(5641);
				constraintClause();
				}
			}

			setState(5644);
			tableConstraintOption();
			setState(5645);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintOptionContext extends ParserRuleContext {
		public CheckOptionContext checkOption() {
			return getRuleContext(CheckOptionContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public List<ColumnNamesContext> columnNames() {
			return getRuleContexts(ColumnNamesContext.class);
		}
		public ColumnNamesContext columnNames(int i) {
			return getRuleContext(ColumnNamesContext.class,i);
		}
		public IndexParametersContext indexParameters() {
			return getRuleContext(IndexParametersContext.class,0);
		}
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLStatementParser.EXCLUDE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public ExclusionWhereClauseContext exclusionWhereClause() {
			return getRuleContext(ExclusionWhereClauseContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLStatementParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(PostgreSQLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLStatementParser.SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLStatementParser.ON, i);
		}
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public List<TerminalNode> DELETE() { return getTokens(PostgreSQLStatementParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(PostgreSQLStatementParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(PostgreSQLStatementParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(PostgreSQLStatementParser.UPDATE, i);
		}
		public TableConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintOptionContext tableConstraintOption() throws RecognitionException {
		TableConstraintOptionContext _localctx = new TableConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_tableConstraintOption);
		int _la;
		try {
			setState(5692);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(5647);
				checkOption();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5648);
				match(UNIQUE);
				setState(5649);
				columnNames();
				setState(5650);
				indexParameters();
				}
				break;
			case PRIMARY:
			case KEY:
				enterOuterAlt(_localctx, 3);
				{
				setState(5652);
				primaryKey();
				setState(5653);
				columnNames();
				setState(5654);
				indexParameters();
				}
				break;
			case EXCLUDE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5656);
				match(EXCLUDE);
				setState(5659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5657);
					match(USING);
					setState(5658);
					ignoredIdentifier();
					}
				}

				setState(5661);
				match(LP_);
				setState(5662);
				exclusionConstraintList();
				setState(5663);
				match(RP_);
				setState(5664);
				indexParameters();
				setState(5666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5665);
					exclusionWhereClause();
					}
				}

				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 5);
				{
				setState(5668);
				match(FOREIGN);
				setState(5669);
				match(KEY);
				setState(5670);
				columnNames();
				setState(5671);
				match(REFERENCES);
				setState(5672);
				tableName();
				setState(5674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(5673);
					columnNames();
					}
				}

				setState(5682);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
				case 1:
					{
					setState(5676);
					match(MATCH);
					setState(5677);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(5678);
					match(MATCH);
					setState(5679);
					match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(5680);
					match(MATCH);
					setState(5681);
					match(SIMPLE);
					}
					break;
				}
				setState(5689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(5684);
					match(ON);
					setState(5685);
					_la = _input.LA(1);
					if ( !(_la==UPDATE || _la==DELETE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5686);
					action();
					}
					}
					setState(5691);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExclusionWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionWhereClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExclusionWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionWhereClauseContext exclusionWhereClause() throws RecognitionException {
		ExclusionWhereClauseContext _localctx = new ExclusionWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_exclusionWhereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5694);
			match(WHERE);
			setState(5695);
			match(LP_);
			setState(5696);
			aExpr(0);
			setState(5697);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionConstraintListContext extends ParserRuleContext {
		public List<ExclusionConstraintElemContext> exclusionConstraintElem() {
			return getRuleContexts(ExclusionConstraintElemContext.class);
		}
		public ExclusionConstraintElemContext exclusionConstraintElem(int i) {
			return getRuleContext(ExclusionConstraintElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ExclusionConstraintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExclusionConstraintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintListContext exclusionConstraintList() throws RecognitionException {
		ExclusionConstraintListContext _localctx = new ExclusionConstraintListContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_exclusionConstraintList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5699);
			exclusionConstraintElem();
			setState(5704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5700);
				match(COMMA_);
				setState(5701);
				exclusionConstraintElem();
				}
				}
				setState(5706);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionConstraintElemContext extends ParserRuleContext {
		public IndexElemContext indexElem() {
			return getRuleContext(IndexElemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExclusionConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExclusionConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintElemContext exclusionConstraintElem() throws RecognitionException {
		ExclusionConstraintElemContext _localctx = new ExclusionConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_exclusionConstraintElem);
		try {
			setState(5718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5707);
				indexElem();
				setState(5708);
				match(WITH);
				setState(5709);
				anyOperator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5711);
				indexElem();
				setState(5712);
				match(WITH);
				setState(5713);
				match(OPERATOR);
				setState(5714);
				match(LP_);
				setState(5715);
				anyOperator();
				setState(5716);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InheritClauseContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(PostgreSQLStatementParser.INHERITS, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public InheritClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inheritClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitInheritClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InheritClauseContext inheritClause() throws RecognitionException {
		InheritClauseContext _localctx = new InheritClauseContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_inheritClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INHERITS) {
				{
				setState(5720);
				match(INHERITS);
				setState(5721);
				tableNames();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionSpecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public PartStrategyContext partStrategy() {
			return getRuleContext(PartStrategyContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public PartParamsContext partParams() {
			return getRuleContext(PartParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPartitionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_partitionSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5724);
			match(PARTITION);
			setState(5725);
			match(BY);
			setState(5726);
			partStrategy();
			setState(5727);
			match(LP_);
			setState(5728);
			partParams();
			setState(5729);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartParamsContext extends ParserRuleContext {
		public List<PartElemContext> partElem() {
			return getRuleContexts(PartElemContext.class);
		}
		public PartElemContext partElem(int i) {
			return getRuleContext(PartElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public PartParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partParams; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPartParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartParamsContext partParams() throws RecognitionException {
		PartParamsContext _localctx = new PartParamsContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_partParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5731);
			partElem();
			setState(5736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5732);
				match(COMMA_);
				setState(5733);
				partElem();
				}
				}
				setState(5738);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLStatementParser.COLLATE, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FuncExprWindowlessContext funcExprWindowless() {
			return getRuleContext(FuncExprWindowlessContext.class,0);
		}
		public PartElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPartElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartElemContext partElem() throws RecognitionException {
		PartElemContext _localctx = new PartElemContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_partElem);
		int _la;
		try {
			setState(5765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5739);
				colId();
				setState(5742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(5740);
					match(COLLATE);
					setState(5741);
					anyName();
					}
				}

				setState(5745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
					{
					setState(5744);
					anyName();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5747);
				match(LP_);
				setState(5748);
				aExpr(0);
				setState(5749);
				match(RP_);
				setState(5752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(5750);
					match(COLLATE);
					setState(5751);
					anyName();
					}
				}

				setState(5755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
					{
					setState(5754);
					anyName();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5757);
				funcExprWindowless();
				setState(5760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(5758);
					match(COLLATE);
					setState(5759);
					anyName();
					}
				}

				setState(5763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
					{
					setState(5762);
					anyName();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncExprWindowlessContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FuncExprWindowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcExprWindowless; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncExprWindowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncExprWindowlessContext funcExprWindowless() throws RecognitionException {
		FuncExprWindowlessContext _localctx = new FuncExprWindowlessContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_funcExprWindowless);
		try {
			setState(5769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5767);
				funcApplication();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5768);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartStrategyContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public PartStrategyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partStrategy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPartStrategy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartStrategyContext partStrategy() throws RecognitionException {
		PartStrategyContext _localctx = new PartStrategyContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_partStrategy);
		try {
			setState(5773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5771);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5772);
				unreservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public CreateIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexSpecificationContext createIndexSpecification() throws RecognitionException {
		CreateIndexSpecificationContext _localctx = new CreateIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_createIndexSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(5775);
				match(UNIQUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcurrentlyClauseContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public ConcurrentlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concurrentlyClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConcurrentlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcurrentlyClauseContext concurrentlyClause() throws RecognitionException {
		ConcurrentlyClauseContext _localctx = new ConcurrentlyClauseContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_concurrentlyClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(5778);
				match(CONCURRENTLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNotExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public IndexNotExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNotExistClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndexNotExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNotExistClauseContext indexNotExistClause() throws RecognitionException {
		IndexNotExistClauseContext _localctx = new IndexNotExistClauseContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_indexNotExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				setState(5781);
				match(IF);
				setState(5782);
				match(NOT);
				setState(5783);
				match(EXISTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnlyClauseContext extends ParserRuleContext {
		public TerminalNode ONLY() { return getToken(PostgreSQLStatementParser.ONLY, 0); }
		public OnlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlyClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOnlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnlyClauseContext onlyClause() throws RecognitionException {
		OnlyClauseContext _localctx = new OnlyClauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_onlyClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(5786);
				match(ONLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TableExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableExistClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableExistClauseContext tableExistClause() throws RecognitionException {
		TableExistClauseContext _localctx = new TableExistClauseContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_tableExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(5789);
				match(IF);
				setState(5790);
				match(EXISTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskClauseContext extends ParserRuleContext {
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public AsteriskClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asteriskClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAsteriskClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsteriskClauseContext asteriskClause() throws RecognitionException {
		AsteriskClauseContext _localctx = new AsteriskClauseContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_asteriskClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASTERISK_) {
				{
				setState(5793);
				match(ASTERISK_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefinitionClauseContext extends ParserRuleContext {
		public AlterTableActionsContext alterTableActions() {
			return getRuleContext(AlterTableActionsContext.class,0);
		}
		public RenameColumnSpecificationContext renameColumnSpecification() {
			return getRuleContext(RenameColumnSpecificationContext.class,0);
		}
		public RenameConstraintContext renameConstraint() {
			return getRuleContext(RenameConstraintContext.class,0);
		}
		public RenameTableSpecificationContext renameTableSpecification() {
			return getRuleContext(RenameTableSpecificationContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public PartitionCmdContext partitionCmd() {
			return getRuleContext(PartitionCmdContext.class,0);
		}
		public AlterDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefinitionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefinitionClauseContext alterDefinitionClause() throws RecognitionException {
		AlterDefinitionClauseContext _localctx = new AlterDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_alterDefinitionClause);
		try {
			setState(5804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5796);
				alterTableActions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5797);
				renameColumnSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5798);
				renameConstraint();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5799);
				renameTableSpecification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5800);
				match(SET);
				setState(5801);
				match(SCHEMA);
				setState(5802);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5803);
				partitionCmd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionCmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLStatementParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(PostgreSQLStatementParser.DETACH, 0); }
		public PartitionCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionCmd; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPartitionCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionCmdContext partitionCmd() throws RecognitionException {
		PartitionCmdContext _localctx = new PartitionCmdContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_partitionCmd);
		try {
			setState(5814);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5806);
				match(ATTACH);
				setState(5807);
				match(PARTITION);
				setState(5808);
				qualifiedName();
				setState(5809);
				partitionBoundSpec();
				}
				break;
			case DETACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(5811);
				match(DETACH);
				setState(5812);
				match(PARTITION);
				setState(5813);
				qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexDefinitionClauseContext extends ParserRuleContext {
		public RenameIndexSpecificationContext renameIndexSpecification() {
			return getRuleContext(RenameIndexSpecificationContext.class,0);
		}
		public AlterIndexDependsOnExtensionContext alterIndexDependsOnExtension() {
			return getRuleContext(AlterIndexDependsOnExtensionContext.class,0);
		}
		public AlterIndexSetTableSpaceContext alterIndexSetTableSpace() {
			return getRuleContext(AlterIndexSetTableSpaceContext.class,0);
		}
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public IndexPartitionCmdContext indexPartitionCmd() {
			return getRuleContext(IndexPartitionCmdContext.class,0);
		}
		public AlterIndexDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexDefinitionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterIndexDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexDefinitionClauseContext alterIndexDefinitionClause() throws RecognitionException {
		AlterIndexDefinitionClauseContext _localctx = new AlterIndexDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_alterIndexDefinitionClause);
		try {
			setState(5821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5816);
				renameIndexSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5817);
				alterIndexDependsOnExtension();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5818);
				alterIndexSetTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5819);
				alterTableCmds();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5820);
				indexPartitionCmd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexPartitionCmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLStatementParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public IndexPartitionCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexPartitionCmd; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndexPartitionCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexPartitionCmdContext indexPartitionCmd() throws RecognitionException {
		IndexPartitionCmdContext _localctx = new IndexPartitionCmdContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_indexPartitionCmd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5823);
			match(ATTACH);
			setState(5824);
			match(PARTITION);
			setState(5825);
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public RenameIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameIndexSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRenameIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameIndexSpecificationContext renameIndexSpecification() throws RecognitionException {
		RenameIndexSpecificationContext _localctx = new RenameIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_renameIndexSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5827);
			match(RENAME);
			setState(5828);
			match(TO);
			setState(5829);
			indexName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexDependsOnExtensionContext extends ParserRuleContext {
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public AlterIndexDependsOnExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexDependsOnExtension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterIndexDependsOnExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexDependsOnExtensionContext alterIndexDependsOnExtension() throws RecognitionException {
		AlterIndexDependsOnExtensionContext _localctx = new AlterIndexDependsOnExtensionContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_alterIndexDependsOnExtension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5831);
			match(DEPENDS);
			setState(5832);
			match(ON);
			setState(5833);
			match(EXTENSION);
			setState(5834);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexSetTableSpaceContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public IgnoredIdentifiersContext ignoredIdentifiers() {
			return getRuleContext(IgnoredIdentifiersContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public AlterIndexSetTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexSetTableSpace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterIndexSetTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexSetTableSpaceContext alterIndexSetTableSpace() throws RecognitionException {
		AlterIndexSetTableSpaceContext _localctx = new AlterIndexSetTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_alterIndexSetTableSpace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNED) {
				{
				setState(5836);
				match(OWNED);
				setState(5837);
				match(BY);
				setState(5838);
				ignoredIdentifiers();
				}
			}

			setState(5841);
			match(SET);
			setState(5842);
			match(TABLESPACE);
			setState(5843);
			name();
			setState(5845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(5844);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNamesClauseContext extends ParserRuleContext {
		public List<TableNameClauseContext> tableNameClause() {
			return getRuleContexts(TableNameClauseContext.class);
		}
		public TableNameClauseContext tableNameClause(int i) {
			return getRuleContext(TableNameClauseContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TableNamesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNamesClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableNamesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesClauseContext tableNamesClause() throws RecognitionException {
		TableNamesClauseContext _localctx = new TableNamesClauseContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_tableNamesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5847);
			tableNameClause();
			setState(5852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5848);
				match(COMMA_);
				setState(5849);
				tableNameClause();
				}
				}
				setState(5854);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameClauseContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TableNameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNameClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableNameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameClauseContext tableNameClause() throws RecognitionException {
		TableNameClauseContext _localctx = new TableNameClauseContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_tableNameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5855);
			tableName();
			setState(5857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASTERISK_) {
				{
				setState(5856);
				match(ASTERISK_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableActionsContext extends ParserRuleContext {
		public List<AlterTableActionContext> alterTableAction() {
			return getRuleContexts(AlterTableActionContext.class);
		}
		public AlterTableActionContext alterTableAction(int i) {
			return getRuleContext(AlterTableActionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableActions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTableActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableActionsContext alterTableActions() throws RecognitionException {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_alterTableActions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5859);
			alterTableAction();
			setState(5864);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5860);
				match(COMMA_);
				setState(5861);
				alterTableAction();
				}
				}
				setState(5866);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableActionContext extends ParserRuleContext {
		public AddColumnSpecificationContext addColumnSpecification() {
			return getRuleContext(AddColumnSpecificationContext.class,0);
		}
		public DropColumnSpecificationContext dropColumnSpecification() {
			return getRuleContext(DropColumnSpecificationContext.class,0);
		}
		public ModifyColumnSpecificationContext modifyColumnSpecification() {
			return getRuleContext(ModifyColumnSpecificationContext.class,0);
		}
		public AddConstraintSpecificationContext addConstraintSpecification() {
			return getRuleContext(AddConstraintSpecificationContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLStatementParser.VALIDATE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public IndexExistClauseContext indexExistClause() {
			return getRuleContext(IndexExistClauseContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSQLStatementParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLStatementParser.ENABLE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLStatementParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLStatementParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLStatementParser.FORCE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLStatementParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLStatementParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLStatementParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<StorageParameterWithValueContext> storageParameterWithValue() {
			return getRuleContexts(StorageParameterWithValueContext.class);
		}
		public StorageParameterWithValueContext storageParameterWithValue(int i) {
			return getRuleContext(StorageParameterWithValueContext.class,i);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public List<StorageParameterContext> storageParameter() {
			return getRuleContexts(StorageParameterContext.class);
		}
		public StorageParameterContext storageParameter(int i) {
			return getRuleContext(StorageParameterContext.class,i);
		}
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLStatementParser.NOTHING, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public AlterTableActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTableAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableActionContext alterTableAction() throws RecognitionException {
		AlterTableActionContext _localctx = new AlterTableActionContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_alterTableAction);
		int _la;
		try {
			setState(5979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5867);
				addColumnSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5868);
				dropColumnSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5869);
				modifyColumnSpecification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5870);
				addConstraintSpecification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5871);
				match(ALTER);
				setState(5872);
				match(CONSTRAINT);
				setState(5873);
				ignoredIdentifier();
				setState(5874);
				constraintOptionalParam();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5876);
				match(VALIDATE);
				setState(5877);
				match(CONSTRAINT);
				setState(5878);
				ignoredIdentifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5879);
				match(DROP);
				setState(5880);
				match(CONSTRAINT);
				setState(5881);
				indexExistClause();
				setState(5882);
				ignoredIdentifier();
				setState(5884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5883);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5886);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5887);
				match(TRIGGER);
				setState(5891);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__1:
				case T__2:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case INDEX:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case YEAR:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case ENUM:
				case XML:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case IDENTIFIER_:
					{
					setState(5888);
					ignoredIdentifier();
					}
					break;
				case ALL:
					{
					setState(5889);
					match(ALL);
					}
					break;
				case USER:
					{
					setState(5890);
					match(USER);
					}
					break;
				case EOF:
				case COMMA_:
				case SEMI_:
					break;
				default:
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5893);
				match(ENABLE);
				setState(5894);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5895);
				match(TRIGGER);
				setState(5896);
				ignoredIdentifier();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5897);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5898);
				match(RULE);
				setState(5899);
				ignoredIdentifier();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5900);
				match(ENABLE);
				setState(5901);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5902);
				match(RULE);
				setState(5903);
				ignoredIdentifier();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5910);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DISABLE:
					{
					setState(5904);
					match(DISABLE);
					}
					break;
				case ENABLE:
					{
					setState(5905);
					match(ENABLE);
					}
					break;
				case NO:
				case FORCE:
					{
					{
					setState(5907);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(5906);
						match(NO);
						}
					}

					setState(5909);
					match(FORCE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5912);
				match(ROW);
				setState(5913);
				match(LEVEL);
				setState(5914);
				match(SECURITY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5915);
				match(CLUSTER);
				setState(5916);
				match(ON);
				setState(5917);
				indexName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5918);
				match(SET);
				setState(5919);
				match(WITHOUT);
				setState(5920);
				match(CLUSTER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5921);
				match(SET);
				setState(5922);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5923);
				match(OIDS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5924);
				match(SET);
				setState(5925);
				match(TABLESPACE);
				setState(5926);
				ignoredIdentifier();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5927);
				match(SET);
				setState(5928);
				_la = _input.LA(1);
				if ( !(_la==LOGGED || _la==UNLOGGED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5929);
				match(SET);
				setState(5930);
				match(LP_);
				setState(5931);
				storageParameterWithValue();
				setState(5936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5932);
					match(COMMA_);
					setState(5933);
					storageParameterWithValue();
					}
					}
					setState(5938);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5939);
				match(RP_);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5941);
				match(RESET);
				setState(5942);
				match(LP_);
				setState(5943);
				storageParameter();
				setState(5948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5944);
					match(COMMA_);
					setState(5945);
					storageParameter();
					}
					}
					setState(5950);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5951);
				match(RP_);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5953);
				match(INHERIT);
				setState(5954);
				tableName();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5955);
				match(NO);
				setState(5956);
				match(INHERIT);
				setState(5957);
				tableName();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5958);
				match(OF);
				setState(5959);
				dataTypeName();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5960);
				match(NOT);
				setState(5961);
				match(OF);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5962);
				match(OWNER);
				setState(5963);
				match(TO);
				setState(5967);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__1:
				case T__2:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case INDEX:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case YEAR:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case ENUM:
				case XML:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case IDENTIFIER_:
					{
					setState(5964);
					ignoredIdentifier();
					}
					break;
				case CURRENT_USER:
					{
					setState(5965);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(5966);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5969);
				match(REPLICA);
				setState(5970);
				match(IDENTITY);
				setState(5977);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(5971);
					match(DEFAULT);
					}
					break;
				case USING:
					{
					{
					setState(5972);
					match(USING);
					setState(5973);
					match(INDEX);
					setState(5974);
					indexName();
					}
					}
					break;
				case FULL:
					{
					setState(5975);
					match(FULL);
					}
					break;
				case NOTHING:
					{
					setState(5976);
					match(NOTHING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public AddColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addColumnSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAddColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddColumnSpecificationContext addColumnSpecification() throws RecognitionException {
		AddColumnSpecificationContext _localctx = new AddColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_addColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5981);
			match(ADD);
			setState(5983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(5982);
				match(COLUMN);
				}
			}

			setState(5988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				setState(5985);
				match(IF);
				setState(5986);
				match(NOT);
				setState(5987);
				match(EXISTS);
				}
				break;
			}
			setState(5990);
			columnDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public ColumnExistClauseContext columnExistClause() {
			return getRuleContext(ColumnExistClauseContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public DropColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropColumnSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropColumnSpecificationContext dropColumnSpecification() throws RecognitionException {
		DropColumnSpecificationContext _localctx = new DropColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_dropColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5992);
			match(DROP);
			setState(5994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(5993);
				match(COLUMN);
				}
			}

			setState(5996);
			columnExistClause();
			setState(5997);
			columnName();
			setState(5999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5998);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public ColumnExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnExistClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitColumnExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnExistClauseContext columnExistClause() throws RecognitionException {
		ColumnExistClauseContext _localctx = new ColumnExistClauseContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_columnExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				setState(6001);
				match(IF);
				setState(6002);
				match(EXISTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModifyColumnSpecificationContext extends ParserRuleContext {
		public ModifyColumnContext modifyColumn() {
			return getRuleContext(ModifyColumnContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public SequenceOptionsContext sequenceOptions() {
			return getRuleContext(SequenceOptionsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public List<AlterColumnSetOptionContext> alterColumnSetOption() {
			return getRuleContexts(AlterColumnSetOptionContext.class);
		}
		public AlterColumnSetOptionContext alterColumnSetOption(int i) {
			return getRuleContext(AlterColumnSetOptionContext.class,i);
		}
		public ColumnExistClauseContext columnExistClause() {
			return getRuleContext(ColumnExistClauseContext.class,0);
		}
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public AttributeOptionsContext attributeOptions() {
			return getRuleContext(AttributeOptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TerminalNode PLAIN() { return getToken(PostgreSQLStatementParser.PLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode EXTENDED() { return getToken(PostgreSQLStatementParser.EXTENDED, 0); }
		public TerminalNode MAIN() { return getToken(PostgreSQLStatementParser.MAIN, 0); }
		public ModifyColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyColumnSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitModifyColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyColumnSpecificationContext modifyColumnSpecification() throws RecognitionException {
		ModifyColumnSpecificationContext _localctx = new ModifyColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_modifyColumnSpecification);
		int _la;
		try {
			setState(6084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6005);
				modifyColumn();
				setState(6008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(6006);
					match(SET);
					setState(6007);
					match(DATA);
					}
				}

				setState(6010);
				match(TYPE);
				setState(6011);
				dataType();
				setState(6013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(6012);
					collateClause();
					}
				}

				setState(6017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6015);
					match(USING);
					setState(6016);
					aExpr(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6019);
				modifyColumn();
				setState(6020);
				match(SET);
				setState(6021);
				match(DEFAULT);
				setState(6022);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6024);
				modifyColumn();
				setState(6025);
				match(DROP);
				setState(6026);
				match(DEFAULT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6028);
				modifyColumn();
				setState(6029);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6030);
				match(NOT);
				setState(6031);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6033);
				modifyColumn();
				setState(6034);
				match(ADD);
				setState(6035);
				match(GENERATED);
				setState(6039);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(6036);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(6037);
					match(BY);
					setState(6038);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6041);
				match(AS);
				setState(6042);
				match(IDENTITY);
				setState(6047);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6043);
					match(LP_);
					setState(6044);
					sequenceOptions();
					setState(6045);
					match(RP_);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6049);
				modifyColumn();
				setState(6050);
				alterColumnSetOption();
				setState(6054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SET || _la==RESTART) {
					{
					{
					setState(6051);
					alterColumnSetOption();
					}
					}
					setState(6056);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6057);
				modifyColumn();
				setState(6058);
				match(DROP);
				setState(6059);
				match(IDENTITY);
				setState(6060);
				columnExistClause();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6062);
				modifyColumn();
				setState(6063);
				match(SET);
				setState(6064);
				match(STATISTICS);
				setState(6065);
				match(NUMBER_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6067);
				modifyColumn();
				setState(6068);
				match(SET);
				setState(6069);
				match(LP_);
				setState(6070);
				attributeOptions();
				setState(6071);
				match(RP_);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6073);
				modifyColumn();
				setState(6074);
				match(RESET);
				setState(6075);
				match(LP_);
				setState(6076);
				attributeOptions();
				setState(6077);
				match(RP_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6079);
				modifyColumn();
				setState(6080);
				match(SET);
				setState(6081);
				match(STORAGE);
				setState(6082);
				_la = _input.LA(1);
				if ( !(((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (EXTENDED - 249)) | (1L << (EXTERNAL - 249)) | (1L << (MAIN - 249)) | (1L << (PLAIN - 249)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModifyColumnContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public ModifyColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyColumn; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyColumnContext modifyColumn() throws RecognitionException {
		ModifyColumnContext _localctx = new ModifyColumnContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_modifyColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6086);
			match(ALTER);
			setState(6088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(6087);
				match(COLUMN);
				}
			}

			setState(6090);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnSetOptionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public SequenceOptionContext sequenceOption() {
			return getRuleContext(SequenceOptionContext.class,0);
		}
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLStatementParser.RESTART, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public AlterColumnSetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnSetOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterColumnSetOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnSetOptionContext alterColumnSetOption() throws RecognitionException {
		AlterColumnSetOptionContext _localctx = new AlterColumnSetOptionContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_alterColumnSetOption);
		int _la;
		try {
			setState(6109);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(6092);
				match(SET);
				setState(6100);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case GENERATED:
					{
					setState(6093);
					match(GENERATED);
					setState(6097);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALWAYS:
						{
						setState(6094);
						match(ALWAYS);
						}
						break;
					case BY:
						{
						setState(6095);
						match(BY);
						setState(6096);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NO:
				case START:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case OWNED:
					{
					setState(6099);
					sequenceOption();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(6102);
				match(RESTART);
				setState(6107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==NUMBER_) {
					{
					setState(6104);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(6103);
						match(WITH);
						}
					}

					setState(6106);
					match(NUMBER_);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttributeOptionsContext extends ParserRuleContext {
		public List<AttributeOptionContext> attributeOption() {
			return getRuleContexts(AttributeOptionContext.class);
		}
		public AttributeOptionContext attributeOption(int i) {
			return getRuleContext(AttributeOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AttributeOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attributeOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAttributeOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttributeOptionsContext attributeOptions() throws RecognitionException {
		AttributeOptionsContext _localctx = new AttributeOptionsContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_attributeOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6111);
			attributeOption();
			setState(6116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6112);
				match(COMMA_);
				setState(6113);
				attributeOption();
				}
				}
				setState(6118);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttributeOptionContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(PostgreSQLStatementParser.IDENTIFIER_, 0); }
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public AttributeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attributeOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAttributeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttributeOptionContext attributeOption() throws RecognitionException {
		AttributeOptionContext _localctx = new AttributeOptionContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_attributeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6119);
			match(IDENTIFIER_);
			setState(6120);
			match(EQ_);
			setState(6121);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddConstraintSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableConstraintUsingIndexContext tableConstraintUsingIndex() {
			return getRuleContext(TableConstraintUsingIndexContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLStatementParser.VALID, 0); }
		public AddConstraintSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addConstraintSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAddConstraintSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddConstraintSpecificationContext addConstraintSpecification() throws RecognitionException {
		AddConstraintSpecificationContext _localctx = new AddConstraintSpecificationContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_addConstraintSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6123);
			match(ADD);
			setState(6130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(6124);
				tableConstraint();
				setState(6127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6125);
					match(NOT);
					setState(6126);
					match(VALID);
					}
				}

				}
				break;
			case 2:
				{
				setState(6129);
				tableConstraintUsingIndex();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintUsingIndexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLStatementParser.UNIQUE, 0); }
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TableConstraintUsingIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintUsingIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableConstraintUsingIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintUsingIndexContext tableConstraintUsingIndex() throws RecognitionException {
		TableConstraintUsingIndexContext _localctx = new TableConstraintUsingIndexContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_tableConstraintUsingIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(6132);
				match(CONSTRAINT);
				setState(6133);
				ignoredIdentifier();
				}
			}

			setState(6138);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(6136);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
			case KEY:
				{
				setState(6137);
				primaryKey();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6140);
			match(USING);
			setState(6141);
			match(INDEX);
			setState(6142);
			indexName();
			setState(6143);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageParameterWithValueContext extends ParserRuleContext {
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public StorageParameterWithValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameterWithValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitStorageParameterWithValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterWithValueContext storageParameterWithValue() throws RecognitionException {
		StorageParameterWithValueContext _localctx = new StorageParameterWithValueContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_storageParameterWithValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6145);
			storageParameter();
			setState(6146);
			match(EQ_);
			setState(6147);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageParameterContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(PostgreSQLStatementParser.IDENTIFIER_, 0); }
		public StorageParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitStorageParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterContext storageParameter() throws RecognitionException {
		StorageParameterContext _localctx = new StorageParameterContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_storageParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6149);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public RenameColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameColumnSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRenameColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameColumnSpecificationContext renameColumnSpecification() throws RecognitionException {
		RenameColumnSpecificationContext _localctx = new RenameColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_renameColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6151);
			match(RENAME);
			setState(6153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(6152);
				match(COLUMN);
				}
			}

			setState(6155);
			columnName();
			setState(6156);
			match(TO);
			setState(6157);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameConstraintContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RenameConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameConstraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRenameConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameConstraintContext renameConstraint() throws RecognitionException {
		RenameConstraintContext _localctx = new RenameConstraintContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_renameConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6159);
			match(RENAME);
			setState(6160);
			match(CONSTRAINT);
			setState(6161);
			ignoredIdentifier();
			setState(6162);
			match(TO);
			setState(6163);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RenameTableSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRenameTableSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableSpecificationContext renameTableSpecification() throws RecognitionException {
		RenameTableSpecificationContext _localctx = new RenameTableSpecificationContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_renameTableSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6165);
			match(RENAME);
			setState(6166);
			match(TO);
			setState(6167);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public IndexExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexExistClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndexExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexExistClauseContext indexExistClause() throws RecognitionException {
		IndexExistClauseContext _localctx = new IndexExistClauseContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_indexExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				{
				setState(6169);
				match(IF);
				setState(6170);
				match(EXISTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNamesContext extends ParserRuleContext {
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public IndexNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNames; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitIndexNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNamesContext indexNames() throws RecognitionException {
		IndexNamesContext _localctx = new IndexNamesContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_indexNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6173);
			indexName();
			setState(6178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6174);
				match(COMMA_);
				setState(6175);
				indexName();
				}
				}
				setState(6180);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public AlterDatabaseClauseContext alterDatabaseClause() {
			return getRuleContext(AlterDatabaseClauseContext.class,0);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_alterDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6181);
			match(ALTER);
			setState(6182);
			match(DATABASE);
			setState(6183);
			databaseName();
			setState(6184);
			alterDatabaseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public CreatedbOptItemsContext createdbOptItems() {
			return getRuleContext(CreatedbOptItemsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterDatabaseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterDatabaseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseClauseContext alterDatabaseClause() throws RecognitionException {
		AlterDatabaseClauseContext _localctx = new AlterDatabaseClauseContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_alterDatabaseClause);
		int _la;
		try {
			setState(6202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6186);
					match(WITH);
					}
				}

				setState(6190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
					{
					setState(6189);
					createdbOptItems();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6192);
				match(RENAME);
				setState(6193);
				match(TO);
				setState(6194);
				databaseName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6195);
				match(OWNER);
				setState(6196);
				match(TO);
				setState(6197);
				roleSpec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6198);
				match(SET);
				setState(6199);
				match(TABLESPACE);
				setState(6200);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6201);
				setResetClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbOptItemsContext extends ParserRuleContext {
		public List<CreatedbOptItemContext> createdbOptItem() {
			return getRuleContexts(CreatedbOptItemContext.class);
		}
		public CreatedbOptItemContext createdbOptItem(int i) {
			return getRuleContext(CreatedbOptItemContext.class,i);
		}
		public CreatedbOptItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptItems; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreatedbOptItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptItemsContext createdbOptItems() throws RecognitionException {
		CreatedbOptItemsContext _localctx = new CreatedbOptItemsContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_createdbOptItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6205); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6204);
				createdbOptItem();
				}
				}
				setState(6207); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbOptItemContext extends ParserRuleContext {
		public CreatedbOptNameContext createdbOptName() {
			return getRuleContext(CreatedbOptNameContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public CreatedbOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreatedbOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptItemContext createdbOptItem() throws RecognitionException {
		CreatedbOptItemContext _localctx = new CreatedbOptItemContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_createdbOptItem);
		int _la;
		try {
			setState(6227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6209);
				createdbOptName();
				setState(6211);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(6210);
					match(EQ_);
					}
				}

				setState(6213);
				signedIconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6215);
				createdbOptName();
				setState(6217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(6216);
					match(EQ_);
					}
				}

				setState(6219);
				booleanOrString();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6221);
				createdbOptName();
				setState(6223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(6222);
					match(EQ_);
					}
				}

				setState(6225);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableCmdsContext extends ParserRuleContext {
		public List<AlterTableCmdContext> alterTableCmd() {
			return getRuleContexts(AlterTableCmdContext.class);
		}
		public AlterTableCmdContext alterTableCmd(int i) {
			return getRuleContext(AlterTableCmdContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AlterTableCmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableCmds; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTableCmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableCmdsContext alterTableCmds() throws RecognitionException {
		AlterTableCmdsContext _localctx = new AlterTableCmdsContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_alterTableCmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6229);
			alterTableCmd();
			setState(6234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6230);
				match(COMMA_);
				setState(6231);
				alterTableCmd();
				}
				}
				setState(6236);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableCmdContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public AlterColumnDefaultContext alterColumnDefault() {
			return getRuleContext(AlterColumnDefaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public ParenthesizedSeqOptListContext parenthesizedSeqOptList() {
			return getRuleContext(ParenthesizedSeqOptListContext.class,0);
		}
		public AlterIdentityColumnOptionListContext alterIdentityColumnOptionList() {
			return getRuleContext(AlterIdentityColumnOptionListContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public SetDataContext setData() {
			return getRuleContext(SetDataContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public AlterUsingContext alterUsing() {
			return getRuleContext(AlterUsingContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLStatementParser.VALIDATE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLStatementParser.OIDS, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLStatementParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLStatementParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLStatementParser.ENABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLStatementParser.REPLICA, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSQLStatementParser.DISABLE, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public ReplicaIdentityContext replicaIdentity() {
			return getRuleContext(ReplicaIdentityContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLStatementParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLStatementParser.FORCE, 0); }
		public AlterTableCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableCmd; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTableCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableCmdContext alterTableCmd() throws RecognitionException {
		AlterTableCmdContext _localctx = new AlterTableCmdContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_alterTableCmd);
		int _la;
		try {
			setState(6510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6237);
				match(ADD);
				setState(6239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6238);
					match(COLUMN);
					}
				}

				setState(6244);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(6241);
					match(IF);
					setState(6242);
					match(NOT);
					setState(6243);
					match(EXISTS);
					}
					break;
				}
				setState(6246);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6247);
				match(ALTER);
				setState(6249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6248);
					match(COLUMN);
					}
				}

				setState(6251);
				colId();
				setState(6252);
				alterColumnDefault();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6254);
				match(ALTER);
				setState(6256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6255);
					match(COLUMN);
					}
				}

				setState(6258);
				colId();
				setState(6259);
				match(DROP);
				setState(6260);
				match(NOT);
				setState(6261);
				match(NULL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6263);
				match(ALTER);
				setState(6265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6264);
					match(COLUMN);
					}
				}

				setState(6267);
				colId();
				setState(6268);
				match(SET);
				setState(6269);
				match(NOT);
				setState(6270);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6272);
				match(ALTER);
				setState(6274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6273);
					match(COLUMN);
					}
				}

				setState(6276);
				colId();
				setState(6277);
				match(SET);
				setState(6278);
				match(STATISTICS);
				setState(6279);
				signedIconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6281);
				match(ALTER);
				setState(6283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6282);
					match(COLUMN);
					}
				}

				setState(6285);
				match(NUMBER_);
				setState(6286);
				match(SET);
				setState(6287);
				match(STATISTICS);
				setState(6288);
				signedIconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6289);
				match(ALTER);
				setState(6291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6290);
					match(COLUMN);
					}
				}

				setState(6293);
				colId();
				setState(6294);
				match(SET);
				setState(6295);
				reloptions();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6297);
				match(ALTER);
				setState(6299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6298);
					match(COLUMN);
					}
				}

				setState(6301);
				colId();
				setState(6302);
				match(RESET);
				setState(6303);
				reloptions();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6305);
				match(ALTER);
				setState(6307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6306);
					match(COLUMN);
					}
				}

				setState(6309);
				colId();
				setState(6310);
				match(SET);
				setState(6311);
				match(STORAGE);
				setState(6312);
				colId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6314);
				match(ALTER);
				setState(6316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6315);
					match(COLUMN);
					}
				}

				setState(6318);
				colId();
				setState(6319);
				match(ADD);
				setState(6320);
				match(GENERATED);
				setState(6321);
				generatedWhen();
				setState(6322);
				match(AS);
				setState(6323);
				match(IDENTITY);
				setState(6325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6324);
					parenthesizedSeqOptList();
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6327);
				match(ALTER);
				setState(6329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6328);
					match(COLUMN);
					}
				}

				setState(6331);
				colId();
				setState(6332);
				alterIdentityColumnOptionList();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6334);
				match(ALTER);
				setState(6336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6335);
					match(COLUMN);
					}
				}

				setState(6338);
				colId();
				setState(6339);
				match(DROP);
				setState(6340);
				match(IDENTITY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6342);
				match(ALTER);
				setState(6344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6343);
					match(COLUMN);
					}
				}

				setState(6346);
				colId();
				setState(6347);
				match(DROP);
				setState(6348);
				match(IDENTITY);
				setState(6349);
				match(IF);
				setState(6350);
				match(EXISTS);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6352);
				match(DROP);
				setState(6354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6353);
					match(COLUMN);
					}
				}

				setState(6356);
				match(IF);
				setState(6357);
				match(EXISTS);
				setState(6358);
				colId();
				setState(6360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6359);
					dropBehavior();
					}
				}

				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6362);
				match(DROP);
				setState(6364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6363);
					match(COLUMN);
					}
				}

				setState(6366);
				colId();
				setState(6368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6367);
					dropBehavior();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6370);
				match(ALTER);
				setState(6372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6371);
					match(COLUMN);
					}
				}

				setState(6374);
				colId();
				setState(6376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(6375);
					setData();
					}
				}

				setState(6378);
				match(TYPE);
				setState(6379);
				typeName();
				setState(6381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(6380);
					collateClause();
					}
				}

				setState(6384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6383);
					alterUsing();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6386);
				match(ALTER);
				setState(6388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6387);
					match(COLUMN);
					}
				}

				setState(6390);
				colId();
				setState(6391);
				alterGenericOptions();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6393);
				match(ADD);
				setState(6394);
				tableConstraint();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6395);
				match(ALTER);
				setState(6396);
				match(CONSTRAINT);
				setState(6397);
				name();
				setState(6398);
				constraintAttributeSpec();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6400);
				match(VALIDATE);
				setState(6401);
				match(CONSTRAINT);
				setState(6402);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6403);
				match(DROP);
				setState(6404);
				match(CONSTRAINT);
				setState(6405);
				match(IF);
				setState(6406);
				match(EXISTS);
				setState(6407);
				name();
				setState(6409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6408);
					dropBehavior();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6411);
				match(DROP);
				setState(6412);
				match(CONSTRAINT);
				setState(6413);
				name();
				setState(6415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6414);
					dropBehavior();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6417);
				match(SET);
				setState(6418);
				match(WITHOUT);
				setState(6419);
				match(OIDS);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6420);
				match(CLUSTER);
				setState(6421);
				match(ON);
				setState(6422);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6423);
				match(SET);
				setState(6424);
				match(WITHOUT);
				setState(6425);
				match(CLUSTER);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6426);
				match(SET);
				setState(6427);
				match(LOGGED);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6428);
				match(SET);
				setState(6429);
				match(UNLOGGED);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6430);
				match(ENABLE);
				setState(6431);
				match(TRIGGER);
				setState(6432);
				name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6433);
				match(ENABLE);
				setState(6434);
				match(ALWAYS);
				setState(6435);
				match(TRIGGER);
				setState(6436);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6437);
				match(ENABLE);
				setState(6438);
				match(REPLICA);
				setState(6439);
				match(TRIGGER);
				setState(6440);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6441);
				match(ENABLE);
				setState(6442);
				match(TRIGGER);
				setState(6443);
				match(ALL);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6444);
				match(ENABLE);
				setState(6445);
				match(TRIGGER);
				setState(6446);
				match(USER);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6447);
				match(DISABLE);
				setState(6448);
				match(TRIGGER);
				setState(6449);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6450);
				match(DISABLE);
				setState(6451);
				match(TRIGGER);
				setState(6452);
				match(ALL);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6453);
				match(DISABLE);
				setState(6454);
				match(TRIGGER);
				setState(6455);
				match(USER);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6456);
				match(ENABLE);
				setState(6457);
				match(RULE);
				setState(6458);
				name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6459);
				match(ENABLE);
				setState(6460);
				match(ALWAYS);
				setState(6461);
				match(RULE);
				setState(6462);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6463);
				match(ENABLE);
				setState(6464);
				match(REPLICA);
				setState(6465);
				match(RULE);
				setState(6466);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6467);
				match(DISABLE);
				setState(6468);
				match(RULE);
				setState(6469);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6470);
				match(INHERIT);
				setState(6471);
				qualifiedName();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6472);
				match(NO);
				setState(6473);
				match(INHERIT);
				setState(6474);
				qualifiedName();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6475);
				match(OF);
				setState(6476);
				anyName();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6477);
				match(NOT);
				setState(6478);
				match(OF);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6479);
				match(OWNER);
				setState(6480);
				match(TO);
				setState(6481);
				roleSpec();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(6482);
				match(SET);
				setState(6483);
				match(TABLESPACE);
				setState(6484);
				name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(6485);
				match(SET);
				setState(6486);
				reloptions();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(6487);
				match(RESET);
				setState(6488);
				reloptions();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(6489);
				match(REPLICA);
				setState(6490);
				match(IDENTITY);
				setState(6491);
				replicaIdentity();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(6492);
				match(ENABLE);
				setState(6493);
				match(ROW);
				setState(6494);
				match(LEVEL);
				setState(6495);
				match(SECURITY);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(6496);
				match(DISABLE);
				setState(6497);
				match(ROW);
				setState(6498);
				match(LEVEL);
				setState(6499);
				match(SECURITY);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(6500);
				match(FORCE);
				setState(6501);
				match(ROW);
				setState(6502);
				match(LEVEL);
				setState(6503);
				match(SECURITY);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(6504);
				match(NO);
				setState(6505);
				match(FORCE);
				setState(6506);
				match(ROW);
				setState(6507);
				match(LEVEL);
				setState(6508);
				match(SECURITY);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(6509);
				alterGenericOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttributeSpecContext extends ParserRuleContext {
		public List<ConstraintAttributeElemContext> constraintAttributeElem() {
			return getRuleContexts(ConstraintAttributeElemContext.class);
		}
		public ConstraintAttributeElemContext constraintAttributeElem(int i) {
			return getRuleContext(ConstraintAttributeElemContext.class,i);
		}
		public ConstraintAttributeSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConstraintAttributeSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeSpecContext constraintAttributeSpec() throws RecognitionException {
		ConstraintAttributeSpecContext _localctx = new ConstraintAttributeSpecContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_constraintAttributeSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NOT || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (NO - 220)) | (1L << (DEFERRABLE - 220)) | (1L << (INITIALLY - 220)))) != 0)) {
				{
				{
				setState(6512);
				constraintAttributeElem();
				}
				}
				setState(6517);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLStatementParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLStatementParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLStatementParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLStatementParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLStatementParser.VALID, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public ConstraintAttributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConstraintAttributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeElemContext constraintAttributeElem() throws RecognitionException {
		ConstraintAttributeElemContext _localctx = new ConstraintAttributeElemContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_constraintAttributeElem);
		try {
			setState(6529);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6518);
				match(NOT);
				setState(6519);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6520);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6521);
				match(INITIALLY);
				setState(6522);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6523);
				match(INITIALLY);
				setState(6524);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6525);
				match(NOT);
				setState(6526);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6527);
				match(NO);
				setState(6528);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGenericOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AlterGenericOptionListContext alterGenericOptionList() {
			return getRuleContext(AlterGenericOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public AlterGenericOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterGenericOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionsContext alterGenericOptions() throws RecognitionException {
		AlterGenericOptionsContext _localctx = new AlterGenericOptionsContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_alterGenericOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6531);
			match(OPTIONS);
			setState(6532);
			match(LP_);
			setState(6533);
			alterGenericOptionList();
			setState(6534);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGenericOptionListContext extends ParserRuleContext {
		public List<AlterGenericOptionElemContext> alterGenericOptionElem() {
			return getRuleContexts(AlterGenericOptionElemContext.class);
		}
		public AlterGenericOptionElemContext alterGenericOptionElem(int i) {
			return getRuleContext(AlterGenericOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AlterGenericOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterGenericOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionListContext alterGenericOptionList() throws RecognitionException {
		AlterGenericOptionListContext _localctx = new AlterGenericOptionListContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_alterGenericOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6536);
			alterGenericOptionElem();
			setState(6541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6537);
				match(COMMA_);
				setState(6538);
				alterGenericOptionElem();
				}
				}
				setState(6543);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGenericOptionElemContext extends ParserRuleContext {
		public GenericOptionElemContext genericOptionElem() {
			return getRuleContext(GenericOptionElemContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public GenericOptionNameContext genericOptionName() {
			return getRuleContext(GenericOptionNameContext.class,0);
		}
		public AlterGenericOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptionElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterGenericOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionElemContext alterGenericOptionElem() throws RecognitionException {
		AlterGenericOptionElemContext _localctx = new AlterGenericOptionElemContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_alterGenericOptionElem);
		try {
			setState(6551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6544);
				genericOptionElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6545);
				match(SET);
				setState(6546);
				genericOptionElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6547);
				match(ADD);
				setState(6548);
				genericOptionElem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6549);
				match(DROP);
				setState(6550);
				genericOptionName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropBehaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public DropBehaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropBehavior; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropBehavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropBehaviorContext dropBehavior() throws RecognitionException {
		DropBehaviorContext _localctx = new DropBehaviorContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_dropBehavior);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6553);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUsingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public AlterUsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUsing; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterUsing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUsingContext alterUsing() throws RecognitionException {
		AlterUsingContext _localctx = new AlterUsingContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_alterUsing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6555);
			match(USING);
			setState(6556);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetDataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public SetDataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setData; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSetData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetDataContext setData() throws RecognitionException {
		SetDataContext _localctx = new SetDataContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_setData);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6558);
			match(SET);
			setState(6559);
			match(DATA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIdentityColumnOptionListContext extends ParserRuleContext {
		public List<AlterIdentityColumnOptionContext> alterIdentityColumnOption() {
			return getRuleContexts(AlterIdentityColumnOptionContext.class);
		}
		public AlterIdentityColumnOptionContext alterIdentityColumnOption(int i) {
			return getRuleContext(AlterIdentityColumnOptionContext.class,i);
		}
		public AlterIdentityColumnOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIdentityColumnOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterIdentityColumnOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIdentityColumnOptionListContext alterIdentityColumnOptionList() throws RecognitionException {
		AlterIdentityColumnOptionListContext _localctx = new AlterIdentityColumnOptionListContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_alterIdentityColumnOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6562); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6561);
				alterIdentityColumnOption();
				}
				}
				setState(6564); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==SET || _la==RESTART );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIdentityColumnOptionContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(PostgreSQLStatementParser.RESTART, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SeqOptElemContext seqOptElem() {
			return getRuleContext(SeqOptElemContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public AlterIdentityColumnOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIdentityColumnOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterIdentityColumnOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIdentityColumnOptionContext alterIdentityColumnOption() throws RecognitionException {
		AlterIdentityColumnOptionContext _localctx = new AlterIdentityColumnOptionContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_alterIdentityColumnOption);
		int _la;
		try {
			setState(6577);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6566);
				match(RESTART);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6567);
				match(RESTART);
				setState(6569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6568);
					match(WITH);
					}
				}

				setState(6571);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6572);
				match(SET);
				setState(6573);
				seqOptElem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6574);
				match(SET);
				setState(6575);
				match(GENERATED);
				setState(6576);
				generatedWhen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnDefaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public AlterColumnDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnDefault; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterColumnDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnDefaultContext alterColumnDefault() throws RecognitionException {
		AlterColumnDefaultContext _localctx = new AlterColumnDefaultContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_alterColumnDefault);
		try {
			setState(6584);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(6579);
				match(SET);
				setState(6580);
				match(DEFAULT);
				setState(6581);
				aExpr(0);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(6582);
				match(DROP);
				setState(6583);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public AlterOperatorClausesContext alterOperatorClauses() {
			return getRuleContext(AlterOperatorClausesContext.class,0);
		}
		public AlterOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorContext alterOperator() throws RecognitionException {
		AlterOperatorContext _localctx = new AlterOperatorContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_alterOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6586);
			match(ALTER);
			setState(6587);
			match(OPERATOR);
			setState(6588);
			alterOperatorClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorClassContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterOperatorClassClausesContext alterOperatorClassClauses() {
			return getRuleContext(AlterOperatorClassClausesContext.class,0);
		}
		public AlterOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClass; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClassContext alterOperatorClass() throws RecognitionException {
		AlterOperatorClassContext _localctx = new AlterOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_alterOperatorClass);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6590);
			match(ALTER);
			setState(6591);
			match(OPERATOR);
			setState(6592);
			match(CLASS);
			setState(6593);
			anyName();
			setState(6594);
			match(USING);
			setState(6595);
			name();
			setState(6596);
			alterOperatorClassClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorClassClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterOperatorClassClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClassClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterOperatorClassClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClassClausesContext alterOperatorClassClauses() throws RecognitionException {
		AlterOperatorClassClausesContext _localctx = new AlterOperatorClassClausesContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_alterOperatorClassClauses);
		try {
			setState(6607);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(6598);
				match(RENAME);
				setState(6599);
				match(TO);
				setState(6600);
				name();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(6601);
				match(SET);
				setState(6602);
				match(SCHEMA);
				setState(6603);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6604);
				match(OWNER);
				setState(6605);
				match(TO);
				setState(6606);
				roleSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterOperatorFamilyClausesContext alterOperatorFamilyClauses() {
			return getRuleContext(AlterOperatorFamilyClausesContext.class,0);
		}
		public AlterOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorFamily; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorFamilyContext alterOperatorFamily() throws RecognitionException {
		AlterOperatorFamilyContext _localctx = new AlterOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_alterOperatorFamily);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6609);
			match(ALTER);
			setState(6610);
			match(OPERATOR);
			setState(6611);
			match(FAMILY);
			setState(6612);
			anyName();
			setState(6613);
			match(USING);
			setState(6614);
			name();
			setState(6615);
			alterOperatorFamilyClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorFamilyClausesContext extends ParserRuleContext {
		public OpclassItemListContext opclassItemList() {
			return getRuleContext(OpclassItemListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public AlterOperatorClassClausesContext alterOperatorClassClauses() {
			return getRuleContext(AlterOperatorClassClausesContext.class,0);
		}
		public AlterOperatorFamilyClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorFamilyClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterOperatorFamilyClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorFamilyClausesContext alterOperatorFamilyClauses() throws RecognitionException {
		AlterOperatorFamilyClausesContext _localctx = new AlterOperatorFamilyClausesContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_alterOperatorFamilyClauses);
		int _la;
		try {
			setState(6620);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6617);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6618);
				opclassItemList();
				}
				break;
			case SET:
			case OWNER:
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(6619);
				alterOperatorClassClauses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpclassItemListContext extends ParserRuleContext {
		public List<OpclassItemContext> opclassItem() {
			return getRuleContexts(OpclassItemContext.class);
		}
		public OpclassItemContext opclassItem(int i) {
			return getRuleContext(OpclassItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public OpclassItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassItemList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOpclassItemList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassItemListContext opclassItemList() throws RecognitionException {
		OpclassItemListContext _localctx = new OpclassItemListContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_opclassItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6622);
			opclassItem();
			setState(6627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6623);
				match(COMMA_);
				setState(6624);
				opclassItem();
				}
				}
				setState(6629);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpclassItemContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public OpclassPurposeContext opclassPurpose() {
			return getRuleContext(OpclassPurposeContext.class,0);
		}
		public TerminalNode RECHECK() { return getToken(PostgreSQLStatementParser.RECHECK, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public OpclassItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOpclassItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassItemContext opclassItem() throws RecognitionException {
		OpclassItemContext _localctx = new OpclassItemContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_opclassItem);
		int _la;
		try {
			setState(6660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6630);
				match(OPERATOR);
				setState(6631);
				match(NUMBER_);
				setState(6632);
				anyOperator();
				setState(6634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6633);
					opclassPurpose();
					}
				}

				setState(6637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECHECK) {
					{
					setState(6636);
					match(RECHECK);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6639);
				match(OPERATOR);
				setState(6640);
				match(NUMBER_);
				setState(6641);
				operatorWithArgtypes();
				setState(6643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6642);
					opclassPurpose();
					}
				}

				setState(6646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECHECK) {
					{
					setState(6645);
					match(RECHECK);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6648);
				match(FUNCTION);
				setState(6649);
				match(NUMBER_);
				setState(6650);
				functionWithArgtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6651);
				match(FUNCTION);
				setState(6652);
				match(NUMBER_);
				setState(6653);
				match(LP_);
				setState(6654);
				typeList();
				setState(6655);
				match(RP_);
				setState(6656);
				functionWithArgtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6658);
				match(STORAGE);
				setState(6659);
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpclassPurposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OpclassPurposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassPurpose; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOpclassPurpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassPurposeContext opclassPurpose() throws RecognitionException {
		OpclassPurposeContext _localctx = new OpclassPurposeContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_opclassPurpose);
		try {
			setState(6668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6662);
				match(FOR);
				setState(6663);
				match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6664);
				match(FOR);
				setState(6665);
				match(ORDER);
				setState(6666);
				match(BY);
				setState(6667);
				anyName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorClausesContext extends ParserRuleContext {
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public OperatorDefListContext operatorDefList() {
			return getRuleContext(OperatorDefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterOperatorClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterOperatorClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClausesContext alterOperatorClauses() throws RecognitionException {
		AlterOperatorClausesContext _localctx = new AlterOperatorClausesContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_alterOperatorClauses);
		try {
			setState(6686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6670);
				operatorWithArgtypes();
				setState(6671);
				match(SET);
				setState(6672);
				match(SCHEMA);
				setState(6673);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6675);
				operatorWithArgtypes();
				setState(6676);
				match(SET);
				setState(6677);
				match(LP_);
				setState(6678);
				operatorDefList();
				setState(6679);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6681);
				operatorWithArgtypes();
				setState(6682);
				match(OWNER);
				setState(6683);
				match(TO);
				setState(6684);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorDefListContext extends ParserRuleContext {
		public List<OperatorDefElemContext> operatorDefElem() {
			return getRuleContexts(OperatorDefElemContext.class);
		}
		public OperatorDefElemContext operatorDefElem(int i) {
			return getRuleContext(OperatorDefElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public OperatorDefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOperatorDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefListContext operatorDefList() throws RecognitionException {
		OperatorDefListContext _localctx = new OperatorDefListContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_operatorDefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6688);
			operatorDefElem();
			setState(6693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6689);
				match(COMMA_);
				setState(6690);
				operatorDefElem();
				}
				}
				setState(6695);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorDefElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLStatementParser.NONE, 0); }
		public OperatorDefArgContext operatorDefArg() {
			return getRuleContext(OperatorDefArgContext.class,0);
		}
		public OperatorDefElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOperatorDefElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefElemContext operatorDefElem() throws RecognitionException {
		OperatorDefElemContext _localctx = new OperatorDefElemContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_operatorDefElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6696);
			colLabel();
			setState(6697);
			match(EQ_);
			setState(6700);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(6698);
				match(NONE);
				}
				break;
			case T__1:
			case T__2:
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case GRANT:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case COLUMN:
			case INDEX:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case INTO:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case FROM:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case IF:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case IN:
			case ALL:
			case ANY:
			case LIKE:
			case ORDER:
			case GROUP:
			case BY:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DO:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case BOTH:
			case LEADING:
			case TRAILING:
			case INTERSECT:
			case EXCEPT:
			case TIES:
			case FETCH:
			case CUBE:
			case SETS:
			case WINDOW:
			case OTHERS:
			case OVERLAPS:
			case SOME:
			case AT:
			case DEC:
			case END:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case CHECK:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case REFERENCES:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COLLATE:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case SYMMETRIC:
			case DOCUMENT:
			case NORMALIZED:
			case ASYMMETRIC:
			case VARIADIC:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case ANALYSE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(6699);
				operatorDefArg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorDefArgContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public OperatorDefArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOperatorDefArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefArgContext operatorDefArg() throws RecognitionException {
		OperatorDefArgContext _localctx = new OperatorDefArgContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_operatorDefArg);
		try {
			setState(6707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6702);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6703);
				reservedKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6704);
				qualAllOp();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6705);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6706);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorWithArgtypesContext extends ParserRuleContext {
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public OperArgtypesContext operArgtypes() {
			return getRuleContext(OperArgtypesContext.class,0);
		}
		public OperatorWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorWithArgtypes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOperatorWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorWithArgtypesContext operatorWithArgtypes() throws RecognitionException {
		OperatorWithArgtypesContext _localctx = new OperatorWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_operatorWithArgtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6709);
			anyOperator();
			setState(6710);
			operArgtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAggregateContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public AggregateSignatureContext aggregateSignature() {
			return getRuleContext(AggregateSignatureContext.class,0);
		}
		public AlterAggregateDefinitionClauseContext alterAggregateDefinitionClause() {
			return getRuleContext(AlterAggregateDefinitionClauseContext.class,0);
		}
		public AlterAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAggregate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAggregateContext alterAggregate() throws RecognitionException {
		AlterAggregateContext _localctx = new AlterAggregateContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_alterAggregate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6712);
			match(ALTER);
			setState(6713);
			match(AGGREGATE);
			setState(6714);
			aggregateSignature();
			setState(6715);
			alterAggregateDefinitionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateSignatureContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public AggregateSignatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateSignature; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAggregateSignature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateSignatureContext aggregateSignature() throws RecognitionException {
		AggregateSignatureContext _localctx = new AggregateSignatureContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_aggregateSignature);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6717);
			funcName();
			setState(6718);
			aggrArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggrArgsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public List<AggrArgsListContext> aggrArgsList() {
			return getRuleContexts(AggrArgsListContext.class);
		}
		public AggrArgsListContext aggrArgsList(int i) {
			return getRuleContext(AggrArgsListContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(PostgreSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public AggrArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArgs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAggrArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgsContext aggrArgs() throws RecognitionException {
		AggrArgsContext _localctx = new AggrArgsContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_aggrArgs);
		try {
			setState(6740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6720);
				match(LP_);
				setState(6721);
				match(ASTERISK_);
				setState(6722);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6723);
				match(LP_);
				setState(6724);
				aggrArgsList();
				setState(6725);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6727);
				match(LP_);
				setState(6728);
				match(ORDER);
				setState(6729);
				match(BY);
				setState(6730);
				aggrArgsList();
				setState(6731);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6733);
				match(LP_);
				setState(6734);
				aggrArgsList();
				setState(6735);
				match(ORDER);
				setState(6736);
				match(BY);
				setState(6737);
				aggrArgsList();
				setState(6738);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggrArgsListContext extends ParserRuleContext {
		public List<AggrArgContext> aggrArg() {
			return getRuleContexts(AggrArgContext.class);
		}
		public AggrArgContext aggrArg(int i) {
			return getRuleContext(AggrArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AggrArgsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArgsList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAggrArgsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgsListContext aggrArgsList() throws RecognitionException {
		AggrArgsListContext _localctx = new AggrArgsListContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_aggrArgsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6742);
			aggrArg();
			setState(6747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6743);
				match(COMMA_);
				setState(6744);
				aggrArg();
				}
				}
				setState(6749);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggrArgContext extends ParserRuleContext {
		public FuncArgContext funcArg() {
			return getRuleContext(FuncArgContext.class,0);
		}
		public AggrArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAggrArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgContext aggrArg() throws RecognitionException {
		AggrArgContext _localctx = new AggrArgContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_aggrArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6750);
			funcArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAggregateDefinitionClauseContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterAggregateDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAggregateDefinitionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterAggregateDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAggregateDefinitionClauseContext alterAggregateDefinitionClause() throws RecognitionException {
		AlterAggregateDefinitionClauseContext _localctx = new AlterAggregateDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_alterAggregateDefinitionClause);
		try {
			setState(6761);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(6752);
				match(RENAME);
				setState(6753);
				match(TO);
				setState(6754);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6755);
				match(OWNER);
				setState(6756);
				match(TO);
				setState(6757);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(6758);
				match(SET);
				setState(6759);
				match(SCHEMA);
				setState(6760);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCollationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterCollationClauseContext alterCollationClause() {
			return getRuleContext(AlterCollationClauseContext.class,0);
		}
		public AlterCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCollation; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCollationContext alterCollation() throws RecognitionException {
		AlterCollationContext _localctx = new AlterCollationContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_alterCollation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6763);
			match(ALTER);
			setState(6764);
			match(COLLATION);
			setState(6765);
			anyName();
			setState(6766);
			alterCollationClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCollationClauseContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLStatementParser.REFRESH, 0); }
		public TerminalNode VERSION() { return getToken(PostgreSQLStatementParser.VERSION, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterCollationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCollationClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterCollationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCollationClauseContext alterCollationClause() throws RecognitionException {
		AlterCollationClauseContext _localctx = new AlterCollationClauseContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_alterCollationClause);
		try {
			setState(6779);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFRESH:
				enterOuterAlt(_localctx, 1);
				{
				setState(6768);
				match(REFRESH);
				setState(6769);
				match(VERSION);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(6770);
				match(RENAME);
				setState(6771);
				match(TO);
				setState(6772);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6773);
				match(OWNER);
				setState(6774);
				match(TO);
				setState(6775);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(6776);
				match(SET);
				setState(6777);
				match(SCHEMA);
				setState(6778);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterConversionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterConversionClauseContext alterConversionClause() {
			return getRuleContext(AlterConversionClauseContext.class,0);
		}
		public AlterConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterConversion; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterConversionContext alterConversion() throws RecognitionException {
		AlterConversionContext _localctx = new AlterConversionContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_alterConversion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6781);
			match(ALTER);
			setState(6782);
			match(CONVERSION);
			setState(6783);
			anyName();
			setState(6784);
			alterConversionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterConversionClauseContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterConversionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterConversionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterConversionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterConversionClauseContext alterConversionClause() throws RecognitionException {
		AlterConversionClauseContext _localctx = new AlterConversionClauseContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_alterConversionClause);
		try {
			setState(6795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(6786);
				match(RENAME);
				setState(6787);
				match(TO);
				setState(6788);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6789);
				match(OWNER);
				setState(6790);
				match(TO);
				setState(6791);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(6792);
				match(SET);
				setState(6793);
				match(SCHEMA);
				setState(6794);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefaultPrivilegesContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLStatementParser.PRIVILEGES, 0); }
		public DefACLActionContext defACLAction() {
			return getRuleContext(DefACLActionContext.class,0);
		}
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public AlterDefaultPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefaultPrivileges; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterDefaultPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefaultPrivilegesContext alterDefaultPrivileges() throws RecognitionException {
		AlterDefaultPrivilegesContext _localctx = new AlterDefaultPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_alterDefaultPrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6797);
			match(ALTER);
			setState(6798);
			match(DEFAULT);
			setState(6799);
			match(PRIVILEGES);
			setState(6801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR || _la==IN) {
				{
				setState(6800);
				defACLOptionList();
				}
			}

			setState(6803);
			defACLAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLActionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public DefaclPrivilegeTargetContext defaclPrivilegeTarget() {
			return getRuleContext(DefaclPrivilegeTargetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public GranteeListContext granteeList() {
			return getRuleContext(GranteeListContext.class,0);
		}
		public GrantGrantOptionContext grantGrantOption() {
			return getRuleContext(GrantGrantOptionContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PostgreSQLStatementParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public DefACLActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDefACLAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLActionContext defACLAction() throws RecognitionException {
		DefACLActionContext _localctx = new DefACLActionContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_defACLAction);
		int _la;
		try {
			setState(6835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6805);
				match(GRANT);
				setState(6806);
				privileges();
				setState(6807);
				match(ON);
				setState(6808);
				defaclPrivilegeTarget();
				setState(6809);
				match(TO);
				setState(6810);
				granteeList();
				setState(6812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6811);
					grantGrantOption();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6814);
				match(REVOKE);
				setState(6815);
				privileges();
				setState(6816);
				match(ON);
				setState(6817);
				defaclPrivilegeTarget();
				setState(6818);
				match(FROM);
				setState(6819);
				granteeList();
				setState(6821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6820);
					dropBehavior();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6823);
				match(REVOKE);
				setState(6824);
				match(GRANT);
				setState(6825);
				match(OPTION);
				setState(6826);
				match(FOR);
				setState(6827);
				privileges();
				setState(6828);
				match(ON);
				setState(6829);
				defaclPrivilegeTarget();
				setState(6830);
				match(FROM);
				setState(6831);
				granteeList();
				setState(6833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6832);
					dropBehavior();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantGrantOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public GrantGrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantGrantOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGrantGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantGrantOptionContext grantGrantOption() throws RecognitionException {
		GrantGrantOptionContext _localctx = new GrantGrantOptionContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_grantGrantOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6837);
			match(WITH);
			setState(6838);
			match(GRANT);
			setState(6839);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeListContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public GranteeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_granteeList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGranteeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeListContext granteeList() throws RecognitionException {
		GranteeListContext _localctx = new GranteeListContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_granteeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6841);
			grantee();
			setState(6846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6842);
				match(COMMA_);
				setState(6843);
				grantee();
				}
				}
				setState(6848);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_grantee);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(6849);
				match(GROUP);
				}
			}

			setState(6852);
			roleSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaclPrivilegeTargetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(PostgreSQLStatementParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLStatementParser.FUNCTIONS, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLStatementParser.ROUTINES, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLStatementParser.SEQUENCES, 0); }
		public TerminalNode TYPES() { return getToken(PostgreSQLStatementParser.TYPES, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLStatementParser.SCHEMAS, 0); }
		public DefaclPrivilegeTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaclPrivilegeTarget; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDefaclPrivilegeTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaclPrivilegeTargetContext defaclPrivilegeTarget() throws RecognitionException {
		DefaclPrivilegeTargetContext _localctx = new DefaclPrivilegeTargetContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_defaclPrivilegeTarget);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6854);
			_la = _input.LA(1);
			if ( !(((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (FUNCTIONS - 462)) | (1L << (ROUTINES - 462)) | (1L << (SEQUENCES - 462)) | (1L << (SCHEMAS - 462)) | (1L << (TABLES - 462)))) != 0) || _la==TYPES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public PrivilegeListContext privilegeList() {
			return getRuleContext(PrivilegeListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_privileges);
		try {
			setState(6871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6856);
				privilegeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6857);
				match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6858);
				match(ALL);
				setState(6859);
				match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6860);
				match(ALL);
				setState(6861);
				match(LP_);
				setState(6862);
				columnList();
				setState(6863);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6865);
				match(ALL);
				setState(6866);
				match(PRIVILEGES);
				setState(6867);
				match(LP_);
				setState(6868);
				columnList();
				setState(6869);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeListContext extends ParserRuleContext {
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public PrivilegeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrivilegeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeListContext privilegeList() throws RecognitionException {
		PrivilegeListContext _localctx = new PrivilegeListContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_privilegeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6873);
			privilege();
			setState(6878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6874);
				match(COMMA_);
				setState(6875);
				privilege();
				}
				}
				setState(6880);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_privilege);
		int _la;
		try {
			setState(6897);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6881);
				match(SELECT);
				setState(6883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6882);
					optColumnList();
					}
				}

				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(6885);
				match(REFERENCES);
				setState(6887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6886);
					optColumnList();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6889);
				match(CREATE);
				setState(6891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6890);
					optColumnList();
					}
				}

				}
				break;
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 4);
				{
				setState(6893);
				colId();
				setState(6895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(6894);
					optColumnList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLOptionListContext extends ParserRuleContext {
		public List<DefACLOptionContext> defACLOption() {
			return getRuleContexts(DefACLOptionContext.class);
		}
		public DefACLOptionContext defACLOption(int i) {
			return getRuleContext(DefACLOptionContext.class,i);
		}
		public DefACLOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDefACLOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionListContext defACLOptionList() throws RecognitionException {
		DefACLOptionListContext _localctx = new DefACLOptionListContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_defACLOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6900); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6899);
				defACLOption();
				}
				}
				setState(6902); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR || _la==IN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLOptionContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameListContext schemaNameList() {
			return getRuleContext(SchemaNameListContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public DefACLOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDefACLOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionContext defACLOption() throws RecognitionException {
		DefACLOptionContext _localctx = new DefACLOptionContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_defACLOption);
		int _la;
		try {
			setState(6910);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				enterOuterAlt(_localctx, 1);
				{
				setState(6904);
				match(IN);
				setState(6905);
				match(SCHEMA);
				setState(6906);
				schemaNameList();
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(6907);
				match(FOR);
				setState(6908);
				_la = _input.LA(1);
				if ( !(_la==ROLE || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6909);
				roleList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameListContext extends ParserRuleContext {
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public SchemaNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaNameList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSchemaNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameListContext schemaNameList() throws RecognitionException {
		SchemaNameListContext _localctx = new SchemaNameListContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_schemaNameList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6912);
			nameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public AlterDomainClauseContext alterDomainClause() {
			return getRuleContext(AlterDomainClauseContext.class,0);
		}
		public AlterDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomain; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainContext alterDomain() throws RecognitionException {
		AlterDomainContext _localctx = new AlterDomainContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_alterDomain);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6914);
			match(ALTER);
			setState(6915);
			match(DOMAIN);
			setState(6916);
			alterDomainClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainClauseContext extends ParserRuleContext {
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLStatementParser.VALIDATE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public List<ConstraintNameContext> constraintName() {
			return getRuleContexts(ConstraintNameContext.class);
		}
		public ConstraintNameContext constraintName(int i) {
			return getRuleContext(ConstraintNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterColumnDefaultContext alterColumnDefault() {
			return getRuleContext(AlterColumnDefaultContext.class,0);
		}
		public AlterDomainClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomainClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterDomainClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainClauseContext alterDomainClause() throws RecognitionException {
		AlterDomainClauseContext _localctx = new AlterDomainClauseContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_alterDomainClause);
		int _la;
		try {
			setState(6968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6918);
				anyName();
				setState(6919);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6920);
				match(NOT);
				setState(6921);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6923);
				anyName();
				setState(6924);
				match(ADD);
				setState(6925);
				tableConstraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6927);
				anyName();
				setState(6928);
				match(DROP);
				setState(6929);
				match(CONSTRAINT);
				setState(6932);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
				case 1:
					{
					setState(6930);
					match(IF);
					setState(6931);
					match(EXISTS);
					}
					break;
				}
				setState(6934);
				name();
				setState(6936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6935);
					dropBehavior();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6938);
				anyName();
				setState(6939);
				match(VALIDATE);
				setState(6940);
				match(CONSTRAINT);
				setState(6941);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6943);
				anyName();
				setState(6944);
				match(RENAME);
				setState(6945);
				match(CONSTRAINT);
				setState(6946);
				constraintName();
				setState(6947);
				match(TO);
				setState(6948);
				constraintName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6950);
				anyName();
				setState(6951);
				match(OWNER);
				setState(6952);
				match(TO);
				setState(6953);
				roleSpec();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6955);
				anyName();
				setState(6956);
				match(RENAME);
				setState(6957);
				match(TO);
				setState(6958);
				anyName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6960);
				anyName();
				setState(6961);
				match(SET);
				setState(6962);
				match(SCHEMA);
				setState(6963);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6965);
				anyName();
				setState(6966);
				alterColumnDefault();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6970);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventTriggerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TiggerNameContext tiggerName() {
			return getRuleContext(TiggerNameContext.class,0);
		}
		public AlterEventTriggerClauseContext alterEventTriggerClause() {
			return getRuleContext(AlterEventTriggerClauseContext.class,0);
		}
		public AlterEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventTrigger; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventTriggerContext alterEventTrigger() throws RecognitionException {
		AlterEventTriggerContext _localctx = new AlterEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_alterEventTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6972);
			match(ALTER);
			setState(6973);
			match(EVENT);
			setState(6974);
			match(TRIGGER);
			setState(6975);
			tiggerName();
			setState(6976);
			alterEventTriggerClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventTriggerClauseContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(PostgreSQLStatementParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLStatementParser.ENABLE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLStatementParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLStatementParser.ALWAYS, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TiggerNameContext tiggerName() {
			return getRuleContext(TiggerNameContext.class,0);
		}
		public AlterEventTriggerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventTriggerClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterEventTriggerClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventTriggerClauseContext alterEventTriggerClause() throws RecognitionException {
		AlterEventTriggerClauseContext _localctx = new AlterEventTriggerClauseContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_alterEventTriggerClause);
		int _la;
		try {
			setState(6987);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6978);
				match(DISABLE);
				}
				break;
			case ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6979);
				match(ENABLE);
				setState(6980);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6981);
				match(OWNER);
				setState(6982);
				match(TO);
				setState(6983);
				roleSpec();
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(6984);
				match(RENAME);
				setState(6985);
				match(TO);
				setState(6986);
				tiggerName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TiggerNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TiggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tiggerName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTiggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TiggerNameContext tiggerName() throws RecognitionException {
		TiggerNameContext _localctx = new TiggerNameContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_tiggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6989);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterExtensionClausesContext alterExtensionClauses() {
			return getRuleContext(AlterExtensionClausesContext.class,0);
		}
		public AlterExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionContext alterExtension() throws RecognitionException {
		AlterExtensionContext _localctx = new AlterExtensionContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_alterExtension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6991);
			match(ALTER);
			setState(6992);
			match(EXTENSION);
			setState(6993);
			name();
			setState(6994);
			alterExtensionClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionClausesContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public AlterExtensionOptListContext alterExtensionOptList() {
			return getRuleContext(AlterExtensionOptListContext.class,0);
		}
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public AlterExtensionClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterExtensionClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionClausesContext alterExtensionClauses() throws RecognitionException {
		AlterExtensionClausesContext _localctx = new AlterExtensionClausesContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_alterExtensionClauses);
		int _la;
		try {
			setState(7112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6996);
				match(UPDATE);
				setState(6997);
				alterExtensionOptList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6998);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6999);
				match(ACCESS);
				setState(7000);
				match(METHOD);
				setState(7001);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7002);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7003);
				match(AGGREGATE);
				setState(7004);
				aggregateWithArgtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7005);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7006);
				match(CAST);
				setState(7007);
				match(LP_);
				setState(7008);
				typeName();
				setState(7009);
				match(AS);
				setState(7010);
				typeName();
				setState(7011);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7013);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7014);
				match(COLLATION);
				setState(7015);
				anyName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7016);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7017);
				match(CONVERSION);
				setState(7018);
				anyName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7019);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7020);
				match(DOMAIN);
				setState(7021);
				typeName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7022);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7023);
				match(FUNCTION);
				setState(7024);
				functionWithArgtypes();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7025);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(7026);
					match(PROCEDURAL);
					}
				}

				setState(7029);
				match(LANGUAGE);
				setState(7030);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7031);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7032);
				match(OPERATOR);
				setState(7033);
				operatorWithArgtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7034);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7035);
				match(OPERATOR);
				setState(7036);
				_la = _input.LA(1);
				if ( !(_la==CLASS || _la==FAMILY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7037);
				anyName();
				setState(7038);
				match(USING);
				setState(7039);
				accessMethod();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7041);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7042);
				match(PROCEDURE);
				setState(7043);
				functionWithArgtypes();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7044);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7045);
				match(ROUTINE);
				setState(7046);
				functionWithArgtypes();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7047);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7048);
				match(SCHEMA);
				setState(7049);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7050);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7051);
				match(EVENT);
				setState(7052);
				match(TRIGGER);
				setState(7053);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7054);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7055);
				match(TABLE);
				setState(7056);
				anyName();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7057);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7058);
				match(TEXT);
				setState(7059);
				match(SEARCH);
				setState(7060);
				match(PARSER);
				setState(7061);
				anyName();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7062);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7063);
				match(TEXT);
				setState(7064);
				match(SEARCH);
				setState(7065);
				match(DICTIONARY);
				setState(7066);
				anyName();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7067);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7068);
				match(TEXT);
				setState(7069);
				match(SEARCH);
				setState(7070);
				match(TEMPLATE);
				setState(7071);
				anyName();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7072);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7073);
				match(TEXT);
				setState(7074);
				match(SEARCH);
				setState(7075);
				match(CONFIGURATION);
				setState(7076);
				anyName();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7077);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7078);
				match(SEQUENCE);
				setState(7079);
				anyName();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7080);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7081);
				match(VIEW);
				setState(7082);
				anyName();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7083);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7084);
				match(MATERIALIZED);
				setState(7085);
				match(VIEW);
				setState(7086);
				anyName();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7087);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7088);
				match(FOREIGN);
				setState(7089);
				match(TABLE);
				setState(7090);
				anyName();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7091);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7092);
				match(FOREIGN);
				setState(7093);
				match(DATA);
				setState(7094);
				match(WRAPPER);
				setState(7095);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7096);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7097);
				match(SERVER);
				setState(7098);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(7099);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7100);
				match(TRANSFORM);
				setState(7101);
				match(FOR);
				setState(7102);
				typeName();
				setState(7103);
				match(LANGUAGE);
				setState(7104);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(7106);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7107);
				match(TYPE);
				setState(7108);
				typeName();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(7109);
				match(SET);
				setState(7110);
				match(SCHEMA);
				setState(7111);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionWithArgtypesContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsContext funcArgs() {
			return getRuleContext(FuncArgsContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public FunctionWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionWithArgtypes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFunctionWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionWithArgtypesContext functionWithArgtypes() throws RecognitionException {
		FunctionWithArgtypesContext _localctx = new FunctionWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_functionWithArgtypes);
		try {
			setState(7122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7114);
				funcName();
				setState(7115);
				funcArgs();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7117);
				typeFuncNameKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7118);
				colId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7119);
				colId();
				setState(7120);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public FuncArgsListContext funcArgsList() {
			return getRuleContext(FuncArgsListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsContext funcArgs() throws RecognitionException {
		FuncArgsContext _localctx = new FuncArgsContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_funcArgs);
		try {
			setState(7130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7124);
				match(LP_);
				setState(7125);
				funcArgsList();
				setState(7126);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7128);
				match(LP_);
				setState(7129);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWithArgtypesContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public AggregateWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWithArgtypes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAggregateWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWithArgtypesContext aggregateWithArgtypes() throws RecognitionException {
		AggregateWithArgtypesContext _localctx = new AggregateWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_aggregateWithArgtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7132);
			funcName();
			setState(7133);
			aggrArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionOptListContext extends ParserRuleContext {
		public List<AlterExtensionOptItemContext> alterExtensionOptItem() {
			return getRuleContexts(AlterExtensionOptItemContext.class);
		}
		public AlterExtensionOptItemContext alterExtensionOptItem(int i) {
			return getRuleContext(AlterExtensionOptItemContext.class,i);
		}
		public AlterExtensionOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterExtensionOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionOptListContext alterExtensionOptList() throws RecognitionException {
		AlterExtensionOptListContext _localctx = new AlterExtensionOptListContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_alterExtensionOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TO) {
				{
				{
				setState(7135);
				alterExtensionOptItem();
				}
				}
				setState(7140);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionOptItemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public AlterExtensionOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionOptItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterExtensionOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionOptItemContext alterExtensionOptItem() throws RecognitionException {
		AlterExtensionOptItemContext _localctx = new AlterExtensionOptItemContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_alterExtensionOptItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7141);
			match(TO);
			setState(7144);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				{
				setState(7142);
				nonReservedWord();
				}
				break;
			case STRING_:
				{
				setState(7143);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AlterForeignDataWrapperClausesContext alterForeignDataWrapperClauses() {
			return getRuleContext(AlterForeignDataWrapperClausesContext.class,0);
		}
		public AlterForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignDataWrapper; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignDataWrapperContext alterForeignDataWrapper() throws RecognitionException {
		AlterForeignDataWrapperContext _localctx = new AlterForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_alterForeignDataWrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7146);
			match(ALTER);
			setState(7147);
			match(FOREIGN);
			setState(7148);
			match(DATA);
			setState(7149);
			match(WRAPPER);
			setState(7150);
			colId();
			setState(7151);
			alterForeignDataWrapperClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignDataWrapperClausesContext extends ParserRuleContext {
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public FdwOptionsContext fdwOptions() {
			return getRuleContext(FdwOptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterForeignDataWrapperClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignDataWrapperClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterForeignDataWrapperClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignDataWrapperClausesContext alterForeignDataWrapperClauses() throws RecognitionException {
		AlterForeignDataWrapperClausesContext _localctx = new AlterForeignDataWrapperClausesContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_alterForeignDataWrapperClauses);
		int _la;
		try {
			setState(7164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==HANDLER || _la==VALIDATOR) {
					{
					setState(7153);
					fdwOptions();
					}
				}

				setState(7156);
				alterGenericOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7157);
				fdwOptions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7158);
				match(RENAME);
				setState(7159);
				match(TO);
				setState(7160);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7161);
				match(OWNER);
				setState(7162);
				match(TO);
				setState(7163);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FdwOptionsContext extends ParserRuleContext {
		public List<FdwOptionContext> fdwOption() {
			return getRuleContexts(FdwOptionContext.class);
		}
		public FdwOptionContext fdwOption(int i) {
			return getRuleContext(FdwOptionContext.class,i);
		}
		public FdwOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdwOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFdwOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FdwOptionsContext fdwOptions() throws RecognitionException {
		FdwOptionsContext _localctx = new FdwOptionsContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_fdwOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7167); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7166);
				fdwOption();
				}
				}
				setState(7169); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NO || _la==HANDLER || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FdwOptionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(PostgreSQLStatementParser.HANDLER, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLStatementParser.VALIDATOR, 0); }
		public FdwOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdwOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFdwOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FdwOptionContext fdwOption() throws RecognitionException {
		FdwOptionContext _localctx = new FdwOptionContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_fdwOption);
		try {
			setState(7179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7171);
				match(HANDLER);
				setState(7172);
				handlerName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7173);
				match(NO);
				setState(7174);
				match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7175);
				match(VALIDATOR);
				setState(7176);
				handlerName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7177);
				match(NO);
				setState(7178);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerNameContext extends ParserRuleContext {
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public HandlerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitHandlerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerNameContext handlerName() throws RecognitionException {
		HandlerNameContext _localctx = new HandlerNameContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_handlerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7181);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public AlterGroupClausesContext alterGroupClauses() {
			return getRuleContext(AlterGroupClausesContext.class,0);
		}
		public AlterGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupContext alterGroup() throws RecognitionException {
		AlterGroupContext _localctx = new AlterGroupContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_alterGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7183);
			match(ALTER);
			setState(7184);
			match(GROUP);
			setState(7185);
			alterGroupClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupClausesContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public AlterGroupClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroupClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterGroupClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupClausesContext alterGroupClauses() throws RecognitionException {
		AlterGroupClausesContext _localctx = new AlterGroupClausesContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_alterGroupClauses);
		int _la;
		try {
			setState(7197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7187);
				roleSpec();
				setState(7188);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7189);
				match(USER);
				setState(7190);
				roleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7192);
				roleSpec();
				setState(7193);
				match(RENAME);
				setState(7194);
				match(TO);
				setState(7195);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLanguageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public AlterLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLanguage; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLanguageContext alterLanguage() throws RecognitionException {
		AlterLanguageContext _localctx = new AlterLanguageContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_alterLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7199);
			match(ALTER);
			setState(7201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(7200);
				match(PROCEDURAL);
				}
			}

			setState(7203);
			match(LANGUAGE);
			setState(7216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				setState(7204);
				colId();
				setState(7205);
				match(RENAME);
				setState(7206);
				match(TO);
				setState(7207);
				colId();
				}
				break;
			case 2:
				{
				setState(7209);
				match(OWNER);
				setState(7210);
				match(TO);
				setState(7214);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__1:
				case T__2:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case INDEX:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case YEAR:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case ENUM:
				case XML:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case IDENTIFIER_:
					{
					setState(7211);
					ignoredIdentifier();
					}
					break;
				case CURRENT_USER:
					{
					setState(7212);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(7213);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLargeObjectContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLStatementParser.SESSION_USER, 0); }
		public AlterLargeObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLargeObject; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterLargeObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLargeObjectContext alterLargeObject() throws RecognitionException {
		AlterLargeObjectContext _localctx = new AlterLargeObjectContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_alterLargeObject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7218);
			match(ALTER);
			setState(7219);
			match(LARGE);
			setState(7220);
			match(OBJECT);
			setState(7221);
			numericOnly();
			setState(7222);
			match(OWNER);
			setState(7223);
			match(TO);
			setState(7227);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(7224);
				ignoredIdentifier();
				}
				break;
			case CURRENT_USER:
				{
				setState(7225);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(7226);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterMaterializedViewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public AlterMaterializedViewClausesContext alterMaterializedViewClauses() {
			return getRuleContext(AlterMaterializedViewClausesContext.class,0);
		}
		public AlterMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewContext alterMaterializedView() throws RecognitionException {
		AlterMaterializedViewContext _localctx = new AlterMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_alterMaterializedView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7229);
			match(ALTER);
			setState(7230);
			match(MATERIALIZED);
			setState(7231);
			match(VIEW);
			setState(7232);
			alterMaterializedViewClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterMaterializedViewClausesContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSQLStatementParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSQLStatementParser.TABLESPACE, i);
		}
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PostgreSQLStatementParser.NOWAIT, 0); }
		public AlterMaterializedViewClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedViewClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterMaterializedViewClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewClausesContext alterMaterializedViewClauses() throws RecognitionException {
		AlterMaterializedViewClausesContext _localctx = new AlterMaterializedViewClausesContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_alterMaterializedViewClauses);
		int _la;
		try {
			setState(7292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7236);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
				case 1:
					{
					setState(7234);
					match(IF);
					setState(7235);
					match(EXISTS);
					}
					break;
				}
				setState(7238);
				qualifiedName();
				setState(7239);
				alterTableCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7241);
				qualifiedName();
				setState(7242);
				match(DEPENDS);
				setState(7243);
				match(ON);
				setState(7244);
				match(EXTENSION);
				setState(7245);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7249);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					setState(7247);
					match(IF);
					setState(7248);
					match(EXISTS);
					}
					break;
				}
				setState(7251);
				qualifiedName();
				setState(7252);
				match(RENAME);
				setState(7254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(7253);
					match(COLUMN);
					}
				}

				setState(7256);
				columnName();
				setState(7257);
				match(TO);
				setState(7258);
				columnName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7262);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
				case 1:
					{
					setState(7260);
					match(IF);
					setState(7261);
					match(EXISTS);
					}
					break;
				}
				setState(7264);
				qualifiedName();
				setState(7265);
				match(RENAME);
				setState(7266);
				match(TO);
				setState(7267);
				qualifiedName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7271);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
				case 1:
					{
					setState(7269);
					match(IF);
					setState(7270);
					match(EXISTS);
					}
					break;
				}
				setState(7273);
				qualifiedName();
				setState(7274);
				match(SET);
				setState(7275);
				match(SCHEMA);
				setState(7276);
				schemaName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7278);
				match(ALL);
				setState(7279);
				match(IN);
				setState(7280);
				match(TABLESPACE);
				setState(7281);
				name();
				{
				setState(7282);
				match(OWNED);
				setState(7283);
				match(BY);
				setState(7284);
				roleList();
				}
				setState(7286);
				match(SET);
				setState(7287);
				match(TABLESPACE);
				setState(7288);
				name();
				setState(7290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(7289);
					match(NOWAIT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLStatementParser.DECLARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CursorOptionsContext cursorOptions() {
			return getRuleContext(CursorOptionsContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLStatementParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLStatementParser.HOLD, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDeclare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareContext declare() throws RecognitionException {
		DeclareContext _localctx = new DeclareContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_declare);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7294);
			match(DECLARE);
			setState(7295);
			name();
			setState(7296);
			cursorOptions();
			setState(7297);
			match(CURSOR);
			setState(7302);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(7298);
				match(WITH);
				setState(7299);
				match(HOLD);
				}
				break;
			case WITHOUT:
				{
				setState(7300);
				match(WITHOUT);
				setState(7301);
				match(HOLD);
				}
				break;
			case FOR:
				break;
			default:
				break;
			}
			setState(7304);
			match(FOR);
			setState(7305);
			select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorOptionsContext extends ParserRuleContext {
		public List<CursorOptionContext> cursorOption() {
			return getRuleContexts(CursorOptionContext.class);
		}
		public CursorOptionContext cursorOption(int i) {
			return getRuleContext(CursorOptionContext.class,i);
		}
		public CursorOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCursorOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorOptionsContext cursorOptions() throws RecognitionException {
		CursorOptionsContext _localctx = new CursorOptionsContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_cursorOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BINARY || _la==NO || _la==INSENSITIVE || _la==SCROLL) {
				{
				{
				setState(7307);
				cursorOption();
				}
				}
				setState(7312);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLStatementParser.SCROLL, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLStatementParser.BINARY, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLStatementParser.INSENSITIVE, 0); }
		public CursorOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCursorOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorOptionContext cursorOption() throws RecognitionException {
		CursorOptionContext _localctx = new CursorOptionContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_cursorOption);
		try {
			setState(7318);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(7313);
				match(NO);
				setState(7314);
				match(SCROLL);
				}
				break;
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7315);
				match(SCROLL);
				}
				break;
			case BINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(7316);
				match(BINARY);
				}
				break;
			case INSENSITIVE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7317);
				match(INSENSITIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateMaterializedViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public CreateMvTargetContext createMvTarget() {
			return getRuleContext(CreateMvTargetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public CreateMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMaterializedView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMaterializedViewContext createMaterializedView() throws RecognitionException {
		CreateMaterializedViewContext _localctx = new CreateMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_createMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7320);
			match(CREATE);
			setState(7322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNLOGGED) {
				{
				setState(7321);
				match(UNLOGGED);
				}
			}

			setState(7324);
			match(MATERIALIZED);
			setState(7325);
			match(VIEW);
			setState(7329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				{
				setState(7326);
				match(IF);
				setState(7327);
				match(NOT);
				setState(7328);
				match(EXISTS);
				}
				break;
			}
			setState(7331);
			createMvTarget();
			setState(7332);
			match(AS);
			setState(7333);
			select();
			setState(7339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				{
				setState(7334);
				match(WITH);
				setState(7335);
				match(DATA);
				}
				break;
			case 2:
				{
				setState(7336);
				match(WITH);
				setState(7337);
				match(NO);
				setState(7338);
				match(DATA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateMvTargetContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TableAccessMethodClauseContext tableAccessMethodClause() {
			return getRuleContext(TableAccessMethodClauseContext.class,0);
		}
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateMvTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMvTarget; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateMvTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMvTargetContext createMvTarget() throws RecognitionException {
		CreateMvTargetContext _localctx = new CreateMvTargetContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_createMvTarget);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7341);
			qualifiedName();
			setState(7343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(7342);
				optColumnList();
				}
			}

			setState(7345);
			tableAccessMethodClause();
			setState(7348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7346);
				match(WITH);
				setState(7347);
				reloptions();
				}
			}

			setState(7352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(7350);
				match(TABLESPACE);
				setState(7351);
				name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshMatViewStmtContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLStatementParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public RefreshMatViewStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshMatViewStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRefreshMatViewStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshMatViewStmtContext refreshMatViewStmt() throws RecognitionException {
		RefreshMatViewStmtContext _localctx = new RefreshMatViewStmtContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_refreshMatViewStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7354);
			match(REFRESH);
			setState(7355);
			match(MATERIALIZED);
			setState(7356);
			match(VIEW);
			setState(7358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(7357);
				match(CONCURRENTLY);
				}
			}

			setState(7360);
			qualifiedName();
			setState(7366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				{
				setState(7361);
				match(WITH);
				setState(7362);
				match(DATA);
				}
				break;
			case 2:
				{
				setState(7363);
				match(WITH);
				setState(7364);
				match(NO);
				setState(7365);
				match(DATA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPolicyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterPolicyClausesContext alterPolicyClauses() {
			return getRuleContext(AlterPolicyClausesContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public AlterPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPolicy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterPolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPolicyContext alterPolicy() throws RecognitionException {
		AlterPolicyContext _localctx = new AlterPolicyContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_alterPolicy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7368);
			match(ALTER);
			setState(7369);
			match(POLICY);
			setState(7372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				{
				setState(7370);
				match(IF);
				setState(7371);
				match(EXISTS);
				}
				break;
			}
			setState(7374);
			name();
			setState(7375);
			match(ON);
			setState(7376);
			qualifiedName();
			setState(7377);
			alterPolicyClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPolicyClausesContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterPolicyClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPolicyClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterPolicyClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPolicyClausesContext alterPolicyClauses() throws RecognitionException {
		AlterPolicyClausesContext _localctx = new AlterPolicyClausesContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_alterPolicyClauses);
		int _la;
		try {
			setState(7401);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case WITH:
			case USING:
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(7381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(7379);
					match(TO);
					setState(7380);
					roleList();
					}
				}

				setState(7388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7383);
					match(USING);
					setState(7384);
					match(LP_);
					setState(7385);
					aExpr(0);
					setState(7386);
					match(RP_);
					}
				}

				setState(7396);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7390);
					match(WITH);
					setState(7391);
					match(CHECK);
					setState(7392);
					match(LP_);
					setState(7393);
					aExpr(0);
					setState(7394);
					match(RP_);
					}
				}

				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(7398);
				match(RENAME);
				setState(7399);
				match(TO);
				setState(7400);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterProcedureClausesContext alterProcedureClauses() {
			return getRuleContext(AlterProcedureClausesContext.class,0);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_alterProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7403);
			match(ALTER);
			setState(7404);
			match(PROCEDURE);
			setState(7405);
			functionWithArgtypes();
			setState(7406);
			alterProcedureClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureClausesContext extends ParserRuleContext {
		public AlterfuncOptListContext alterfuncOptList() {
			return getRuleContext(AlterfuncOptListContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterProcedureClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedureClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterProcedureClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureClausesContext alterProcedureClauses() throws RecognitionException {
		AlterProcedureClausesContext _localctx = new AlterProcedureClausesContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_alterProcedureClauses);
		int _la;
		try {
			setState(7428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7408);
				alterfuncOptList();
				setState(7410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(7409);
					match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7412);
				match(RENAME);
				setState(7413);
				match(TO);
				setState(7414);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(7415);
					match(NO);
					}
				}

				setState(7418);
				match(DEPENDS);
				setState(7419);
				match(ON);
				setState(7420);
				match(EXTENSION);
				setState(7421);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7422);
				match(SET);
				setState(7423);
				match(SCHEMA);
				setState(7424);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7425);
				match(OWNER);
				setState(7426);
				match(TO);
				setState(7427);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterfuncOptListContext extends ParserRuleContext {
		public List<CommonFuncOptItemContext> commonFuncOptItem() {
			return getRuleContexts(CommonFuncOptItemContext.class);
		}
		public CommonFuncOptItemContext commonFuncOptItem(int i) {
			return getRuleContext(CommonFuncOptItemContext.class,i);
		}
		public AlterfuncOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfuncOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterfuncOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfuncOptListContext alterfuncOptList() throws RecognitionException {
		AlterfuncOptListContext _localctx = new AlterfuncOptListContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_alterfuncOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7431); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7430);
				commonFuncOptItem();
				}
				}
				setState(7433); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==SET || _la==NOT || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (ROWS - 226)) | (1L << (EXTERNAL - 226)) | (1L << (RESET - 226)))) != 0) || _la==SECURITY || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (COST - 428)) | (1L << (CALLED - 428)) | (1L << (PARALLEL - 428)) | (1L << (LEAKPROOF - 428)) | (1L << (IMMUTABLE - 428)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (RETURNS - 515)) | (1L << (SUPPORT - 515)) | (1L << (STABLE - 515)) | (1L << (VOLATILE - 515)) | (1L << (STRICT - 515)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterFunctionClausesContext alterFunctionClauses() {
			return getRuleContext(AlterFunctionClausesContext.class,0);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_alterFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7435);
			match(ALTER);
			setState(7436);
			match(FUNCTION);
			setState(7437);
			functionWithArgtypes();
			setState(7438);
			alterFunctionClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionClausesContext extends ParserRuleContext {
		public AlterfuncOptListContext alterfuncOptList() {
			return getRuleContext(AlterfuncOptListContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterFunctionClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterFunctionClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionClausesContext alterFunctionClauses() throws RecognitionException {
		AlterFunctionClausesContext _localctx = new AlterFunctionClausesContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_alterFunctionClauses);
		int _la;
		try {
			setState(7460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7440);
				alterfuncOptList();
				setState(7442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(7441);
					match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7444);
				match(RENAME);
				setState(7445);
				match(TO);
				setState(7446);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(7447);
					match(NO);
					}
				}

				setState(7450);
				match(DEPENDS);
				setState(7451);
				match(ON);
				setState(7452);
				match(EXTENSION);
				setState(7453);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7454);
				match(SET);
				setState(7455);
				match(SCHEMA);
				setState(7456);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7457);
				match(OWNER);
				setState(7458);
				match(TO);
				setState(7459);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPublicationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public AlterPublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPublication; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterPublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPublicationContext alterPublication() throws RecognitionException {
		AlterPublicationContext _localctx = new AlterPublicationContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_alterPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7462);
			match(ALTER);
			setState(7463);
			match(PUBLICATION);
			setState(7464);
			name();
			setState(7476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(7465);
				match(RENAME);
				setState(7466);
				match(TO);
				setState(7467);
				name();
				}
				break;
			case 2:
				{
				setState(7468);
				match(OWNER);
				setState(7469);
				match(TO);
				setState(7470);
				roleSpec();
				}
				break;
			case 3:
				{
				setState(7471);
				match(SET);
				setState(7472);
				definition();
				}
				break;
			case 4:
				{
				setState(7473);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DROP) | (1L << ADD) | (1L << SET))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7474);
				match(TABLE);
				setState(7475);
				relationExprList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoutineContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterProcedureClausesContext alterProcedureClauses() {
			return getRuleContext(AlterProcedureClausesContext.class,0);
		}
		public AlterRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoutine; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterRoutine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoutineContext alterRoutine() throws RecognitionException {
		AlterRoutineContext _localctx = new AlterRoutineContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_alterRoutine);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7478);
			match(ALTER);
			setState(7479);
			match(ROUTINE);
			setState(7480);
			functionWithArgtypes();
			setState(7481);
			alterProcedureClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRuleContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRule; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRuleContext alterRule() throws RecognitionException {
		AlterRuleContext _localctx = new AlterRuleContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_alterRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7483);
			match(ALTER);
			setState(7484);
			match(RULE);
			setState(7485);
			match(ON);
			setState(7486);
			qualifiedName();
			setState(7487);
			match(RENAME);
			setState(7488);
			match(TO);
			setState(7489);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterSequenceClausesContext alterSequenceClauses() {
			return getRuleContext(AlterSequenceClausesContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public AlterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequence; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceContext alterSequence() throws RecognitionException {
		AlterSequenceContext _localctx = new AlterSequenceContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_alterSequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7491);
			match(ALTER);
			setState(7492);
			match(SEQUENCE);
			setState(7495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				{
				setState(7493);
				match(IF);
				setState(7494);
				match(EXISTS);
				}
				break;
			}
			setState(7497);
			qualifiedName();
			setState(7498);
			alterSequenceClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceClausesContext extends ParserRuleContext {
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterSequenceClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequenceClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterSequenceClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceClausesContext alterSequenceClauses() throws RecognitionException {
		AlterSequenceClausesContext _localctx = new AlterSequenceClausesContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_alterSequenceClauses);
		try {
			setState(7508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7500);
				alterTableCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7501);
				seqOptList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7502);
				match(RENAME);
				setState(7503);
				match(TO);
				setState(7504);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7505);
				match(SET);
				setState(7506);
				match(SCHEMA);
				setState(7507);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public ForeignServerVersionContext foreignServerVersion() {
			return getRuleContext(ForeignServerVersionContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_alterServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7510);
			match(ALTER);
			setState(7511);
			match(SERVER);
			setState(7512);
			name();
			setState(7524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				{
				setState(7513);
				foreignServerVersion();
				setState(7514);
				alterGenericOptions();
				}
				break;
			case 2:
				{
				setState(7516);
				foreignServerVersion();
				}
				break;
			case 3:
				{
				setState(7517);
				alterGenericOptions();
				}
				break;
			case 4:
				{
				setState(7518);
				match(RENAME);
				setState(7519);
				match(TO);
				setState(7520);
				name();
				}
				break;
			case 5:
				{
				setState(7521);
				match(OWNER);
				setState(7522);
				match(TO);
				setState(7523);
				roleSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignServerVersionContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PostgreSQLStatementParser.VERSION, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public ForeignServerVersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignServerVersion; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitForeignServerVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignServerVersionContext foreignServerVersion() throws RecognitionException {
		ForeignServerVersionContext _localctx = new ForeignServerVersionContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_foreignServerVersion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7526);
			match(VERSION);
			setState(7527);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatisticsContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public List<TerminalNode> STATISTICS() { return getTokens(PostgreSQLStatementParser.STATISTICS); }
		public TerminalNode STATISTICS(int i) {
			return getToken(PostgreSQLStatementParser.STATISTICS, i);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public AlterStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatistics; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatisticsContext alterStatistics() throws RecognitionException {
		AlterStatisticsContext _localctx = new AlterStatisticsContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_alterStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7529);
			match(ALTER);
			setState(7530);
			match(STATISTICS);
			setState(7555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(7533);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
				case 1:
					{
					setState(7531);
					match(IF);
					setState(7532);
					match(EXISTS);
					}
					break;
				}
				setState(7535);
				anyName();
				setState(7536);
				match(SET);
				setState(7537);
				match(STATISTICS);
				setState(7538);
				signedIconst();
				}
				break;
			case 2:
				{
				setState(7540);
				anyName();
				setState(7541);
				match(RENAME);
				setState(7542);
				match(TO);
				setState(7543);
				name();
				}
				break;
			case 3:
				{
				setState(7545);
				anyName();
				setState(7546);
				match(SET);
				setState(7547);
				match(SCHEMA);
				setState(7548);
				name();
				}
				break;
			case 4:
				{
				setState(7550);
				anyName();
				setState(7551);
				match(OWNER);
				setState(7552);
				match(TO);
				setState(7553);
				roleSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSubscriptionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLStatementParser.SUBSCRIPTION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLStatementParser.CONNECTION, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLStatementParser.REFRESH, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public PublicationNameListContext publicationNameList() {
			return getRuleContext(PublicationNameListContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(PostgreSQLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSQLStatementParser.DISABLE, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public AlterSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSubscription; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSubscriptionContext alterSubscription() throws RecognitionException {
		AlterSubscriptionContext _localctx = new AlterSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_alterSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7557);
			match(ALTER);
			setState(7558);
			match(SUBSCRIPTION);
			setState(7559);
			name();
			setState(7584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
			case 1:
				{
				setState(7560);
				match(RENAME);
				setState(7561);
				match(TO);
				setState(7562);
				name();
				}
				break;
			case 2:
				{
				setState(7563);
				match(OWNER);
				setState(7564);
				match(TO);
				setState(7565);
				roleSpec();
				}
				break;
			case 3:
				{
				setState(7566);
				match(SET);
				setState(7567);
				definition();
				}
				break;
			case 4:
				{
				setState(7568);
				match(CONNECTION);
				setState(7569);
				match(STRING_);
				}
				break;
			case 5:
				{
				setState(7570);
				match(REFRESH);
				setState(7571);
				match(PUBLICATION);
				setState(7574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7572);
					match(WITH);
					setState(7573);
					definition();
					}
				}

				}
				break;
			case 6:
				{
				setState(7576);
				match(SET);
				setState(7577);
				match(PUBLICATION);
				setState(7578);
				publicationNameList();
				setState(7581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7579);
					match(WITH);
					setState(7580);
					definition();
					}
				}

				}
				break;
			case 7:
				{
				setState(7583);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PublicationNameListContext extends ParserRuleContext {
		public List<PublicationNameItemContext> publicationNameItem() {
			return getRuleContexts(PublicationNameItemContext.class);
		}
		public PublicationNameItemContext publicationNameItem(int i) {
			return getRuleContext(PublicationNameItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public PublicationNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationNameList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPublicationNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationNameListContext publicationNameList() throws RecognitionException {
		PublicationNameListContext _localctx = new PublicationNameListContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_publicationNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7586);
			publicationNameItem();
			setState(7591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7587);
				match(COMMA_);
				setState(7588);
				publicationNameItem();
				}
				}
				setState(7593);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PublicationNameItemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public PublicationNameItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationNameItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPublicationNameItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationNameItemContext publicationNameItem() throws RecognitionException {
		PublicationNameItemContext _localctx = new PublicationNameItemContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_publicationNameItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7594);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSystemContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLStatementParser.SYSTEM, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public GenericSetContext genericSet() {
			return getRuleContext(GenericSetContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public GenericResetContext genericReset() {
			return getRuleContext(GenericResetContext.class,0);
		}
		public AlterSystemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSystem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterSystem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSystemContext alterSystem() throws RecognitionException {
		AlterSystemContext _localctx = new AlterSystemContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_alterSystem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7596);
			match(ALTER);
			setState(7597);
			match(SYSTEM);
			setState(7602);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				{
				setState(7598);
				match(SET);
				setState(7599);
				genericSet();
				}
				break;
			case RESET:
				{
				setState(7600);
				match(RESET);
				setState(7601);
				genericReset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_alterTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7604);
			match(ALTER);
			setState(7605);
			match(TABLESPACE);
			setState(7606);
			name();
			setState(7616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				{
				setState(7607);
				match(SET);
				}
				break;
			case RESET:
				{
				setState(7608);
				match(RESET);
				setState(7609);
				reloptions();
				}
				break;
			case RENAME:
				{
				setState(7610);
				match(RENAME);
				setState(7611);
				match(TO);
				setState(7612);
				name();
				}
				break;
			case OWNER:
				{
				setState(7613);
				match(OWNER);
				setState(7614);
				match(TO);
				setState(7615);
				roleSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchConfigurationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterTextSearchConfigurationClausesContext alterTextSearchConfigurationClauses() {
			return getRuleContext(AlterTextSearchConfigurationClausesContext.class,0);
		}
		public AlterTextSearchConfigurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchConfiguration; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTextSearchConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchConfigurationContext alterTextSearchConfiguration() throws RecognitionException {
		AlterTextSearchConfigurationContext _localctx = new AlterTextSearchConfigurationContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_alterTextSearchConfiguration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7618);
			match(ALTER);
			setState(7619);
			match(TEXT);
			setState(7620);
			match(SEARCH);
			setState(7621);
			match(CONFIGURATION);
			setState(7622);
			anyName();
			setState(7623);
			alterTextSearchConfigurationClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchConfigurationClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode MAPPING() { return getToken(PostgreSQLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public AlterTextSearchConfigurationClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchConfigurationClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTextSearchConfigurationClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchConfigurationClausesContext alterTextSearchConfigurationClauses() throws RecognitionException {
		AlterTextSearchConfigurationClausesContext _localctx = new AlterTextSearchConfigurationClausesContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_alterTextSearchConfigurationClauses);
		int _la;
		try {
			setState(7662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7625);
				match(RENAME);
				setState(7626);
				match(TO);
				setState(7627);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7628);
				match(SET);
				setState(7629);
				match(SCHEMA);
				setState(7630);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7631);
				match(OWNER);
				setState(7632);
				match(TO);
				setState(7633);
				roleSpec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7634);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7635);
				match(MAPPING);
				setState(7636);
				match(FOR);
				setState(7637);
				nameList(0);
				setState(7639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7638);
					match(WITH);
					}
				}

				setState(7641);
				anyNameList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7643);
				match(ALTER);
				setState(7644);
				match(MAPPING);
				setState(7647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(7645);
					match(FOR);
					setState(7646);
					nameList(0);
					}
				}

				setState(7649);
				match(REPLACE);
				setState(7650);
				anyName();
				setState(7651);
				match(WITH);
				setState(7652);
				anyName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7654);
				match(DROP);
				setState(7655);
				match(MAPPING);
				setState(7658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(7656);
					match(IF);
					setState(7657);
					match(EXISTS);
					}
				}

				setState(7660);
				match(FOR);
				setState(7661);
				nameList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyNameListContext extends ParserRuleContext {
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AnyNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyNameList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAnyNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyNameListContext anyNameList() throws RecognitionException {
		AnyNameListContext _localctx = new AnyNameListContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_anyNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7664);
			anyName();
			setState(7669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7665);
				match(COMMA_);
				setState(7666);
				anyName();
				}
				}
				setState(7671);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchDictionaryContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AlterTextSearchDictionaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchDictionary; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTextSearchDictionary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchDictionaryContext alterTextSearchDictionary() throws RecognitionException {
		AlterTextSearchDictionaryContext _localctx = new AlterTextSearchDictionaryContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_alterTextSearchDictionary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7672);
			match(ALTER);
			setState(7673);
			match(TEXT);
			setState(7674);
			match(SEARCH);
			setState(7675);
			match(DICTIONARY);
			setState(7676);
			anyName();
			setState(7687);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(7677);
				match(RENAME);
				setState(7678);
				match(TO);
				setState(7679);
				name();
				}
				break;
			case SET:
				{
				setState(7680);
				match(SET);
				setState(7681);
				match(SCHEMA);
				setState(7682);
				name();
				}
				break;
			case OWNER:
				{
				setState(7683);
				match(OWNER);
				setState(7684);
				match(TO);
				setState(7685);
				roleSpec();
				}
				break;
			case LP_:
				{
				setState(7686);
				definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchParserContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterTextSearchParserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchParser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTextSearchParser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchParserContext alterTextSearchParser() throws RecognitionException {
		AlterTextSearchParserContext _localctx = new AlterTextSearchParserContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_alterTextSearchParser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7689);
			match(ALTER);
			setState(7690);
			match(TEXT);
			setState(7691);
			match(SEARCH);
			setState(7692);
			match(PARSER);
			setState(7701);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				setState(7693);
				anyName();
				setState(7694);
				match(RENAME);
				setState(7695);
				match(TO);
				setState(7696);
				name();
				}
				break;
			case 2:
				{
				setState(7698);
				match(SET);
				setState(7699);
				match(SCHEMA);
				setState(7700);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchTemplateContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterTextSearchTemplateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchTemplate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTextSearchTemplate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchTemplateContext alterTextSearchTemplate() throws RecognitionException {
		AlterTextSearchTemplateContext _localctx = new AlterTextSearchTemplateContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_alterTextSearchTemplate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7703);
			match(ALTER);
			setState(7704);
			match(TEXT);
			setState(7705);
			match(SEARCH);
			setState(7706);
			match(TEMPLATE);
			setState(7715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
			case 1:
				{
				setState(7707);
				anyName();
				setState(7708);
				match(RENAME);
				setState(7709);
				match(TO);
				setState(7710);
				name();
				}
				break;
			case 2:
				{
				setState(7712);
				match(SET);
				setState(7713);
				match(SCHEMA);
				setState(7714);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTriggerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(PostgreSQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLStatementParser.ON, i);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLStatementParser.DEPENDS, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public AlterTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTrigger; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTriggerContext alterTrigger() throws RecognitionException {
		AlterTriggerContext _localctx = new AlterTriggerContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_alterTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7717);
			match(ALTER);
			setState(7718);
			match(TRIGGER);
			setState(7719);
			name();
			setState(7720);
			match(ON);
			setState(7721);
			qualifiedName();
			setState(7732);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(7722);
				match(RENAME);
				setState(7723);
				match(TO);
				setState(7724);
				name();
				}
				break;
			case NO:
			case DEPENDS:
				{
				setState(7726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(7725);
					match(NO);
					}
				}

				setState(7728);
				match(DEPENDS);
				setState(7729);
				match(ON);
				setState(7730);
				match(EXTENSION);
				setState(7731);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterTypeClausesContext alterTypeClauses() {
			return getRuleContext(AlterTypeClausesContext.class,0);
		}
		public AlterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeContext alterType() throws RecognitionException {
		AlterTypeContext _localctx = new AlterTypeContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_alterType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7734);
			match(ALTER);
			setState(7735);
			match(TYPE);
			setState(7736);
			anyName();
			setState(7737);
			alterTypeClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeClausesContext extends ParserRuleContext {
		public AlterTypeCmdsContext alterTypeCmds() {
			return getRuleContext(AlterTypeCmdsContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLStatementParser.VALUE, 0); }
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLStatementParser.AFTER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLStatementParser.ATTRIBUTE, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public OperatorDefListContext operatorDefList() {
			return getRuleContext(OperatorDefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterTypeClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTypeClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeClausesContext alterTypeClauses() throws RecognitionException {
		AlterTypeClausesContext _localctx = new AlterTypeClausesContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_alterTypeClauses);
		int _la;
		try {
			setState(7779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7739);
				alterTypeCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7740);
				match(ADD);
				setState(7741);
				match(VALUE);
				setState(7745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(7742);
					match(IF);
					setState(7743);
					match(NOT);
					setState(7744);
					match(EXISTS);
					}
				}

				setState(7747);
				match(STRING_);
				setState(7750);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==BEFORE) {
					{
					setState(7748);
					_la = _input.LA(1);
					if ( !(_la==AFTER || _la==BEFORE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7749);
					match(STRING_);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7752);
				match(RENAME);
				setState(7753);
				match(VALUE);
				setState(7754);
				match(STRING_);
				setState(7755);
				match(TO);
				setState(7756);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7757);
				match(RENAME);
				setState(7758);
				match(TO);
				setState(7759);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7760);
				match(RENAME);
				setState(7761);
				match(ATTRIBUTE);
				setState(7762);
				name();
				setState(7763);
				match(TO);
				setState(7764);
				name();
				setState(7766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7765);
					dropBehavior();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7768);
				match(SET);
				setState(7769);
				match(SCHEMA);
				setState(7770);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7771);
				match(SET);
				setState(7772);
				match(LP_);
				setState(7773);
				operatorDefList();
				setState(7774);
				match(RP_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7776);
				match(OWNER);
				setState(7777);
				match(TO);
				setState(7778);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeCmdsContext extends ParserRuleContext {
		public List<AlterTypeCmdContext> alterTypeCmd() {
			return getRuleContexts(AlterTypeCmdContext.class);
		}
		public AlterTypeCmdContext alterTypeCmd(int i) {
			return getRuleContext(AlterTypeCmdContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public AlterTypeCmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeCmds; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTypeCmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeCmdsContext alterTypeCmds() throws RecognitionException {
		AlterTypeCmdsContext _localctx = new AlterTypeCmdsContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_alterTypeCmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7781);
			alterTypeCmd();
			setState(7784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(7782);
				match(COMMA_);
				setState(7783);
				alterTypeCmd();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeCmdContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PostgreSQLStatementParser.ADD, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLStatementParser.ATTRIBUTE, 0); }
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public SetDataContext setData() {
			return getRuleContext(SetDataContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public AlterTypeCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeCmd; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterTypeCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeCmdContext alterTypeCmd() throws RecognitionException {
		AlterTypeCmdContext _localctx = new AlterTypeCmdContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_alterTypeCmd);
		int _la;
		try {
			setState(7820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7786);
				match(ADD);
				setState(7787);
				match(ATTRIBUTE);
				setState(7788);
				tableFuncElement();
				setState(7790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7789);
					dropBehavior();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7792);
				match(DROP);
				setState(7793);
				match(ATTRIBUTE);
				setState(7794);
				match(IF);
				setState(7795);
				match(EXISTS);
				setState(7796);
				colId();
				setState(7798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7797);
					dropBehavior();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7800);
				match(DROP);
				setState(7801);
				match(ATTRIBUTE);
				setState(7802);
				colId();
				setState(7804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7803);
					dropBehavior();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7806);
				match(ALTER);
				setState(7807);
				match(ATTRIBUTE);
				setState(7808);
				colId();
				setState(7810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(7809);
					setData();
					}
				}

				setState(7812);
				match(TYPE);
				setState(7813);
				typeName();
				setState(7815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(7814);
					collateClause();
					}
				}

				setState(7818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7817);
					dropBehavior();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserMappingContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public AlterUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserMapping; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserMappingContext alterUserMapping() throws RecognitionException {
		AlterUserMappingContext _localctx = new AlterUserMappingContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_alterUserMapping);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7822);
			match(ALTER);
			setState(7823);
			match(USER);
			setState(7824);
			match(MAPPING);
			setState(7825);
			match(FOR);
			setState(7826);
			authIdent();
			setState(7827);
			match(SERVER);
			setState(7828);
			name();
			setState(7829);
			alterGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthIdentContext extends ParserRuleContext {
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public AuthIdentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authIdent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAuthIdent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthIdentContext authIdent() throws RecognitionException {
		AuthIdentContext _localctx = new AuthIdentContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_authIdent);
		try {
			setState(7833);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7831);
				roleSpec();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7832);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterViewClausesContext alterViewClauses() {
			return getRuleContext(AlterViewClausesContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_alterView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7835);
			match(ALTER);
			setState(7836);
			match(VIEW);
			setState(7839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
			case 1:
				{
				setState(7837);
				match(IF);
				setState(7838);
				match(EXISTS);
				}
				break;
			}
			setState(7841);
			qualifiedName();
			setState(7842);
			alterViewClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewClausesContext extends ParserRuleContext {
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterViewClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterViewClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewClausesContext alterViewClauses() throws RecognitionException {
		AlterViewClausesContext _localctx = new AlterViewClausesContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_alterViewClauses);
		int _la;
		try {
			setState(7859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7844);
				alterTableCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7845);
				match(RENAME);
				setState(7846);
				match(TO);
				setState(7847);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7848);
				match(RENAME);
				setState(7850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(7849);
					match(COLUMN);
					}
				}

				setState(7852);
				name();
				setState(7853);
				match(TO);
				setState(7854);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7856);
				match(SET);
				setState(7857);
				match(SCHEMA);
				setState(7858);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLStatementParser.CLOSE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public CloseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitClose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseContext close() throws RecognitionException {
		CloseContext _localctx = new CloseContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_close);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7861);
			match(CLOSE);
			setState(7864);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(7862);
				cursorName();
				}
				break;
			case ALL:
				{
				setState(7863);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(PostgreSQLStatementParser.CLUSTER, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public ClusterIndexSpecificationContext clusterIndexSpecification() {
			return getRuleContext(ClusterIndexSpecificationContext.class,0);
		}
		public ClusterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCluster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterContext cluster() throws RecognitionException {
		ClusterContext _localctx = new ClusterContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_cluster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7866);
			match(CLUSTER);
			setState(7868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERBOSE) {
				{
				setState(7867);
				match(VERBOSE);
				}
			}

			setState(7878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
			case 1:
				{
				setState(7870);
				qualifiedName();
				setState(7872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7871);
					clusterIndexSpecification();
					}
				}

				}
				break;
			case 2:
				{
				setState(7874);
				name();
				setState(7875);
				match(ON);
				setState(7876);
				qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ClusterIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterIndexSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitClusterIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterIndexSpecificationContext clusterIndexSpecification() throws RecognitionException {
		ClusterIndexSpecificationContext _localctx = new ClusterIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_clusterIndexSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7880);
			match(USING);
			setState(7881);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PostgreSQLStatementParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public CommentClausesContext commentClauses() {
			return getRuleContext(CommentClausesContext.class,0);
		}
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_comment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7883);
			match(COMMENT);
			setState(7884);
			match(ON);
			setState(7885);
			commentClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentClausesContext extends ParserRuleContext {
		public ObjectTypeAnyNameContext objectTypeAnyName() {
			return getRuleContext(ObjectTypeAnyNameContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLStatementParser.IS, 0); }
		public CommentTextContext commentText() {
			return getRuleContext(CommentTextContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public ObjectTypeNameContext objectTypeName() {
			return getRuleContext(ObjectTypeNameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public ObjectTypeNameOnAnyNameContext objectTypeNameOnAnyName() {
			return getRuleContext(ObjectTypeNameOnAnyNameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CommentClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCommentClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentClausesContext commentClauses() throws RecognitionException {
		CommentClausesContext _localctx = new CommentClausesContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_commentClauses);
		try {
			setState(7998);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7887);
				objectTypeAnyName();
				setState(7888);
				anyName();
				setState(7889);
				match(IS);
				setState(7890);
				commentText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7892);
				match(COLUMN);
				setState(7893);
				anyName();
				setState(7894);
				match(IS);
				setState(7895);
				commentText();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7897);
				objectTypeName();
				setState(7898);
				name();
				setState(7899);
				match(IS);
				setState(7900);
				commentText();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7902);
				match(TYPE);
				setState(7903);
				typeName();
				setState(7904);
				match(IS);
				setState(7905);
				commentText();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7907);
				match(DOMAIN);
				setState(7908);
				typeName();
				setState(7909);
				match(IS);
				setState(7910);
				commentText();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7912);
				match(AGGREGATE);
				setState(7913);
				aggregateWithArgtypes();
				setState(7914);
				match(IS);
				setState(7915);
				commentText();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7917);
				match(FUNCTION);
				setState(7918);
				functionWithArgtypes();
				setState(7919);
				match(IS);
				setState(7920);
				commentText();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7922);
				match(OPERATOR);
				setState(7923);
				operatorWithArgtypes();
				setState(7924);
				match(IS);
				setState(7925);
				commentText();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7927);
				match(CONSTRAINT);
				setState(7928);
				name();
				setState(7929);
				match(ON);
				setState(7930);
				anyName();
				setState(7931);
				match(IS);
				setState(7932);
				commentText();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7934);
				match(CONSTRAINT);
				setState(7935);
				name();
				setState(7936);
				match(ON);
				setState(7937);
				match(DOMAIN);
				setState(7938);
				anyName();
				setState(7939);
				match(IS);
				setState(7940);
				commentText();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7942);
				objectTypeNameOnAnyName();
				setState(7943);
				name();
				setState(7944);
				match(ON);
				setState(7945);
				anyName();
				setState(7946);
				match(IS);
				setState(7947);
				commentText();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7949);
				match(PROCEDURE);
				setState(7950);
				functionWithArgtypes();
				setState(7951);
				match(IS);
				setState(7952);
				commentText();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7954);
				match(ROUTINE);
				setState(7955);
				functionWithArgtypes();
				setState(7956);
				match(IS);
				setState(7957);
				commentText();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7959);
				match(TRANSFORM);
				setState(7960);
				match(FOR);
				setState(7961);
				typeName();
				setState(7962);
				match(LANGUAGE);
				setState(7963);
				name();
				setState(7964);
				match(IS);
				setState(7965);
				commentText();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7967);
				match(OPERATOR);
				setState(7968);
				match(CLASS);
				setState(7969);
				anyName();
				setState(7970);
				match(USING);
				setState(7971);
				name();
				setState(7972);
				match(IS);
				setState(7973);
				commentText();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7975);
				match(OPERATOR);
				setState(7976);
				match(FAMILY);
				setState(7977);
				anyName();
				setState(7978);
				match(USING);
				setState(7979);
				name();
				setState(7980);
				match(IS);
				setState(7981);
				commentText();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7983);
				match(LARGE);
				setState(7984);
				match(OBJECT);
				setState(7985);
				numericOnly();
				setState(7986);
				match(IS);
				setState(7987);
				commentText();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7989);
				match(CAST);
				setState(7990);
				match(LP_);
				setState(7991);
				typeName();
				setState(7992);
				match(AS);
				setState(7993);
				typeName();
				setState(7994);
				match(RP_);
				setState(7995);
				match(IS);
				setState(7996);
				commentText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjectTypeNameOnAnyNameContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(PostgreSQLStatementParser.POLICY, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public ObjectTypeNameOnAnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeNameOnAnyName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitObjectTypeNameOnAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeNameOnAnyNameContext objectTypeNameOnAnyName() throws RecognitionException {
		ObjectTypeNameOnAnyNameContext _localctx = new ObjectTypeNameOnAnyNameContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_objectTypeNameOnAnyName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8000);
			_la = _input.LA(1);
			if ( !(_la==TRIGGER || _la==RULE || _la==POLICY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjectTypeNameContext extends ParserRuleContext {
		public DropTypeNameContext dropTypeName() {
			return getRuleContext(DropTypeNameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLStatementParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public ObjectTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitObjectTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeNameContext objectTypeName() throws RecognitionException {
		ObjectTypeNameContext _localctx = new ObjectTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_objectTypeName);
		try {
			setState(8007);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
			case FOREIGN:
			case EXTENSION:
			case LANGUAGE:
			case ACCESS:
			case EVENT:
			case PROCEDURAL:
			case PUBLICATION:
			case SERVER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8002);
				dropTypeName();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8003);
				match(DATABASE);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8004);
				match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(8005);
				match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 5);
				{
				setState(8006);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTypeNameContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLStatementParser.METHOD, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public DropTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTypeName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTypeNameContext dropTypeName() throws RecognitionException {
		DropTypeNameContext _localctx = new DropTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_dropTypeName);
		int _la;
		try {
			setState(8024);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8009);
				match(ACCESS);
				setState(8010);
				match(METHOD);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8011);
				match(EVENT);
				setState(8012);
				match(TRIGGER);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 3);
				{
				setState(8013);
				match(EXTENSION);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(8014);
				match(FOREIGN);
				setState(8015);
				match(DATA);
				setState(8016);
				match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(8018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(8017);
					match(PROCEDURAL);
					}
				}

				setState(8020);
				match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(8021);
				match(PUBLICATION);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 7);
				{
				setState(8022);
				match(SCHEMA);
				}
				break;
			case SERVER:
				enterOuterAlt(_localctx, 8);
				{
				setState(8023);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjectTypeAnyNameContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public ObjectTypeAnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeAnyName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitObjectTypeAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeAnyNameContext objectTypeAnyName() throws RecognitionException {
		ObjectTypeAnyNameContext _localctx = new ObjectTypeAnyNameContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_objectTypeAnyName);
		try {
			setState(8049);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8026);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8027);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8028);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8029);
				match(MATERIALIZED);
				setState(8030);
				match(VIEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8031);
				match(INDEX);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8032);
				match(FOREIGN);
				setState(8033);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8034);
				match(COLLATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8035);
				match(CONVERSION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8036);
				match(STATISTICS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8037);
				match(TEXT);
				setState(8038);
				match(SEARCH);
				setState(8039);
				match(PARSER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8040);
				match(TEXT);
				setState(8041);
				match(SEARCH);
				setState(8042);
				match(DICTIONARY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8043);
				match(TEXT);
				setState(8044);
				match(SEARCH);
				setState(8045);
				match(TEMPLATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8046);
				match(TEXT);
				setState(8047);
				match(SEARCH);
				setState(8048);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentTextContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public CommentTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentText; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCommentText(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentTextContext commentText() throws RecognitionException {
		CommentTextContext _localctx = new CommentTextContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_commentText);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8051);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAccessMethodContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLStatementParser.HANDLER, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public CreateAccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAccessMethod; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAccessMethodContext createAccessMethod() throws RecognitionException {
		CreateAccessMethodContext _localctx = new CreateAccessMethodContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_createAccessMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8053);
			match(CREATE);
			setState(8054);
			match(ACCESS);
			setState(8055);
			match(METHOD);
			setState(8056);
			name();
			setState(8057);
			match(TYPE);
			setState(8058);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8059);
			match(HANDLER);
			setState(8060);
			handlerName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAggregateContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public OldAggrDefinitionContext oldAggrDefinition() {
			return getRuleContext(OldAggrDefinitionContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public CreateAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAggregate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAggregateContext createAggregate() throws RecognitionException {
		CreateAggregateContext _localctx = new CreateAggregateContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_createAggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8062);
			match(CREATE);
			setState(8065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8063);
				match(OR);
				setState(8064);
				match(REPLACE);
				}
			}

			setState(8067);
			match(AGGREGATE);
			setState(8068);
			funcName();
			setState(8073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				setState(8069);
				aggrArgs();
				setState(8070);
				definition();
				}
				break;
			case 2:
				{
				setState(8072);
				oldAggrDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OldAggrDefinitionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public OldAggrListContext oldAggrList() {
			return getRuleContext(OldAggrListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public OldAggrDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOldAggrDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrDefinitionContext oldAggrDefinition() throws RecognitionException {
		OldAggrDefinitionContext _localctx = new OldAggrDefinitionContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_oldAggrDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8075);
			match(LP_);
			setState(8076);
			oldAggrList();
			setState(8077);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OldAggrListContext extends ParserRuleContext {
		public List<OldAggrElemContext> oldAggrElem() {
			return getRuleContexts(OldAggrElemContext.class);
		}
		public OldAggrElemContext oldAggrElem(int i) {
			return getRuleContext(OldAggrElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public OldAggrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOldAggrList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrListContext oldAggrList() throws RecognitionException {
		OldAggrListContext _localctx = new OldAggrListContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_oldAggrList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8079);
			oldAggrElem();
			setState(8084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8080);
				match(COMMA_);
				setState(8081);
				oldAggrElem();
				}
				}
				setState(8086);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OldAggrElemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public OldAggrElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOldAggrElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrElemContext oldAggrElem() throws RecognitionException {
		OldAggrElemContext _localctx = new OldAggrElemContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_oldAggrElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8087);
			identifier();
			setState(8088);
			match(EQ_);
			setState(8089);
			defArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCastContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLStatementParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLStatementParser.INOUT, 0); }
		public CastContextContext castContext() {
			return getRuleContext(CastContextContext.class,0);
		}
		public CreateCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCast; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateCast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCastContext createCast() throws RecognitionException {
		CreateCastContext _localctx = new CreateCastContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_createCast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8091);
			match(CREATE);
			setState(8092);
			match(CAST);
			setState(8093);
			match(LP_);
			setState(8094);
			typeName();
			setState(8095);
			match(AS);
			setState(8096);
			typeName();
			setState(8097);
			match(RP_);
			setState(8114);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(8098);
				match(WITH);
				setState(8099);
				match(FUNCTION);
				setState(8100);
				functionWithArgtypes();
				setState(8102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8101);
					castContext();
					}
				}

				}
				break;
			case 2:
				{
				setState(8104);
				match(WITHOUT);
				setState(8105);
				match(FUNCTION);
				setState(8107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8106);
					castContext();
					}
				}

				}
				break;
			case 3:
				{
				setState(8109);
				match(WITH);
				setState(8110);
				match(INOUT);
				setState(8112);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8111);
					castContext();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastContextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode IMPLICIT() { return getToken(PostgreSQLStatementParser.IMPLICIT, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLStatementParser.ASSIGNMENT, 0); }
		public CastContextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castContext; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCastContext(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastContextContext castContext() throws RecognitionException {
		CastContextContext _localctx = new CastContextContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_castContext);
		try {
			setState(8120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8116);
				match(AS);
				setState(8117);
				match(IMPLICIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8118);
				match(AS);
				setState(8119);
				match(ASSIGNMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCollationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public CreateCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCollation; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCollationContext createCollation() throws RecognitionException {
		CreateCollationContext _localctx = new CreateCollationContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_createCollation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8122);
			match(CREATE);
			setState(8123);
			match(COLLATION);
			setState(8127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				setState(8124);
				match(IF);
				setState(8125);
				match(NOT);
				setState(8126);
				match(EXISTS);
				}
				break;
			}
			setState(8136);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				{
				setState(8129);
				anyName();
				setState(8130);
				definition();
				}
				break;
			case 2:
				{
				setState(8132);
				anyName();
				setState(8133);
				match(FROM);
				setState(8134);
				anyName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateConversionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public CreateConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createConversion; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateConversionContext createConversion() throws RecognitionException {
		CreateConversionContext _localctx = new CreateConversionContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_createConversion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8138);
			match(CREATE);
			setState(8140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(8139);
				match(DEFAULT);
				}
			}

			setState(8142);
			match(CONVERSION);
			setState(8143);
			anyName();
			setState(8144);
			match(FOR);
			setState(8145);
			match(STRING_);
			setState(8146);
			match(TO);
			setState(8147);
			match(STRING_);
			setState(8148);
			match(FROM);
			setState(8149);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDomainContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public CreateDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDomain; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDomainContext createDomain() throws RecognitionException {
		CreateDomainContext _localctx = new CreateDomainContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_createDomain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8151);
			match(CREATE);
			setState(8152);
			match(DOMAIN);
			setState(8153);
			anyName();
			setState(8155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8154);
				match(AS);
				}
			}

			setState(8157);
			typeName();
			setState(8158);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventTriggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLStatementParser.WHEN, 0); }
		public EventTriggerWhenListContext eventTriggerWhenList() {
			return getRuleContext(EventTriggerWhenListContext.class,0);
		}
		public CreateEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEventTrigger; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventTriggerContext createEventTrigger() throws RecognitionException {
		CreateEventTriggerContext _localctx = new CreateEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_createEventTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8160);
			match(CREATE);
			setState(8161);
			match(EVENT);
			setState(8162);
			match(TRIGGER);
			setState(8163);
			name();
			setState(8164);
			match(ON);
			setState(8165);
			colLabel();
			setState(8168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(8166);
				match(WHEN);
				setState(8167);
				eventTriggerWhenList();
				}
			}

			setState(8170);
			match(EXECUTE);
			setState(8171);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8172);
			funcName();
			setState(8173);
			match(LP_);
			setState(8174);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventTriggerWhenListContext extends ParserRuleContext {
		public List<EventTriggerWhenItemContext> eventTriggerWhenItem() {
			return getRuleContexts(EventTriggerWhenItemContext.class);
		}
		public EventTriggerWhenItemContext eventTriggerWhenItem(int i) {
			return getRuleContext(EventTriggerWhenItemContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLStatementParser.AND, i);
		}
		public EventTriggerWhenListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerWhenList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitEventTriggerWhenList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerWhenListContext eventTriggerWhenList() throws RecognitionException {
		EventTriggerWhenListContext _localctx = new EventTriggerWhenListContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_eventTriggerWhenList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8176);
			eventTriggerWhenItem();
			setState(8181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(8177);
				match(AND);
				setState(8178);
				eventTriggerWhenItem();
				}
				}
				setState(8183);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventTriggerWhenItemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public EventTriggerValueListContext eventTriggerValueList() {
			return getRuleContext(EventTriggerValueListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public EventTriggerWhenItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerWhenItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitEventTriggerWhenItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerWhenItemContext eventTriggerWhenItem() throws RecognitionException {
		EventTriggerWhenItemContext _localctx = new EventTriggerWhenItemContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_eventTriggerWhenItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8184);
			colId();
			setState(8185);
			match(IN);
			setState(8186);
			match(LP_);
			setState(8187);
			eventTriggerValueList();
			setState(8188);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventTriggerValueListContext extends ParserRuleContext {
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public EventTriggerValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerValueList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitEventTriggerValueList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerValueListContext eventTriggerValueList() throws RecognitionException {
		EventTriggerValueListContext _localctx = new EventTriggerValueListContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_eventTriggerValueList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8190);
			match(STRING_);
			setState(8195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8191);
				match(COMMA_);
				setState(8192);
				match(STRING_);
				}
				}
				setState(8197);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateExtensionOptListContext createExtensionOptList() {
			return getRuleContext(CreateExtensionOptListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public CreateExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionContext createExtension() throws RecognitionException {
		CreateExtensionContext _localctx = new CreateExtensionContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_createExtension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8198);
			match(CREATE);
			setState(8199);
			match(EXTENSION);
			setState(8203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				{
				setState(8200);
				match(IF);
				setState(8201);
				match(NOT);
				setState(8202);
				match(EXISTS);
				}
				break;
			}
			setState(8205);
			name();
			setState(8207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8206);
				match(WITH);
				}
			}

			setState(8209);
			createExtensionOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionOptListContext extends ParserRuleContext {
		public List<CreateExtensionOptItemContext> createExtensionOptItem() {
			return getRuleContexts(CreateExtensionOptItemContext.class);
		}
		public CreateExtensionOptItemContext createExtensionOptItem(int i) {
			return getRuleContext(CreateExtensionOptItemContext.class,i);
		}
		public CreateExtensionOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateExtensionOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionOptListContext createExtensionOptList() throws RecognitionException {
		CreateExtensionOptListContext _localctx = new CreateExtensionOptListContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_createExtensionOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SCHEMA || _la==FROM || _la==CASCADE || _la==VERSION) {
				{
				{
				setState(8211);
				createExtensionOptItem();
				}
				}
				setState(8216);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionOptItemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION() { return getToken(PostgreSQLStatementParser.VERSION, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public CreateExtensionOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionOptItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateExtensionOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionOptItemContext createExtensionOptItem() throws RecognitionException {
		CreateExtensionOptItemContext _localctx = new CreateExtensionOptItemContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_createExtensionOptItem);
		try {
			setState(8224);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(8217);
				match(SCHEMA);
				setState(8218);
				name();
				}
				break;
			case VERSION:
				enterOuterAlt(_localctx, 2);
				{
				setState(8219);
				match(VERSION);
				setState(8220);
				nonReservedWordOrSconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(8221);
				match(FROM);
				setState(8222);
				nonReservedWordOrSconst();
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8223);
				match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public FdwOptionsContext fdwOptions() {
			return getRuleContext(FdwOptionsContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public CreateForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignDataWrapper; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignDataWrapperContext createForeignDataWrapper() throws RecognitionException {
		CreateForeignDataWrapperContext _localctx = new CreateForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_createForeignDataWrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8226);
			match(CREATE);
			setState(8227);
			match(FOREIGN);
			setState(8228);
			match(DATA);
			setState(8229);
			match(WRAPPER);
			setState(8230);
			name();
			setState(8232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO || _la==HANDLER || _la==VALIDATOR) {
				{
				setState(8231);
				fdwOptions();
				}
			}

			setState(8235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(8234);
				createGenericOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public CreateForeignTableClausesContext createForeignTableClauses() {
			return getRuleContext(CreateForeignTableClausesContext.class,0);
		}
		public CreateForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableContext createForeignTable() throws RecognitionException {
		CreateForeignTableContext _localctx = new CreateForeignTableContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_createForeignTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8237);
			match(CREATE);
			setState(8238);
			match(FOREIGN);
			setState(8239);
			match(TABLE);
			setState(8240);
			createForeignTableClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableClausesContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode INHERITS() { return getToken(PostgreSQLStatementParser.INHERITS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLStatementParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public CreateForeignTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTableClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateForeignTableClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableClausesContext createForeignTableClauses() throws RecognitionException {
		CreateForeignTableClausesContext _localctx = new CreateForeignTableClausesContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_createForeignTableClauses);
		int _la;
		try {
			setState(8286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8245);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					setState(8242);
					match(IF);
					setState(8243);
					match(NOT);
					setState(8244);
					match(EXISTS);
					}
					break;
				}
				setState(8247);
				qualifiedName();
				setState(8248);
				match(LP_);
				setState(8250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (PRIMARY - 66)) | (1L << (UNIQUE - 66)) | (1L << (FOREIGN - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (LIKE - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (CHECK - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
					{
					setState(8249);
					tableElementList();
					}
				}

				setState(8252);
				match(RP_);
				setState(8258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INHERITS) {
					{
					setState(8253);
					match(INHERITS);
					setState(8254);
					match(LP_);
					setState(8255);
					qualifiedNameList(0);
					setState(8256);
					match(RP_);
					}
				}

				setState(8260);
				match(SERVER);
				setState(8261);
				name();
				setState(8263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(8262);
					createGenericOptions();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8268);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
				case 1:
					{
					setState(8265);
					match(IF);
					setState(8266);
					match(NOT);
					setState(8267);
					match(EXISTS);
					}
					break;
				}
				setState(8270);
				qualifiedName();
				setState(8271);
				match(PARTITION);
				setState(8272);
				match(OF);
				setState(8273);
				qualifiedName();
				setState(8278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(8274);
					match(LP_);
					setState(8275);
					typedTableElementList();
					setState(8276);
					match(RP_);
					}
				}

				setState(8280);
				partitionBoundSpec();
				setState(8281);
				match(SERVER);
				setState(8282);
				name();
				setState(8284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(8283);
					createGenericOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		TableElementListContext _localctx = new TableElementListContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_tableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8288);
			tableElement();
			setState(8293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8289);
				match(COMMA_);
				setState(8290);
				tableElement();
				}
				}
				setState(8295);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableLikeClauseContext tableLikeClause() {
			return getRuleContext(TableLikeClauseContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_tableElement);
		try {
			setState(8299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8296);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8297);
				tableLikeClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8298);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PostgreSQLStatementParser.LIKE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeClauseContext tableLikeClause() throws RecognitionException {
		TableLikeClauseContext _localctx = new TableLikeClauseContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_tableLikeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8301);
			match(LIKE);
			setState(8302);
			qualifiedName();
			setState(8303);
			tableLikeOptionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeOptionListContext extends ParserRuleContext {
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeOptionContext tableLikeOption() {
			return getRuleContext(TableLikeOptionContext.class,0);
		}
		public TerminalNode INCLUDING() { return getToken(PostgreSQLStatementParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLStatementParser.EXCLUDING, 0); }
		public TableLikeOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableLikeOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionListContext tableLikeOptionList() throws RecognitionException {
		return tableLikeOptionList(0);
	}

	private TableLikeOptionListContext tableLikeOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableLikeOptionListContext _localctx = new TableLikeOptionListContext(_ctx, _parentState);
		TableLikeOptionListContext _prevctx = _localctx;
		int _startState = 1114;
		enterRecursionRule(_localctx, 1114, RULE_tableLikeOptionList, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(8311);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,738,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
					setState(8306);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8307);
					_la = _input.LA(1);
					if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8308);
					tableLikeOption();
					}
					} 
				}
				setState(8313);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,738,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableLikeOptionContext extends ParserRuleContext {
		public TerminalNode COMMENTS() { return getToken(PostgreSQLStatementParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLStatementParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLStatementParser.IDENTITY, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLStatementParser.GENERATED, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLStatementParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLStatementParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TableLikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionContext tableLikeOption() throws RecognitionException {
		TableLikeOptionContext _localctx = new TableLikeOptionContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_tableLikeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8314);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (GENERATED - 217)) | (1L << (COMMENTS - 217)) | (1L << (CONSTRAINTS - 217)) | (1L << (DEFAULTS - 217)) | (1L << (IDENTITY - 217)) | (1L << (INDEXES - 217)))) != 0) || _la==STATISTICS || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsWithDefaultsContext funcArgsWithDefaults() {
			return getRuleContext(FuncArgsWithDefaultsContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(PostgreSQLStatementParser.RETURNS, 0); }
		public FuncReturnContext funcReturn() {
			return getRuleContext(FuncReturnContext.class,0);
		}
		public CreatefuncOptListContext createfuncOptList() {
			return getRuleContext(CreatefuncOptListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TableFuncColumnListContext tableFuncColumnList() {
			return getRuleContext(TableFuncColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_createFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8316);
			match(CREATE);
			setState(8319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8317);
				match(OR);
				setState(8318);
				match(REPLACE);
				}
			}

			setState(8321);
			match(FUNCTION);
			setState(8322);
			funcName();
			setState(8323);
			funcArgsWithDefaults();
			setState(8336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				{
				setState(8324);
				match(RETURNS);
				setState(8325);
				funcReturn();
				setState(8326);
				createfuncOptList();
				}
				break;
			case 2:
				{
				setState(8328);
				match(RETURNS);
				setState(8329);
				match(TABLE);
				setState(8330);
				match(LP_);
				setState(8331);
				tableFuncColumnList();
				setState(8332);
				match(RP_);
				setState(8333);
				createfuncOptList();
				}
				break;
			case 3:
				{
				setState(8335);
				createfuncOptList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncColumnListContext extends ParserRuleContext {
		public List<TableFuncColumnContext> tableFuncColumn() {
			return getRuleContexts(TableFuncColumnContext.class);
		}
		public TableFuncColumnContext tableFuncColumn(int i) {
			return getRuleContext(TableFuncColumnContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TableFuncColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncColumnList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableFuncColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncColumnListContext tableFuncColumnList() throws RecognitionException {
		TableFuncColumnListContext _localctx = new TableFuncColumnListContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_tableFuncColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8338);
			tableFuncColumn();
			setState(8343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8339);
				match(COMMA_);
				setState(8340);
				tableFuncColumn();
				}
				}
				setState(8345);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncColumnContext extends ParserRuleContext {
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public TableFuncColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncColumn; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTableFuncColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncColumnContext tableFuncColumn() throws RecognitionException {
		TableFuncColumnContext _localctx = new TableFuncColumnContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_tableFuncColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8346);
			paramName();
			setState(8347);
			funcType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefuncOptListContext extends ParserRuleContext {
		public List<CreatefuncOptItemContext> createfuncOptItem() {
			return getRuleContexts(CreatefuncOptItemContext.class);
		}
		public CreatefuncOptItemContext createfuncOptItem(int i) {
			return getRuleContext(CreatefuncOptItemContext.class,i);
		}
		public CreatefuncOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfuncOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreatefuncOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefuncOptListContext createfuncOptList() throws RecognitionException {
		CreatefuncOptListContext _localctx = new CreatefuncOptListContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_createfuncOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8350); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8349);
				createfuncOptItem();
				}
				}
				setState(8352); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (SET - 63)) | (1L << (AS - 63)) | (1L << (NOT - 63)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (WINDOW - 198)) | (1L << (ROWS - 198)) | (1L << (EXTERNAL - 198)))) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & ((1L << (LANGUAGE - 267)) | (1L << (RESET - 267)) | (1L << (SECURITY - 267)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (COST - 428)) | (1L << (CALLED - 428)) | (1L << (PARALLEL - 428)) | (1L << (LEAKPROOF - 428)) | (1L << (IMMUTABLE - 428)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (RETURNS - 515)) | (1L << (SUPPORT - 515)) | (1L << (STABLE - 515)) | (1L << (TRANSFORM - 515)) | (1L << (VOLATILE - 515)) | (1L << (STRICT - 515)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefuncOptItemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public FuncAsContext funcAs() {
			return getRuleContext(FuncAsContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TransformTypeListContext transformTypeList() {
			return getRuleContext(TransformTypeListContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(PostgreSQLStatementParser.WINDOW, 0); }
		public CommonFuncOptItemContext commonFuncOptItem() {
			return getRuleContext(CommonFuncOptItemContext.class,0);
		}
		public CreatefuncOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfuncOptItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreatefuncOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefuncOptItemContext createfuncOptItem() throws RecognitionException {
		CreatefuncOptItemContext _localctx = new CreatefuncOptItemContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_createfuncOptItem);
		try {
			setState(8362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8354);
				match(AS);
				setState(8355);
				funcAs();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8356);
				match(LANGUAGE);
				setState(8357);
				nonReservedWordOrSconst();
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 3);
				{
				setState(8358);
				match(TRANSFORM);
				setState(8359);
				transformTypeList();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(8360);
				match(WINDOW);
				}
				break;
			case SET:
			case NOT:
			case ROWS:
			case EXTERNAL:
			case RESET:
			case SECURITY:
			case COST:
			case CALLED:
			case PARALLEL:
			case LEAKPROOF:
			case IMMUTABLE:
			case RETURNS:
			case SUPPORT:
			case STABLE:
			case VOLATILE:
			case STRICT:
				enterOuterAlt(_localctx, 5);
				{
				setState(8361);
				commonFuncOptItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransformTypeListContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(PostgreSQLStatementParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(PostgreSQLStatementParser.FOR, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(PostgreSQLStatementParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(PostgreSQLStatementParser.TYPE, i);
		}
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TransformTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformTypeList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTransformTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformTypeListContext transformTypeList() throws RecognitionException {
		TransformTypeListContext _localctx = new TransformTypeListContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_transformTypeList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8364);
			match(FOR);
			setState(8365);
			match(TYPE);
			setState(8366);
			typeName();
			{
			setState(8367);
			match(COMMA_);
			setState(8368);
			match(FOR);
			setState(8369);
			match(TYPE);
			setState(8370);
			typeName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncAsContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public FuncAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncAs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncAsContext funcAs() throws RecognitionException {
		FuncAsContext _localctx = new FuncAsContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_funcAs);
		try {
			setState(8379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8372);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(8373);
				match(STRING_);
				setState(8377);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMA_:
					{
					setState(8374);
					match(COMMA_);
					setState(8375);
					identifier();
					}
					break;
				case STRING_:
					{
					setState(8376);
					match(STRING_);
					}
					break;
				case EOF:
				case SEMI_:
				case SET:
				case AS:
				case NOT:
				case WINDOW:
				case ROWS:
				case EXTERNAL:
				case LANGUAGE:
				case RESET:
				case SECURITY:
				case COST:
				case CALLED:
				case PARALLEL:
				case LEAKPROOF:
				case IMMUTABLE:
				case RETURNS:
				case SUPPORT:
				case STABLE:
				case TRANSFORM:
				case VOLATILE:
				case STRICT:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncReturnContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public FuncReturnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcReturn; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncReturn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncReturnContext funcReturn() throws RecognitionException {
		FuncReturnContext _localctx = new FuncReturnContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_funcReturn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8381);
			funcType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsWithDefaultsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public FuncArgsWithDefaultsListContext funcArgsWithDefaultsList() {
			return getRuleContext(FuncArgsWithDefaultsListContext.class,0);
		}
		public FuncArgsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsWithDefaults; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncArgsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsWithDefaultsContext funcArgsWithDefaults() throws RecognitionException {
		FuncArgsWithDefaultsContext _localctx = new FuncArgsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_funcArgsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8383);
			match(LP_);
			setState(8385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (NATURAL - 66)) | (1L << (JOIN - 66)) | (1L << (FULL - 66)) | (1L << (INNER - 66)) | (1L << (OUTER - 66)) | (1L << (LEFT - 66)) | (1L << (RIGHT - 66)) | (1L << (CROSS - 66)) | (1L << (IF - 66)) | (1L << (IS - 66)) | (1L << (IN - 66)) | (1L << (LIKE - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (BOOLEAN - 130)) | (1L << (DOUBLE - 130)) | (1L << (CHAR - 130)) | (1L << (CHARACTER - 130)) | (1L << (INTERVAL - 130)) | (1L << (DATE - 130)) | (1L << (TIME - 130)) | (1L << (TIMESTAMP - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (COLLATION - 130)) | (1L << (NAMES - 130)) | (1L << (INTEGER - 130)) | (1L << (REAL - 130)) | (1L << (DECIMAL - 130)) | (1L << (TYPE - 130)) | (1L << (SMALLINT - 130)) | (1L << (BIGINT - 130)) | (1L << (NUMERIC - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (NATIONAL - 130)) | (1L << (NCHAR - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (OVERLAPS - 195)) | (1L << (AT - 195)) | (1L << (DEC - 195)) | (1L << (ADMIN - 195)) | (1L << (BINARY - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONCURRENTLY - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)) | (1L << (INT - 259)) | (1L << (INT2 - 259)) | (1L << (INT4 - 259)) | (1L << (INT8 - 259)) | (1L << (FLOAT - 259)) | (1L << (FLOAT4 - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (FLOAT8 - 323)) | (1L << (VARCHAR - 323)) | (1L << (ENUM - 323)) | (1L << (BIT - 323)) | (1L << (XML - 323)) | (1L << (TABLESAMPLE - 323)) | (1L << (ORDINALITY - 323)) | (1L << (CURRENT_SCHEMA - 323)) | (1L << (SETOF - 323)) | (1L << (NFC - 323)) | (1L << (NFD - 323)) | (1L << (NFKC - 323)) | (1L << (NFKD - 323)) | (1L << (REF - 323)) | (1L << (PASSING - 323)) | (1L << (VERSION - 323)) | (1L << (YES - 323)) | (1L << (STANDALONE - 323)) | (1L << (MATERIALIZED - 323)) | (1L << (OPERATOR - 323)) | (1L << (SHARE - 323)) | (1L << (ROLLUP - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (ILIKE - 387)) | (1L << (SIMILAR - 387)) | (1L << (ISNULL - 387)) | (1L << (NOTNULL - 387)) | (1L << (DOCUMENT - 387)) | (1L << (NORMALIZED - 387)) | (1L << (VARIADIC - 387)) | (1L << (NOWAIT - 387)) | (1L << (LOCKED - 387)) | (1L << (COLUMNS - 387)) | (1L << (CONTENT - 387)) | (1L << (STRIP - 387)) | (1L << (WHITESPACE - 387)) | (1L << (CONFLICT - 387)) | (1L << (OVERRIDING - 387)) | (1L << (SYSTEM - 387)) | (1L << (ABORT - 387)) | (1L << (ABSOLUTE - 387)) | (1L << (ACCESS - 387)) | (1L << (AFTER - 387)) | (1L << (AGGREGATE - 387)) | (1L << (ALSO - 387)) | (1L << (ATTACH - 387)) | (1L << (ATTRIBUTE - 387)) | (1L << (BACKWARD - 387)) | (1L << (BEFORE - 387)) | (1L << (ASSERTION - 387)) | (1L << (ASSIGNMENT - 387)) | (1L << (CONTINUE - 387)) | (1L << (CONVERSION - 387)) | (1L << (COPY - 387)) | (1L << (COST - 387)) | (1L << (CSV - 387)) | (1L << (CALLED - 387)) | (1L << (CATALOG - 387)) | (1L << (CHAIN - 387)) | (1L << (CHECKPOINT - 387)) | (1L << (CLASS - 387)) | (1L << (CONFIGURATION - 387)) | (1L << (COMMENT - 387)) | (1L << (DETACH - 387)) | (1L << (DICTIONARY - 387)) | (1L << (EXPRESSION - 387)) | (1L << (INSENSITIVE - 387)) | (1L << (DISCARD - 387)) | (1L << (OFF - 387)) | (1L << (INSTEAD - 387)) | (1L << (EXPLAIN - 387)) | (1L << (INPUT - 387)) | (1L << (INLINE - 387)) | (1L << (PARALLEL - 387)) | (1L << (LEAKPROOF - 387)) | (1L << (COMMITTED - 387)) | (1L << (ENCODING - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (IMPLICIT - 451)) | (1L << (DELIMITER - 451)) | (1L << (CURSOR - 451)) | (1L << (EACH - 451)) | (1L << (EVENT - 451)) | (1L << (DEALLOCATE - 451)) | (1L << (CONNECTION - 451)) | (1L << (DECLARE - 451)) | (1L << (FAMILY - 451)) | (1L << (FORWARD - 451)) | (1L << (EXCLUSIVE - 451)) | (1L << (FUNCTIONS - 451)) | (1L << (LOCATION - 451)) | (1L << (LABEL - 451)) | (1L << (DELIMITERS - 451)) | (1L << (HANDLER - 451)) | (1L << (HEADER - 451)) | (1L << (IMMUTABLE - 451)) | (1L << (GRANTED - 451)) | (1L << (HOLD - 451)) | (1L << (MAPPING - 451)) | (1L << (OLD - 451)) | (1L << (METHOD - 451)) | (1L << (LOAD - 451)) | (1L << (LISTEN - 451)) | (1L << (MODE - 451)) | (1L << (MOVE - 451)) | (1L << (PROCEDURAL - 451)) | (1L << (PARSER - 451)) | (1L << (PROCEDURES - 451)) | (1L << (ENCRYPTED - 451)) | (1L << (PUBLICATION - 451)) | (1L << (PROGRAM - 451)) | (1L << (REFERENCING - 451)) | (1L << (PLANS - 451)) | (1L << (REINDEX - 451)) | (1L << (PRIOR - 451)) | (1L << (PASSWORD - 451)) | (1L << (RELATIVE - 451)) | (1L << (QUOTE - 451)) | (1L << (ROUTINES - 451)) | (1L << (REPLACE - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (REFRESH - 451)) | (1L << (PREPARE - 451)) | (1L << (OPTIONS - 451)) | (1L << (IMPORT - 451)) | (1L << (INVOKER - 451)) | (1L << (NEW - 451)) | (1L << (PREPARED - 451)) | (1L << (SCROLL - 451)) | (1L << (SEQUENCES - 451)) | (1L << (SYSID - 451)) | (1L << (REASSIGN - 451)) | (1L << (SERVER - 451)) | (1L << (SUBSCRIPTION - 451)) | (1L << (SEARCH - 451)) | (1L << (SCHEMAS - 451)) | (1L << (RECHECK - 451)) | (1L << (POLICY - 451)) | (1L << (NOTIFY - 451)) | (1L << (LOCK - 451)) | (1L << (RELEASE - 451)) | (1L << (SERIALIZABLE - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (RETURNS - 515)) | (1L << (STATEMENT - 515)) | (1L << (STDIN - 515)) | (1L << (STDOUT - 515)) | (1L << (TABLES - 515)) | (1L << (SUPPORT - 515)) | (1L << (STABLE - 515)) | (1L << (TEMPLATE - 515)) | (1L << (UNENCRYPTED - 515)) | (1L << (VIEWS - 515)) | (1L << (UNCOMMITTED - 515)) | (1L << (TRANSFORM - 515)) | (1L << (UNLISTEN - 515)) | (1L << (TRUSTED - 515)) | (1L << (VALIDATOR - 515)) | (1L << (UNTIL - 515)) | (1L << (VACUUM - 515)) | (1L << (VOLATILE - 515)) | (1L << (STORED - 515)) | (1L << (WRITE - 515)) | (1L << (STRICT - 515)) | (1L << (TYPES - 515)) | (1L << (WRAPPER - 515)) | (1L << (WORK - 515)) | (1L << (FREEZE - 515)) | (1L << (AUTHORIZATION - 515)) | (1L << (VERBOSE - 515)) | (1L << (OUT - 515)) | (1L << (INOUT - 515)) | (1L << (IDENTIFIER_ - 515)))) != 0)) {
				{
				setState(8384);
				funcArgsWithDefaultsList();
				}
			}

			setState(8387);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsWithDefaultsListContext extends ParserRuleContext {
		public List<FuncArgWithDefaultContext> funcArgWithDefault() {
			return getRuleContexts(FuncArgWithDefaultContext.class);
		}
		public FuncArgWithDefaultContext funcArgWithDefault(int i) {
			return getRuleContext(FuncArgWithDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public FuncArgsWithDefaultsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsWithDefaultsList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncArgsWithDefaultsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsWithDefaultsListContext funcArgsWithDefaultsList() throws RecognitionException {
		FuncArgsWithDefaultsListContext _localctx = new FuncArgsWithDefaultsListContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_funcArgsWithDefaultsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8389);
			funcArgWithDefault();
			setState(8394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8390);
				match(COMMA_);
				setState(8391);
				funcArgWithDefault();
				}
				}
				setState(8396);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgWithDefaultContext extends ParserRuleContext {
		public FuncArgContext funcArg() {
			return getRuleContext(FuncArgContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public FuncArgWithDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgWithDefault; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFuncArgWithDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgWithDefaultContext funcArgWithDefault() throws RecognitionException {
		FuncArgWithDefaultContext _localctx = new FuncArgWithDefaultContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_funcArgWithDefault);
		try {
			setState(8406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8397);
				funcArg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8398);
				funcArg();
				setState(8399);
				match(DEFAULT);
				setState(8400);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8402);
				funcArg();
				setState(8403);
				match(EQ_);
				setState(8404);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLanguageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLStatementParser.TRUSTED, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLStatementParser.HANDLER, 0); }
		public List<HandlerNameContext> handlerName() {
			return getRuleContexts(HandlerNameContext.class);
		}
		public HandlerNameContext handlerName(int i) {
			return getRuleContext(HandlerNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TransformElementListContext transformElementList() {
			return getRuleContext(TransformElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode INLINE() { return getToken(PostgreSQLStatementParser.INLINE, 0); }
		public ValidatorClauseContext validatorClause() {
			return getRuleContext(ValidatorClauseContext.class,0);
		}
		public CreateLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLanguage; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLanguageContext createLanguage() throws RecognitionException {
		CreateLanguageContext _localctx = new CreateLanguageContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_createLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8408);
			match(CREATE);
			setState(8411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8409);
				match(OR);
				setState(8410);
				match(REPLACE);
				}
			}

			setState(8414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRUSTED) {
				{
				setState(8413);
				match(TRUSTED);
				}
			}

			setState(8417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(8416);
				match(PROCEDURAL);
				}
			}

			setState(8419);
			match(LANGUAGE);
			setState(8420);
			name();
			setState(8434);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HANDLER:
				{
				setState(8421);
				match(HANDLER);
				setState(8422);
				handlerName();
				setState(8425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(8423);
					match(INLINE);
					setState(8424);
					handlerName();
					}
				}

				setState(8428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==VALIDATOR) {
					{
					setState(8427);
					validatorClause();
					}
				}

				}
				break;
			case LP_:
				{
				setState(8430);
				match(LP_);
				setState(8431);
				transformElementList();
				setState(8432);
				match(RP_);
				}
				break;
			case EOF:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransformElementListContext extends ParserRuleContext {
		public List<TerminalNode> FROM() { return getTokens(PostgreSQLStatementParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(PostgreSQLStatementParser.FROM, i);
		}
		public List<TerminalNode> SQL() { return getTokens(PostgreSQLStatementParser.SQL); }
		public TerminalNode SQL(int i) {
			return getToken(PostgreSQLStatementParser.SQL, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLStatementParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(PostgreSQLStatementParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(PostgreSQLStatementParser.FUNCTION, i);
		}
		public List<FunctionWithArgtypesContext> functionWithArgtypes() {
			return getRuleContexts(FunctionWithArgtypesContext.class);
		}
		public FunctionWithArgtypesContext functionWithArgtypes(int i) {
			return getRuleContext(FunctionWithArgtypesContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TransformElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTransformElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformElementListContext transformElementList() throws RecognitionException {
		TransformElementListContext _localctx = new TransformElementListContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_transformElementList);
		int _la;
		try {
			setState(8453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8436);
				match(FROM);
				setState(8437);
				match(SQL);
				setState(8438);
				match(WITH);
				setState(8439);
				match(FUNCTION);
				setState(8440);
				functionWithArgtypes();
				setState(8441);
				match(COMMA_);
				setState(8442);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8443);
				match(SQL);
				setState(8444);
				match(WITH);
				setState(8445);
				match(FUNCTION);
				setState(8446);
				functionWithArgtypes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8448);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8449);
				match(SQL);
				setState(8450);
				match(WITH);
				setState(8451);
				match(FUNCTION);
				setState(8452);
				functionWithArgtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValidatorClauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLStatementParser.VALIDATOR, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public ValidatorClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validatorClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitValidatorClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValidatorClauseContext validatorClause() throws RecognitionException {
		ValidatorClauseContext _localctx = new ValidatorClauseContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_validatorClause);
		try {
			setState(8459);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8455);
				match(VALIDATOR);
				setState(8456);
				handlerName();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(8457);
				match(NO);
				setState(8458);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePolicyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public RowSecurityCmdContext rowSecurityCmd() {
			return getRuleContext(RowSecurityCmdContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public List<TerminalNode> LP_() { return getTokens(PostgreSQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(PostgreSQLStatementParser.LP_, i);
		}
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(PostgreSQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(PostgreSQLStatementParser.RP_, i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLStatementParser.CHECK, 0); }
		public CreatePolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPolicy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreatePolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePolicyContext createPolicy() throws RecognitionException {
		CreatePolicyContext _localctx = new CreatePolicyContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_createPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8461);
			match(CREATE);
			setState(8462);
			match(POLICY);
			setState(8463);
			name();
			setState(8464);
			match(ON);
			setState(8465);
			qualifiedName();
			setState(8468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8466);
				match(AS);
				setState(8467);
				identifier();
				}
			}

			setState(8472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(8470);
				match(FOR);
				setState(8471);
				rowSecurityCmd();
				}
			}

			setState(8476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(8474);
				match(TO);
				setState(8475);
				roleList();
				}
			}

			setState(8483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(8478);
				match(USING);
				setState(8479);
				match(LP_);
				setState(8480);
				aExpr(0);
				setState(8481);
				match(RP_);
				}
			}

			setState(8491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8485);
				match(WITH);
				setState(8486);
				match(CHECK);
				setState(8487);
				match(LP_);
				setState(8488);
				aExpr(0);
				setState(8489);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsWithDefaultsContext funcArgsWithDefaults() {
			return getRuleContext(FuncArgsWithDefaultsContext.class,0);
		}
		public CreatefuncOptListContext createfuncOptList() {
			return getRuleContext(CreatefuncOptListContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_createProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8493);
			match(CREATE);
			setState(8496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8494);
				match(OR);
				setState(8495);
				match(REPLACE);
				}
			}

			setState(8498);
			match(PROCEDURE);
			setState(8499);
			funcName();
			setState(8500);
			funcArgsWithDefaults();
			setState(8501);
			createfuncOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePublicationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public PublicationForTablesContext publicationForTables() {
			return getRuleContext(PublicationForTablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreatePublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPublication; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreatePublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePublicationContext createPublication() throws RecognitionException {
		CreatePublicationContext _localctx = new CreatePublicationContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_createPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8503);
			match(CREATE);
			setState(8504);
			match(PUBLICATION);
			setState(8505);
			name();
			setState(8507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(8506);
				publicationForTables();
				}
			}

			setState(8511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8509);
				match(WITH);
				setState(8510);
				definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PublicationForTablesContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLStatementParser.TABLES, 0); }
		public PublicationForTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationForTables; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPublicationForTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationForTablesContext publicationForTables() throws RecognitionException {
		PublicationForTablesContext _localctx = new PublicationForTablesContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_publicationForTables);
		try {
			setState(8519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8513);
				match(FOR);
				setState(8514);
				match(TABLE);
				setState(8515);
				relationExprList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8516);
				match(FOR);
				setState(8517);
				match(ALL);
				setState(8518);
				match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRuleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLStatementParser.DO, 0); }
		public RuleActionListContext ruleActionList() {
			return getRuleContext(RuleActionListContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode INSTEAD() { return getToken(PostgreSQLStatementParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLStatementParser.ALSO, 0); }
		public CreateRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRule; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRuleContext createRule() throws RecognitionException {
		CreateRuleContext _localctx = new CreateRuleContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_createRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8521);
			match(CREATE);
			setState(8524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8522);
				match(OR);
				setState(8523);
				match(REPLACE);
				}
			}

			setState(8526);
			match(RULE);
			setState(8527);
			name();
			setState(8528);
			match(AS);
			setState(8529);
			match(ON);
			setState(8530);
			event();
			setState(8531);
			match(TO);
			setState(8532);
			qualifiedName();
			setState(8535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(8533);
				match(WHERE);
				setState(8534);
				aExpr(0);
				}
			}

			setState(8537);
			match(DO);
			setState(8539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALSO || _la==INSTEAD) {
				{
				setState(8538);
				_la = _input.LA(1);
				if ( !(_la==ALSO || _la==INSTEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8541);
			ruleActionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionListContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLStatementParser.NOTHING, 0); }
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public RuleActionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRuleActionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionListContext ruleActionList() throws RecognitionException {
		RuleActionListContext _localctx = new RuleActionListContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_ruleActionList);
		try {
			setState(8549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8543);
				match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8544);
				ruleActionStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8545);
				match(LP_);
				setState(8546);
				ruleActionMulti();
				setState(8547);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public RuleActionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRuleActionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtContext ruleActionStmt() throws RecognitionException {
		RuleActionStmtContext _localctx = new RuleActionStmtContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_ruleActionStmt);
		try {
			setState(8556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8551);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8552);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8553);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8554);
				delete();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8555);
				notifyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionMultiContext extends ParserRuleContext {
		public List<RuleActionStmtContext> ruleActionStmt() {
			return getRuleContexts(RuleActionStmtContext.class);
		}
		public RuleActionStmtContext ruleActionStmt(int i) {
			return getRuleContext(RuleActionStmtContext.class,i);
		}
		public List<TerminalNode> SEMI_() { return getTokens(PostgreSQLStatementParser.SEMI_); }
		public TerminalNode SEMI_(int i) {
			return getToken(PostgreSQLStatementParser.SEMI_, i);
		}
		public RuleActionMultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionMulti; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRuleActionMulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionMultiContext ruleActionMulti() throws RecognitionException {
		RuleActionMultiContext _localctx = new RuleActionMultiContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_ruleActionMulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (LP_ - 32)) | (1L << (SELECT - 32)) | (1L << (INSERT - 32)) | (1L << (UPDATE - 32)) | (1L << (DELETE - 32)) | (1L << (TABLE - 32)) | (1L << (VALUES - 32)) | (1L << (WITH - 32)))) != 0) || _la==NOTIFY) {
				{
				setState(8558);
				ruleActionStmt();
				}
			}

			setState(8567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI_) {
				{
				{
				setState(8561);
				match(SEMI_);
				setState(8563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (LP_ - 32)) | (1L << (SELECT - 32)) | (1L << (INSERT - 32)) | (1L << (UPDATE - 32)) | (1L << (DELETE - 32)) | (1L << (TABLE - 32)) | (1L << (VALUES - 32)) | (1L << (WITH - 32)))) != 0) || _la==NOTIFY) {
					{
					setState(8562);
					ruleActionStmt();
					}
				}

				}
				}
				setState(8569);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifyStmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(PostgreSQLStatementParser.NOTIFY, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public NotifyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNotifyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifyStmtContext notifyStmt() throws RecognitionException {
		NotifyStmtContext _localctx = new NotifyStmtContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_notifyStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8570);
			match(NOTIFY);
			setState(8571);
			colId();
			setState(8574);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(8572);
				match(COMMA_);
				setState(8573);
				match(STRING_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggerActionTimeContext triggerActionTime() {
			return getRuleContext(TriggerActionTimeContext.class,0);
		}
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TriggerReferencingContext triggerReferencing() {
			return getRuleContext(TriggerReferencingContext.class,0);
		}
		public TriggerForSpecContext triggerForSpec() {
			return getRuleContext(TriggerForSpecContext.class,0);
		}
		public TriggerWhenContext triggerWhen() {
			return getRuleContext(TriggerWhenContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLStatementParser.CONSTRAINT, 0); }
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLStatementParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_createTrigger);
		int _la;
		try {
			setState(8620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8576);
				match(CREATE);
				setState(8577);
				match(TRIGGER);
				setState(8578);
				name();
				setState(8579);
				triggerActionTime();
				setState(8580);
				triggerEvents();
				setState(8581);
				match(ON);
				setState(8582);
				qualifiedName();
				setState(8584);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFERENCING) {
					{
					setState(8583);
					triggerReferencing();
					}
				}

				setState(8587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8586);
					triggerForSpec();
					}
				}

				setState(8590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(8589);
					triggerWhen();
					}
				}

				setState(8592);
				match(EXECUTE);
				setState(8593);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8594);
				funcName();
				setState(8595);
				match(LP_);
				setState(8597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << SELECT) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << CREATE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << GRANT) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TABLE - 64)) | (1L << (COLUMN - 64)) | (1L << (INDEX - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (PRIMARY - 64)) | (1L << (UNIQUE - 64)) | (1L << (FOREIGN - 64)) | (1L << (KEY - 64)) | (1L << (POSITION - 64)) | (1L << (PRECISION - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (WITH - 64)) | (1L << (UNION - 64)) | (1L << (DISTINCT - 64)) | (1L << (CASE - 64)) | (1L << (WHEN - 64)) | (1L << (CAST - 64)) | (1L << (TRIM - 64)) | (1L << (SUBSTRING - 64)) | (1L << (FROM - 64)) | (1L << (NATURAL - 64)) | (1L << (JOIN - 64)) | (1L << (FULL - 64)) | (1L << (INNER - 64)) | (1L << (OUTER - 64)) | (1L << (LEFT - 64)) | (1L << (RIGHT - 64)) | (1L << (CROSS - 64)) | (1L << (USING - 64)) | (1L << (WHERE - 64)) | (1L << (AS - 64)) | (1L << (ON - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (THEN - 64)) | (1L << (FOR - 64)) | (1L << (TO - 64)) | (1L << (AND - 64)) | (1L << (OR - 64)) | (1L << (IS - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (EXISTS - 64)) | (1L << (BETWEEN - 64)) | (1L << (IN - 64)) | (1L << (ALL - 64)) | (1L << (ANY - 64)) | (1L << (LIKE - 64)) | (1L << (ORDER - 64)) | (1L << (GROUP - 64)) | (1L << (BY - 64)) | (1L << (ASC - 64)) | (1L << (DESC - 64)) | (1L << (HAVING - 64)) | (1L << (LIMIT - 64)) | (1L << (OFFSET - 64)) | (1L << (BEGIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (COMMIT - 128)) | (1L << (ROLLBACK - 128)) | (1L << (SAVEPOINT - 128)) | (1L << (BOOLEAN - 128)) | (1L << (DOUBLE - 128)) | (1L << (CHAR - 128)) | (1L << (CHARACTER - 128)) | (1L << (ARRAY - 128)) | (1L << (INTERVAL - 128)) | (1L << (TIME - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (YEAR - 128)) | (1L << (MONTH - 128)) | (1L << (DAY - 128)) | (1L << (HOUR - 128)) | (1L << (MINUTE - 128)) | (1L << (SECOND - 128)) | (1L << (DEFAULT - 128)) | (1L << (CURRENT - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (CALL - 128)) | (1L << (PRESERVE - 128)) | (1L << (DO - 128)) | (1L << (DEFINER - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (SQL - 128)) | (1L << (CASCADED - 128)) | (1L << (LOCAL - 128)) | (1L << (CLOSE - 128)) | (1L << (NEXT - 128)) | (1L << (NAME - 128)) | (1L << (COLLATION - 128)) | (1L << (NAMES - 128)) | (1L << (INTEGER - 128)) | (1L << (REAL - 128)) | (1L << (DECIMAL - 128)) | (1L << (TYPE - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (NUMERIC - 128)) | (1L << (TEXT - 128)) | (1L << (REPEATABLE - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (NULLIF - 128)) | (1L << (VARYING - 128)) | (1L << (NATIONAL - 128)) | (1L << (NCHAR - 128)) | (1L << (VALUE - 128)) | (1L << (BOTH - 128)) | (1L << (LEADING - 128)) | (1L << (TRAILING - 128)) | (1L << (COALESCE - 128)) | (1L << (INTERSECT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (EXCEPT - 192)) | (1L << (TIES - 192)) | (1L << (FETCH - 192)) | (1L << (CUBE - 192)) | (1L << (GROUPING - 192)) | (1L << (SETS - 192)) | (1L << (WINDOW - 192)) | (1L << (OTHERS - 192)) | (1L << (OVERLAPS - 192)) | (1L << (SOME - 192)) | (1L << (AT - 192)) | (1L << (DEC - 192)) | (1L << (END - 192)) | (1L << (ADMIN - 192)) | (1L << (BINARY - 192)) | (1L << (ESCAPE - 192)) | (1L << (EXCLUDE - 192)) | (1L << (PARTITION - 192)) | (1L << (ROW - 192)) | (1L << (UNKNOWN - 192)) | (1L << (ALWAYS - 192)) | (1L << (CASCADE - 192)) | (1L << (CHECK - 192)) | (1L << (GENERATED - 192)) | (1L << (ISOLATION - 192)) | (1L << (LEVEL - 192)) | (1L << (NO - 192)) | (1L << (OPTION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (READ - 192)) | (1L << (REFERENCES - 192)) | (1L << (ROLE - 192)) | (1L << (ROWS - 192)) | (1L << (START - 192)) | (1L << (TRANSACTION - 192)) | (1L << (USER - 192)) | (1L << (ACTION - 192)) | (1L << (CACHE - 192)) | (1L << (CHARACTERISTICS - 192)) | (1L << (CLUSTER - 192)) | (1L << (COLLATE - 192)) | (1L << (COMMENTS - 192)) | (1L << (CONCURRENTLY - 192)) | (1L << (CONSTRAINTS - 192)) | (1L << (CYCLE - 192)) | (1L << (DATA - 192)) | (1L << (DATABASE - 192)) | (1L << (DEFAULTS - 192)) | (1L << (DEFERRABLE - 192)) | (1L << (DEFERRED - 192)) | (1L << (DEPENDS - 192)) | (1L << (DOMAIN - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXTENSION - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FILTER - 192)) | (1L << (FIRST - 192)) | (1L << (FOLLOWING - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FORCE - 256)) | (1L << (GLOBAL - 256)) | (1L << (IDENTITY - 256)) | (1L << (IMMEDIATE - 256)) | (1L << (INCLUDING - 256)) | (1L << (INCREMENT - 256)) | (1L << (INDEXES - 256)) | (1L << (INHERIT - 256)) | (1L << (INHERITS - 256)) | (1L << (INITIALLY - 256)) | (1L << (INCLUDE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LOGGED - 256)) | (1L << (MATCH - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MINVALUE - 256)) | (1L << (NOTHING - 256)) | (1L << (NULLS - 256)) | (1L << (OBJECT - 256)) | (1L << (OIDS - 256)) | (1L << (ONLY - 256)) | (1L << (OVER - 256)) | (1L << (OWNED - 256)) | (1L << (OWNER - 256)) | (1L << (PARTIAL - 256)) | (1L << (PRECEDING - 256)) | (1L << (RANGE - 256)) | (1L << (RENAME - 256)) | (1L << (REPLICA - 256)) | (1L << (RESET - 256)) | (1L << (RESTART - 256)) | (1L << (RESTRICT - 256)) | (1L << (ROUTINE - 256)) | (1L << (RULE - 256)) | (1L << (SECURITY - 256)) | (1L << (SEQUENCE - 256)) | (1L << (SESSION - 256)) | (1L << (SESSION_USER - 256)) | (1L << (SHOW - 256)) | (1L << (SIMPLE - 256)) | (1L << (STATISTICS - 256)) | (1L << (STORAGE - 256)) | (1L << (TABLESPACE - 256)) | (1L << (TEMP - 256)) | (1L << (TEMPORARY - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNLOGGED - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (ZONE - 256)) | (1L << (OF - 256)) | (1L << (UESCAPE - 256)) | (1L << (GROUPS - 256)) | (1L << (RECURSIVE - 256)) | (1L << (INT - 256)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (FLOAT - 321)) | (1L << (VARCHAR - 321)) | (1L << (ENUM - 321)) | (1L << (BIT - 321)) | (1L << (XML - 321)) | (1L << (TABLESAMPLE - 321)) | (1L << (ORDINALITY - 321)) | (1L << (CURRENT_ROLE - 321)) | (1L << (CURRENT_CATALOG - 321)) | (1L << (CURRENT_SCHEMA - 321)) | (1L << (OVERLAY - 321)) | (1L << (XMLCONCAT - 321)) | (1L << (XMLELEMENT - 321)) | (1L << (XMLEXISTS - 321)) | (1L << (XMLFOREST - 321)) | (1L << (XMLPARSE - 321)) | (1L << (XMLPI - 321)) | (1L << (XMLROOT - 321)) | (1L << (XMLSERIALIZE - 321)) | (1L << (TREAT - 321)) | (1L << (SETOF - 321)) | (1L << (NFC - 321)) | (1L << (NFD - 321)) | (1L << (NFKC - 321)) | (1L << (NFKD - 321)) | (1L << (XMLATTRIBUTES - 321)) | (1L << (REF - 321)) | (1L << (PASSING - 321)) | (1L << (VERSION - 321)) | (1L << (YES - 321)) | (1L << (STANDALONE - 321)) | (1L << (GREATEST - 321)) | (1L << (LEAST - 321)) | (1L << (MATERIALIZED - 321)) | (1L << (OPERATOR - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SHARE - 385)) | (1L << (ROLLUP - 385)) | (1L << (ILIKE - 385)) | (1L << (SIMILAR - 385)) | (1L << (ISNULL - 385)) | (1L << (NOTNULL - 385)) | (1L << (SYMMETRIC - 385)) | (1L << (DOCUMENT - 385)) | (1L << (NORMALIZED - 385)) | (1L << (ASYMMETRIC - 385)) | (1L << (VARIADIC - 385)) | (1L << (NOWAIT - 385)) | (1L << (LOCKED - 385)) | (1L << (XMLTABLE - 385)) | (1L << (COLUMNS - 385)) | (1L << (CONTENT - 385)) | (1L << (STRIP - 385)) | (1L << (WHITESPACE - 385)) | (1L << (XMLNAMESPACES - 385)) | (1L << (PLACING - 385)) | (1L << (RETURNING - 385)) | (1L << (LATERAL - 385)) | (1L << (NONE - 385)) | (1L << (ANALYSE - 385)) | (1L << (ANALYZE - 385)) | (1L << (CONFLICT - 385)) | (1L << (OVERRIDING - 385)) | (1L << (SYSTEM - 385)) | (1L << (ABORT - 385)) | (1L << (ABSOLUTE - 385)) | (1L << (ACCESS - 385)) | (1L << (AFTER - 385)) | (1L << (AGGREGATE - 385)) | (1L << (ALSO - 385)) | (1L << (ATTACH - 385)) | (1L << (ATTRIBUTE - 385)) | (1L << (BACKWARD - 385)) | (1L << (BEFORE - 385)) | (1L << (ASSERTION - 385)) | (1L << (ASSIGNMENT - 385)) | (1L << (CONTINUE - 385)) | (1L << (CONVERSION - 385)) | (1L << (COPY - 385)) | (1L << (COST - 385)) | (1L << (CSV - 385)) | (1L << (CALLED - 385)) | (1L << (CATALOG - 385)) | (1L << (CHAIN - 385)) | (1L << (CHECKPOINT - 385)) | (1L << (CLASS - 385)) | (1L << (CONFIGURATION - 385)) | (1L << (COMMENT - 385)) | (1L << (DETACH - 385)) | (1L << (DICTIONARY - 385)) | (1L << (EXPRESSION - 385)) | (1L << (INSENSITIVE - 385)) | (1L << (DISCARD - 385)) | (1L << (OFF - 385)) | (1L << (INSTEAD - 385)) | (1L << (EXPLAIN - 385)) | (1L << (INPUT - 385)) | (1L << (INLINE - 385)) | (1L << (PARALLEL - 385)) | (1L << (LEAKPROOF - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (COMMITTED - 449)) | (1L << (ENCODING - 449)) | (1L << (IMPLICIT - 449)) | (1L << (DELIMITER - 449)) | (1L << (CURSOR - 449)) | (1L << (EACH - 449)) | (1L << (EVENT - 449)) | (1L << (DEALLOCATE - 449)) | (1L << (CONNECTION - 449)) | (1L << (DECLARE - 449)) | (1L << (FAMILY - 449)) | (1L << (FORWARD - 449)) | (1L << (EXCLUSIVE - 449)) | (1L << (FUNCTIONS - 449)) | (1L << (LOCATION - 449)) | (1L << (LABEL - 449)) | (1L << (DELIMITERS - 449)) | (1L << (HANDLER - 449)) | (1L << (HEADER - 449)) | (1L << (IMMUTABLE - 449)) | (1L << (GRANTED - 449)) | (1L << (HOLD - 449)) | (1L << (MAPPING - 449)) | (1L << (OLD - 449)) | (1L << (METHOD - 449)) | (1L << (LOAD - 449)) | (1L << (LISTEN - 449)) | (1L << (MODE - 449)) | (1L << (MOVE - 449)) | (1L << (PROCEDURAL - 449)) | (1L << (PARSER - 449)) | (1L << (PROCEDURES - 449)) | (1L << (ENCRYPTED - 449)) | (1L << (PUBLICATION - 449)) | (1L << (PROGRAM - 449)) | (1L << (REFERENCING - 449)) | (1L << (PLANS - 449)) | (1L << (REINDEX - 449)) | (1L << (PRIOR - 449)) | (1L << (PASSWORD - 449)) | (1L << (RELATIVE - 449)) | (1L << (QUOTE - 449)) | (1L << (ROUTINES - 449)) | (1L << (REPLACE - 449)) | (1L << (SNAPSHOT - 449)) | (1L << (REFRESH - 449)) | (1L << (PREPARE - 449)) | (1L << (OPTIONS - 449)) | (1L << (IMPORT - 449)) | (1L << (INVOKER - 449)) | (1L << (NEW - 449)) | (1L << (PREPARED - 449)) | (1L << (SCROLL - 449)) | (1L << (SEQUENCES - 449)) | (1L << (SYSID - 449)) | (1L << (REASSIGN - 449)) | (1L << (SERVER - 449)) | (1L << (SUBSCRIPTION - 449)) | (1L << (SEARCH - 449)) | (1L << (SCHEMAS - 449)) | (1L << (RECHECK - 449)) | (1L << (POLICY - 449)) | (1L << (NOTIFY - 449)) | (1L << (LOCK - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (RELEASE - 513)) | (1L << (SERIALIZABLE - 513)) | (1L << (RETURNS - 513)) | (1L << (STATEMENT - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (TABLES - 513)) | (1L << (SUPPORT - 513)) | (1L << (STABLE - 513)) | (1L << (TEMPLATE - 513)) | (1L << (UNENCRYPTED - 513)) | (1L << (VIEWS - 513)) | (1L << (UNCOMMITTED - 513)) | (1L << (TRANSFORM - 513)) | (1L << (UNLISTEN - 513)) | (1L << (TRUSTED - 513)) | (1L << (VALIDATOR - 513)) | (1L << (UNTIL - 513)) | (1L << (VACUUM - 513)) | (1L << (VOLATILE - 513)) | (1L << (STORED - 513)) | (1L << (WRITE - 513)) | (1L << (STRICT - 513)) | (1L << (TYPES - 513)) | (1L << (WRAPPER - 513)) | (1L << (WORK - 513)) | (1L << (FREEZE - 513)) | (1L << (AUTHORIZATION - 513)) | (1L << (VERBOSE - 513)) | (1L << (OUT - 513)) | (1L << (INOUT - 513)) | (1L << (IDENTIFIER_ - 513)) | (1L << (STRING_ - 513)) | (1L << (NUMBER_ - 513)))) != 0)) {
					{
					setState(8596);
					triggerFuncArgs();
					}
				}

				setState(8599);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8601);
				match(CREATE);
				setState(8602);
				match(CONSTRAINT);
				setState(8603);
				match(TRIGGER);
				setState(8606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(8604);
					match(FROM);
					setState(8605);
					qualifiedName();
					}
				}

				setState(8608);
				constraintAttributeSpec();
				setState(8609);
				match(FOR);
				setState(8610);
				match(EACH);
				setState(8611);
				match(ROW);
				setState(8612);
				triggerWhen();
				setState(8613);
				match(EXECUTE);
				setState(8614);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8615);
				funcName();
				setState(8616);
				match(LP_);
				setState(8617);
				triggerFuncArgs();
				setState(8618);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerEventsContext extends ParserRuleContext {
		public List<TriggerOneEventContext> triggerOneEvent() {
			return getRuleContexts(TriggerOneEventContext.class);
		}
		public TriggerOneEventContext triggerOneEvent(int i) {
			return getRuleContext(TriggerOneEventContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLStatementParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLStatementParser.OR, i);
		}
		public TriggerEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvents; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTriggerEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventsContext triggerEvents() throws RecognitionException {
		TriggerEventsContext _localctx = new TriggerEventsContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_triggerEvents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8622);
			triggerOneEvent();
			setState(8627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(8623);
				match(OR);
				setState(8624);
				triggerOneEvent();
				}
				}
				setState(8629);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerOneEventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLStatementParser.TRUNCATE, 0); }
		public TriggerOneEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOneEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTriggerOneEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOneEventContext triggerOneEvent() throws RecognitionException {
		TriggerOneEventContext _localctx = new TriggerOneEventContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_triggerOneEvent);
		try {
			setState(8637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8630);
				match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8631);
				match(DELETE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8632);
				match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8633);
				match(UPDATE);
				setState(8634);
				match(OF);
				setState(8635);
				columnList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8636);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerActionTimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(PostgreSQLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLStatementParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLStatementParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLStatementParser.OF, 0); }
		public TriggerActionTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActionTime; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTriggerActionTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActionTimeContext triggerActionTime() throws RecognitionException {
		TriggerActionTimeContext _localctx = new TriggerActionTimeContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_triggerActionTime);
		try {
			setState(8643);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8639);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(8640);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(8641);
				match(INSTEAD);
				setState(8642);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFuncArgsContext extends ParserRuleContext {
		public List<TriggerFuncArgContext> triggerFuncArg() {
			return getRuleContexts(TriggerFuncArgContext.class);
		}
		public TriggerFuncArgContext triggerFuncArg(int i) {
			return getRuleContext(TriggerFuncArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public TriggerFuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArgs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTriggerFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgsContext triggerFuncArgs() throws RecognitionException {
		TriggerFuncArgsContext _localctx = new TriggerFuncArgsContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_triggerFuncArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8645);
			triggerFuncArg();
			setState(8650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8646);
				match(COMMA_);
				setState(8647);
				triggerFuncArg();
				}
				}
				setState(8652);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFuncArgContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TriggerFuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTriggerFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgContext triggerFuncArg() throws RecognitionException {
		TriggerFuncArgContext _localctx = new TriggerFuncArgContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_triggerFuncArg);
		try {
			setState(8656);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8653);
				match(NUMBER_);
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(8654);
				match(STRING_);
				}
				break;
			case T__1:
			case T__2:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case GRANT:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case COLUMN:
			case INDEX:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case INTO:
			case VALUES:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case FROM:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case IF:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case IN:
			case ALL:
			case ANY:
			case LIKE:
			case ORDER:
			case GROUP:
			case BY:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DO:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case BOTH:
			case LEADING:
			case TRAILING:
			case COALESCE:
			case INTERSECT:
			case EXCEPT:
			case TIES:
			case FETCH:
			case CUBE:
			case GROUPING:
			case SETS:
			case WINDOW:
			case OTHERS:
			case OVERLAPS:
			case SOME:
			case AT:
			case DEC:
			case END:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case CHECK:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case REFERENCES:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COLLATE:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case SYMMETRIC:
			case DOCUMENT:
			case NORMALIZED:
			case ASYMMETRIC:
			case VARIADIC:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case NONE:
			case ANALYSE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 3);
				{
				setState(8655);
				colLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerWhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLStatementParser.WHEN, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TriggerWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerWhen; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTriggerWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerWhenContext triggerWhen() throws RecognitionException {
		TriggerWhenContext _localctx = new TriggerWhenContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_triggerWhen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8658);
			match(WHEN);
			setState(8659);
			match(LP_);
			setState(8660);
			aExpr(0);
			setState(8661);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForSpecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLStatementParser.STATEMENT, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLStatementParser.EACH, 0); }
		public TriggerForSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTriggerForSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForSpecContext triggerForSpec() throws RecognitionException {
		TriggerForSpecContext _localctx = new TriggerForSpecContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_triggerForSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8663);
			match(FOR);
			setState(8665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EACH) {
				{
				setState(8664);
				match(EACH);
				}
			}

			setState(8667);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==STATEMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerReferencingContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PostgreSQLStatementParser.REFERENCING, 0); }
		public TriggerTransitionsContext triggerTransitions() {
			return getRuleContext(TriggerTransitionsContext.class,0);
		}
		public TriggerReferencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerReferencing; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTriggerReferencing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerReferencingContext triggerReferencing() throws RecognitionException {
		TriggerReferencingContext _localctx = new TriggerReferencingContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_triggerReferencing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8669);
			match(REFERENCING);
			setState(8670);
			triggerTransitions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerTransitionsContext extends ParserRuleContext {
		public List<TriggerTransitionContext> triggerTransition() {
			return getRuleContexts(TriggerTransitionContext.class);
		}
		public TriggerTransitionContext triggerTransition(int i) {
			return getRuleContext(TriggerTransitionContext.class,i);
		}
		public TriggerTransitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTransitions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTriggerTransitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTransitionsContext triggerTransitions() throws RecognitionException {
		TriggerTransitionsContext _localctx = new TriggerTransitionsContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_triggerTransitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8673); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8672);
				triggerTransition();
				}
				}
				setState(8675); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OLD || _la==NEW );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerTransitionContext extends ParserRuleContext {
		public TransitionOldOrNewContext transitionOldOrNew() {
			return getRuleContext(TransitionOldOrNewContext.class,0);
		}
		public TransitionRowOrTableContext transitionRowOrTable() {
			return getRuleContext(TransitionRowOrTableContext.class,0);
		}
		public TransitionRelNameContext transitionRelName() {
			return getRuleContext(TransitionRelNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TriggerTransitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTransition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTriggerTransition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTransitionContext triggerTransition() throws RecognitionException {
		TriggerTransitionContext _localctx = new TriggerTransitionContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_triggerTransition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8677);
			transitionOldOrNew();
			setState(8678);
			transitionRowOrTable();
			setState(8680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8679);
				match(AS);
				}
			}

			setState(8682);
			transitionRelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionRelNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TransitionRelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionRelName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTransitionRelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionRelNameContext transitionRelName() throws RecognitionException {
		TransitionRelNameContext _localctx = new TransitionRelNameContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_transitionRelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8684);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionRowOrTableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLStatementParser.ROW, 0); }
		public TransitionRowOrTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionRowOrTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTransitionRowOrTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionRowOrTableContext transitionRowOrTable() throws RecognitionException {
		TransitionRowOrTableContext _localctx = new TransitionRowOrTableContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_transitionRowOrTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8686);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionOldOrNewContext extends ParserRuleContext {
		public TerminalNode OLD() { return getToken(PostgreSQLStatementParser.OLD, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLStatementParser.NEW, 0); }
		public TransitionOldOrNewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionOldOrNew; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTransitionOldOrNew(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionOldOrNewContext transitionOldOrNew() throws RecognitionException {
		TransitionOldOrNewContext _localctx = new TransitionOldOrNewContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_transitionOldOrNew);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8688);
			_la = _input.LA(1);
			if ( !(_la==OLD || _la==NEW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TempOptionContext tempOption() {
			return getRuleContext(TempOptionContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public CreateSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSequence; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSequenceContext createSequence() throws RecognitionException {
		CreateSequenceContext _localctx = new CreateSequenceContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_createSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8690);
			match(CREATE);
			setState(8692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (GLOBAL - 257)) | (1L << (TEMP - 257)) | (1L << (TEMPORARY - 257)) | (1L << (UNLOGGED - 257)))) != 0)) {
				{
				setState(8691);
				tempOption();
				}
			}

			setState(8694);
			match(SEQUENCE);
			setState(8698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
			case 1:
				{
				setState(8695);
				match(IF);
				setState(8696);
				match(NOT);
				setState(8697);
				match(EXISTS);
				}
				break;
			}
			setState(8700);
			qualifiedName();
			setState(8702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (NO - 220)) | (1L << (START - 220)) | (1L << (CACHE - 220)) | (1L << (CYCLE - 220)) | (1L << (INCREMENT - 220)) | (1L << (MAXVALUE - 220)) | (1L << (MINVALUE - 220)) | (1L << (OWNED - 220)))) != 0) || _la==RESTART || _la==SEQUENCE) {
				{
				setState(8701);
				seqOptList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TempOptionContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLStatementParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLStatementParser.UNLOGGED, 0); }
		public TempOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tempOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTempOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TempOptionContext tempOption() throws RecognitionException {
		TempOptionContext _localctx = new TempOptionContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_tempOption);
		int _la;
		try {
			setState(8709);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
			case GLOBAL:
			case TEMP:
			case TEMPORARY:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(8705);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==GLOBAL) {
					{
					setState(8704);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==GLOBAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(8707);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case UNLOGGED:
				enterOuterAlt(_localctx, 2);
				{
				setState(8708);
				match(UNLOGGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public ForeignServerVersionContext foreignServerVersion() {
			return getRuleContext(ForeignServerVersionContext.class,0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8711);
			match(CREATE);
			setState(8712);
			match(SERVER);
			setState(8716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
			case 1:
				{
				setState(8713);
				match(IF);
				setState(8714);
				match(NOT);
				setState(8715);
				match(EXISTS);
				}
				break;
			}
			setState(8718);
			name();
			setState(8721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(8719);
				match(TYPE);
				setState(8720);
				match(STRING_);
				}
			}

			setState(8724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(8723);
				foreignServerVersion();
				}
			}

			setState(8726);
			match(FOREIGN);
			setState(8727);
			match(DATA);
			setState(8728);
			match(WRAPPER);
			setState(8729);
			name();
			setState(8730);
			createGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStatisticsContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public CreateStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStatistics; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStatisticsContext createStatistics() throws RecognitionException {
		CreateStatisticsContext _localctx = new CreateStatisticsContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_createStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8732);
			match(CREATE);
			setState(8733);
			match(STATISTICS);
			setState(8737);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				setState(8734);
				match(IF);
				setState(8735);
				match(NOT);
				setState(8736);
				match(EXISTS);
				}
				break;
			}
			setState(8739);
			anyName();
			setState(8740);
			optNameList();
			setState(8741);
			match(ON);
			setState(8742);
			exprList(0);
			setState(8743);
			match(FROM);
			setState(8744);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSubscriptionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLStatementParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLStatementParser.CONNECTION, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public PublicationNameListContext publicationNameList() {
			return getRuleContext(PublicationNameListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreateSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSubscription; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSubscriptionContext createSubscription() throws RecognitionException {
		CreateSubscriptionContext _localctx = new CreateSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_createSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8746);
			match(CREATE);
			setState(8747);
			match(SUBSCRIPTION);
			setState(8748);
			name();
			setState(8749);
			match(CONNECTION);
			setState(8750);
			match(STRING_);
			setState(8751);
			match(PUBLICATION);
			setState(8752);
			publicationNameList();
			setState(8755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8753);
				match(WITH);
				setState(8754);
				definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PostgreSQLStatementParser.LOCATION, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceContext createTablespace() throws RecognitionException {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_createTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8757);
			match(CREATE);
			setState(8758);
			match(TABLESPACE);
			setState(8759);
			name();
			setState(8762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNER) {
				{
				setState(8760);
				match(OWNER);
				setState(8761);
				roleSpec();
				}
			}

			setState(8764);
			match(LOCATION);
			setState(8765);
			match(STRING_);
			setState(8768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8766);
				match(WITH);
				setState(8767);
				reloptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTextSearchContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public CreateTextSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTextSearch; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateTextSearch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTextSearchContext createTextSearch() throws RecognitionException {
		CreateTextSearchContext _localctx = new CreateTextSearchContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_createTextSearch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8770);
			match(CREATE);
			setState(8771);
			match(TEXT);
			setState(8772);
			match(SEARCH);
			setState(8773);
			_la = _input.LA(1);
			if ( !(((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (CONFIGURATION - 435)) | (1L << (DICTIONARY - 435)) | (1L << (PARSER - 435)))) != 0) || _la==TEMPLATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8774);
			anyName();
			setState(8775);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTransformContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TransformElementListContext transformElementList() {
			return getRuleContext(TransformElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLStatementParser.REPLACE, 0); }
		public CreateTransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTransform; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTransformContext createTransform() throws RecognitionException {
		CreateTransformContext _localctx = new CreateTransformContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_createTransform);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8777);
			match(CREATE);
			setState(8780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8778);
				match(OR);
				setState(8779);
				match(REPLACE);
				}
			}

			setState(8782);
			match(TRANSFORM);
			setState(8783);
			match(FOR);
			setState(8784);
			typeName();
			setState(8785);
			match(LANGUAGE);
			setState(8786);
			name();
			setState(8787);
			match(LP_);
			setState(8788);
			transformElementList();
			setState(8789);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public CreateTypeClausesContext createTypeClauses() {
			return getRuleContext(CreateTypeClausesContext.class,0);
		}
		public CreateTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeContext createType() throws RecognitionException {
		CreateTypeContext _localctx = new CreateTypeContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_createType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8791);
			match(CREATE);
			setState(8792);
			match(TYPE);
			setState(8793);
			anyName();
			setState(8794);
			createTypeClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeClausesContext extends ParserRuleContext {
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(PostgreSQLStatementParser.ENUM, 0); }
		public EnumValListContext enumValList() {
			return getRuleContext(EnumValListContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PostgreSQLStatementParser.RANGE, 0); }
		public CreateTypeClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTypeClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateTypeClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeClausesContext createTypeClauses() throws RecognitionException {
		CreateTypeClausesContext _localctx = new CreateTypeClausesContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_createTypeClauses);
		int _la;
		try {
			setState(8815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(8796);
					definition();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8799);
				match(AS);
				setState(8800);
				match(LP_);
				setState(8802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
					{
					setState(8801);
					tableFuncElementList();
					}
				}

				setState(8804);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8805);
				match(AS);
				setState(8806);
				match(ENUM);
				setState(8807);
				match(LP_);
				setState(8809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STRING_) {
					{
					setState(8808);
					enumValList();
					}
				}

				setState(8811);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8812);
				match(AS);
				setState(8813);
				match(RANGE);
				setState(8814);
				definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnumValListContext extends ParserRuleContext {
		public List<TerminalNode> STRING_() { return getTokens(PostgreSQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(PostgreSQLStatementParser.STRING_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public EnumValListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enumValList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitEnumValList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnumValListContext enumValList() throws RecognitionException {
		EnumValListContext _localctx = new EnumValListContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_enumValList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8817);
			match(STRING_);
			setState(8822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8818);
				match(COMMA_);
				setState(8819);
				match(STRING_);
				}
				}
				setState(8824);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserMappingContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public CreateUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserMapping; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserMappingContext createUserMapping() throws RecognitionException {
		CreateUserMappingContext _localctx = new CreateUserMappingContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_createUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8825);
			match(CREATE);
			setState(8826);
			match(USER);
			setState(8827);
			match(MAPPING);
			setState(8831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8828);
				match(IF);
				setState(8829);
				match(NOT);
				setState(8830);
				match(EXISTS);
				}
			}

			setState(8833);
			match(FOR);
			setState(8834);
			authIdent();
			setState(8835);
			match(SERVER);
			setState(8836);
			name();
			setState(8837);
			createGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PostgreSQLStatementParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLStatementParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLStatementParser.SEQUENCES, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public DiscardContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discard; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDiscard(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardContext discard() throws RecognitionException {
		DiscardContext _localctx = new DiscardContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_discard);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8839);
			match(DISCARD);
			setState(8840);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==TEMP || _la==TEMPORARY || _la==PLANS || _la==SEQUENCES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAccessMethodContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropAccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAccessMethod; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAccessMethodContext dropAccessMethod() throws RecognitionException {
		DropAccessMethodContext _localctx = new DropAccessMethodContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_dropAccessMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8842);
			match(DROP);
			setState(8843);
			match(ACCESS);
			setState(8844);
			match(METHOD);
			setState(8847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				{
				setState(8845);
				match(IF);
				setState(8846);
				match(EXISTS);
				}
				break;
			}
			setState(8849);
			name();
			setState(8851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8850);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAggregateContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesListContext aggregateWithArgtypesList() {
			return getRuleContext(AggregateWithArgtypesListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAggregate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAggregateContext dropAggregate() throws RecognitionException {
		DropAggregateContext _localctx = new DropAggregateContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_dropAggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8853);
			match(DROP);
			setState(8854);
			match(AGGREGATE);
			setState(8857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
			case 1:
				{
				setState(8855);
				match(IF);
				setState(8856);
				match(EXISTS);
				}
				break;
			}
			setState(8859);
			aggregateWithArgtypesList();
			setState(8861);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8860);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWithArgtypesListContext extends ParserRuleContext {
		public List<AggregateWithArgtypesContext> aggregateWithArgtypes() {
			return getRuleContexts(AggregateWithArgtypesContext.class);
		}
		public AggregateWithArgtypesContext aggregateWithArgtypes(int i) {
			return getRuleContext(AggregateWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public AggregateWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWithArgtypesList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAggregateWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWithArgtypesListContext aggregateWithArgtypesList() throws RecognitionException {
		AggregateWithArgtypesListContext _localctx = new AggregateWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_aggregateWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8863);
			aggregateWithArgtypes();
			setState(8868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8864);
				match(COMMA_);
				setState(8865);
				aggregateWithArgtypes();
				}
				}
				setState(8870);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCastContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCast; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropCast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCastContext dropCast() throws RecognitionException {
		DropCastContext _localctx = new DropCastContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_dropCast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8871);
			match(DROP);
			setState(8872);
			match(CAST);
			setState(8875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8873);
				match(IF);
				setState(8874);
				match(EXISTS);
				}
			}

			setState(8877);
			match(LP_);
			setState(8878);
			typeName();
			setState(8879);
			match(AS);
			setState(8880);
			typeName();
			setState(8881);
			match(RP_);
			setState(8883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8882);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCollationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLStatementParser.COLLATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCollation; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCollationContext dropCollation() throws RecognitionException {
		DropCollationContext _localctx = new DropCollationContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_dropCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8885);
			match(DROP);
			setState(8886);
			match(COLLATION);
			setState(8889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
			case 1:
				{
				setState(8887);
				match(IF);
				setState(8888);
				match(EXISTS);
				}
				break;
			}
			setState(8891);
			name();
			setState(8893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8892);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropConversionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLStatementParser.CONVERSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropConversion; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropConversionContext dropConversion() throws RecognitionException {
		DropConversionContext _localctx = new DropConversionContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_dropConversion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8895);
			match(DROP);
			setState(8896);
			match(CONVERSION);
			setState(8899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
			case 1:
				{
				setState(8897);
				match(IF);
				setState(8898);
				match(EXISTS);
				}
				break;
			}
			setState(8901);
			name();
			setState(8903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8902);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDomainContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDomain; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDomainContext dropDomain() throws RecognitionException {
		DropDomainContext _localctx = new DropDomainContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_dropDomain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8905);
			match(DROP);
			setState(8906);
			match(DOMAIN);
			setState(8909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
			case 1:
				{
				setState(8907);
				match(IF);
				setState(8908);
				match(EXISTS);
				}
				break;
			}
			setState(8911);
			nameList(0);
			setState(8913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8912);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEventTrigger; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventTriggerContext dropEventTrigger() throws RecognitionException {
		DropEventTriggerContext _localctx = new DropEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_dropEventTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8915);
			match(DROP);
			setState(8916);
			match(EVENT);
			setState(8917);
			match(TRIGGER);
			setState(8920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				{
				setState(8918);
				match(IF);
				setState(8919);
				match(EXISTS);
				}
				break;
			}
			setState(8922);
			name();
			setState(8924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8923);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropExtensionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLStatementParser.EXTENSION, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropExtension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropExtensionContext dropExtension() throws RecognitionException {
		DropExtensionContext _localctx = new DropExtensionContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_dropExtension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8926);
			match(DROP);
			setState(8927);
			match(EXTENSION);
			setState(8930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
			case 1:
				{
				setState(8928);
				match(IF);
				setState(8929);
				match(EXISTS);
				}
				break;
			}
			setState(8932);
			nameList(0);
			setState(8934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8933);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignDataWrapper; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignDataWrapperContext dropForeignDataWrapper() throws RecognitionException {
		DropForeignDataWrapperContext _localctx = new DropForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_dropForeignDataWrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8936);
			match(DROP);
			setState(8937);
			match(FOREIGN);
			setState(8938);
			match(DATA);
			setState(8939);
			match(WRAPPER);
			setState(8942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
			case 1:
				{
				setState(8940);
				match(IF);
				setState(8941);
				match(EXISTS);
				}
				break;
			}
			setState(8944);
			nameList(0);
			setState(8946);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8945);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropForeignTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignTableContext dropForeignTable() throws RecognitionException {
		DropForeignTableContext _localctx = new DropForeignTableContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_dropForeignTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8948);
			match(DROP);
			setState(8949);
			match(FOREIGN);
			setState(8950);
			match(TABLE);
			setState(8953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
			case 1:
				{
				setState(8951);
				match(IF);
				setState(8952);
				match(EXISTS);
				}
				break;
			}
			setState(8955);
			tableName();
			setState(8960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8956);
				match(COMMA_);
				setState(8957);
				tableName();
				}
				}
				setState(8962);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8963);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8966);
			match(DROP);
			setState(8967);
			match(FUNCTION);
			setState(8970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
			case 1:
				{
				setState(8968);
				match(IF);
				setState(8969);
				match(EXISTS);
				}
				break;
			}
			setState(8972);
			functionWithArgtypesList();
			setState(8974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8973);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionWithArgtypesListContext extends ParserRuleContext {
		public List<FunctionWithArgtypesContext> functionWithArgtypes() {
			return getRuleContexts(FunctionWithArgtypesContext.class);
		}
		public FunctionWithArgtypesContext functionWithArgtypes(int i) {
			return getRuleContext(FunctionWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public FunctionWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionWithArgtypesList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitFunctionWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionWithArgtypesListContext functionWithArgtypesList() throws RecognitionException {
		FunctionWithArgtypesListContext _localctx = new FunctionWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_functionWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8976);
			functionWithArgtypes();
			setState(8981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8977);
				match(COMMA_);
				setState(8978);
				functionWithArgtypes();
				}
				}
				setState(8983);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLanguageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLStatementParser.PROCEDURAL, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLanguage; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLanguageContext dropLanguage() throws RecognitionException {
		DropLanguageContext _localctx = new DropLanguageContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_dropLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8984);
			match(DROP);
			setState(8986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(8985);
				match(PROCEDURAL);
				}
			}

			setState(8988);
			match(LANGUAGE);
			setState(8991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				setState(8989);
				match(IF);
				setState(8990);
				match(EXISTS);
				}
				break;
			}
			setState(8993);
			name();
			setState(8995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(8994);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropMaterializedViewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropMaterializedView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropMaterializedViewContext dropMaterializedView() throws RecognitionException {
		DropMaterializedViewContext _localctx = new DropMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_dropMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8997);
			match(DROP);
			setState(8998);
			match(MATERIALIZED);
			setState(8999);
			match(VIEW);
			setState(9002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
			case 1:
				{
				setState(9000);
				match(IF);
				setState(9001);
				match(EXISTS);
				}
				break;
			}
			setState(9004);
			anyNameList();
			setState(9006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9005);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesListContext operatorWithArgtypesList() {
			return getRuleContext(OperatorWithArgtypesListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorContext dropOperator() throws RecognitionException {
		DropOperatorContext _localctx = new DropOperatorContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_dropOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9008);
			match(DROP);
			setState(9009);
			match(OPERATOR);
			setState(9012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
			case 1:
				{
				setState(9010);
				match(IF);
				setState(9011);
				match(EXISTS);
				}
				break;
			}
			setState(9014);
			operatorWithArgtypesList();
			setState(9016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9015);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorWithArgtypesListContext extends ParserRuleContext {
		public List<OperatorWithArgtypesContext> operatorWithArgtypes() {
			return getRuleContexts(OperatorWithArgtypesContext.class);
		}
		public OperatorWithArgtypesContext operatorWithArgtypes(int i) {
			return getRuleContext(OperatorWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public OperatorWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorWithArgtypesList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOperatorWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorWithArgtypesListContext operatorWithArgtypesList() throws RecognitionException {
		OperatorWithArgtypesListContext _localctx = new OperatorWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_operatorWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9018);
			operatorWithArgtypes();
			setState(9023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9019);
				match(COMMA_);
				setState(9020);
				operatorWithArgtypes();
				}
				}
				setState(9025);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorClassContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorClass; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorClassContext dropOperatorClass() throws RecognitionException {
		DropOperatorClassContext _localctx = new DropOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_dropOperatorClass);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9026);
			match(DROP);
			setState(9027);
			match(OPERATOR);
			setState(9028);
			match(CLASS);
			setState(9031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
			case 1:
				{
				setState(9029);
				match(IF);
				setState(9030);
				match(EXISTS);
				}
				break;
			}
			setState(9033);
			anyName();
			setState(9034);
			match(USING);
			setState(9035);
			name();
			setState(9037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9036);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorFamily; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorFamilyContext dropOperatorFamily() throws RecognitionException {
		DropOperatorFamilyContext _localctx = new DropOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_dropOperatorFamily);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9039);
			match(DROP);
			setState(9040);
			match(OPERATOR);
			setState(9041);
			match(FAMILY);
			setState(9044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
			case 1:
				{
				setState(9042);
				match(IF);
				setState(9043);
				match(EXISTS);
				}
				break;
			}
			setState(9046);
			anyName();
			setState(9047);
			match(USING);
			setState(9048);
			name();
			setState(9050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9049);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOwnedContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOwnedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOwned; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropOwned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOwnedContext dropOwned() throws RecognitionException {
		DropOwnedContext _localctx = new DropOwnedContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_dropOwned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9052);
			match(DROP);
			setState(9053);
			match(OWNED);
			setState(9054);
			match(BY);
			setState(9055);
			roleList();
			setState(9057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9056);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPolicyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPolicy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropPolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPolicyContext dropPolicy() throws RecognitionException {
		DropPolicyContext _localctx = new DropPolicyContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_dropPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9059);
			match(DROP);
			setState(9060);
			match(POLICY);
			setState(9063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
			case 1:
				{
				setState(9061);
				match(IF);
				setState(9062);
				match(EXISTS);
				}
				break;
			}
			setState(9065);
			name();
			setState(9066);
			match(ON);
			setState(9067);
			tableName();
			setState(9069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9068);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9071);
			match(DROP);
			setState(9072);
			match(PROCEDURE);
			setState(9075);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				setState(9073);
				match(IF);
				setState(9074);
				match(EXISTS);
				}
				break;
			}
			setState(9077);
			functionWithArgtypesList();
			setState(9079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9078);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPublicationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLStatementParser.PUBLICATION, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropPublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPublication; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropPublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPublicationContext dropPublication() throws RecognitionException {
		DropPublicationContext _localctx = new DropPublicationContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_dropPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9081);
			match(DROP);
			setState(9082);
			match(PUBLICATION);
			setState(9085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				setState(9083);
				match(IF);
				setState(9084);
				match(EXISTS);
				}
				break;
			}
			setState(9087);
			anyNameList();
			setState(9089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9088);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoutineContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoutine; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropRoutine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoutineContext dropRoutine() throws RecognitionException {
		DropRoutineContext _localctx = new DropRoutineContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_dropRoutine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9091);
			match(DROP);
			setState(9092);
			match(ROUTINE);
			setState(9095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
			case 1:
				{
				setState(9093);
				match(IF);
				setState(9094);
				match(EXISTS);
				}
				break;
			}
			setState(9097);
			functionWithArgtypesList();
			setState(9099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9098);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRuleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLStatementParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRule; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRuleContext dropRule() throws RecognitionException {
		DropRuleContext _localctx = new DropRuleContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_dropRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9101);
			match(DROP);
			setState(9102);
			match(RULE);
			setState(9105);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
			case 1:
				{
				setState(9103);
				match(IF);
				setState(9104);
				match(EXISTS);
				}
				break;
			}
			setState(9107);
			name();
			setState(9108);
			match(ON);
			setState(9109);
			tableName();
			setState(9111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9110);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSequence; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSequenceContext dropSequence() throws RecognitionException {
		DropSequenceContext _localctx = new DropSequenceContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_dropSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9113);
			match(DROP);
			setState(9114);
			match(SEQUENCE);
			setState(9117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				{
				setState(9115);
				match(IF);
				setState(9116);
				match(EXISTS);
				}
				break;
			}
			setState(9119);
			qualifiedNameList(0);
			setState(9121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9120);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9123);
			match(DROP);
			setState(9124);
			match(SERVER);
			setState(9127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
			case 1:
				{
				setState(9125);
				match(IF);
				setState(9126);
				match(EXISTS);
				}
				break;
			}
			setState(9129);
			qualifiedNameList(0);
			setState(9131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9130);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStatisticsContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLStatementParser.STATISTICS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatistics; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStatisticsContext dropStatistics() throws RecognitionException {
		DropStatisticsContext _localctx = new DropStatisticsContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_dropStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9133);
			match(DROP);
			setState(9134);
			match(STATISTICS);
			setState(9137);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
			case 1:
				{
				setState(9135);
				match(IF);
				setState(9136);
				match(EXISTS);
				}
				break;
			}
			setState(9139);
			qualifiedNameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSubscriptionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLStatementParser.SUBSCRIPTION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSubscription; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSubscriptionContext dropSubscription() throws RecognitionException {
		DropSubscriptionContext _localctx = new DropSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_dropSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9141);
			match(DROP);
			setState(9142);
			match(SUBSCRIPTION);
			setState(9145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				{
				setState(9143);
				match(IF);
				setState(9144);
				match(EXISTS);
				}
				break;
			}
			setState(9147);
			qualifiedName();
			setState(9149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9148);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_dropTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9151);
			match(DROP);
			setState(9152);
			match(TABLESPACE);
			setState(9155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				setState(9153);
				match(IF);
				setState(9154);
				match(EXISTS);
				}
				break;
			}
			setState(9157);
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTextSearchContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLStatementParser.SEARCH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLStatementParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLStatementParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLStatementParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLStatementParser.TEMPLATE, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTextSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTextSearch; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropTextSearch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTextSearchContext dropTextSearch() throws RecognitionException {
		DropTextSearchContext _localctx = new DropTextSearchContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_dropTextSearch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9159);
			match(DROP);
			setState(9160);
			match(TEXT);
			setState(9161);
			match(SEARCH);
			setState(9162);
			_la = _input.LA(1);
			if ( !(((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (CONFIGURATION - 435)) | (1L << (DICTIONARY - 435)) | (1L << (PARSER - 435)))) != 0) || _la==TEMPLATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
			case 1:
				{
				setState(9163);
				match(IF);
				setState(9164);
				match(EXISTS);
				}
				break;
			}
			setState(9167);
			name();
			setState(9169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9168);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTransformContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTransform; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTransformContext dropTransform() throws RecognitionException {
		DropTransformContext _localctx = new DropTransformContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_dropTransform);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9171);
			match(DROP);
			setState(9172);
			match(TRANSFORM);
			setState(9175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(9173);
				match(IF);
				setState(9174);
				match(EXISTS);
				}
			}

			setState(9177);
			match(FOR);
			setState(9178);
			typeName();
			setState(9179);
			match(LANGUAGE);
			setState(9180);
			name();
			setState(9182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9181);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9184);
			match(DROP);
			setState(9185);
			match(TRIGGER);
			setState(9188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
			case 1:
				{
				setState(9186);
				match(IF);
				setState(9187);
				match(EXISTS);
				}
				break;
			}
			setState(9190);
			qualifiedName();
			setState(9191);
			match(ON);
			setState(9192);
			tableName();
			setState(9194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9193);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTypeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTypeContext dropType() throws RecognitionException {
		DropTypeContext _localctx = new DropTypeContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_dropType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9196);
			match(DROP);
			setState(9197);
			match(TYPE);
			setState(9200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
			case 1:
				{
				setState(9198);
				match(IF);
				setState(9199);
				match(EXISTS);
				}
				break;
			}
			setState(9202);
			anyNameList();
			setState(9204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9203);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserMappingContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserMapping; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserMappingContext dropUserMapping() throws RecognitionException {
		DropUserMappingContext _localctx = new DropUserMappingContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_dropUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9206);
			match(DROP);
			setState(9207);
			match(USER);
			setState(9208);
			match(MAPPING);
			setState(9211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(9209);
				match(IF);
				setState(9210);
				match(EXISTS);
				}
			}

			setState(9213);
			match(FOR);
			setState(9214);
			authIdent();
			setState(9215);
			match(SERVER);
			setState(9216);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9218);
			match(DROP);
			setState(9219);
			match(VIEW);
			setState(9222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
			case 1:
				{
				setState(9220);
				match(IF);
				setState(9221);
				match(EXISTS);
				}
				break;
			}
			setState(9224);
			nameList(0);
			setState(9226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9225);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportForeignSchemaContext extends ParserRuleContext {
		public TerminalNode IMPORT() { return getToken(PostgreSQLStatementParser.IMPORT, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLStatementParser.INTO, 0); }
		public ImportQualificationContext importQualification() {
			return getRuleContext(ImportQualificationContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public ImportForeignSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importForeignSchema; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitImportForeignSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportForeignSchemaContext importForeignSchema() throws RecognitionException {
		ImportForeignSchemaContext _localctx = new ImportForeignSchemaContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_importForeignSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9228);
			match(IMPORT);
			setState(9229);
			match(FOREIGN);
			setState(9230);
			match(SCHEMA);
			setState(9231);
			name();
			setState(9233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT || _la==EXCEPT) {
				{
				setState(9232);
				importQualification();
				}
			}

			setState(9235);
			match(FROM);
			setState(9236);
			match(SERVER);
			setState(9237);
			name();
			setState(9238);
			match(INTO);
			setState(9239);
			name();
			setState(9241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(9240);
				createGenericOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportQualificationContext extends ParserRuleContext {
		public ImportQualificationTypeContext importQualificationType() {
			return getRuleContext(ImportQualificationTypeContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ImportQualificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importQualification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitImportQualification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportQualificationContext importQualification() throws RecognitionException {
		ImportQualificationContext _localctx = new ImportQualificationContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_importQualification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9243);
			importQualificationType();
			setState(9244);
			match(LP_);
			setState(9245);
			relationExprList();
			setState(9246);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportQualificationTypeContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLStatementParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLStatementParser.EXCEPT, 0); }
		public ImportQualificationTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importQualificationType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitImportQualificationType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportQualificationTypeContext importQualificationType() throws RecognitionException {
		ImportQualificationTypeContext _localctx = new ImportQualificationTypeContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_importQualificationType);
		try {
			setState(9251);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9248);
				match(LIMIT);
				setState(9249);
				match(TO);
				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9250);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListenContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(PostgreSQLStatementParser.LISTEN, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ListenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listen; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitListen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenContext listen() throws RecognitionException {
		ListenContext _localctx = new ListenContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_listen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9253);
			match(LISTEN);
			setState(9254);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MoveContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(PostgreSQLStatementParser.MOVE, 0); }
		public FetchArgsContext fetchArgs() {
			return getRuleContext(FetchArgsContext.class,0);
		}
		public MoveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_move; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitMove(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MoveContext move() throws RecognitionException {
		MoveContext _localctx = new MoveContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_move);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9256);
			match(MOVE);
			setState(9257);
			fetchArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(PostgreSQLStatementParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public PrepTypeClauseContext prepTypeClause() {
			return getRuleContext(PrepTypeClauseContext.class,0);
		}
		public PrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareContext prepare() throws RecognitionException {
		PrepareContext _localctx = new PrepareContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_prepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9259);
			match(PREPARE);
			setState(9260);
			name();
			setState(9262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(9261);
				prepTypeClause();
				}
			}

			setState(9264);
			match(AS);
			setState(9265);
			preparableStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepTypeClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public PrepTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepTypeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrepTypeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepTypeClauseContext prepTypeClause() throws RecognitionException {
		PrepTypeClauseContext _localctx = new PrepTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_prepTypeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9267);
			match(LP_);
			setState(9268);
			typeList();
			setState(9269);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshMaterializedViewContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLStatementParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public WithDataContext withData() {
			return getRuleContext(WithDataContext.class,0);
		}
		public RefreshMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshMaterializedView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRefreshMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshMaterializedViewContext refreshMaterializedView() throws RecognitionException {
		RefreshMaterializedViewContext _localctx = new RefreshMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_refreshMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9271);
			match(REFRESH);
			setState(9272);
			match(MATERIALIZED);
			setState(9273);
			match(VIEW);
			setState(9275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(9274);
				match(CONCURRENTLY);
				}
			}

			setState(9277);
			qualifiedName();
			setState(9279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9278);
				withData();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReIndexContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(PostgreSQLStatementParser.REINDEX, 0); }
		public ReIndexClausesContext reIndexClauses() {
			return getRuleContext(ReIndexClausesContext.class,0);
		}
		public ReIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReIndexContext reIndex() throws RecognitionException {
		ReIndexContext _localctx = new ReIndexContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_reIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9281);
			match(REINDEX);
			setState(9282);
			reIndexClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReIndexClausesContext extends ParserRuleContext {
		public ReindexTargetTypeContext reindexTargetType() {
			return getRuleContext(ReindexTargetTypeContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLStatementParser.CONCURRENTLY, 0); }
		public ReindexTargetMultitableContext reindexTargetMultitable() {
			return getRuleContext(ReindexTargetMultitableContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ReindexOptionListContext reindexOptionList() {
			return getRuleContext(ReindexOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ReIndexClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reIndexClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReIndexClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReIndexClausesContext reIndexClauses() throws RecognitionException {
		ReIndexClausesContext _localctx = new ReIndexClausesContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_reIndexClauses);
		int _la;
		try {
			setState(9314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,885,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9284);
				reindexTargetType();
				setState(9286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(9285);
					match(CONCURRENTLY);
					}
				}

				setState(9288);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9290);
				reindexTargetMultitable();
				setState(9292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(9291);
					match(CONCURRENTLY);
					}
				}

				setState(9294);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9296);
				match(LP_);
				setState(9297);
				reindexOptionList();
				setState(9298);
				match(RP_);
				setState(9299);
				reindexTargetType();
				setState(9301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(9300);
					match(CONCURRENTLY);
					}
				}

				setState(9303);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9305);
				match(LP_);
				setState(9306);
				reindexOptionList();
				setState(9307);
				match(RP_);
				setState(9308);
				reindexTargetMultitable();
				setState(9310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(9309);
					match(CONCURRENTLY);
					}
				}

				setState(9312);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexOptionListContext extends ParserRuleContext {
		public List<ReindexOptionElemContext> reindexOptionElem() {
			return getRuleContexts(ReindexOptionElemContext.class);
		}
		public ReindexOptionElemContext reindexOptionElem(int i) {
			return getRuleContext(ReindexOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ReindexOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReindexOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexOptionListContext reindexOptionList() throws RecognitionException {
		ReindexOptionListContext _localctx = new ReindexOptionListContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_reindexOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9316);
			reindexOptionElem();
			setState(9321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9317);
				match(COMMA_);
				setState(9318);
				reindexOptionElem();
				}
				}
				setState(9323);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexOptionElemContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public ReindexOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexOptionElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReindexOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexOptionElemContext reindexOptionElem() throws RecognitionException {
		ReindexOptionElemContext _localctx = new ReindexOptionElemContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_reindexOptionElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9324);
			match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexTargetMultitableContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLStatementParser.SYSTEM, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public ReindexTargetMultitableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexTargetMultitable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReindexTargetMultitable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexTargetMultitableContext reindexTargetMultitable() throws RecognitionException {
		ReindexTargetMultitableContext _localctx = new ReindexTargetMultitableContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_reindexTargetMultitable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9326);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==DATABASE || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexTargetTypeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLStatementParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public ReindexTargetTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexTargetType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReindexTargetType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexTargetTypeContext reindexTargetType() throws RecognitionException {
		ReindexTargetTypeContext _localctx = new ReindexTargetTypeContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_reindexTargetType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9328);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignTableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public AlterForeignTableClausesContext alterForeignTableClauses() {
			return getRuleContext(AlterForeignTableClausesContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public AlterForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableContext alterForeignTable() throws RecognitionException {
		AlterForeignTableContext _localctx = new AlterForeignTableContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_alterForeignTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9330);
			match(ALTER);
			setState(9331);
			match(FOREIGN);
			setState(9332);
			match(TABLE);
			setState(9335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
			case 1:
				{
				setState(9333);
				match(IF);
				setState(9334);
				match(EXISTS);
				}
				break;
			}
			setState(9337);
			relationExpr();
			setState(9338);
			alterForeignTableClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignTableClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public AlterForeignTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTableClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterForeignTableClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableClausesContext alterForeignTableClauses() throws RecognitionException {
		AlterForeignTableClausesContext _localctx = new AlterForeignTableClausesContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_alterForeignTableClauses);
		int _la;
		try {
			setState(9355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9340);
				match(RENAME);
				setState(9341);
				match(TO);
				setState(9342);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9343);
				match(RENAME);
				setState(9345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(9344);
					match(COLUMN);
					}
				}

				setState(9347);
				name();
				setState(9348);
				match(TO);
				setState(9349);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9351);
				alterTableCmds();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9352);
				match(SET);
				setState(9353);
				match(SCHEMA);
				setState(9354);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreateOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorContext createOperator() throws RecognitionException {
		CreateOperatorContext _localctx = new CreateOperatorContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_createOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9357);
			match(CREATE);
			setState(9358);
			match(OPERATOR);
			setState(9359);
			anyOperator();
			setState(9360);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorClassContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLStatementParser.CLASS, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public OpclassItemListContext opclassItemList() {
			return getRuleContext(OpclassItemListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public CreateOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorClass; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorClassContext createOperatorClass() throws RecognitionException {
		CreateOperatorClassContext _localctx = new CreateOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_createOperatorClass);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9362);
			match(CREATE);
			setState(9363);
			match(OPERATOR);
			setState(9364);
			match(CLASS);
			setState(9365);
			anyName();
			setState(9367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(9366);
				match(DEFAULT);
				}
			}

			setState(9369);
			match(FOR);
			setState(9370);
			match(TYPE);
			setState(9371);
			typeName();
			setState(9372);
			match(USING);
			setState(9373);
			name();
			setState(9376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FAMILY) {
				{
				setState(9374);
				match(FAMILY);
				setState(9375);
				anyName();
				}
			}

			setState(9378);
			match(AS);
			setState(9379);
			opclassItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorFamily; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorFamilyContext createOperatorFamily() throws RecognitionException {
		CreateOperatorFamilyContext _localctx = new CreateOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_createOperatorFamily);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9381);
			match(CREATE);
			setState(9382);
			match(OPERATOR);
			setState(9383);
			match(FAMILY);
			setState(9384);
			anyName();
			setState(9385);
			match(USING);
			setState(9386);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityLabelStmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(PostgreSQLStatementParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLStatementParser.LABEL, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public SecurityLabelClauscesContext securityLabelClausces() {
			return getRuleContext(SecurityLabelClauscesContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLStatementParser.IS, 0); }
		public SecurityLabelContext securityLabel() {
			return getRuleContext(SecurityLabelContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public SecurityLabelStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabelStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSecurityLabelStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelStmtContext securityLabelStmt() throws RecognitionException {
		SecurityLabelStmtContext _localctx = new SecurityLabelStmtContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_securityLabelStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9388);
			match(SECURITY);
			setState(9389);
			match(LABEL);
			{
			setState(9390);
			match(FOR);
			setState(9391);
			nonReservedWordOrSconst();
			}
			setState(9393);
			match(ON);
			setState(9394);
			securityLabelClausces();
			setState(9395);
			match(IS);
			setState(9396);
			securityLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityLabelContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public SecurityLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSecurityLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelContext securityLabel() throws RecognitionException {
		SecurityLabelContext _localctx = new SecurityLabelContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_securityLabel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9398);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityLabelClauscesContext extends ParserRuleContext {
		public ObjectTypeAnyNameContext objectTypeAnyName() {
			return getRuleContext(ObjectTypeAnyNameContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLStatementParser.COLUMN, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLStatementParser.AGGREGATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public SecurityLabelClauscesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabelClausces; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSecurityLabelClausces(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelClauscesContext securityLabelClausces() throws RecognitionException {
		SecurityLabelClauscesContext _localctx = new SecurityLabelClauscesContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_securityLabelClausces);
		int _la;
		try {
			setState(9414);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case INDEX:
			case FOREIGN:
			case VIEW:
			case COLLATION:
			case TEXT:
			case SEQUENCE:
			case STATISTICS:
			case MATERIALIZED:
			case CONVERSION:
				enterOuterAlt(_localctx, 1);
				{
				setState(9400);
				objectTypeAnyName();
				setState(9401);
				anyName();
				}
				break;
			case COLUMN:
				enterOuterAlt(_localctx, 2);
				{
				setState(9403);
				match(COLUMN);
				setState(9404);
				anyName();
				}
				break;
			case TYPE:
			case DOMAIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(9405);
				_la = _input.LA(1);
				if ( !(_la==TYPE || _la==DOMAIN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9406);
				typeName();
				}
				break;
			case FUNCTION:
			case AGGREGATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(9407);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==AGGREGATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9408);
				aggregateWithArgtypes();
				}
				break;
			case LARGE:
				enterOuterAlt(_localctx, 5);
				{
				setState(9409);
				match(LARGE);
				setState(9410);
				match(OBJECT);
				setState(9411);
				numericOnly();
				}
				break;
			case PROCEDURE:
			case ROUTINE:
				enterOuterAlt(_localctx, 6);
				{
				setState(9412);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==ROUTINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9413);
				functionWithArgtypes();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlistenContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLStatementParser.UNLISTEN, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public UnlistenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlisten; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitUnlisten(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenContext unlisten() throws RecognitionException {
		UnlistenContext _localctx = new UnlistenContext(_ctx, getState());
		enterRule(_localctx, 1334, RULE_unlisten);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9416);
			match(UNLISTEN);
			setState(9419);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(9417);
				colId();
				}
				break;
			case ASTERISK_:
				{
				setState(9418);
				match(ASTERISK_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLStatementParser.AS, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLStatementParser.SNAPSHOT, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public SetTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionContext setTransaction() throws RecognitionException {
		SetTransactionContext _localctx = new SetTransactionContext(_ctx, getState());
		enterRule(_localctx, 1336, RULE_setTransaction);
		int _la;
		try {
			setState(9433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9421);
				match(SET);
				setState(9425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SESSION) {
					{
					setState(9422);
					match(SESSION);
					setState(9423);
					match(CHARACTERISTICS);
					setState(9424);
					match(AS);
					}
				}

				setState(9427);
				match(TRANSACTION);
				setState(9428);
				transactionModeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9429);
				match(SET);
				setState(9430);
				match(TRANSACTION);
				setState(9431);
				match(SNAPSHOT);
				setState(9432);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginTransactionContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PostgreSQLStatementParser.BEGIN, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public BeginTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitBeginTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginTransactionContext beginTransaction() throws RecognitionException {
		BeginTransactionContext _localctx = new BeginTransactionContext(_ctx, getState());
		enterRule(_localctx, 1338, RULE_beginTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9435);
			match(BEGIN);
			setState(9437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(9436);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT || ((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (ISOLATION - 218)) | (1L << (READ - 218)) | (1L << (DEFERRABLE - 218)))) != 0)) {
				{
				setState(9439);
				transactionModeList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PostgreSQLStatementParser.COMMIT, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLStatementParser.CHAIN, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public CommitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCommit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitContext commit() throws RecognitionException {
		CommitContext _localctx = new CommitContext(_ctx, getState());
		enterRule(_localctx, 1340, RULE_commit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9442);
			match(COMMIT);
			setState(9444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(9443);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9451);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(9446);
				match(AND);
				setState(9448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(9447);
					match(NO);
					}
				}

				setState(9450);
				match(CHAIN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLStatementParser.SAVEPOINT, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public SavepointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSavepoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointContext savepoint() throws RecognitionException {
		SavepointContext _localctx = new SavepointContext(_ctx, getState());
		enterRule(_localctx, 1342, RULE_savepoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9453);
			match(SAVEPOINT);
			setState(9454);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AbortContext extends ParserRuleContext {
		public TerminalNode ABORT() { return getToken(PostgreSQLStatementParser.ABORT, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLStatementParser.CHAIN, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public AbortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abort; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAbort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AbortContext abort() throws RecognitionException {
		AbortContext _localctx = new AbortContext(_ctx, getState());
		enterRule(_localctx, 1344, RULE_abort);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9456);
			match(ABORT);
			setState(9458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(9457);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(9460);
				match(AND);
				setState(9462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(9461);
					match(NO);
					}
				}

				setState(9464);
				match(CHAIN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PostgreSQLStatementParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 1346, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9467);
			match(START);
			setState(9468);
			match(TRANSACTION);
			setState(9470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT || ((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (ISOLATION - 218)) | (1L << (READ - 218)) | (1L << (DEFERRABLE - 218)))) != 0)) {
				{
				setState(9469);
				transactionModeList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EndContext extends ParserRuleContext {
		public TerminalNode END() { return getToken(PostgreSQLStatementParser.END, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLStatementParser.CHAIN, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public EndContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitEnd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EndContext end() throws RecognitionException {
		EndContext _localctx = new EndContext(_ctx, getState());
		enterRule(_localctx, 1348, RULE_end);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9472);
			match(END);
			setState(9474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(9473);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(9476);
				match(AND);
				setState(9478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(9477);
					match(NO);
					}
				}

				setState(9480);
				match(CHAIN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLStatementParser.CHAIN, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLStatementParser.NO, 0); }
		public RollbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRollback(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackContext rollback() throws RecognitionException {
		RollbackContext _localctx = new RollbackContext(_ctx, getState());
		enterRule(_localctx, 1350, RULE_rollback);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9483);
			match(ROLLBACK);
			setState(9485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(9484);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(9487);
				match(AND);
				setState(9489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(9488);
					match(NO);
					}
				}

				setState(9491);
				match(CHAIN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseSavepointContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(PostgreSQLStatementParser.RELEASE, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLStatementParser.SAVEPOINT, 0); }
		public ReleaseSavepointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseSavepoint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReleaseSavepoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseSavepointContext releaseSavepoint() throws RecognitionException {
		ReleaseSavepointContext _localctx = new ReleaseSavepointContext(_ctx, getState());
		enterRule(_localctx, 1352, RULE_releaseSavepoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9494);
			match(RELEASE);
			setState(9496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,911,_ctx) ) {
			case 1:
				{
				setState(9495);
				match(SAVEPOINT);
				}
				break;
			}
			setState(9498);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackToSavepointContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLStatementParser.SAVEPOINT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLStatementParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public RollbackToSavepointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackToSavepoint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRollbackToSavepoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackToSavepointContext rollbackToSavepoint() throws RecognitionException {
		RollbackToSavepointContext _localctx = new RollbackToSavepointContext(_ctx, getState());
		enterRule(_localctx, 1354, RULE_rollbackToSavepoint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9500);
			match(ROLLBACK);
			setState(9502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(9501);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9504);
			match(TO);
			setState(9506);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
			case 1:
				{
				setState(9505);
				match(SAVEPOINT);
				}
				break;
			}
			setState(9508);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareTransactionContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(PostgreSQLStatementParser.PREPARE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public PrepareTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrepareTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareTransactionContext prepareTransaction() throws RecognitionException {
		PrepareTransactionContext _localctx = new PrepareTransactionContext(_ctx, getState());
		enterRule(_localctx, 1356, RULE_prepareTransaction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9510);
			match(PREPARE);
			setState(9511);
			match(TRANSACTION);
			setState(9512);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitPreparedContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PostgreSQLStatementParser.COMMIT, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLStatementParser.PREPARED, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public CommitPreparedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitPrepared; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCommitPrepared(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitPreparedContext commitPrepared() throws RecognitionException {
		CommitPreparedContext _localctx = new CommitPreparedContext(_ctx, getState());
		enterRule(_localctx, 1358, RULE_commitPrepared);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9514);
			match(COMMIT);
			setState(9515);
			match(PREPARED);
			setState(9516);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackPreparedContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLStatementParser.PREPARED, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public RollbackPreparedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackPrepared; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRollbackPrepared(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackPreparedContext rollbackPrepared() throws RecognitionException {
		RollbackPreparedContext _localctx = new RollbackPreparedContext(_ctx, getState());
		enterRule(_localctx, 1360, RULE_rollbackPrepared);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9518);
			match(ROLLBACK);
			setState(9519);
			match(PREPARED);
			setState(9520);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public PrivilegeClauseContext privilegeClause() {
			return getRuleContext(PrivilegeClauseContext.class,0);
		}
		public RoleClauseContext roleClause() {
			return getRuleContext(RoleClauseContext.class,0);
		}
		public GrantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitGrant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantContext grant() throws RecognitionException {
		GrantContext _localctx = new GrantContext(_ctx, getState());
		enterRule(_localctx, 1362, RULE_grant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9522);
			match(GRANT);
			setState(9525);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
			case 1:
				{
				setState(9523);
				privilegeClause();
				}
				break;
			case 2:
				{
				setState(9524);
				roleClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLStatementParser.REVOKE, 0); }
		public PrivilegeClauseContext privilegeClause() {
			return getRuleContext(PrivilegeClauseContext.class,0);
		}
		public RoleClauseContext roleClause() {
			return getRuleContext(RoleClauseContext.class,0);
		}
		public OptionForClauseContext optionForClause() {
			return getRuleContext(OptionForClauseContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(PostgreSQLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLStatementParser.RESTRICT, 0); }
		public RevokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeContext revoke() throws RecognitionException {
		RevokeContext _localctx = new RevokeContext(_ctx, getState());
		enterRule(_localctx, 1364, RULE_revoke);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9527);
			match(REVOKE);
			setState(9529);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				{
				setState(9528);
				optionForClause();
				}
				break;
			}
			setState(9533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				{
				setState(9531);
				privilegeClause();
				}
				break;
			case 2:
				{
				setState(9532);
				roleClause();
				}
				break;
			}
			setState(9536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9535);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeClauseContext extends ParserRuleContext {
		public PrivilegeTypesContext privilegeTypes() {
			return getRuleContext(PrivilegeTypesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLStatementParser.ON, 0); }
		public OnObjectClauseContext onObjectClause() {
			return getRuleContext(OnObjectClauseContext.class,0);
		}
		public GranteeListContext granteeList() {
			return getRuleContext(GranteeListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public PrivilegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrivilegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeClauseContext privilegeClause() throws RecognitionException {
		PrivilegeClauseContext _localctx = new PrivilegeClauseContext(_ctx, getState());
		enterRule(_localctx, 1366, RULE_privilegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9538);
			privilegeTypes();
			setState(9539);
			match(ON);
			setState(9540);
			onObjectClause();
			setState(9541);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9542);
			granteeList();
			setState(9546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9543);
				match(WITH);
				setState(9544);
				match(GRANT);
				setState(9545);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleClauseContext extends ParserRuleContext {
		public PrivilegeListContext privilegeList() {
			return getRuleContext(PrivilegeListContext.class,0);
		}
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLStatementParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLStatementParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public RoleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRoleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleClauseContext roleClause() throws RecognitionException {
		RoleClauseContext _localctx = new RoleClauseContext(_ctx, getState());
		enterRule(_localctx, 1368, RULE_roleClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9548);
			privilegeList();
			setState(9549);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9550);
			roleList();
			setState(9554);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9551);
				match(WITH);
				setState(9552);
				match(ADMIN);
				setState(9553);
				match(OPTION);
				}
			}

			setState(9559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GRANTED) {
				{
				setState(9556);
				match(GRANTED);
				setState(9557);
				match(BY);
				setState(9558);
				roleSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionForClauseContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLStatementParser.FOR, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLStatementParser.GRANT, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLStatementParser.ADMIN, 0); }
		public OptionForClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionForClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOptionForClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionForClauseContext optionForClause() throws RecognitionException {
		OptionForClauseContext _localctx = new OptionForClauseContext(_ctx, getState());
		enterRule(_localctx, 1370, RULE_optionForClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9561);
			_la = _input.LA(1);
			if ( !(_la==GRANT || _la==ADMIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9562);
			match(OPTION);
			setState(9563);
			match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeTypesContext extends ParserRuleContext {
		public List<PrivilegeTypeContext> privilegeType() {
			return getRuleContexts(PrivilegeTypeContext.class);
		}
		public PrivilegeTypeContext privilegeType(int i) {
			return getRuleContext(PrivilegeTypeContext.class,i);
		}
		public List<ColumnNamesContext> columnNames() {
			return getRuleContexts(ColumnNamesContext.class);
		}
		public ColumnNamesContext columnNames(int i) {
			return getRuleContext(ColumnNamesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public PrivilegeTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeTypes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrivilegeTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeTypesContext privilegeTypes() throws RecognitionException {
		PrivilegeTypesContext _localctx = new PrivilegeTypesContext(_ctx, getState());
		enterRule(_localctx, 1372, RULE_privilegeTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9565);
			privilegeType();
			setState(9567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(9566);
				columnNames();
				}
			}

			setState(9576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9569);
				match(COMMA_);
				setState(9570);
				privilegeType();
				setState(9572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(9571);
					columnNames();
					}
				}

				}
				}
				setState(9578);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeTypeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLStatementParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLStatementParser.DELETE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLStatementParser.TRUNCATE, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLStatementParser.REFERENCES, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLStatementParser.TRIGGER, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode CONNECT() { return getToken(PostgreSQLStatementParser.CONNECT, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLStatementParser.TEMP, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLStatementParser.EXECUTE, 0); }
		public TerminalNode USAGE() { return getToken(PostgreSQLStatementParser.USAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLStatementParser.PRIVILEGES, 0); }
		public PrivilegeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrivilegeType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeTypeContext privilegeType() throws RecognitionException {
		PrivilegeTypeContext _localctx = new PrivilegeTypeContext(_ctx, getState());
		enterRule(_localctx, 1374, RULE_privilegeType);
		int _la;
		try {
			setState(9596);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9579);
				match(SELECT);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9580);
				match(INSERT);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(9581);
				match(UPDATE);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(9582);
				match(DELETE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(9583);
				match(TRUNCATE);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 6);
				{
				setState(9584);
				match(REFERENCES);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 7);
				{
				setState(9585);
				match(TRIGGER);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 8);
				{
				setState(9586);
				match(CREATE);
				}
				break;
			case CONNECT:
				enterOuterAlt(_localctx, 9);
				{
				setState(9587);
				match(CONNECT);
				}
				break;
			case TEMPORARY:
				enterOuterAlt(_localctx, 10);
				{
				setState(9588);
				match(TEMPORARY);
				}
				break;
			case TEMP:
				enterOuterAlt(_localctx, 11);
				{
				setState(9589);
				match(TEMP);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 12);
				{
				setState(9590);
				match(EXECUTE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 13);
				{
				setState(9591);
				match(USAGE);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 14);
				{
				setState(9592);
				match(ALL);
				setState(9594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(9593);
					match(PRIVILEGES);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnObjectClauseContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLStatementParser.DOMAIN, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLStatementParser.ROUTINE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLStatementParser.OBJECT, 0); }
		public NumericOnlyListContext numericOnlyList() {
			return getRuleContext(NumericOnlyListContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLStatementParser.TYPE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLStatementParser.SEQUENCE, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLStatementParser.TABLE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLStatementParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLStatementParser.SERVER, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLStatementParser.TABLES, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLStatementParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLStatementParser.FUNCTIONS, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLStatementParser.PROCEDURES, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLStatementParser.ROUTINES, 0); }
		public OnObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onObjectClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitOnObjectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnObjectClauseContext onObjectClause() throws RecognitionException {
		OnObjectClauseContext _localctx = new OnObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 1376, RULE_onObjectClause);
		int _la;
		try {
			setState(9657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9598);
				match(DATABASE);
				setState(9599);
				nameList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9600);
				match(SCHEMA);
				setState(9601);
				nameList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9602);
				match(DOMAIN);
				setState(9603);
				anyNameList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9604);
				match(FUNCTION);
				setState(9605);
				functionWithArgtypesList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9606);
				match(PROCEDURE);
				setState(9607);
				functionWithArgtypesList();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9608);
				match(ROUTINE);
				setState(9609);
				functionWithArgtypesList();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9610);
				match(LANGUAGE);
				setState(9611);
				nameList(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9612);
				match(LARGE);
				setState(9613);
				match(OBJECT);
				setState(9614);
				numericOnlyList();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9615);
				match(TABLESPACE);
				setState(9616);
				nameList(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9617);
				match(TYPE);
				setState(9618);
				anyNameList();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9619);
				match(SEQUENCE);
				setState(9620);
				qualifiedNameList(0);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(9621);
					match(TABLE);
					}
				}

				setState(9624);
				privilegeLevel();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9625);
				match(FOREIGN);
				setState(9626);
				match(DATA);
				setState(9627);
				match(WRAPPER);
				setState(9628);
				nameList(0);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9629);
				match(FOREIGN);
				setState(9630);
				match(SERVER);
				setState(9631);
				nameList(0);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9632);
				match(ALL);
				setState(9633);
				match(TABLES);
				setState(9634);
				match(IN);
				setState(9635);
				match(SCHEMA);
				setState(9636);
				nameList(0);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9637);
				match(ALL);
				setState(9638);
				match(SEQUENCES);
				setState(9639);
				match(IN);
				setState(9640);
				match(SCHEMA);
				setState(9641);
				nameList(0);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9642);
				match(ALL);
				setState(9643);
				match(FUNCTIONS);
				setState(9644);
				match(IN);
				setState(9645);
				match(SCHEMA);
				setState(9646);
				nameList(0);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(9647);
				match(ALL);
				setState(9648);
				match(PROCEDURES);
				setState(9649);
				match(IN);
				setState(9650);
				match(SCHEMA);
				setState(9651);
				nameList(0);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(9652);
				match(ALL);
				setState(9653);
				match(ROUTINES);
				setState(9654);
				match(IN);
				setState(9655);
				match(SCHEMA);
				setState(9656);
				nameList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public TerminalNode DOT_ASTERISK_() { return getToken(PostgreSQLStatementParser.DOT_ASTERISK_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(PostgreSQLStatementParser.DOT_, 0); }
		public RoutineNameContext routineName() {
			return getRuleContext(RoutineNameContext.class,0);
		}
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitPrivilegeLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 1378, RULE_privilegeLevel);
		try {
			setState(9670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9659);
				match(ASTERISK_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9660);
				match(ASTERISK_);
				setState(9661);
				match(DOT_ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9662);
				identifier();
				setState(9663);
				match(DOT_ASTERISK_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9665);
				tableNames();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9666);
				schemaName();
				setState(9667);
				match(DOT_);
				setState(9668);
				routineName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RoutineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRoutineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineNameContext routineName() throws RecognitionException {
		RoutineNameContext _localctx = new RoutineNameContext(_ctx, getState());
		enterRule(_localctx, 1380, RULE_routineName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9672);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnlyListContext extends ParserRuleContext {
		public List<NumericOnlyContext> numericOnly() {
			return getRuleContexts(NumericOnlyContext.class);
		}
		public NumericOnlyContext numericOnly(int i) {
			return getRuleContext(NumericOnlyContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public NumericOnlyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnlyList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitNumericOnlyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyListContext numericOnlyList() throws RecognitionException {
		NumericOnlyListContext _localctx = new NumericOnlyListContext(_ctx, getState());
		enterRule(_localctx, 1382, RULE_numericOnlyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9674);
			numericOnly();
			setState(9679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9675);
				match(COMMA_);
				setState(9676);
				numericOnly();
				}
				}
				setState(9681);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public List<CreateOptRoleElemContext> createOptRoleElem() {
			return getRuleContexts(CreateOptRoleElemContext.class);
		}
		public CreateOptRoleElemContext createOptRoleElem(int i) {
			return getRuleContext(CreateOptRoleElemContext.class,i);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 1384, RULE_createUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9682);
			match(CREATE);
			setState(9683);
			match(USER);
			setState(9684);
			roleSpec();
			setState(9686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9685);
				match(WITH);
				}
			}

			setState(9691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (IN - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (USER - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
				{
				{
				setState(9688);
				createOptRoleElem();
				}
				}
				setState(9693);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOptRoleElemContext extends ParserRuleContext {
		public AlterOptRoleElemContext alterOptRoleElem() {
			return getRuleContext(AlterOptRoleElemContext.class,0);
		}
		public TerminalNode SYSID() { return getToken(PostgreSQLStatementParser.SYSID, 0); }
		public TerminalNode NUMBER_() { return getToken(PostgreSQLStatementParser.NUMBER_, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLStatementParser.ADMIN, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public CreateOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOptRoleElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOptRoleElemContext createOptRoleElem() throws RecognitionException {
		CreateOptRoleElemContext _localctx = new CreateOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 1386, RULE_createOptRoleElem);
		try {
			setState(9707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9694);
				alterOptRoleElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9695);
				match(SYSID);
				setState(9696);
				match(NUMBER_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9697);
				match(ADMIN);
				setState(9698);
				roleList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9699);
				match(ROLE);
				setState(9700);
				roleList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9701);
				match(IN);
				setState(9702);
				match(ROLE);
				setState(9703);
				roleList();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9704);
				match(IN);
				setState(9705);
				match(GROUP);
				setState(9706);
				roleList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOptRoleElemContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(PostgreSQLStatementParser.PASSWORD, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLStatementParser.NULL, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLStatementParser.ENCRYPTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLStatementParser.UNENCRYPTED, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLStatementParser.INHERIT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLStatementParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLStatementParser.LIMIT, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLStatementParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLStatementParser.UNTIL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOptRoleElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOptRoleElemContext alterOptRoleElem() throws RecognitionException {
		AlterOptRoleElemContext _localctx = new AlterOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 1388, RULE_alterOptRoleElem);
		try {
			setState(9729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9709);
				match(PASSWORD);
				setState(9710);
				match(STRING_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9711);
				match(PASSWORD);
				setState(9712);
				match(NULL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9713);
				match(ENCRYPTED);
				setState(9714);
				match(PASSWORD);
				setState(9715);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9716);
				match(UNENCRYPTED);
				setState(9717);
				match(PASSWORD);
				setState(9718);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9719);
				match(INHERIT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9720);
				match(CONNECTION);
				setState(9721);
				match(LIMIT);
				setState(9722);
				signedIconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9723);
				match(VALID);
				setState(9724);
				match(UNTIL);
				setState(9725);
				match(STRING_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9726);
				match(USER);
				setState(9727);
				roleList();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9728);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 1390, RULE_dropUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9731);
			match(DROP);
			setState(9732);
			match(USER);
			setState(9735);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
			case 1:
				{
				setState(9733);
				match(IF);
				setState(9734);
				match(EXISTS);
				}
				break;
			}
			setState(9737);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLStatementParser.USER, 0); }
		public AlterUserClausesContext alterUserClauses() {
			return getRuleContext(AlterUserClausesContext.class,0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 1392, RULE_alterUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9739);
			match(ALTER);
			setState(9740);
			match(USER);
			setState(9741);
			alterUserClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserClausesContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public AlterOptRoleListContext alterOptRoleList() {
			return getRuleContext(AlterOptRoleListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public TerminalNode IN() { return getToken(PostgreSQLStatementParser.IN, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLStatementParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public AlterUserClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterUserClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserClausesContext alterUserClauses() throws RecognitionException {
		AlterUserClausesContext _localctx = new AlterUserClausesContext(_ctx, getState());
		enterRule(_localctx, 1394, RULE_alterUserClauses);
		int _la;
		try {
			setState(9769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9743);
				roleSpec();
				setState(9745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(9744);
					match(WITH);
					}
				}

				setState(9747);
				alterOptRoleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9749);
				roleSpec();
				setState(9753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(9750);
					match(IN);
					setState(9751);
					match(DATABASE);
					setState(9752);
					name();
					}
				}

				setState(9755);
				setResetClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9757);
				match(ALL);
				setState(9761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(9758);
					match(IN);
					setState(9759);
					match(DATABASE);
					setState(9760);
					name();
					}
				}

				setState(9763);
				setResetClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9764);
				roleSpec();
				setState(9765);
				match(RENAME);
				setState(9766);
				match(TO);
				setState(9767);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOptRoleListContext extends ParserRuleContext {
		public List<AlterOptRoleElemContext> alterOptRoleElem() {
			return getRuleContexts(AlterOptRoleElemContext.class);
		}
		public AlterOptRoleElemContext alterOptRoleElem(int i) {
			return getRuleContext(AlterOptRoleElemContext.class,i);
		}
		public AlterOptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOptRoleList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterOptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOptRoleListContext alterOptRoleList() throws RecognitionException {
		AlterOptRoleListContext _localctx = new AlterOptRoleListContext(_ctx, getState());
		enterRule(_localctx, 1396, RULE_alterOptRoleList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9774);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (USER - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
				{
				{
				setState(9771);
				alterOptRoleElem();
				}
				}
				setState(9776);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public List<CreateOptRoleElemContext> createOptRoleElem() {
			return getRuleContexts(CreateOptRoleElemContext.class);
		}
		public CreateOptRoleElemContext createOptRoleElem(int i) {
			return getRuleContext(CreateOptRoleElemContext.class,i);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 1398, RULE_createRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9777);
			match(CREATE);
			setState(9778);
			match(ROLE);
			setState(9779);
			roleSpec();
			setState(9781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9780);
				match(WITH);
				}
			}

			setState(9786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (IN - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (USER - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
				{
				{
				setState(9783);
				createOptRoleElem();
				}
				}
				setState(9788);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 1400, RULE_dropRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9789);
			match(DROP);
			setState(9790);
			match(ROLE);
			setState(9793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
			case 1:
				{
				setState(9791);
				match(IF);
				setState(9792);
				match(EXISTS);
				}
				break;
			}
			setState(9795);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoleContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public AlterUserClausesContext alterUserClauses() {
			return getRuleContext(AlterUserClausesContext.class,0);
		}
		public AlterRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleContext alterRole() throws RecognitionException {
		AlterRoleContext _localctx = new AlterRoleContext(_ctx, getState());
		enterRule(_localctx, 1402, RULE_alterRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9797);
			match(ALTER);
			setState(9798);
			match(ROLE);
			setState(9799);
			alterUserClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSchemaContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLStatementParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSchema; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAlterSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSchemaContext alterSchema() throws RecognitionException {
		AlterSchemaContext _localctx = new AlterSchemaContext(_ctx, getState());
		enterRule(_localctx, 1404, RULE_alterSchema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9801);
			match(ALTER);
			setState(9802);
			match(SCHEMA);
			setState(9803);
			name();
			setState(9810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(9804);
				match(RENAME);
				setState(9805);
				match(TO);
				setState(9806);
				name();
				}
				break;
			case OWNER:
				{
				setState(9807);
				match(OWNER);
				setState(9808);
				match(TO);
				setState(9809);
				roleSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGroupContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLStatementParser.WITH, 0); }
		public List<CreateOptRoleElemContext> createOptRoleElem() {
			return getRuleContexts(CreateOptRoleElemContext.class);
		}
		public CreateOptRoleElemContext createOptRoleElem(int i) {
			return getRuleContext(CreateOptRoleElemContext.class,i);
		}
		public CreateGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGroupContext createGroup() throws RecognitionException {
		CreateGroupContext _localctx = new CreateGroupContext(_ctx, getState());
		enterRule(_localctx, 1406, RULE_createGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9812);
			match(CREATE);
			setState(9813);
			match(GROUP);
			setState(9814);
			roleSpec();
			setState(9816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9815);
				match(WITH);
				}
			}

			setState(9821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (IN - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (USER - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
				{
				{
				setState(9818);
				createOptRoleElem();
				}
				}
				setState(9823);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSchemaContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLStatementParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public CreateSchemaClausesContext createSchemaClauses() {
			return getRuleContext(CreateSchemaClausesContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public CreateSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchema; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaContext createSchema() throws RecognitionException {
		CreateSchemaContext _localctx = new CreateSchemaContext(_ctx, getState());
		enterRule(_localctx, 1408, RULE_createSchema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9824);
			match(CREATE);
			setState(9825);
			match(SCHEMA);
			setState(9829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
			case 1:
				{
				setState(9826);
				match(IF);
				setState(9827);
				match(NOT);
				setState(9828);
				match(EXISTS);
				}
				break;
			}
			setState(9831);
			createSchemaClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSchemaClausesContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public SchemaEltListContext schemaEltList() {
			return getRuleContext(SchemaEltListContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public CreateSchemaClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCreateSchemaClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaClausesContext createSchemaClauses() throws RecognitionException {
		CreateSchemaClausesContext _localctx = new CreateSchemaClausesContext(_ctx, getState());
		enterRule(_localctx, 1410, RULE_createSchemaClauses);
		int _la;
		try {
			setState(9843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
					{
					setState(9833);
					colId();
					}
				}

				setState(9836);
				match(AUTHORIZATION);
				setState(9837);
				roleSpec();
				setState(9838);
				schemaEltList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9840);
				colId();
				setState(9841);
				schemaEltList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaEltListContext extends ParserRuleContext {
		public List<SchemaStmtContext> schemaStmt() {
			return getRuleContexts(SchemaStmtContext.class);
		}
		public SchemaStmtContext schemaStmt(int i) {
			return getRuleContext(SchemaStmtContext.class,i);
		}
		public SchemaEltListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaEltList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSchemaEltList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaEltListContext schemaEltList() throws RecognitionException {
		SchemaEltListContext _localctx = new SchemaEltListContext(_ctx, getState());
		enterRule(_localctx, 1412, RULE_schemaEltList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CREATE || _la==GRANT) {
				{
				{
				setState(9845);
				schemaStmt();
				}
				}
				setState(9850);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaStmtContext extends ParserRuleContext {
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateSequenceContext createSequence() {
			return getRuleContext(CreateSequenceContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public SchemaStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSchemaStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaStmtContext schemaStmt() throws RecognitionException {
		SchemaStmtContext _localctx = new SchemaStmtContext(_ctx, getState());
		enterRule(_localctx, 1414, RULE_schemaStmt);
		try {
			setState(9857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9851);
				createTable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9852);
				createIndex();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9853);
				createSequence();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9854);
				createTrigger();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9855);
				grant();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9856);
				createView();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLStatementParser.GROUP, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropDroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropDroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDroupContext dropDroup() throws RecognitionException {
		DropDroupContext _localctx = new DropDroupContext(_ctx, getState());
		enterRule(_localctx, 1416, RULE_dropDroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9859);
			match(DROP);
			setState(9860);
			match(GROUP);
			setState(9863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
			case 1:
				{
				setState(9861);
				match(IF);
				setState(9862);
				match(EXISTS);
				}
				break;
			}
			setState(9865);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSchemaContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLStatementParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSchema; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitDropSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSchemaContext dropSchema() throws RecognitionException {
		DropSchemaContext _localctx = new DropSchemaContext(_ctx, getState());
		enterRule(_localctx, 1418, RULE_dropSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9867);
			match(DROP);
			setState(9868);
			match(SCHEMA);
			setState(9871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
			case 1:
				{
				setState(9869);
				match(IF);
				setState(9870);
				match(EXISTS);
				}
				break;
			}
			setState(9873);
			nameList(0);
			setState(9875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9874);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReassignOwnedContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(PostgreSQLStatementParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public ReassignOwnedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignOwned; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitReassignOwned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReassignOwnedContext reassignOwned() throws RecognitionException {
		ReassignOwnedContext _localctx = new ReassignOwnedContext(_ctx, getState());
		enterRule(_localctx, 1420, RULE_reassignOwned);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9877);
			match(REASSIGN);
			setState(9878);
			match(OWNED);
			setState(9879);
			match(BY);
			setState(9880);
			roleList();
			setState(9881);
			match(TO);
			setState(9882);
			roleSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PostgreSQLStatementParser.SHOW, 0); }
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLStatementParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public ShowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitShow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowContext show() throws RecognitionException {
		ShowContext _localctx = new ShowContext(_ctx, getState());
		enterRule(_localctx, 1422, RULE_show);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9884);
			match(SHOW);
			setState(9894);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
			case 1:
				{
				setState(9885);
				varName(0);
				}
				break;
			case 2:
				{
				setState(9886);
				match(TIME);
				setState(9887);
				match(ZONE);
				}
				break;
			case 3:
				{
				setState(9888);
				match(TRANSACTION);
				setState(9889);
				match(ISOLATION);
				setState(9890);
				match(LEVEL);
				}
				break;
			case 4:
				{
				setState(9891);
				match(SESSION);
				setState(9892);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				{
				setState(9893);
				match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TimeZoneClauseContext timeZoneClause() {
			return getRuleContext(TimeZoneClauseContext.class,0);
		}
		public ConfigurationParameterClauseContext configurationParameterClause() {
			return getRuleContext(ConfigurationParameterClauseContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLStatementParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLStatementParser.CURRENT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public ZoneValueContext zoneValue() {
			return getRuleContext(ZoneValueContext.class,0);
		}
		public TerminalNode CATALOG() { return getToken(PostgreSQLStatementParser.CATALOG, 0); }
		public TerminalNode STRING_() { return getToken(PostgreSQLStatementParser.STRING_, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLStatementParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLStatementParser.NAMES, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLStatementParser.ROLE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TerminalNode XML() { return getToken(PostgreSQLStatementParser.XML, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLStatementParser.OPTION, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public RuntimeScopeContext runtimeScope() {
			return getRuleContext(RuntimeScopeContext.class,0);
		}
		public EncodingContext encoding() {
			return getRuleContext(EncodingContext.class,0);
		}
		public SetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetContext set() throws RecognitionException {
		SetContext _localctx = new SetContext(_ctx, getState());
		enterRule(_localctx, 1424, RULE_set);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9896);
			match(SET);
			setState(9898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,955,_ctx) ) {
			case 1:
				{
				setState(9897);
				runtimeScope();
				}
				break;
			}
			setState(9928);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
			case 1:
				{
				setState(9900);
				timeZoneClause();
				}
				break;
			case 2:
				{
				setState(9901);
				configurationParameterClause();
				}
				break;
			case 3:
				{
				setState(9902);
				varName(0);
				setState(9903);
				match(FROM);
				setState(9904);
				match(CURRENT);
				}
				break;
			case 4:
				{
				setState(9906);
				match(TIME);
				setState(9907);
				match(ZONE);
				setState(9908);
				zoneValue();
				}
				break;
			case 5:
				{
				setState(9909);
				match(CATALOG);
				setState(9910);
				match(STRING_);
				}
				break;
			case 6:
				{
				setState(9911);
				match(SCHEMA);
				setState(9912);
				match(STRING_);
				}
				break;
			case 7:
				{
				setState(9913);
				match(NAMES);
				setState(9915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==STRING_) {
					{
					setState(9914);
					encoding();
					}
				}

				}
				break;
			case 8:
				{
				setState(9917);
				match(ROLE);
				setState(9918);
				nonReservedWordOrSconst();
				}
				break;
			case 9:
				{
				setState(9919);
				match(SESSION);
				setState(9920);
				match(AUTHORIZATION);
				setState(9921);
				nonReservedWordOrSconst();
				}
				break;
			case 10:
				{
				setState(9922);
				match(SESSION);
				setState(9923);
				match(AUTHORIZATION);
				setState(9924);
				match(DEFAULT);
				}
				break;
			case 11:
				{
				setState(9925);
				match(XML);
				setState(9926);
				match(OPTION);
				setState(9927);
				documentOrContent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuntimeScopeContext extends ParserRuleContext {
		public TerminalNode SESSION() { return getToken(PostgreSQLStatementParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public RuntimeScopeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runtimeScope; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitRuntimeScope(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuntimeScopeContext runtimeScope() throws RecognitionException {
		RuntimeScopeContext _localctx = new RuntimeScopeContext(_ctx, getState());
		enterRule(_localctx, 1426, RULE_runtimeScope);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9930);
			_la = _input.LA(1);
			if ( !(_la==LOCAL || _la==SESSION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneClauseContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(PostgreSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLStatementParser.ZONE, 0); }
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PostgreSQLStatementParser.LOCAL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public TimeZoneClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitTimeZoneClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneClauseContext timeZoneClause() throws RecognitionException {
		TimeZoneClauseContext _localctx = new TimeZoneClauseContext(_ctx, getState());
		enterRule(_localctx, 1428, RULE_timeZoneClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9932);
			match(TIME);
			setState(9933);
			match(ZONE);
			setState(9937);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MINUS_:
			case NUMBER_:
				{
				setState(9934);
				numberLiterals();
				}
				break;
			case LOCAL:
				{
				setState(9935);
				match(LOCAL);
				}
				break;
			case DEFAULT:
				{
				setState(9936);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConfigurationParameterClauseContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLStatementParser.TO, 0); }
		public TerminalNode EQ_() { return getToken(PostgreSQLStatementParser.EQ_, 0); }
		public VarListContext varList() {
			return getRuleContext(VarListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLStatementParser.DEFAULT, 0); }
		public ConfigurationParameterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_configurationParameterClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConfigurationParameterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConfigurationParameterClauseContext configurationParameterClause() throws RecognitionException {
		ConfigurationParameterClauseContext _localctx = new ConfigurationParameterClauseContext(_ctx, getState());
		enterRule(_localctx, 1430, RULE_configurationParameterClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9939);
			varName(0);
			setState(9940);
			_la = _input.LA(1);
			if ( !(_la==EQ_ || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9943);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case PLUS_:
			case MINUS_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(9941);
				varList();
				}
				break;
			case DEFAULT:
				{
				setState(9942);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetParameterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PostgreSQLStatementParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ResetParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetParameter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitResetParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetParameterContext resetParameter() throws RecognitionException {
		ResetParameterContext _localctx = new ResetParameterContext(_ctx, getState());
		enterRule(_localctx, 1432, RULE_resetParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9945);
			match(RESET);
			setState(9948);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(9946);
				match(ALL);
				}
				break;
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(9947);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLStatementParser.EXPLAIN, 0); }
		public ExplainableStmtContext explainableStmt() {
			return getRuleContext(ExplainableStmtContext.class,0);
		}
		public AnalyzeKeywordContext analyzeKeyword() {
			return getRuleContext(AnalyzeKeywordContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public ExplainOptionListContext explainOptionList() {
			return getRuleContext(ExplainOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public ExplainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExplain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainContext explain() throws RecognitionException {
		ExplainContext _localctx = new ExplainContext(_ctx, getState());
		enterRule(_localctx, 1434, RULE_explain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9950);
			match(EXPLAIN);
			setState(9960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
			case 1:
				{
				setState(9951);
				analyzeKeyword();
				setState(9953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(9952);
					match(VERBOSE);
					}
				}

				}
				break;
			case 2:
				{
				setState(9955);
				match(VERBOSE);
				}
				break;
			case 3:
				{
				setState(9956);
				match(LP_);
				setState(9957);
				explainOptionList();
				setState(9958);
				match(RP_);
				}
				break;
			}
			setState(9962);
			explainableStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainableStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public DeclareContext declare() {
			return getRuleContext(DeclareContext.class,0);
		}
		public ExecuteContext execute() {
			return getRuleContext(ExecuteContext.class,0);
		}
		public CreateMaterializedViewContext createMaterializedView() {
			return getRuleContext(CreateMaterializedViewContext.class,0);
		}
		public RefreshMatViewStmtContext refreshMatViewStmt() {
			return getRuleContext(RefreshMatViewStmtContext.class,0);
		}
		public ExplainableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExplainableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainableStmtContext explainableStmt() throws RecognitionException {
		ExplainableStmtContext _localctx = new ExplainableStmtContext(_ctx, getState());
		enterRule(_localctx, 1436, RULE_explainableStmt);
		try {
			setState(9972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9964);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9965);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9966);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9967);
				delete();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9968);
				declare();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9969);
				execute();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9970);
				createMaterializedView();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9971);
				refreshMatViewStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainOptionListContext extends ParserRuleContext {
		public List<ExplainOptionElemContext> explainOptionElem() {
			return getRuleContexts(ExplainOptionElemContext.class);
		}
		public ExplainOptionElemContext explainOptionElem(int i) {
			return getRuleContext(ExplainOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public ExplainOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExplainOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionListContext explainOptionList() throws RecognitionException {
		ExplainOptionListContext _localctx = new ExplainOptionListContext(_ctx, getState());
		enterRule(_localctx, 1438, RULE_explainOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9974);
			explainOptionElem();
			setState(9979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9975);
				match(COMMA_);
				setState(9976);
				explainOptionElem();
				}
				}
				setState(9981);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainOptionElemContext extends ParserRuleContext {
		public ExplainOptionNameContext explainOptionName() {
			return getRuleContext(ExplainOptionNameContext.class,0);
		}
		public ExplainOptionArgContext explainOptionArg() {
			return getRuleContext(ExplainOptionArgContext.class,0);
		}
		public ExplainOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOptionElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExplainOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionElemContext explainOptionElem() throws RecognitionException {
		ExplainOptionElemContext _localctx = new ExplainOptionElemContext(_ctx, getState());
		enterRule(_localctx, 1440, RULE_explainOptionElem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9982);
			explainOptionName();
			setState(9984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << PLUS_) | (1L << MINUS_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (POSITION - 66)) | (1L << (PRECISION - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (VALUES - 66)) | (1L << (TRIM - 66)) | (1L << (SUBSTRING - 66)) | (1L << (NATURAL - 66)) | (1L << (JOIN - 66)) | (1L << (FULL - 66)) | (1L << (INNER - 66)) | (1L << (OUTER - 66)) | (1L << (LEFT - 66)) | (1L << (RIGHT - 66)) | (1L << (CROSS - 66)) | (1L << (ON - 66)) | (1L << (IF - 66)) | (1L << (IS - 66)) | (1L << (TRUE - 66)) | (1L << (FALSE - 66)) | (1L << (EXISTS - 66)) | (1L << (BETWEEN - 66)) | (1L << (LIKE - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (BOOLEAN - 130)) | (1L << (DOUBLE - 130)) | (1L << (CHAR - 130)) | (1L << (CHARACTER - 130)) | (1L << (INTERVAL - 130)) | (1L << (TIME - 130)) | (1L << (TIMESTAMP - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (COLLATION - 130)) | (1L << (NAMES - 130)) | (1L << (INTEGER - 130)) | (1L << (REAL - 130)) | (1L << (DECIMAL - 130)) | (1L << (TYPE - 130)) | (1L << (SMALLINT - 130)) | (1L << (BIGINT - 130)) | (1L << (NUMERIC - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (NULLIF - 130)) | (1L << (VARYING - 130)) | (1L << (NATIONAL - 130)) | (1L << (NCHAR - 130)) | (1L << (VALUE - 130)) | (1L << (COALESCE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (GROUPING - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (OVERLAPS - 195)) | (1L << (AT - 195)) | (1L << (DEC - 195)) | (1L << (ADMIN - 195)) | (1L << (BINARY - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (ROW - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONCURRENTLY - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)) | (1L << (INT - 259)) | (1L << (FLOAT - 259)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (VARCHAR - 328)) | (1L << (ENUM - 328)) | (1L << (BIT - 328)) | (1L << (XML - 328)) | (1L << (TABLESAMPLE - 328)) | (1L << (ORDINALITY - 328)) | (1L << (CURRENT_SCHEMA - 328)) | (1L << (OVERLAY - 328)) | (1L << (XMLCONCAT - 328)) | (1L << (XMLELEMENT - 328)) | (1L << (XMLEXISTS - 328)) | (1L << (XMLFOREST - 328)) | (1L << (XMLPARSE - 328)) | (1L << (XMLPI - 328)) | (1L << (XMLROOT - 328)) | (1L << (XMLSERIALIZE - 328)) | (1L << (TREAT - 328)) | (1L << (SETOF - 328)) | (1L << (NFC - 328)) | (1L << (NFD - 328)) | (1L << (NFKC - 328)) | (1L << (NFKD - 328)) | (1L << (XMLATTRIBUTES - 328)) | (1L << (REF - 328)) | (1L << (PASSING - 328)) | (1L << (VERSION - 328)) | (1L << (YES - 328)) | (1L << (STANDALONE - 328)) | (1L << (GREATEST - 328)) | (1L << (LEAST - 328)) | (1L << (MATERIALIZED - 328)) | (1L << (OPERATOR - 328)) | (1L << (SHARE - 328)) | (1L << (ROLLUP - 328)) | (1L << (ILIKE - 328)) | (1L << (SIMILAR - 328)) | (1L << (ISNULL - 328)) | (1L << (NOTNULL - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (DOCUMENT - 392)) | (1L << (NORMALIZED - 392)) | (1L << (NOWAIT - 392)) | (1L << (LOCKED - 392)) | (1L << (XMLTABLE - 392)) | (1L << (COLUMNS - 392)) | (1L << (CONTENT - 392)) | (1L << (STRIP - 392)) | (1L << (WHITESPACE - 392)) | (1L << (XMLNAMESPACES - 392)) | (1L << (NONE - 392)) | (1L << (CONFLICT - 392)) | (1L << (OVERRIDING - 392)) | (1L << (SYSTEM - 392)) | (1L << (ABORT - 392)) | (1L << (ABSOLUTE - 392)) | (1L << (ACCESS - 392)) | (1L << (AFTER - 392)) | (1L << (AGGREGATE - 392)) | (1L << (ALSO - 392)) | (1L << (ATTACH - 392)) | (1L << (ATTRIBUTE - 392)) | (1L << (BACKWARD - 392)) | (1L << (BEFORE - 392)) | (1L << (ASSERTION - 392)) | (1L << (ASSIGNMENT - 392)) | (1L << (CONTINUE - 392)) | (1L << (CONVERSION - 392)) | (1L << (COPY - 392)) | (1L << (COST - 392)) | (1L << (CSV - 392)) | (1L << (CALLED - 392)) | (1L << (CATALOG - 392)) | (1L << (CHAIN - 392)) | (1L << (CHECKPOINT - 392)) | (1L << (CLASS - 392)) | (1L << (CONFIGURATION - 392)) | (1L << (COMMENT - 392)) | (1L << (DETACH - 392)) | (1L << (DICTIONARY - 392)) | (1L << (EXPRESSION - 392)) | (1L << (INSENSITIVE - 392)) | (1L << (DISCARD - 392)) | (1L << (OFF - 392)) | (1L << (INSTEAD - 392)) | (1L << (EXPLAIN - 392)) | (1L << (INPUT - 392)) | (1L << (INLINE - 392)) | (1L << (PARALLEL - 392)) | (1L << (LEAKPROOF - 392)) | (1L << (COMMITTED - 392)) | (1L << (ENCODING - 392)) | (1L << (IMPLICIT - 392)) | (1L << (DELIMITER - 392)) | (1L << (CURSOR - 392)) | (1L << (EACH - 392)) | (1L << (EVENT - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (DEALLOCATE - 456)) | (1L << (CONNECTION - 456)) | (1L << (DECLARE - 456)) | (1L << (FAMILY - 456)) | (1L << (FORWARD - 456)) | (1L << (EXCLUSIVE - 456)) | (1L << (FUNCTIONS - 456)) | (1L << (LOCATION - 456)) | (1L << (LABEL - 456)) | (1L << (DELIMITERS - 456)) | (1L << (HANDLER - 456)) | (1L << (HEADER - 456)) | (1L << (IMMUTABLE - 456)) | (1L << (GRANTED - 456)) | (1L << (HOLD - 456)) | (1L << (MAPPING - 456)) | (1L << (OLD - 456)) | (1L << (METHOD - 456)) | (1L << (LOAD - 456)) | (1L << (LISTEN - 456)) | (1L << (MODE - 456)) | (1L << (MOVE - 456)) | (1L << (PROCEDURAL - 456)) | (1L << (PARSER - 456)) | (1L << (PROCEDURES - 456)) | (1L << (ENCRYPTED - 456)) | (1L << (PUBLICATION - 456)) | (1L << (PROGRAM - 456)) | (1L << (REFERENCING - 456)) | (1L << (PLANS - 456)) | (1L << (REINDEX - 456)) | (1L << (PRIOR - 456)) | (1L << (PASSWORD - 456)) | (1L << (RELATIVE - 456)) | (1L << (QUOTE - 456)) | (1L << (ROUTINES - 456)) | (1L << (REPLACE - 456)) | (1L << (SNAPSHOT - 456)) | (1L << (REFRESH - 456)) | (1L << (PREPARE - 456)) | (1L << (OPTIONS - 456)) | (1L << (IMPORT - 456)) | (1L << (INVOKER - 456)) | (1L << (NEW - 456)) | (1L << (PREPARED - 456)) | (1L << (SCROLL - 456)) | (1L << (SEQUENCES - 456)) | (1L << (SYSID - 456)) | (1L << (REASSIGN - 456)) | (1L << (SERVER - 456)) | (1L << (SUBSCRIPTION - 456)) | (1L << (SEARCH - 456)) | (1L << (SCHEMAS - 456)) | (1L << (RECHECK - 456)) | (1L << (POLICY - 456)) | (1L << (NOTIFY - 456)) | (1L << (LOCK - 456)) | (1L << (RELEASE - 456)) | (1L << (SERIALIZABLE - 456)) | (1L << (RETURNS - 456)) | (1L << (STATEMENT - 456)) | (1L << (STDIN - 456)) | (1L << (STDOUT - 456)) | (1L << (TABLES - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SUPPORT - 520)) | (1L << (STABLE - 520)) | (1L << (TEMPLATE - 520)) | (1L << (UNENCRYPTED - 520)) | (1L << (VIEWS - 520)) | (1L << (UNCOMMITTED - 520)) | (1L << (TRANSFORM - 520)) | (1L << (UNLISTEN - 520)) | (1L << (TRUSTED - 520)) | (1L << (VALIDATOR - 520)) | (1L << (UNTIL - 520)) | (1L << (VACUUM - 520)) | (1L << (VOLATILE - 520)) | (1L << (STORED - 520)) | (1L << (WRITE - 520)) | (1L << (STRICT - 520)) | (1L << (TYPES - 520)) | (1L << (WRAPPER - 520)) | (1L << (WORK - 520)) | (1L << (FREEZE - 520)) | (1L << (AUTHORIZATION - 520)) | (1L << (VERBOSE - 520)) | (1L << (OUT - 520)) | (1L << (INOUT - 520)) | (1L << (IDENTIFIER_ - 520)) | (1L << (STRING_ - 520)) | (1L << (NUMBER_ - 520)))) != 0)) {
				{
				setState(9983);
				explainOptionArg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainOptionArgContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public ExplainOptionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOptionArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExplainOptionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionArgContext explainOptionArg() throws RecognitionException {
		ExplainOptionArgContext _localctx = new ExplainOptionArgContext(_ctx, getState());
		enterRule(_localctx, 1442, RULE_explainOptionArg);
		try {
			setState(9988);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(9986);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(9987);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainOptionNameContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public AnalyzeKeywordContext analyzeKeyword() {
			return getRuleContext(AnalyzeKeywordContext.class,0);
		}
		public ExplainOptionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOptionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitExplainOptionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionNameContext explainOptionName() throws RecognitionException {
		ExplainOptionNameContext _localctx = new ExplainOptionNameContext(_ctx, getState());
		enterRule(_localctx, 1444, RULE_explainOptionName);
		try {
			setState(9992);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(9990);
				nonReservedWord();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9991);
				analyzeKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeKeywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSQLStatementParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLStatementParser.ANALYSE, 0); }
		public AnalyzeKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeKeyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAnalyzeKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeKeywordContext analyzeKeyword() throws RecognitionException {
		AnalyzeKeywordContext _localctx = new AnalyzeKeywordContext(_ctx, getState());
		enterRule(_localctx, 1446, RULE_analyzeKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9994);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetConstraintsContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLStatementParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLStatementParser.CONSTRAINTS, 0); }
		public ConstraintsSetListContext constraintsSetList() {
			return getRuleContext(ConstraintsSetListContext.class,0);
		}
		public ConstraintsSetModeContext constraintsSetMode() {
			return getRuleContext(ConstraintsSetModeContext.class,0);
		}
		public SetConstraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setConstraints; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitSetConstraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetConstraintsContext setConstraints() throws RecognitionException {
		SetConstraintsContext _localctx = new SetConstraintsContext(_ctx, getState());
		enterRule(_localctx, 1448, RULE_setConstraints);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9996);
			match(SET);
			setState(9997);
			match(CONSTRAINTS);
			setState(9998);
			constraintsSetList();
			setState(9999);
			constraintsSetMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintsSetModeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PostgreSQLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLStatementParser.IMMEDIATE, 0); }
		public ConstraintsSetModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintsSetMode; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConstraintsSetMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintsSetModeContext constraintsSetMode() throws RecognitionException {
		ConstraintsSetModeContext _localctx = new ConstraintsSetModeContext(_ctx, getState());
		enterRule(_localctx, 1450, RULE_constraintsSetMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10001);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintsSetListContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public ConstraintsSetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintsSetList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitConstraintsSetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintsSetListContext constraintsSetList() throws RecognitionException {
		ConstraintsSetListContext _localctx = new ConstraintsSetListContext(_ctx, getState());
		enterRule(_localctx, 1452, RULE_constraintsSetList);
		try {
			setState(10005);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10003);
				match(ALL);
				}
				break;
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(10004);
				qualifiedNameList(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeContext extends ParserRuleContext {
		public AnalyzeKeywordContext analyzeKeyword() {
			return getRuleContext(AnalyzeKeywordContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public VacAnalyzeOptionListContext vacAnalyzeOptionList() {
			return getRuleContext(VacAnalyzeOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public VacuumRelationListContext vacuumRelationList() {
			return getRuleContext(VacuumRelationListContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public AnalyzeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitAnalyze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeContext analyze() throws RecognitionException {
		AnalyzeContext _localctx = new AnalyzeContext(_ctx, getState());
		enterRule(_localctx, 1454, RULE_analyze);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10007);
			analyzeKeyword();
			setState(10015);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case VERBOSE:
			case IDENTIFIER_:
				{
				setState(10009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(10008);
					match(VERBOSE);
					}
				}

				}
				break;
			case LP_:
				{
				setState(10011);
				match(LP_);
				setState(10012);
				vacAnalyzeOptionList();
				setState(10013);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
				{
				setState(10017);
				vacuumRelationList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumRelationListContext extends ParserRuleContext {
		public List<VacuumRelationContext> vacuumRelation() {
			return getRuleContexts(VacuumRelationContext.class);
		}
		public VacuumRelationContext vacuumRelation(int i) {
			return getRuleContext(VacuumRelationContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public VacuumRelationListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumRelationList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVacuumRelationList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumRelationListContext vacuumRelationList() throws RecognitionException {
		VacuumRelationListContext _localctx = new VacuumRelationListContext(_ctx, getState());
		enterRule(_localctx, 1456, RULE_vacuumRelationList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10020);
			vacuumRelation();
			setState(10025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(10021);
				match(COMMA_);
				setState(10022);
				vacuumRelation();
				}
				}
				setState(10027);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumRelationContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public VacuumRelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumRelation; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVacuumRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumRelationContext vacuumRelation() throws RecognitionException {
		VacuumRelationContext _localctx = new VacuumRelationContext(_ctx, getState());
		enterRule(_localctx, 1458, RULE_vacuumRelation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10028);
			qualifiedName();
			setState(10029);
			optNameList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacAnalyzeOptionListContext extends ParserRuleContext {
		public List<VacAnalyzeOptionElemContext> vacAnalyzeOptionElem() {
			return getRuleContexts(VacAnalyzeOptionElemContext.class);
		}
		public VacAnalyzeOptionElemContext vacAnalyzeOptionElem(int i) {
			return getRuleContext(VacAnalyzeOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(PostgreSQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(PostgreSQLStatementParser.COMMA_, i);
		}
		public VacAnalyzeOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacAnalyzeOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVacAnalyzeOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacAnalyzeOptionListContext vacAnalyzeOptionList() throws RecognitionException {
		VacAnalyzeOptionListContext _localctx = new VacAnalyzeOptionListContext(_ctx, getState());
		enterRule(_localctx, 1460, RULE_vacAnalyzeOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10031);
			vacAnalyzeOptionElem();
			setState(10036);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(10032);
				match(COMMA_);
				setState(10033);
				vacAnalyzeOptionElem();
				}
				}
				setState(10038);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacAnalyzeOptionElemContext extends ParserRuleContext {
		public VacAnalyzeOptionNameContext vacAnalyzeOptionName() {
			return getRuleContext(VacAnalyzeOptionNameContext.class,0);
		}
		public VacAnalyzeOptionArgContext vacAnalyzeOptionArg() {
			return getRuleContext(VacAnalyzeOptionArgContext.class,0);
		}
		public VacAnalyzeOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacAnalyzeOptionElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVacAnalyzeOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacAnalyzeOptionElemContext vacAnalyzeOptionElem() throws RecognitionException {
		VacAnalyzeOptionElemContext _localctx = new VacAnalyzeOptionElemContext(_ctx, getState());
		enterRule(_localctx, 1462, RULE_vacAnalyzeOptionElem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10039);
			vacAnalyzeOptionName();
			setState(10041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << PLUS_) | (1L << MINUS_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (POSITION - 66)) | (1L << (PRECISION - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (VALUES - 66)) | (1L << (TRIM - 66)) | (1L << (SUBSTRING - 66)) | (1L << (NATURAL - 66)) | (1L << (JOIN - 66)) | (1L << (FULL - 66)) | (1L << (INNER - 66)) | (1L << (OUTER - 66)) | (1L << (LEFT - 66)) | (1L << (RIGHT - 66)) | (1L << (CROSS - 66)) | (1L << (ON - 66)) | (1L << (IF - 66)) | (1L << (IS - 66)) | (1L << (TRUE - 66)) | (1L << (FALSE - 66)) | (1L << (EXISTS - 66)) | (1L << (BETWEEN - 66)) | (1L << (LIKE - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (BOOLEAN - 130)) | (1L << (DOUBLE - 130)) | (1L << (CHAR - 130)) | (1L << (CHARACTER - 130)) | (1L << (INTERVAL - 130)) | (1L << (TIME - 130)) | (1L << (TIMESTAMP - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (COLLATION - 130)) | (1L << (NAMES - 130)) | (1L << (INTEGER - 130)) | (1L << (REAL - 130)) | (1L << (DECIMAL - 130)) | (1L << (TYPE - 130)) | (1L << (SMALLINT - 130)) | (1L << (BIGINT - 130)) | (1L << (NUMERIC - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (NULLIF - 130)) | (1L << (VARYING - 130)) | (1L << (NATIONAL - 130)) | (1L << (NCHAR - 130)) | (1L << (VALUE - 130)) | (1L << (COALESCE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (GROUPING - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (OVERLAPS - 195)) | (1L << (AT - 195)) | (1L << (DEC - 195)) | (1L << (ADMIN - 195)) | (1L << (BINARY - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (ROW - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONCURRENTLY - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)) | (1L << (INT - 259)) | (1L << (FLOAT - 259)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (VARCHAR - 328)) | (1L << (ENUM - 328)) | (1L << (BIT - 328)) | (1L << (XML - 328)) | (1L << (TABLESAMPLE - 328)) | (1L << (ORDINALITY - 328)) | (1L << (CURRENT_SCHEMA - 328)) | (1L << (OVERLAY - 328)) | (1L << (XMLCONCAT - 328)) | (1L << (XMLELEMENT - 328)) | (1L << (XMLEXISTS - 328)) | (1L << (XMLFOREST - 328)) | (1L << (XMLPARSE - 328)) | (1L << (XMLPI - 328)) | (1L << (XMLROOT - 328)) | (1L << (XMLSERIALIZE - 328)) | (1L << (TREAT - 328)) | (1L << (SETOF - 328)) | (1L << (NFC - 328)) | (1L << (NFD - 328)) | (1L << (NFKC - 328)) | (1L << (NFKD - 328)) | (1L << (XMLATTRIBUTES - 328)) | (1L << (REF - 328)) | (1L << (PASSING - 328)) | (1L << (VERSION - 328)) | (1L << (YES - 328)) | (1L << (STANDALONE - 328)) | (1L << (GREATEST - 328)) | (1L << (LEAST - 328)) | (1L << (MATERIALIZED - 328)) | (1L << (OPERATOR - 328)) | (1L << (SHARE - 328)) | (1L << (ROLLUP - 328)) | (1L << (ILIKE - 328)) | (1L << (SIMILAR - 328)) | (1L << (ISNULL - 328)) | (1L << (NOTNULL - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (DOCUMENT - 392)) | (1L << (NORMALIZED - 392)) | (1L << (NOWAIT - 392)) | (1L << (LOCKED - 392)) | (1L << (XMLTABLE - 392)) | (1L << (COLUMNS - 392)) | (1L << (CONTENT - 392)) | (1L << (STRIP - 392)) | (1L << (WHITESPACE - 392)) | (1L << (XMLNAMESPACES - 392)) | (1L << (NONE - 392)) | (1L << (CONFLICT - 392)) | (1L << (OVERRIDING - 392)) | (1L << (SYSTEM - 392)) | (1L << (ABORT - 392)) | (1L << (ABSOLUTE - 392)) | (1L << (ACCESS - 392)) | (1L << (AFTER - 392)) | (1L << (AGGREGATE - 392)) | (1L << (ALSO - 392)) | (1L << (ATTACH - 392)) | (1L << (ATTRIBUTE - 392)) | (1L << (BACKWARD - 392)) | (1L << (BEFORE - 392)) | (1L << (ASSERTION - 392)) | (1L << (ASSIGNMENT - 392)) | (1L << (CONTINUE - 392)) | (1L << (CONVERSION - 392)) | (1L << (COPY - 392)) | (1L << (COST - 392)) | (1L << (CSV - 392)) | (1L << (CALLED - 392)) | (1L << (CATALOG - 392)) | (1L << (CHAIN - 392)) | (1L << (CHECKPOINT - 392)) | (1L << (CLASS - 392)) | (1L << (CONFIGURATION - 392)) | (1L << (COMMENT - 392)) | (1L << (DETACH - 392)) | (1L << (DICTIONARY - 392)) | (1L << (EXPRESSION - 392)) | (1L << (INSENSITIVE - 392)) | (1L << (DISCARD - 392)) | (1L << (OFF - 392)) | (1L << (INSTEAD - 392)) | (1L << (EXPLAIN - 392)) | (1L << (INPUT - 392)) | (1L << (INLINE - 392)) | (1L << (PARALLEL - 392)) | (1L << (LEAKPROOF - 392)) | (1L << (COMMITTED - 392)) | (1L << (ENCODING - 392)) | (1L << (IMPLICIT - 392)) | (1L << (DELIMITER - 392)) | (1L << (CURSOR - 392)) | (1L << (EACH - 392)) | (1L << (EVENT - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (DEALLOCATE - 456)) | (1L << (CONNECTION - 456)) | (1L << (DECLARE - 456)) | (1L << (FAMILY - 456)) | (1L << (FORWARD - 456)) | (1L << (EXCLUSIVE - 456)) | (1L << (FUNCTIONS - 456)) | (1L << (LOCATION - 456)) | (1L << (LABEL - 456)) | (1L << (DELIMITERS - 456)) | (1L << (HANDLER - 456)) | (1L << (HEADER - 456)) | (1L << (IMMUTABLE - 456)) | (1L << (GRANTED - 456)) | (1L << (HOLD - 456)) | (1L << (MAPPING - 456)) | (1L << (OLD - 456)) | (1L << (METHOD - 456)) | (1L << (LOAD - 456)) | (1L << (LISTEN - 456)) | (1L << (MODE - 456)) | (1L << (MOVE - 456)) | (1L << (PROCEDURAL - 456)) | (1L << (PARSER - 456)) | (1L << (PROCEDURES - 456)) | (1L << (ENCRYPTED - 456)) | (1L << (PUBLICATION - 456)) | (1L << (PROGRAM - 456)) | (1L << (REFERENCING - 456)) | (1L << (PLANS - 456)) | (1L << (REINDEX - 456)) | (1L << (PRIOR - 456)) | (1L << (PASSWORD - 456)) | (1L << (RELATIVE - 456)) | (1L << (QUOTE - 456)) | (1L << (ROUTINES - 456)) | (1L << (REPLACE - 456)) | (1L << (SNAPSHOT - 456)) | (1L << (REFRESH - 456)) | (1L << (PREPARE - 456)) | (1L << (OPTIONS - 456)) | (1L << (IMPORT - 456)) | (1L << (INVOKER - 456)) | (1L << (NEW - 456)) | (1L << (PREPARED - 456)) | (1L << (SCROLL - 456)) | (1L << (SEQUENCES - 456)) | (1L << (SYSID - 456)) | (1L << (REASSIGN - 456)) | (1L << (SERVER - 456)) | (1L << (SUBSCRIPTION - 456)) | (1L << (SEARCH - 456)) | (1L << (SCHEMAS - 456)) | (1L << (RECHECK - 456)) | (1L << (POLICY - 456)) | (1L << (NOTIFY - 456)) | (1L << (LOCK - 456)) | (1L << (RELEASE - 456)) | (1L << (SERIALIZABLE - 456)) | (1L << (RETURNS - 456)) | (1L << (STATEMENT - 456)) | (1L << (STDIN - 456)) | (1L << (STDOUT - 456)) | (1L << (TABLES - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SUPPORT - 520)) | (1L << (STABLE - 520)) | (1L << (TEMPLATE - 520)) | (1L << (UNENCRYPTED - 520)) | (1L << (VIEWS - 520)) | (1L << (UNCOMMITTED - 520)) | (1L << (TRANSFORM - 520)) | (1L << (UNLISTEN - 520)) | (1L << (TRUSTED - 520)) | (1L << (VALIDATOR - 520)) | (1L << (UNTIL - 520)) | (1L << (VACUUM - 520)) | (1L << (VOLATILE - 520)) | (1L << (STORED - 520)) | (1L << (WRITE - 520)) | (1L << (STRICT - 520)) | (1L << (TYPES - 520)) | (1L << (WRAPPER - 520)) | (1L << (WORK - 520)) | (1L << (FREEZE - 520)) | (1L << (AUTHORIZATION - 520)) | (1L << (VERBOSE - 520)) | (1L << (OUT - 520)) | (1L << (INOUT - 520)) | (1L << (IDENTIFIER_ - 520)) | (1L << (STRING_ - 520)) | (1L << (NUMBER_ - 520)))) != 0)) {
				{
				setState(10040);
				vacAnalyzeOptionArg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacAnalyzeOptionArgContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public VacAnalyzeOptionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacAnalyzeOptionArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVacAnalyzeOptionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacAnalyzeOptionArgContext vacAnalyzeOptionArg() throws RecognitionException {
		VacAnalyzeOptionArgContext _localctx = new VacAnalyzeOptionArgContext(_ctx, getState());
		enterRule(_localctx, 1464, RULE_vacAnalyzeOptionArg);
		try {
			setState(10045);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(10043);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(10044);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacAnalyzeOptionNameContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public AnalyzeKeywordContext analyzeKeyword() {
			return getRuleContext(AnalyzeKeywordContext.class,0);
		}
		public VacAnalyzeOptionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacAnalyzeOptionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVacAnalyzeOptionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacAnalyzeOptionNameContext vacAnalyzeOptionName() throws RecognitionException {
		VacAnalyzeOptionNameContext _localctx = new VacAnalyzeOptionNameContext(_ctx, getState());
		enterRule(_localctx, 1466, RULE_vacAnalyzeOptionName);
		try {
			setState(10049);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(10047);
				nonReservedWord();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10048);
				analyzeKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(PostgreSQLStatementParser.LOAD, 0); }
		public FileNameContext fileName() {
			return getRuleContext(FileNameContext.class,0);
		}
		public LoadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitLoad(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadContext load() throws RecognitionException {
		LoadContext _localctx = new LoadContext(_ctx, getState());
		enterRule(_localctx, 1468, RULE_load);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10051);
			match(LOAD);
			setState(10052);
			fileName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumContext extends ParserRuleContext {
		public TerminalNode VACUUM() { return getToken(PostgreSQLStatementParser.VACUUM, 0); }
		public VacuumRelationListContext vacuumRelationList() {
			return getRuleContext(VacuumRelationListContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public VacAnalyzeOptionListContext vacAnalyzeOptionList() {
			return getRuleContext(VacAnalyzeOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLStatementParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLStatementParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLStatementParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLStatementParser.ANALYZE, 0); }
		public VacuumContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitVacuum(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumContext vacuum() throws RecognitionException {
		VacuumContext _localctx = new VacuumContext(_ctx, getState());
		enterRule(_localctx, 1470, RULE_vacuum);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10054);
			match(VACUUM);
			setState(10071);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case FULL:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case VERBOSE:
			case IDENTIFIER_:
				{
				{
				setState(10056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(10055);
					match(FULL);
					}
				}

				setState(10059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FREEZE) {
					{
					setState(10058);
					match(FREEZE);
					}
				}

				setState(10062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(10061);
					match(VERBOSE);
					}
				}

				setState(10065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANALYZE) {
					{
					setState(10064);
					match(ANALYZE);
					}
				}

				}
				}
				break;
			case LP_:
				{
				{
				setState(10067);
				match(LP_);
				setState(10068);
				vacAnalyzeOptionList();
				setState(10069);
				match(RP_);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (KEY - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (IF - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (ORDINALITY - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (NOWAIT - 396)) | (1L << (LOCKED - 396)) | (1L << (COLUMNS - 396)) | (1L << (CONTENT - 396)) | (1L << (STRIP - 396)) | (1L << (WHITESPACE - 396)) | (1L << (CONFLICT - 396)) | (1L << (OVERRIDING - 396)) | (1L << (SYSTEM - 396)) | (1L << (ABORT - 396)) | (1L << (ABSOLUTE - 396)) | (1L << (ACCESS - 396)) | (1L << (AFTER - 396)) | (1L << (AGGREGATE - 396)) | (1L << (ALSO - 396)) | (1L << (ATTACH - 396)) | (1L << (ATTRIBUTE - 396)) | (1L << (BACKWARD - 396)) | (1L << (BEFORE - 396)) | (1L << (ASSERTION - 396)) | (1L << (ASSIGNMENT - 396)) | (1L << (CONTINUE - 396)) | (1L << (CONVERSION - 396)) | (1L << (COPY - 396)) | (1L << (COST - 396)) | (1L << (CSV - 396)) | (1L << (CALLED - 396)) | (1L << (CATALOG - 396)) | (1L << (CHAIN - 396)) | (1L << (CHECKPOINT - 396)) | (1L << (CLASS - 396)) | (1L << (CONFIGURATION - 396)) | (1L << (COMMENT - 396)) | (1L << (DETACH - 396)) | (1L << (DICTIONARY - 396)) | (1L << (EXPRESSION - 396)) | (1L << (INSENSITIVE - 396)) | (1L << (DISCARD - 396)) | (1L << (OFF - 396)) | (1L << (INSTEAD - 396)) | (1L << (EXPLAIN - 396)) | (1L << (INPUT - 396)) | (1L << (INLINE - 396)) | (1L << (PARALLEL - 396)) | (1L << (LEAKPROOF - 396)) | (1L << (COMMITTED - 396)) | (1L << (ENCODING - 396)) | (1L << (IMPLICIT - 396)) | (1L << (DELIMITER - 396)) | (1L << (CURSOR - 396)) | (1L << (EACH - 396)) | (1L << (EVENT - 396)) | (1L << (DEALLOCATE - 396)) | (1L << (CONNECTION - 396)) | (1L << (DECLARE - 396)) | (1L << (FAMILY - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FORWARD - 460)) | (1L << (EXCLUSIVE - 460)) | (1L << (FUNCTIONS - 460)) | (1L << (LOCATION - 460)) | (1L << (LABEL - 460)) | (1L << (DELIMITERS - 460)) | (1L << (HANDLER - 460)) | (1L << (HEADER - 460)) | (1L << (IMMUTABLE - 460)) | (1L << (GRANTED - 460)) | (1L << (HOLD - 460)) | (1L << (MAPPING - 460)) | (1L << (OLD - 460)) | (1L << (METHOD - 460)) | (1L << (LOAD - 460)) | (1L << (LISTEN - 460)) | (1L << (MODE - 460)) | (1L << (MOVE - 460)) | (1L << (PROCEDURAL - 460)) | (1L << (PARSER - 460)) | (1L << (PROCEDURES - 460)) | (1L << (ENCRYPTED - 460)) | (1L << (PUBLICATION - 460)) | (1L << (PROGRAM - 460)) | (1L << (REFERENCING - 460)) | (1L << (PLANS - 460)) | (1L << (REINDEX - 460)) | (1L << (PRIOR - 460)) | (1L << (PASSWORD - 460)) | (1L << (RELATIVE - 460)) | (1L << (QUOTE - 460)) | (1L << (ROUTINES - 460)) | (1L << (REPLACE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (REFRESH - 460)) | (1L << (PREPARE - 460)) | (1L << (OPTIONS - 460)) | (1L << (IMPORT - 460)) | (1L << (INVOKER - 460)) | (1L << (NEW - 460)) | (1L << (PREPARED - 460)) | (1L << (SCROLL - 460)) | (1L << (SEQUENCES - 460)) | (1L << (SYSID - 460)) | (1L << (REASSIGN - 460)) | (1L << (SERVER - 460)) | (1L << (SUBSCRIPTION - 460)) | (1L << (SEARCH - 460)) | (1L << (SCHEMAS - 460)) | (1L << (RECHECK - 460)) | (1L << (POLICY - 460)) | (1L << (NOTIFY - 460)) | (1L << (LOCK - 460)) | (1L << (RELEASE - 460)) | (1L << (SERIALIZABLE - 460)) | (1L << (RETURNS - 460)) | (1L << (STATEMENT - 460)) | (1L << (STDIN - 460)) | (1L << (STDOUT - 460)) | (1L << (TABLES - 460)) | (1L << (SUPPORT - 460)) | (1L << (STABLE - 460)) | (1L << (TEMPLATE - 460)) | (1L << (UNENCRYPTED - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (VIEWS - 524)) | (1L << (UNCOMMITTED - 524)) | (1L << (TRANSFORM - 524)) | (1L << (UNLISTEN - 524)) | (1L << (TRUSTED - 524)) | (1L << (VALIDATOR - 524)) | (1L << (UNTIL - 524)) | (1L << (VACUUM - 524)) | (1L << (VOLATILE - 524)) | (1L << (STORED - 524)) | (1L << (WRITE - 524)) | (1L << (STRICT - 524)) | (1L << (TYPES - 524)) | (1L << (WRAPPER - 524)) | (1L << (WORK - 524)) | (1L << (IDENTIFIER_ - 524)))) != 0)) {
				{
				setState(10073);
				vacuumRelationList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLStatementParser.CALL, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(PostgreSQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(PostgreSQLStatementParser.RP_, 0); }
		public CallClausesContext callClauses() {
			return getRuleContext(CallClausesContext.class,0);
		}
		public CallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallContext call() throws RecognitionException {
		CallContext _localctx = new CallContext(_ctx, getState());
		enterRule(_localctx, 1472, RULE_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10076);
			match(CALL);
			setState(10077);
			funcName();
			setState(10078);
			match(LP_);
			setState(10080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << LP_) | (1L << QUESTION_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INDEX - 66)) | (1L << (UNIQUE - 66)) | (1L << (KEY - 66)) | (1L << (POSITION - 66)) | (1L << (FUNCTION - 66)) | (1L << (TRIGGER - 66)) | (1L << (PROCEDURE - 66)) | (1L << (VIEW - 66)) | (1L << (DISTINCT - 66)) | (1L << (CASE - 66)) | (1L << (CAST - 66)) | (1L << (TRIM - 66)) | (1L << (SUBSTRING - 66)) | (1L << (NATURAL - 66)) | (1L << (JOIN - 66)) | (1L << (FULL - 66)) | (1L << (INNER - 66)) | (1L << (OUTER - 66)) | (1L << (LEFT - 66)) | (1L << (RIGHT - 66)) | (1L << (CROSS - 66)) | (1L << (IF - 66)) | (1L << (IS - 66)) | (1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (TRUE - 66)) | (1L << (FALSE - 66)) | (1L << (EXISTS - 66)) | (1L << (ALL - 66)) | (1L << (LIKE - 66)) | (1L << (BY - 66)) | (1L << (BEGIN - 66)) | (1L << (COMMIT - 66)) | (1L << (ROLLBACK - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SAVEPOINT - 130)) | (1L << (DOUBLE - 130)) | (1L << (ARRAY - 130)) | (1L << (LOCALTIME - 130)) | (1L << (LOCALTIMESTAMP - 130)) | (1L << (YEAR - 130)) | (1L << (MONTH - 130)) | (1L << (DAY - 130)) | (1L << (HOUR - 130)) | (1L << (MINUTE - 130)) | (1L << (SECOND - 130)) | (1L << (DEFAULT - 130)) | (1L << (CURRENT - 130)) | (1L << (ENABLE - 130)) | (1L << (DISABLE - 130)) | (1L << (CALL - 130)) | (1L << (PRESERVE - 130)) | (1L << (DEFINER - 130)) | (1L << (CURRENT_USER - 130)) | (1L << (SQL - 130)) | (1L << (CASCADED - 130)) | (1L << (LOCAL - 130)) | (1L << (CLOSE - 130)) | (1L << (NEXT - 130)) | (1L << (NAME - 130)) | (1L << (COLLATION - 130)) | (1L << (NAMES - 130)) | (1L << (TYPE - 130)) | (1L << (TEXT - 130)) | (1L << (REPEATABLE - 130)) | (1L << (CURRENT_DATE - 130)) | (1L << (CURRENT_TIME - 130)) | (1L << (CURRENT_TIMESTAMP - 130)) | (1L << (NULLIF - 130)) | (1L << (VARYING - 130)) | (1L << (VALUE - 130)) | (1L << (COALESCE - 130)) | (1L << (TIES - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (CUBE - 195)) | (1L << (GROUPING - 195)) | (1L << (SETS - 195)) | (1L << (OTHERS - 195)) | (1L << (OVERLAPS - 195)) | (1L << (AT - 195)) | (1L << (ADMIN - 195)) | (1L << (BINARY - 195)) | (1L << (ESCAPE - 195)) | (1L << (EXCLUDE - 195)) | (1L << (PARTITION - 195)) | (1L << (ROW - 195)) | (1L << (UNKNOWN - 195)) | (1L << (ALWAYS - 195)) | (1L << (CASCADE - 195)) | (1L << (GENERATED - 195)) | (1L << (ISOLATION - 195)) | (1L << (LEVEL - 195)) | (1L << (NO - 195)) | (1L << (OPTION - 195)) | (1L << (PRIVILEGES - 195)) | (1L << (READ - 195)) | (1L << (ROLE - 195)) | (1L << (ROWS - 195)) | (1L << (START - 195)) | (1L << (TRANSACTION - 195)) | (1L << (USER - 195)) | (1L << (ACTION - 195)) | (1L << (CACHE - 195)) | (1L << (CHARACTERISTICS - 195)) | (1L << (CLUSTER - 195)) | (1L << (COMMENTS - 195)) | (1L << (CONCURRENTLY - 195)) | (1L << (CONSTRAINTS - 195)) | (1L << (CYCLE - 195)) | (1L << (DATA - 195)) | (1L << (DATABASE - 195)) | (1L << (DEFAULTS - 195)) | (1L << (DEFERRED - 195)) | (1L << (DEPENDS - 195)) | (1L << (DOMAIN - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FILTER - 195)) | (1L << (FIRST - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (GLOBAL - 195)) | (1L << (IDENTITY - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (IMMEDIATE - 259)) | (1L << (INCLUDING - 259)) | (1L << (INCREMENT - 259)) | (1L << (INDEXES - 259)) | (1L << (INHERIT - 259)) | (1L << (INHERITS - 259)) | (1L << (INCLUDE - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LARGE - 259)) | (1L << (LAST - 259)) | (1L << (LOGGED - 259)) | (1L << (MATCH - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINVALUE - 259)) | (1L << (NOTHING - 259)) | (1L << (NULLS - 259)) | (1L << (OBJECT - 259)) | (1L << (OIDS - 259)) | (1L << (OVER - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PRECEDING - 259)) | (1L << (RANGE - 259)) | (1L << (RENAME - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (ROUTINE - 259)) | (1L << (RULE - 259)) | (1L << (SECURITY - 259)) | (1L << (SEQUENCE - 259)) | (1L << (SESSION - 259)) | (1L << (SESSION_USER - 259)) | (1L << (SHOW - 259)) | (1L << (SIMPLE - 259)) | (1L << (STATISTICS - 259)) | (1L << (STORAGE - 259)) | (1L << (TABLESPACE - 259)) | (1L << (TEMP - 259)) | (1L << (TEMPORARY - 259)) | (1L << (UNBOUNDED - 259)) | (1L << (UNLOGGED - 259)) | (1L << (VALID - 259)) | (1L << (VALIDATE - 259)) | (1L << (WITHIN - 259)) | (1L << (WITHOUT - 259)) | (1L << (ZONE - 259)) | (1L << (OF - 259)) | (1L << (UESCAPE - 259)) | (1L << (GROUPS - 259)) | (1L << (RECURSIVE - 259)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (ENUM - 330)) | (1L << (XML - 330)) | (1L << (TABLESAMPLE - 330)) | (1L << (ORDINALITY - 330)) | (1L << (CURRENT_ROLE - 330)) | (1L << (CURRENT_CATALOG - 330)) | (1L << (CURRENT_SCHEMA - 330)) | (1L << (NORMALIZE - 330)) | (1L << (OVERLAY - 330)) | (1L << (XMLCONCAT - 330)) | (1L << (XMLELEMENT - 330)) | (1L << (XMLEXISTS - 330)) | (1L << (XMLFOREST - 330)) | (1L << (XMLPARSE - 330)) | (1L << (XMLPI - 330)) | (1L << (XMLROOT - 330)) | (1L << (XMLSERIALIZE - 330)) | (1L << (TREAT - 330)) | (1L << (NFC - 330)) | (1L << (NFD - 330)) | (1L << (NFKC - 330)) | (1L << (NFKD - 330)) | (1L << (REF - 330)) | (1L << (PASSING - 330)) | (1L << (VERSION - 330)) | (1L << (YES - 330)) | (1L << (STANDALONE - 330)) | (1L << (GREATEST - 330)) | (1L << (LEAST - 330)) | (1L << (MATERIALIZED - 330)) | (1L << (OPERATOR - 330)) | (1L << (SHARE - 330)) | (1L << (ROLLUP - 330)) | (1L << (ILIKE - 330)) | (1L << (SIMILAR - 330)) | (1L << (ISNULL - 330)) | (1L << (NOTNULL - 330)) | (1L << (DOCUMENT - 330)) | (1L << (NORMALIZED - 330)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (VARIADIC - 395)) | (1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FAMILY - 459)) | (1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (UNENCRYPTED - 523)) | (1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (FREEZE - 523)) | (1L << (AUTHORIZATION - 523)) | (1L << (VERBOSE - 523)) | (1L << (PARAM - 523)) | (1L << (IDENTIFIER_ - 523)) | (1L << (STRING_ - 523)) | (1L << (NUMBER_ - 523)))) != 0)) {
				{
				setState(10079);
				callClauses();
				}
			}

			setState(10082);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallClausesContext extends ParserRuleContext {
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLStatementParser.DISTINCT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLStatementParser.VARIADIC, 0); }
		public FuncArgExprContext funcArgExpr() {
			return getRuleContext(FuncArgExprContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(PostgreSQLStatementParser.COMMA_, 0); }
		public TerminalNode ASTERISK_() { return getToken(PostgreSQLStatementParser.ASTERISK_, 0); }
		public CallClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callClauses; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLStatementVisitor ) return ((PostgreSQLStatementVisitor<? extends T>)visitor).visitCallClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallClausesContext callClauses() throws RecognitionException {
		CallClausesContext _localctx = new CallClausesContext(_ctx, getState());
		enterRule(_localctx, 1474, RULE_callClauses);
		int _la;
		try {
			setState(10102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,986,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT || _la==ALL) {
					{
					setState(10084);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==ALL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(10087);
				funcArgList();
				setState(10089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(10088);
					sortClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10091);
				match(VARIADIC);
				setState(10092);
				funcArgExpr();
				setState(10093);
				sortClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10095);
				funcArgList();
				setState(10096);
				match(COMMA_);
				setState(10097);
				match(VARIADIC);
				setState(10098);
				funcArgExpr();
				setState(10099);
				sortClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10101);
				match(ASTERISK_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5:
			return insertColumnList_sempred((InsertColumnListContext)_localctx, predIndex);
		case 10:
			return setClauseList_sempred((SetClauseListContext)_localctx, predIndex);
		case 13:
			return setTargetList_sempred((SetTargetListContext)_localctx, predIndex);
		case 21:
			return selectClauseN_sempred((SelectClauseNContext)_localctx, predIndex);
		case 26:
			return cteList_sempred((CteListContext)_localctx, predIndex);
		case 32:
			return forLockingItems_sempred((ForLockingItemsContext)_localctx, predIndex);
		case 37:
			return qualifiedNameList_sempred((QualifiedNameListContext)_localctx, predIndex);
		case 40:
			return valuesClause_sempred((ValuesClauseContext)_localctx, predIndex);
		case 48:
			return targetList_sempred((TargetListContext)_localctx, predIndex);
		case 58:
			return windowDefinitionList_sempred((WindowDefinitionListContext)_localctx, predIndex);
		case 69:
			return fromList_sempred((FromListContext)_localctx, predIndex);
		case 70:
			return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 120:
			return aExpr_sempred((AExprContext)_localctx, predIndex);
		case 121:
			return bExpr_sempred((BExprContext)_localctx, predIndex);
		case 123:
			return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 124:
			return optIndirection_sempred((OptIndirectionContext)_localctx, predIndex);
		case 162:
			return xmlTableColumnOptionList_sempred((XmlTableColumnOptionListContext)_localctx, predIndex);
		case 174:
			return exprList_sempred((ExprListContext)_localctx, predIndex);
		case 187:
			return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 195:
			return optArrayBounds_sempred((OptArrayBoundsContext)_localctx, predIndex);
		case 222:
			return nameList_sempred((NameListContext)_localctx, predIndex);
		case 257:
			return varName_sempred((VarNameContext)_localctx, predIndex);
		case 557:
			return tableLikeOptionList_sempred((TableLikeOptionListContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean insertColumnList_sempred(InsertColumnListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean setClauseList_sempred(SetClauseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean setTargetList_sempred(SetTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean selectClauseN_sempred(SelectClauseNContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 3);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean cteList_sempred(CteListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean forLockingItems_sempred(ForLockingItemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean qualifiedNameList_sempred(QualifiedNameListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valuesClause_sempred(ValuesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean targetList_sempred(TargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean windowDefinitionList_sempred(WindowDefinitionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean fromList_sempred(FromListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean aExpr_sempred(AExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return precpred(_ctx, 58);
		case 15:
			return precpred(_ctx, 55);
		case 16:
			return precpred(_ctx, 54);
		case 17:
			return precpred(_ctx, 53);
		case 18:
			return precpred(_ctx, 52);
		case 19:
			return precpred(_ctx, 51);
		case 20:
			return precpred(_ctx, 50);
		case 21:
			return precpred(_ctx, 49);
		case 22:
			return precpred(_ctx, 48);
		case 23:
			return precpred(_ctx, 44);
		case 24:
			return precpred(_ctx, 43);
		case 25:
			return precpred(_ctx, 42);
		case 26:
			return precpred(_ctx, 41);
		case 27:
			return precpred(_ctx, 40);
		case 28:
			return precpred(_ctx, 39);
		case 29:
			return precpred(_ctx, 38);
		case 30:
			return precpred(_ctx, 37);
		case 31:
			return precpred(_ctx, 36);
		case 32:
			return precpred(_ctx, 35);
		case 33:
			return precpred(_ctx, 34);
		case 34:
			return precpred(_ctx, 33);
		case 35:
			return precpred(_ctx, 21);
		case 36:
			return precpred(_ctx, 20);
		case 37:
			return precpred(_ctx, 17);
		case 38:
			return precpred(_ctx, 16);
		case 39:
			return precpred(_ctx, 15);
		case 40:
			return precpred(_ctx, 14);
		case 41:
			return precpred(_ctx, 2);
		case 42:
			return precpred(_ctx, 60);
		case 43:
			return precpred(_ctx, 59);
		case 44:
			return precpred(_ctx, 46);
		case 45:
			return precpred(_ctx, 32);
		case 46:
			return precpred(_ctx, 31);
		case 47:
			return precpred(_ctx, 30);
		case 48:
			return precpred(_ctx, 29);
		case 49:
			return precpred(_ctx, 27);
		case 50:
			return precpred(_ctx, 26);
		case 51:
			return precpred(_ctx, 25);
		case 52:
			return precpred(_ctx, 24);
		case 53:
			return precpred(_ctx, 23);
		case 54:
			return precpred(_ctx, 22);
		case 55:
			return precpred(_ctx, 19);
		case 56:
			return precpred(_ctx, 18);
		case 57:
			return precpred(_ctx, 13);
		case 58:
			return precpred(_ctx, 12);
		case 59:
			return precpred(_ctx, 11);
		case 60:
			return precpred(_ctx, 10);
		case 61:
			return precpred(_ctx, 8);
		case 62:
			return precpred(_ctx, 7);
		case 63:
			return precpred(_ctx, 6);
		case 64:
			return precpred(_ctx, 5);
		case 65:
			return precpred(_ctx, 4);
		case 66:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean bExpr_sempred(BExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return precpred(_ctx, 9);
		case 68:
			return precpred(_ctx, 6);
		case 69:
			return precpred(_ctx, 5);
		case 70:
			return precpred(_ctx, 12);
		case 71:
			return precpred(_ctx, 7);
		case 72:
			return precpred(_ctx, 4);
		case 73:
			return precpred(_ctx, 3);
		case 74:
			return precpred(_ctx, 2);
		case 75:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optIndirection_sempred(OptIndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean xmlTableColumnOptionList_sempred(XmlTableColumnOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean exprList_sempred(ExprListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optArrayBounds_sempred(OptArrayBoundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81:
			return precpred(_ctx, 3);
		case 82:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean nameList_sempred(NameListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 83:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean varName_sempred(VarNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 84:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableLikeOptionList_sempred(TableLikeOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 85:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 5;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0227\u277b\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\4\u026f\t\u026f"+
		"\4\u0270\t\u0270\4\u0271\t\u0271\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274"+
		"\t\u0274\4\u0275\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278"+
		"\4\u0279\t\u0279\4\u027a\t\u027a\4\u027b\t\u027b\4\u027c\t\u027c\4\u027d"+
		"\t\u027d\4\u027e\t\u027e\4\u027f\t\u027f\4\u0280\t\u0280\4\u0281\t\u0281"+
		"\4\u0282\t\u0282\4\u0283\t\u0283\4\u0284\t\u0284\4\u0285\t\u0285\4\u0286"+
		"\t\u0286\4\u0287\t\u0287\4\u0288\t\u0288\4\u0289\t\u0289\4\u028a\t\u028a"+
		"\4\u028b\t\u028b\4\u028c\t\u028c\4\u028d\t\u028d\4\u028e\t\u028e\4\u028f"+
		"\t\u028f\4\u0290\t\u0290\4\u0291\t\u0291\4\u0292\t\u0292\4\u0293\t\u0293"+
		"\4\u0294\t\u0294\4\u0295\t\u0295\4\u0296\t\u0296\4\u0297\t\u0297\4\u0298"+
		"\t\u0298\4\u0299\t\u0299\4\u029a\t\u029a\4\u029b\t\u029b\4\u029c\t\u029c"+
		"\4\u029d\t\u029d\4\u029e\t\u029e\4\u029f\t\u029f\4\u02a0\t\u02a0\4\u02a1"+
		"\t\u02a1\4\u02a2\t\u02a2\4\u02a3\t\u02a3\4\u02a4\t\u02a4\4\u02a5\t\u02a5"+
		"\4\u02a6\t\u02a6\4\u02a7\t\u02a7\4\u02a8\t\u02a8\4\u02a9\t\u02a9\4\u02aa"+
		"\t\u02aa\4\u02ab\t\u02ab\4\u02ac\t\u02ac\4\u02ad\t\u02ad\4\u02ae\t\u02ae"+
		"\4\u02af\t\u02af\4\u02b0\t\u02b0\4\u02b1\t\u02b1\4\u02b2\t\u02b2\4\u02b3"+
		"\t\u02b3\4\u02b4\t\u02b4\4\u02b5\t\u02b5\4\u02b6\t\u02b6\4\u02b7\t\u02b7"+
		"\4\u02b8\t\u02b8\4\u02b9\t\u02b9\4\u02ba\t\u02ba\4\u02bb\t\u02bb\4\u02bc"+
		"\t\u02bc\4\u02bd\t\u02bd\4\u02be\t\u02be\4\u02bf\t\u02bf\4\u02c0\t\u02c0"+
		"\4\u02c1\t\u02c1\4\u02c2\t\u02c2\4\u02c3\t\u02c3\4\u02c4\t\u02c4\4\u02c5"+
		"\t\u02c5\4\u02c6\t\u02c6\4\u02c7\t\u02c7\4\u02c8\t\u02c8\4\u02c9\t\u02c9"+
		"\4\u02ca\t\u02ca\4\u02cb\t\u02cb\4\u02cc\t\u02cc\4\u02cd\t\u02cd\4\u02ce"+
		"\t\u02ce\4\u02cf\t\u02cf\4\u02d0\t\u02d0\4\u02d1\t\u02d1\4\u02d2\t\u02d2"+
		"\4\u02d3\t\u02d3\4\u02d4\t\u02d4\4\u02d5\t\u02d5\4\u02d6\t\u02d6\4\u02d7"+
		"\t\u02d7\4\u02d8\t\u02d8\4\u02d9\t\u02d9\4\u02da\t\u02da\4\u02db\t\u02db"+
		"\4\u02dc\t\u02dc\4\u02dd\t\u02dd\4\u02de\t\u02de\4\u02df\t\u02df\4\u02e0"+
		"\t\u02e0\4\u02e1\t\u02e1\4\u02e2\t\u02e2\4\u02e3\t\u02e3\3\2\3\2\3\2\3"+
		"\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2"+
		"\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3"+
		"\2\3\2\3\2\3\2\3\2\3\2\5\2\u05f3\n\2\3\2\5\2\u05f6\n\2\3\3\5\3\u05f9\n"+
		"\3\3\3\3\3\3\3\3\3\3\3\5\3\u0600\n\3\3\3\5\3\u0603\n\3\3\4\3\4\3\4\3\4"+
		"\3\4\5\4\u060a\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0621\n\5\3\6\3\6\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\7\7\u062b\n\7\f\7\16\7\u062e\13\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\5\t\u063b\n\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0643\n\t\3"+
		"\n\3\n\3\n\3\n\5\n\u0649\n\n\3\n\3\n\3\n\3\n\5\n\u064f\n\n\3\13\5\13\u0652"+
		"\n\13\3\13\3\13\3\13\3\13\3\13\5\13\u0659\n\13\3\13\5\13\u065c\n\13\3"+
		"\13\5\13\u065f\n\13\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u0667\n\f\f\f\16\f\u066a"+
		"\13\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0676\n\r\3\16\3\16"+
		"\3\16\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u0681\n\17\f\17\16\17\u0684\13"+
		"\17\3\20\3\20\3\20\3\21\5\21\u068a\n\21\3\21\3\21\3\21\3\21\5\21\u0690"+
		"\n\21\3\21\5\21\u0693\n\21\3\21\5\21\u0696\n\21\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\5\22\u06a0\n\22\3\23\3\23\3\23\3\24\3\24\5\24\u06a7"+
		"\n\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u06b1\n\25\3\26\3\26"+
		"\3\26\3\26\3\26\3\26\5\26\u06b9\n\26\3\26\3\26\5\26\u06bd\n\26\3\26\3"+
		"\26\5\26\u06c1\n\26\3\26\3\26\5\26\u06c5\n\26\3\26\3\26\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\3\26\3\26\5\26\u06d1\n\26\3\26\3\26\5\26\u06d5\n\26\3"+
		"\26\3\26\3\26\5\26\u06da\n\26\3\26\3\26\5\26\u06de\n\26\5\26\u06e0\n\26"+
		"\3\27\3\27\3\27\5\27\u06e5\n\27\3\27\3\27\3\27\5\27\u06ea\n\27\3\27\3"+
		"\27\3\27\3\27\5\27\u06f0\n\27\3\27\3\27\3\27\3\27\5\27\u06f6\n\27\3\27"+
		"\7\27\u06f9\n\27\f\27\16\27\u06fc\13\27\3\30\3\30\5\30\u0700\n\30\3\30"+
		"\5\30\u0703\n\30\3\30\5\30\u0706\n\30\3\30\5\30\u0709\n\30\3\30\5\30\u070c"+
		"\n\30\3\30\5\30\u070f\n\30\3\30\5\30\u0712\n\30\3\30\5\30\u0715\n\30\3"+
		"\30\3\30\3\30\3\30\5\30\u071b\n\30\3\30\5\30\u071e\n\30\3\30\5\30\u0721"+
		"\n\30\3\30\5\30\u0724\n\30\3\30\5\30\u0727\n\30\3\30\5\30\u072a\n\30\3"+
		"\30\3\30\3\30\5\30\u072f\n\30\3\31\3\31\3\31\3\31\3\31\5\31\u0736\n\31"+
		"\3\32\3\32\3\32\3\33\3\33\5\33\u073d\n\33\3\33\3\33\3\33\5\33\u0742\n"+
		"\33\3\33\3\33\3\33\3\33\5\33\u0748\n\33\3\33\3\33\3\33\3\33\5\33\u074e"+
		"\n\33\3\33\3\33\3\33\3\33\5\33\u0754\n\33\3\33\3\33\3\33\3\33\5\33\u075a"+
		"\n\33\3\33\3\33\3\33\5\33\u075f\n\33\3\33\3\33\5\33\u0763\n\33\3\33\3"+
		"\33\5\33\u0767\n\33\3\34\3\34\3\34\3\34\3\34\3\34\7\34\u076f\n\34\f\34"+
		"\16\34\u0772\13\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3"+
		"\36\3\36\5\36\u0780\n\36\3\37\3\37\3\37\3\37\3\37\5\37\u0787\n\37\3 \3"+
		" \3 \3 \5 \u078d\n \3!\3!\3!\3!\5!\u0793\n!\3\"\3\"\3\"\3\"\3\"\7\"\u079a"+
		"\n\"\f\"\16\"\u079d\13\"\3#\3#\5#\u07a1\n#\3#\5#\u07a4\n#\3$\3$\3$\5$"+
		"\u07a9\n$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u07b6\n%\3&\3&\3&\3\'\3"+
		"\'\3\'\3\'\3\'\3\'\7\'\u07c1\n\'\f\'\16\'\u07c4\13\'\3(\3(\3(\3(\5(\u07ca"+
		"\n(\3)\3)\3)\3)\3)\3)\3)\3)\5)\u07d4\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*"+
		"\3*\3*\7*\u07e2\n*\f*\16*\u07e5\13*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3"+
		"+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0806\n"+
		"+\3,\3,\3,\3,\3,\3,\5,\u080e\n,\3-\3-\5-\u0812\n-\3.\3.\3/\3/\3/\3/\3"+
		"/\5/\u081b\n/\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u0827"+
		"\n\62\f\62\16\62\u082a\13\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3"+
		"\63\3\63\3\63\3\63\5\63\u0838\n\63\3\64\3\64\3\64\3\64\3\65\3\65\3\65"+
		"\7\65\u0841\n\65\f\65\16\65\u0844\13\65\3\66\3\66\3\66\3\66\3\66\5\66"+
		"\u084b\n\66\3\67\3\67\3\67\38\38\38\38\38\39\39\39\39\39\3:\3:\3:\3:\3"+
		":\3:\3;\3;\3;\3<\3<\3<\3<\3<\3<\7<\u0869\n<\f<\16<\u086c\13<\3=\3=\3="+
		"\3=\3>\3>\5>\u0874\n>\3>\5>\u0877\n>\3>\5>\u087a\n>\3>\5>\u087d\n>\3>"+
		"\3>\3?\3?\3@\3@\3@\3@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0893\nA"+
		"\3B\3B\3B\3B\3B\3B\5B\u089b\nB\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C"+
		"\u08a9\nC\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u08b6\nD\3E\3E\5E\u08ba"+
		"\nE\3F\3F\3F\3G\3G\3G\3G\3G\3G\7G\u08c5\nG\fG\16G\u08c8\13G\3H\3H\3H\5"+
		"H\u08cd\nH\3H\3H\5H\u08d1\nH\3H\3H\3H\3H\5H\u08d7\nH\3H\3H\3H\5H\u08dc"+
		"\nH\3H\3H\5H\u08e0\nH\3H\3H\3H\5H\u08e5\nH\3H\3H\5H\u08e9\nH\3H\3H\3H"+
		"\5H\u08ee\nH\3H\3H\3H\3H\3H\5H\u08f5\nH\5H\u08f7\nH\3H\3H\7H\u08fb\nH"+
		"\fH\16H\u08fe\13H\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3"+
		"I\3I\3I\5I\u0914\nI\3J\3J\5J\u0918\nJ\3J\3J\5J\u091c\nJ\3J\3J\5J\u0920"+
		"\nJ\3J\5J\u0923\nJ\3K\3K\3L\3L\3L\3L\3L\3L\3L\5L\u092e\nL\3M\3M\3M\3M"+
		"\3M\3M\3M\3M\3M\3M\3M\5M\u093b\nM\3N\3N\3N\3O\3O\3O\3O\3O\5O\u0945\nO"+
		"\3P\3P\3P\3Q\3Q\3Q\3R\6R\u094e\nR\rR\16R\u094f\3S\3S\3S\5S\u0955\nS\3"+
		"T\3T\5T\u0959\nT\3T\3T\3T\3T\3T\5T\u0960\nT\3T\5T\u0963\nT\3U\3U\3U\3"+
		"U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0975\nU\3V\3V\3W\3W\5W\u097b"+
		"\nW\3W\3W\3W\3W\3W\5W\u0982\nW\3W\3W\5W\u0986\nW\3W\3W\5W\u098a\nW\3W"+
		"\5W\u098d\nW\3W\3W\5W\u0991\nW\3W\3W\3W\3W\3W\3W\5W\u0999\nW\3W\3W\5W"+
		"\u099d\nW\3W\3W\5W\u09a1\nW\3X\3X\3X\3X\3X\5X\u09a8\nX\3Y\3Y\3Y\7Y\u09ad"+
		"\nY\fY\16Y\u09b0\13Y\3Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3[\5[\u09bc\n[\3\\\3\\"+
		"\3\\\7\\\u09c1\n\\\f\\\16\\\u09c4\13\\\3]\3]\3^\7^\u09c9\n^\f^\16^\u09cc"+
		"\13^\3_\3_\3_\3_\5_\u09d2\n_\3_\3_\3_\5_\u09d7\n_\3_\3_\3_\3_\3_\5_\u09de"+
		"\n_\3_\3_\3_\5_\u09e3\n_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_"+
		"\3_\5_\u09f5\n_\3`\5`\u09f8\n`\3`\3`\3`\3a\3a\5a\u09ff\na\3a\3a\5a\u0a03"+
		"\na\3b\3b\3b\3c\3c\3c\3c\3c\5c\u0a0d\nc\3c\3c\3c\5c\u0a12\nc\3c\3c\3c"+
		"\5c\u0a17\nc\3c\3c\3c\5c\u0a1c\nc\3c\3c\3c\3c\5c\u0a22\nc\3c\3c\3c\3c"+
		"\3c\5c\u0a29\nc\3c\3c\3c\3c\5c\u0a2f\nc\3c\3c\3c\3c\5c\u0a35\nc\3c\3c"+
		"\3c\5c\u0a3a\nc\3c\3c\3c\3c\5c\u0a40\nc\3c\3c\3c\3c\3c\5c\u0a47\nc\3c"+
		"\3c\3c\5c\u0a4c\nc\3c\3c\3c\3c\5c\u0a52\nc\3c\3c\3c\3c\3c\5c\u0a59\nc"+
		"\3c\5c\u0a5c\nc\3d\3d\5d\u0a60\nd\3e\3e\3f\5f\u0a65\nf\3f\3f\5f\u0a69"+
		"\nf\3g\3g\3g\3h\5h\u0a6f\nh\3h\3h\5h\u0a73\nh\3h\5h\u0a76\nh\3i\3i\3i"+
		"\3j\3j\3j\3k\3k\3l\3l\3m\3m\3n\3n\3n\5n\u0a87\nn\3n\3n\3o\3o\3o\5o\u0a8e"+
		"\no\3o\3o\3p\3p\3q\3q\3r\5r\u0a97\nr\3r\3r\3r\7r\u0a9c\nr\fr\16r\u0a9f"+
		"\13r\3r\5r\u0aa2\nr\3s\3s\3s\3s\7s\u0aa8\ns\fs\16s\u0aab\13s\3s\3s\3t"+
		"\3t\5t\u0ab1\nt\3u\3u\3v\5v\u0ab6\nv\3v\3v\3w\3w\3x\3x\3y\3y\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0ad2\nz\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0b41\nz\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\5z\u0b4b\nz\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\7z\u0bc7\nz\fz\16z\u0bca\13z\3"+
		"{\3{\3{\3{\3{\3{\3{\3{\3{\5{\u0bd5\n{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3"+
		"{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3"+
		"{\3{\3{\3{\3{\3{\3{\3{\3{\7{\u0c01\n{\f{\16{\u0c04\13{\3|\3|\3|\3|\3|"+
		"\5|\u0c0b\n|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|"+
		"\3|\3|\3|\3|\3|\5|\u0c25\n|\3}\3}\3}\3}\3}\7}\u0c2c\n}\f}\16}\u0c2f\13"+
		"}\3~\3~\3~\7~\u0c34\n~\f~\16~\u0c37\13~\3\177\3\177\3\177\3\177\3\177"+
		"\3\177\3\177\3\177\3\177\3\177\5\177\u0c43\n\177\3\177\3\177\5\177\u0c47"+
		"\n\177\3\177\5\177\u0c4a\n\177\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0081\5\u0081\u0c53\n\u0081\3\u0082\3\u0082\5\u0082\u0c57\n"+
		"\u0082\3\u0082\3\u0082\5\u0082\u0c5b\n\u0082\3\u0082\3\u0082\3\u0083\6"+
		"\u0083\u0c60\n\u0083\r\u0083\16\u0083\u0c61\3\u0084\3\u0084\3\u0084\3"+
		"\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\5\u0087\u0c72\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0c7c\n\u0088\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\5\u0089\u0c8a\n\u0089\3\u008a\3\u008a\5\u008a\u0c8e\n\u008a\3"+
		"\u008b\6\u008b\u0c91\n\u008b\r\u008b\16\u008b\u0c92\3\u008c\3\u008c\3"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0c9d\n\u008d\3"+
		"\u008e\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0ca6\n"+
		"\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\5\u0090\u0cb2\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\5\u0091\u0cc2\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\5\u0092\u0ccc\n\u0092\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0ce0\n\u0095"+
		"\3\u0096\3\u0096\3\u0096\7\u0096\u0ce5\n\u0096\f\u0096\16\u0096\u0ce8"+
		"\13\u0096\3\u0097\3\u0097\3\u0097\7\u0097\u0ced\n\u0097\f\u0097\16\u0097"+
		"\u0cf0\13\u0097\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0cfd\n\u0099\3\u009a\3\u009a"+
		"\3\u009a\7\u009a\u0d02\n\u009a\f\u009a\16\u009a\u0d05\13\u009a\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0d0f"+
		"\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b"+
		"\u0d18\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\5\u009b\u0d23\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\5\u009b\u0d2c\n\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0d35\n\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0d3e\n\u009b\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\5\u009c\u0d44\n\u009c\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0d4f\n\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0d57\n\u009d"+
		"\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\5\u009f\u0d5e\n\u009f\3\u00a0"+
		"\3\u00a0\5\u00a0\u0d62\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\5\u00a0\u0d6a\n\u00a0\5\u00a0\u0d6c\n\u00a0\3\u00a1\3\u00a1\3"+
		"\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u0d83\n\u00a1\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0d88\n"+
		"\u00a2\f\u00a2\16\u00a2\u0d8b\13\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0d98"+
		"\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0d9f\n\u00a4"+
		"\f\u00a4\16\u00a4\u0da2\13\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0dac\n\u00a5\3\u00a6\3\u00a6\3\u00a6"+
		"\7\u00a6\u0db1\n\u00a6\f\u00a6\16\u00a6\u0db4\13\u00a6\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0dbc\n\u00a7\3\u00a8\3\u00a8"+
		"\5\u00a8\u0dc0\n\u00a8\3\u00a8\5\u00a8\u0dc3\n\u00a8\3\u00a8\5\u00a8\u0dc6"+
		"\n\u00a8\3\u00a8\5\u00a8\u0dc9\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab"+
		"\3\u00ab\5\u00ab\u0dd9\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0e09\n\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\5\u00ad\u0ea6\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0eb2\n\u00ad\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae"+
		"\u0ecf\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0ede\n\u00af"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0ee6\n\u00b0"+
		"\f\u00b0\16\u00b0\u0ee9\13\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0ef6\n\u00b2"+
		"\3\u00b3\3\u00b3\5\u00b3\u0efa\n\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3"+
		"\u0eff\n\u00b3\5\u00b3\u0f01\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\5\u00b5\u0f12\n\u00b5\3\u00b5\3\u00b5\5\u00b5\u0f16\n"+
		"\u00b5\3\u00b5\3\u00b5\5\u00b5\u0f1a\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b5\5\u00b5\u0f22\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3"+
		"\u00b6\3\u00b6\5\u00b6\u0f29\n\u00b6\3\u00b6\3\u00b6\5\u00b6\u0f2d\n\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0f34\n\u00b6\3\u00b6"+
		"\3\u00b6\5\u00b6\u0f38\n\u00b6\3\u00b6\5\u00b6\u0f3b\n\u00b6\3\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0f43\n\u00b7\3\u00b8\3"+
		"\u00b8\5\u00b8\u0f47\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3"+
		"\u00ba\3\u00ba\3\u00bb\3\u00bb\5\u00bb\u0f52\n\u00bb\3\u00bb\3\u00bb\5"+
		"\u00bb\u0f56\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0f5c\n\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0f61\n\u00bb\3\u00bb\3\u00bb\5\u00bb"+
		"\u0f65\n\u00bb\5\u00bb\u0f67\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5"+
		"\u00bc\u0f6d\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3"+
		"\u00bd\7\u00bd\u0f76\n\u00bd\f\u00bd\16\u00bd\u0f79\13\u00bd\3\u00be\3"+
		"\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0f81\n\u00bf\3\u00c0\3"+
		"\u00c0\5\u00c0\u0f85\n\u00c0\3\u00c1\3\u00c1\5\u00c1\u0f89\n\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\5\u00c2\u0f91\n\u00c2\3\u00c3"+
		"\3\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\5\u00c4\u0fb1\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u0fbb\n\u00c5\f\u00c5\16\u00c5"+
		"\u0fbe\13\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0fc5"+
		"\n\u00c6\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u0fd0\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0fdb\n\u00c9\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0feb\n\u00cd\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0ffd\n\u00ce\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u1007\n\u00d0"+
		"\f\u00d0\16\u00d0\u100a\13\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\5\u00d1\u1011\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\5\u00d2\u1022\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1028\n"+
		"\u00d3\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5"+
		"\u1031\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1038\n"+
		"\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\5\u00d7\u1044\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d9"+
		"\3\u00d9\3\u00d9\7\u00d9\u104c\n\u00d9\f\u00d9\16\u00d9\u104f\13\u00d9"+
		"\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db\7\u00db"+
		"\u1059\n\u00db\f\u00db\16\u00db\u105c\13\u00db\3\u00dc\3\u00dc\3\u00dc"+
		"\5\u00dc\u1061\n\u00dc\3\u00dd\3\u00dd\5\u00dd\u1065\n\u00dd\3\u00dd\3"+
		"\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u106d\n\u00de\3\u00df\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u107d\n\u00df\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u1085\n\u00e0\f\u00e0\16\u00e0"+
		"\u1088\13\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\5\u00e1\u109b\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\5\u00e2\u10a3\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e6"+
		"\7\u00e6\u10b3\n\u00e6\f\u00e6\16\u00e6\u10b6\13\u00e6\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\5\u00e7\u10bc\n\u00e7\3\u00e7\3\u00e7\5\u00e7\u10c0\n"+
		"\u00e7\3\u00e7\5\u00e7\u10c3\n\u00e7\5\u00e7\u10c5\n\u00e7\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\5\u00e8\u10cb\n\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u10d4\n\u00e9\3\u00ea\3\u00ea\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u10dc\n\u00eb\3\u00ec\3\u00ec\3\u00ed"+
		"\3\u00ed\3\u00ed\7\u00ed\u10e3\n\u00ed\f\u00ed\16\u00ed\u10e6\13\u00ed"+
		"\3\u00ee\5\u00ee\u10e9\n\u00ee\3\u00ee\3\u00ee\5\u00ee\u10ed\n\u00ee\3"+
		"\u00ee\5\u00ee\u10f0\n\u00ee\3\u00ee\5\u00ee\u10f3\n\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\5\u00ee\u10f8\n\u00ee\3\u00ee\5\u00ee\u10fb\n\u00ee\5\u00ee\u10fd"+
		"\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u110a\n\u00ef\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f1\3\u00f1\5\u00f1\u1111\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f3\3\u00f3\3\u00f3\7\u00f3\u111a\n\u00f3\f\u00f3\16\u00f3\u111d"+
		"\13\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u112e"+
		"\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1136"+
		"\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u1144\n\u00f6\3\u00f7\3\u00f7"+
		"\5\u00f7\u1148\n\u00f7\3\u00f7\5\u00f7\u114b\n\u00f7\3\u00f7\5\u00f7\u114e"+
		"\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u1155\n\u00f7"+
		"\f\u00f7\16\u00f7\u1158\13\u00f7\3\u00f7\3\u00f7\5\u00f7\u115c\n\u00f7"+
		"\3\u00f7\5\u00f7\u115f\n\u00f7\5\u00f7\u1161\n\u00f7\3\u00f8\3\u00f8\3"+
		"\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\5\u00f8\u119d\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\5\u00f9\u11a3\n\u00f9\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\5\u00fa"+
		"\u11aa\n\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u11b1\n"+
		"\u00fb\3\u00fc\3\u00fc\3\u00fc\7\u00fc\u11b6\n\u00fc\f\u00fc\16\u00fc"+
		"\u11b9\13\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u11c0"+
		"\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u11c7\n\u00fe"+
		"\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u11cd\n\u00ff\3\u0100\3\u0100"+
		"\3\u0101\3\u0101\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u11d7\n\u0102"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\7\u0103\u11df\n\u0103"+
		"\f\u0103\16\u0103\u11e2\13\u0103\3\u0104\3\u0104\3\u0104\7\u0104\u11e7"+
		"\n\u0104\f\u0104\16\u0104\u11ea\13\u0104\3\u0105\3\u0105\5\u0105\u11ee"+
		"\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u11fd\n\u0106\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u1204\n\u0107\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u120d\n\u0108\3\u0109"+
		"\3\u0109\3\u0109\5\u0109\u1212\n\u0109\3\u0109\3\u0109\3\u010a\7\u010a"+
		"\u1217\n\u010a\f\u010a\16\u010a\u121a\13\u010a\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1224\n\u010b\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u122d\n\u010c"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1235\n\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u123c\n\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1244\n\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u124d\n\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\5\u010d\u125a\n\u010d\3\u010d\5\u010d\u125d\n\u010d\3"+
		"\u010d\5\u010d\u1260\n\u010d\5\u010d\u1262\n\u010d\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010f\6\u010f\u1269\n\u010f\r\u010f\16\u010f\u126a\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110"+
		"\u1276\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\5\u0110\u1289\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110"+
		"\u128f\n\u0110\3\u0110\5\u0110\u1292\n\u0110\3\u0111\3\u0111\3\u0111\3"+
		"\u0111\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113\7\u0113\u129d\n\u0113\f"+
		"\u0113\16\u0113\u12a0\13\u0113\3\u0114\3\u0114\3\u0114\5\u0114\u12a5\n"+
		"\u0114\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0118\3\u0118\3\u0118\7\u0118\u12b6"+
		"\n\u0118\f\u0118\16\u0118\u12b9\13\u0118\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\5\u0119\u12c0\n\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\5\u011a\u12c7\n\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\5\u011b\u12d1\n\u011b\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\5\u011e\u12e3\n\u011e\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\5\u011f\u12eb\n\u011f\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\7\u0121\u12f5\n\u0121\f\u0121"+
		"\16\u0121\u12f8\13\u0121\3\u0122\3\u0122\3\u0122\3\u0123\3\u0123\3\u0124"+
		"\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1307"+
		"\n\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u131f\n\u0126\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u1330\n\u0127\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1338\n\u0128\3\u0129"+
		"\3\u0129\3\u0129\7\u0129\u133d\n\u0129\f\u0129\16\u0129\u1340\13\u0129"+
		"\3\u012a\3\u012a\5\u012a\u1344\n\u012a\3\u012b\3\u012b\3\u012c\3\u012c"+
		"\3\u012c\7\u012c\u134b\n\u012c\f\u012c\16\u012c\u134e\13\u012c\3\u012d"+
		"\3\u012d\3\u012d\5\u012d\u1353\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u135d\n\u012e\3\u012f\3\u012f"+
		"\5\u012f\u1361\n\u012f\3\u012f\7\u012f\u1364\n\u012f\f\u012f\16\u012f"+
		"\u1367\13\u012f\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\5\u0130\u1373\n\u0130\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\5\u0131\u1383\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\5\u0131\u1395\n\u0131\3\u0132\3\u0132\3\u0133"+
		"\3\u0133\3\u0133\3\u0133\5\u0133\u139d\n\u0133\3\u0134\3\u0134\3\u0134"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135"+
		"\u13aa\n\u0135\3\u0136\3\u0136\5\u0136\u13ae\n\u0136\3\u0137\3\u0137\3"+
		"\u0137\7\u0137\u13b3\n\u0137\f\u0137\16\u0137\u13b6\13\u0137\3\u0138\3"+
		"\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u13db"+
		"\n\u0138\3\u0139\3\u0139\3\u0139\5\u0139\u13e0\n\u0139\3\u013a\3\u013a"+
		"\3\u013b\3\u013b\3\u013c\3\u013c\3\u013c\7\u013c\u13e9\n\u013c\f\u013c"+
		"\16\u013c\u13ec\13\u013c\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u13f2"+
		"\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\5\u013d\u13fc\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\5\u013d\u1405\n\u013d\3\u013d\3\u013d\5\u013d\u1409\n\u013d\3"+
		"\u013d\3\u013d\5\u013d\u140d\n\u013d\3\u013d\5\u013d\u1410\n\u013d\3\u013d"+
		"\5\u013d\u1413\n\u013d\3\u013d\5\u013d\u1416\n\u013d\3\u013d\5\u013d\u1419"+
		"\n\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u141e\n\u013d\5\u013d\u1420\n"+
		"\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1426\n\u013d\5\u013d\u1428"+
		"\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1448\n\u013f\3\u0140\3\u0140"+
		"\3\u0140\7\u0140\u144d\n\u0140\f\u0140\16\u0140\u1450\13\u0140\3\u0141"+
		"\3\u0141\3\u0141\3\u0142\3\u0142\3\u0142\7\u0142\u1458\n\u0142\f\u0142"+
		"\16\u0142\u145b\13\u0142\3\u0143\3\u0143\5\u0143\u145f\n\u0143\3\u0144"+
		"\3\u0144\3\u0144\5\u0144\u1464\n\u0144\3\u0144\3\u0144\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\5\u0145\u146d\n\u0145\3\u0146\3\u0146\3\u0146"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1479"+
		"\n\u0147\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148\u147f\n\u0148\3\u0149"+
		"\3\u0149\3\u0149\3\u014a\3\u014a\3\u014a\5\u014a\u1487\n\u014a\3\u014b"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1490\n\u014b"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1496\n\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\5\u014b\u149c\n\u014b\3\u014b\3\u014b\5\u014b\u14a0\n"+
		"\u014b\3\u014b\5\u014b\u14a3\n\u014b\3\u014b\5\u014b\u14a6\n\u014b\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014d\3\u014d\3\u014d\7\u014d\u14b0"+
		"\n\u014d\f\u014d\16\u014d\u14b3\13\u014d\3\u014e\3\u014e\3\u014e\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\5\u014f\u14bc\n\u014f\3\u014f\7\u014f\u14bf\n"+
		"\u014f\f\u014f\16\u014f\u14c2\13\u014f\3\u0150\3\u0150\3\u0150\5\u0150"+
		"\u14c7\n\u0150\3\u0150\5\u0150\u14ca\n\u0150\3\u0150\5\u0150\u14cd\n\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\7\u0150\u14d5\n\u0150"+
		"\f\u0150\16\u0150\u14d8\13\u0150\5\u0150\u14da\n\u0150\3\u0150\5\u0150"+
		"\u14dd\n\u0150\3\u0150\3\u0150\5\u0150\u14e1\n\u0150\3\u0150\3\u0150\3"+
		"\u0150\3\u0150\5\u0150\u14e7\n\u0150\3\u0150\3\u0150\5\u0150\u14eb\n\u0150"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151\u14f1\n\u0151\3\u0151\3\u0151"+
		"\3\u0152\3\u0152\5\u0152\u14f7\n\u0152\3\u0152\3\u0152\3\u0152\5\u0152"+
		"\u14fc\n\u0152\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\5\u0153\u1506\n\u0153\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\5\u0154\u1516\n\u0154\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u151c\n"+
		"\u0154\5\u0154\u151e\n\u0154\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3"+
		"\u0155\5\u0155\u1526\n\u0155\3\u0155\3\u0155\3\u0155\3\u0156\3\u0156\3"+
		"\u0156\3\u0156\3\u0156\5\u0156\u1530\n\u0156\3\u0157\3\u0157\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u153a\n\u0158\3\u0159\3"+
		"\u0159\3\u015a\3\u015a\5\u015a\u1540\n\u015a\3\u015a\3\u015a\3\u015a\5"+
		"\u015a\u1545\n\u015a\3\u015a\5\u015a\u1548\n\u015a\3\u015b\3\u015b\3\u015b"+
		"\3\u015b\5\u015b\u154e\n\u015b\3\u015c\5\u015c\u1551\n\u015c\3\u015c\3"+
		"\u015c\5\u015c\u1555\n\u015c\3\u015d\3\u015d\3\u015d\3\u015d\3\u015e\3"+
		"\u015e\3\u015e\3\u015e\7\u015e\u155f\n\u015e\f\u015e\16\u015e\u1562\13"+
		"\u015e\5\u015e\u1564\n\u015e\3\u015e\3\u015e\3\u015f\3\u015f\3\u015f\3"+
		"\u015f\3\u015f\7\u015f\u156d\n\u015f\f\u015f\16\u015f\u1570\13\u015f\5"+
		"\u015f\u1572\n\u015f\3\u0160\3\u0160\3\u0160\5\u0160\u1577\n\u0160\3\u0160"+
		"\7\u0160\u157a\n\u0160\f\u0160\16\u0160\u157d\13\u0160\3\u0161\5\u0161"+
		"\u1580\n\u0161\3\u0161\3\u0161\3\u0161\3\u0162\3\u0162\3\u0162\3\u0163"+
		"\5\u0163\u1589\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\5\u0163\u159b\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\5\u0163\u15a3\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\5\u0163\u15ad\n\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\5\u0163\u15b5\n\u0163\3\u0163\3\u0163\3\u0163"+
		"\7\u0163\u15ba\n\u0163\f\u0163\16\u0163\u15bd\13\u0163\5\u0163\u15bf\n"+
		"\u0163\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u15c5\n\u0164\3\u0165\3"+
		"\u0165\5\u0165\u15c9\n\u0165\3\u0166\6\u0166\u15cc\n\u0166\r\u0166\16"+
		"\u0166\u15cd\3\u0167\3\u0167\5\u0167\u15d2\n\u0167\3\u0167\3\u0167\3\u0167"+
		"\5\u0167\u15d7\n\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\5\u0167\u15e9\n\u0167\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168"+
		"\u15ef\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u15f5\n\u0168\3"+
		"\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u15fd\n\u0169\3"+
		"\u016a\5\u016a\u1600\n\u016a\3\u016a\5\u016a\u1603\n\u016a\3\u016a\3\u016a"+
		"\5\u016a\u1607\n\u016a\3\u016b\3\u016b\3\u016b\3\u016c\5\u016c\u160d\n"+
		"\u016c\3\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u161e"+
		"\n\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u1625\n\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u162d\n\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u1635\n\u016d"+
		"\3\u016d\3\u016d\3\u016d\7\u016d\u163a\n\u016d\f\u016d\16\u016d\u163d"+
		"\13\u016d\5\u016d\u163f\n\u016d\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016f\3\u016f\3\u016f\7\u016f\u1649\n\u016f\f\u016f\16\u016f\u164c"+
		"\13\u016f\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\5\u0170\u1659\n\u0170\3\u0171\3\u0171\5\u0171"+
		"\u165d\n\u0171\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172"+
		"\3\u0173\3\u0173\3\u0173\7\u0173\u1669\n\u0173\f\u0173\16\u0173\u166c"+
		"\13\u0173\3\u0174\3\u0174\3\u0174\5\u0174\u1671\n\u0174\3\u0174\5\u0174"+
		"\u1674\n\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u167b\n"+
		"\u0174\3\u0174\5\u0174\u167e\n\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u1683"+
		"\n\u0174\3\u0174\5\u0174\u1686\n\u0174\5\u0174\u1688\n\u0174\3\u0175\3"+
		"\u0175\5\u0175\u168c\n\u0175\3\u0176\3\u0176\5\u0176\u1690\n\u0176\3\u0177"+
		"\5\u0177\u1693\n\u0177\3\u0178\5\u0178\u1696\n\u0178\3\u0179\3\u0179\3"+
		"\u0179\5\u0179\u169b\n\u0179\3\u017a\5\u017a\u169e\n\u017a\3\u017b\3\u017b"+
		"\5\u017b\u16a2\n\u017b\3\u017c\5\u017c\u16a5\n\u017c\3\u017d\3\u017d\3"+
		"\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u16af\n\u017d\3"+
		"\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e"+
		"\u16b9\n\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\5\u017f\u16c0\n"+
		"\u017f\3\u0180\3\u0180\3\u0180\3\u0180\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0183\3\u0183\3\u0183\5\u0183"+
		"\u16d2\n\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u16d8\n\u0183\3"+
		"\u0184\3\u0184\3\u0184\7\u0184\u16dd\n\u0184\f\u0184\16\u0184\u16e0\13"+
		"\u0184\3\u0185\3\u0185\5\u0185\u16e4\n\u0185\3\u0186\3\u0186\3\u0186\7"+
		"\u0186\u16e9\n\u0186\f\u0186\16\u0186\u16ec\13\u0186\3\u0187\3\u0187\3"+
		"\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u16ff\n\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u1706\n\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u1716\n\u0187\3\u0187\5\u0187"+
		"\u1719\n\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\7\u0187\u1731\n\u0187"+
		"\f\u0187\16\u0187\u1734\13\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\7\u0187\u173d\n\u0187\f\u0187\16\u0187\u1740\13\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u1752"+
		"\n\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\5\u0187\u175c\n\u0187\5\u0187\u175e\n\u0187\3\u0188\3\u0188\5\u0188\u1762"+
		"\n\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u1767\n\u0188\3\u0188\3\u0188"+
		"\3\u0189\3\u0189\5\u0189\u176d\n\u0189\3\u0189\3\u0189\3\u0189\5\u0189"+
		"\u1772\n\u0189\3\u018a\3\u018a\5\u018a\u1776\n\u018a\3\u018b\3\u018b\3"+
		"\u018b\5\u018b\u177b\n\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u1780\n\u018b"+
		"\3\u018b\3\u018b\5\u018b\u1784\n\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u179a"+
		"\n\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u17a2"+
		"\n\u018b\3\u018b\3\u018b\3\u018b\7\u018b\u17a7\n\u018b\f\u018b\16\u018b"+
		"\u17aa\13\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\5\u018b\u17c7\n\u018b\3\u018c\3\u018c\5\u018c\u17cb\n"+
		"\u018c\3\u018c\3\u018c\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\5\u018d"+
		"\u17d4\n\u018d\3\u018d\5\u018d\u17d7\n\u018d\3\u018d\3\u018d\5\u018d\u17db"+
		"\n\u018d\3\u018d\5\u018d\u17de\n\u018d\5\u018d\u17e0\n\u018d\3\u018e\3"+
		"\u018e\3\u018e\7\u018e\u17e5\n\u018e\f\u018e\16\u018e\u17e8\13\u018e\3"+
		"\u018f\3\u018f\3\u018f\3\u018f\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190"+
		"\u17f2\n\u0190\3\u0190\5\u0190\u17f5\n\u0190\3\u0191\3\u0191\5\u0191\u17f9"+
		"\n\u0191\3\u0191\3\u0191\5\u0191\u17fd\n\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\3\u0192\3\u0192\3\u0192\3\u0192\3\u0193\3\u0193\3\u0194"+
		"\3\u0194\5\u0194\u180c\n\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0197\3\u0197\5\u0197\u181e\n\u0197\3\u0198\3\u0198\3\u0198\7\u0198"+
		"\u1823\n\u0198\f\u0198\16\u0198\u1826\13\u0198\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\3\u019a\5\u019a\u182e\n\u019a\3\u019a\5\u019a\u1831\n"+
		"\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\3\u019a\3\u019a\5\u019a\u183d\n\u019a\3\u019b\6\u019b\u1840\n\u019b\r"+
		"\u019b\16\u019b\u1841\3\u019c\3\u019c\5\u019c\u1846\n\u019c\3\u019c\3"+
		"\u019c\3\u019c\3\u019c\5\u019c\u184c\n\u019c\3\u019c\3\u019c\3\u019c\3"+
		"\u019c\5\u019c\u1852\n\u019c\3\u019c\3\u019c\5\u019c\u1856\n\u019c\3\u019d"+
		"\3\u019d\3\u019d\7\u019d\u185b\n\u019d\f\u019d\16\u019d\u185e\13\u019d"+
		"\3\u019e\3\u019e\5\u019e\u1862\n\u019e\3\u019e\3\u019e\3\u019e\5\u019e"+
		"\u1867\n\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u186c\n\u019e\3\u019e\3"+
		"\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u1873\n\u019e\3\u019e\3\u019e\3"+
		"\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u187c\n\u019e\3\u019e\3"+
		"\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u1885\n\u019e\3"+
		"\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u188e\n"+
		"\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u1896\n"+
		"\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u189e\n"+
		"\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u18a6\n"+
		"\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e"+
		"\u18af\n\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\5\u019e\u18b8\n\u019e\3\u019e\3\u019e\5\u019e\u18bc\n\u019e\3\u019e\3"+
		"\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u18c3\n\u019e\3\u019e\3\u019e\3"+
		"\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u18cb\n\u019e\3\u019e\3\u019e\3"+
		"\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u18d5\n\u019e\3"+
		"\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u18db\n\u019e\3\u019e\3\u019e\5"+
		"\u019e\u18df\n\u019e\3\u019e\3\u019e\5\u019e\u18e3\n\u019e\3\u019e\3\u019e"+
		"\5\u019e\u18e7\n\u019e\3\u019e\3\u019e\5\u019e\u18eb\n\u019e\3\u019e\3"+
		"\u019e\3\u019e\5\u019e\u18f0\n\u019e\3\u019e\5\u019e\u18f3\n\u019e\3\u019e"+
		"\3\u019e\5\u019e\u18f7\n\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u190c\n\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\5\u019e\u1912\n\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\5\u019e\u1971\n\u019e\3\u019f\7\u019f\u1974\n\u019f\f\u019f\16\u019f"+
		"\u1977\13\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0"+
		"\3\u01a0\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u1984\n\u01a0\3\u01a1\3\u01a1"+
		"\3\u01a1\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2\7\u01a2\u198e\n\u01a2"+
		"\f\u01a2\16\u01a2\u1991\13\u01a2\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3"+
		"\3\u01a3\3\u01a3\5\u01a3\u199a\n\u01a3\3\u01a4\3\u01a4\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a7\6\u01a7\u19a5\n\u01a7\r\u01a7"+
		"\16\u01a7\u19a6\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u19ac\n\u01a8\3\u01a8"+
		"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u19b4\n\u01a8\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u19bb\n\u01a9\3\u01aa\3\u01aa"+
		"\3\u01aa\3\u01aa\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\5\u01ac\u19d2\n\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u19df\n\u01ae"+
		"\3\u01af\3\u01af\3\u01af\7\u01af\u19e4\n\u01af\f\u01af\16\u01af\u19e7"+
		"\13\u01af\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u19ed\n\u01b0\3\u01b0"+
		"\5\u01b0\u19f0\n\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u19f6\n"+
		"\u01b0\3\u01b0\5\u01b0\u19f9\n\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3"+
		"\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0"+
		"\u1a07\n\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\5\u01b1"+
		"\u1a0f\n\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2"+
		"\5\u01b2\u1a21\n\u01b2\3\u01b3\3\u01b3\3\u01b3\7\u01b3\u1a26\n\u01b3\f"+
		"\u01b3\16\u01b3\u1a29\13\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4\5\u01b4"+
		"\u1a2f\n\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1a36\n"+
		"\u01b5\3\u01b6\3\u01b6\3\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1a57\n\u01b9\3\u01ba"+
		"\3\u01ba\3\u01ba\7\u01ba\u1a5c\n\u01ba\f\u01ba\16\u01ba\u1a5f\13\u01ba"+
		"\3\u01bb\3\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc"+
		"\3\u01bc\3\u01bc\5\u01bc\u1a6c\n\u01bc\3\u01bd\3\u01bd\3\u01bd\3\u01bd"+
		"\3\u01bd\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\5\u01be\u1a7e\n\u01be\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\5\u01c0\u1a8e\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1"+
		"\5\u01c1\u1a94\n\u01c1\3\u01c1\3\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u1a9f\n\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u1aa8\n\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\5\u01c2"+
		"\u1ab4\n\u01c2\5\u01c2\u1ab6\n\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3"+
		"\u01c4\3\u01c4\3\u01c4\7\u01c4\u1abf\n\u01c4\f\u01c4\16\u01c4\u1ac2\13"+
		"\u01c4\3\u01c5\5\u01c5\u1ac5\n\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3"+
		"\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7"+
		"\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1ada\n\u01c7"+
		"\3\u01c8\3\u01c8\3\u01c8\7\u01c8\u1adf\n\u01c8\f\u01c8\16\u01c8\u1ae2"+
		"\13\u01c8\3\u01c9\3\u01c9\5\u01c9\u1ae6\n\u01c9\3\u01c9\3\u01c9\5\u01c9"+
		"\u1aea\n\u01c9\3\u01c9\3\u01c9\5\u01c9\u1aee\n\u01c9\3\u01c9\3\u01c9\5"+
		"\u01c9\u1af2\n\u01c9\5\u01c9\u1af4\n\u01c9\3\u01ca\6\u01ca\u1af7\n\u01ca"+
		"\r\u01ca\16\u01ca\u1af8\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb"+
		"\5\u01cb\u1b01\n\u01cb\3\u01cc\3\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\5\u01ce\u1b17\n\u01ce\3\u01ce"+
		"\3\u01ce\5\u01ce\u1b1b\n\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\5\u01ce\u1b3b"+
		"\n\u01ce\3\u01cf\3\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\5\u01d1\u1b4e\n\u01d1\3\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u1b76\n\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\5\u01d4\u1bcb\n\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1bd5\n\u01d5\3\u01d6\3\u01d6\3\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1bdd\n\u01d6\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d8\7\u01d8\u1be3\n\u01d8\f\u01d8\16\u01d8\u1be6\13\u01d8\3\u01d9"+
		"\3\u01d9\3\u01d9\5\u01d9\u1beb\n\u01d9\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01da\3\u01db\5\u01db\u1bf5\n\u01db\3\u01db\3\u01db"+
		"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u1bff\n\u01db"+
		"\3\u01dc\6\u01dc\u1c02\n\u01dc\r\u01dc\16\u01dc\u1c03\3\u01dd\3\u01dd"+
		"\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u1c0e\n\u01dd"+
		"\3\u01de\3\u01de\3\u01df\3\u01df\3\u01df\3\u01df\3\u01e0\3\u01e0\3\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0\u1c20"+
		"\n\u01e0\3\u01e1\3\u01e1\5\u01e1\u1c24\n\u01e1\3\u01e1\3\u01e1\3\u01e1"+
		"\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\5\u01e1"+
		"\u1c31\n\u01e1\5\u01e1\u1c33\n\u01e1\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3"+
		"\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u1c3e\n\u01e2\3\u01e3\3"+
		"\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e4\3\u01e4\5\u01e4\u1c47\n\u01e4\3"+
		"\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\5\u01e4\u1c54\n\u01e4\3\u01e4\3\u01e4\3\u01e4\5\u01e4"+
		"\u1c59\n\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\5\u01e4"+
		"\u1c61\n\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\5\u01e4\u1c6a\n\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\5\u01e4\u1c7d\n\u01e4\5\u01e4\u1c7f\n\u01e4\3\u01e5\3"+
		"\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u1c89\n"+
		"\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e6\7\u01e6\u1c8f\n\u01e6\f\u01e6\16"+
		"\u01e6\u1c92\13\u01e6\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\5\u01e7"+
		"\u1c99\n\u01e7\3\u01e8\3\u01e8\5\u01e8\u1c9d\n\u01e8\3\u01e8\3\u01e8\3"+
		"\u01e8\3\u01e8\3\u01e8\5\u01e8\u1ca4\n\u01e8\3\u01e8\3\u01e8\3\u01e8\3"+
		"\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\5\u01e8\u1cae\n\u01e8\3\u01e9\3"+
		"\u01e9\5\u01e9\u1cb2\n\u01e9\3\u01e9\3\u01e9\3\u01e9\5\u01e9\u1cb7\n\u01e9"+
		"\3\u01e9\3\u01e9\5\u01e9\u1cbb\n\u01e9\3\u01ea\3\u01ea\3\u01ea\3\u01ea"+
		"\5\u01ea\u1cc1\n\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea"+
		"\5\u01ea\u1cc9\n\u01ea\3\u01eb\3\u01eb\3\u01eb\3\u01eb\5\u01eb\u1ccf\n"+
		"\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01ec\3\u01ec\5\u01ec"+
		"\u1cd8\n\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u1cdf\n"+
		"\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u1ce7\n"+
		"\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u1cec\n\u01ec\3\u01ed\3\u01ed\3"+
		"\u01ed\3\u01ed\3\u01ed\3\u01ee\3\u01ee\5\u01ee\u1cf5\n\u01ee\3\u01ee\3"+
		"\u01ee\3\u01ee\3\u01ee\5\u01ee\u1cfb\n\u01ee\3\u01ee\3\u01ee\3\u01ee\3"+
		"\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\5\u01ee\u1d07\n"+
		"\u01ee\3\u01ef\6\u01ef\u1d0a\n\u01ef\r\u01ef\16\u01ef\u1d0b\3\u01f0\3"+
		"\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f1\3\u01f1\5\u01f1\u1d15\n\u01f1\3"+
		"\u01f1\3\u01f1\3\u01f1\3\u01f1\5\u01f1\u1d1b\n\u01f1\3\u01f1\3\u01f1\3"+
		"\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1\5\u01f1"+
		"\u1d27\n\u01f1\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2"+
		"\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\5\u01f2\u1d37"+
		"\n\u01f2\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f4\3\u01f4\3\u01f4"+
		"\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f5\3\u01f5\3\u01f5\3\u01f5"+
		"\5\u01f5\u1d4a\n\u01f5\3\u01f5\3\u01f5\3\u01f5\3\u01f6\3\u01f6\3\u01f6"+
		"\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\5\u01f6\u1d57\n\u01f6\3\u01f7"+
		"\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7"+
		"\3\u01f7\3\u01f7\3\u01f7\3\u01f7\5\u01f7\u1d67\n\u01f7\3\u01f8\3\u01f8"+
		"\3\u01f8\3\u01f9\3\u01f9\3\u01f9\3\u01f9\5\u01f9\u1d70\n\u01f9\3\u01f9"+
		"\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9"+
		"\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9"+
		"\3\u01f9\5\u01f9\u1d86\n\u01f9\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa"+
		"\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa"+
		"\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1d99\n\u01fa\3\u01fa\3\u01fa\3\u01fa"+
		"\3\u01fa\3\u01fa\5\u01fa\u1da0\n\u01fa\3\u01fa\5\u01fa\u1da3\n\u01fa\3"+
		"\u01fb\3\u01fb\3\u01fb\7\u01fb\u1da8\n\u01fb\f\u01fb\16\u01fb\u1dab\13"+
		"\u01fb\3\u01fc\3\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd"+
		"\5\u01fd\u1db5\n\u01fd\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe"+
		"\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe\5\u01fe\u1dc3\n\u01fe"+
		"\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u0200\3\u0200"+
		"\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200"+
		"\3\u0200\3\u0200\3\u0200\5\u0200\u1dda\n\u0200\3\u0200\3\u0200\3\u0200"+
		"\3\u0200\3\u0200\3\u0200\5\u0200\u1de2\n\u0200\3\u0200\3\u0200\3\u0200"+
		"\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\5\u0200\u1ded\n\u0200"+
		"\3\u0200\3\u0200\5\u0200\u1df1\n\u0200\3\u0201\3\u0201\3\u0201\7\u0201"+
		"\u1df6\n\u0201\f\u0201\16\u0201\u1df9\13\u0201\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\3\u0202\5\u0202\u1e0a\n\u0202\3\u0203\3\u0203\3\u0203"+
		"\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203"+
		"\5\u0203\u1e18\n\u0203\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\5\u0204\u1e26\n\u0204"+
		"\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205"+
		"\5\u0205\u1e31\n\u0205\3\u0205\3\u0205\3\u0205\3\u0205\5\u0205\u1e37\n"+
		"\u0205\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0207\3\u0207\3\u0207"+
		"\3\u0207\3\u0207\3\u0207\5\u0207\u1e44\n\u0207\3\u0207\3\u0207\3\u0207"+
		"\5\u0207\u1e49\n\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207"+
		"\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\5\u0207"+
		"\u1e59\n\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207"+
		"\3\u0207\3\u0207\3\u0207\3\u0207\5\u0207\u1e66\n\u0207\3\u0208\3\u0208"+
		"\3\u0208\5\u0208\u1e6b\n\u0208\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209"+
		"\u1e71\n\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209"+
		"\u1e79\n\u0209\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209\u1e7f\n\u0209\3"+
		"\u0209\3\u0209\3\u0209\3\u0209\5\u0209\u1e85\n\u0209\3\u0209\3\u0209\3"+
		"\u0209\5\u0209\u1e8a\n\u0209\3\u0209\5\u0209\u1e8d\n\u0209\5\u0209\u1e8f"+
		"\n\u0209\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a"+
		"\3\u020a\3\u020b\3\u020b\5\u020b\u1e9c\n\u020b\3\u020c\3\u020c\3\u020c"+
		"\3\u020c\5\u020c\u1ea2\n\u020c\3\u020c\3\u020c\3\u020c\3\u020d\3\u020d"+
		"\3\u020d\3\u020d\3\u020d\3\u020d\5\u020d\u1ead\n\u020d\3\u020d\3\u020d"+
		"\3\u020d\3\u020d\3\u020d\3\u020d\3\u020d\5\u020d\u1eb6\n\u020d\3\u020e"+
		"\3\u020e\3\u020e\5\u020e\u1ebb\n\u020e\3\u020f\3\u020f\5\u020f\u1ebf\n"+
		"\u020f\3\u020f\3\u020f\5\u020f\u1ec3\n\u020f\3\u020f\3\u020f\3\u020f\3"+
		"\u020f\5\u020f\u1ec9\n\u020f\3\u0210\3\u0210\3\u0210\3\u0211\3\u0211\3"+
		"\u0211\3\u0211\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\5\u0212\u1f41\n\u0212\3\u0213"+
		"\3\u0213\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\5\u0214\u1f4a\n\u0214"+
		"\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215"+
		"\5\u0215\u1f55\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u1f5b\n"+
		"\u0215\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216"+
		"\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216"+
		"\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\5\u0216\u1f74\n\u0216"+
		"\3\u0217\3\u0217\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218"+
		"\3\u0218\3\u0218\3\u0219\3\u0219\3\u0219\5\u0219\u1f84\n\u0219\3\u0219"+
		"\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219\5\u0219\u1f8c\n\u0219\3\u021a"+
		"\3\u021a\3\u021a\3\u021a\3\u021b\3\u021b\3\u021b\7\u021b\u1f95\n\u021b"+
		"\f\u021b\16\u021b\u1f98\13\u021b\3\u021c\3\u021c\3\u021c\3\u021c\3\u021d"+
		"\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d"+
		"\3\u021d\5\u021d\u1fa9\n\u021d\3\u021d\3\u021d\3\u021d\5\u021d\u1fae\n"+
		"\u021d\3\u021d\3\u021d\3\u021d\5\u021d\u1fb3\n\u021d\5\u021d\u1fb5\n\u021d"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\5\u021e\u1fbb\n\u021e\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\5\u021f\u1fc2\n\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\5\u021f\u1fcb\n\u021f\3\u0220\3\u0220"+
		"\5\u0220\u1fcf\n\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220"+
		"\3\u0220\3\u0220\3\u0220\3\u0221\3\u0221\3\u0221\3\u0221\5\u0221\u1fde"+
		"\n\u0221\3\u0221\3\u0221\3\u0221\3\u0222\3\u0222\3\u0222\3\u0222\3\u0222"+
		"\3\u0222\3\u0222\3\u0222\5\u0222\u1feb\n\u0222\3\u0222\3\u0222\3\u0222"+
		"\3\u0222\3\u0222\3\u0222\3\u0223\3\u0223\3\u0223\7\u0223\u1ff6\n\u0223"+
		"\f\u0223\16\u0223\u1ff9\13\u0223\3\u0224\3\u0224\3\u0224\3\u0224\3\u0224"+
		"\3\u0224\3\u0225\3\u0225\3\u0225\7\u0225\u2004\n\u0225\f\u0225\16\u0225"+
		"\u2007\13\u0225\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\5\u0226\u200e"+
		"\n\u0226\3\u0226\3\u0226\5\u0226\u2012\n\u0226\3\u0226\3\u0226\3\u0227"+
		"\7\u0227\u2017\n\u0227\f\u0227\16\u0227\u201a\13\u0227\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\5\u0228\u2023\n\u0228\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\5\u0229\u202b\n\u0229\3\u0229"+
		"\5\u0229\u202e\n\u0229\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022b"+
		"\3\u022b\3\u022b\5\u022b\u2038\n\u022b\3\u022b\3\u022b\3\u022b\5\u022b"+
		"\u203d\n\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\5\u022b"+
		"\u2045\n\u022b\3\u022b\3\u022b\3\u022b\5\u022b\u204a\n\u022b\3\u022b\3"+
		"\u022b\3\u022b\5\u022b\u204f\n\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3"+
		"\u022b\3\u022b\3\u022b\3\u022b\5\u022b\u2059\n\u022b\3\u022b\3\u022b\3"+
		"\u022b\3\u022b\5\u022b\u205f\n\u022b\5\u022b\u2061\n\u022b\3\u022c\3\u022c"+
		"\3\u022c\7\u022c\u2066\n\u022c\f\u022c\16\u022c\u2069\13\u022c\3\u022d"+
		"\3\u022d\3\u022d\5\u022d\u206e\n\u022d\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022f\3\u022f\3\u022f\3\u022f\7\u022f\u2078\n\u022f\f\u022f\16\u022f"+
		"\u207b\13\u022f\3\u0230\3\u0230\3\u0231\3\u0231\3\u0231\5\u0231\u2082"+
		"\n\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231"+
		"\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\5\u0231\u2093"+
		"\n\u0231\3\u0232\3\u0232\3\u0232\7\u0232\u2098\n\u0232\f\u0232\16\u0232"+
		"\u209b\13\u0232\3\u0233\3\u0233\3\u0233\3\u0234\6\u0234\u20a1\n\u0234"+
		"\r\u0234\16\u0234\u20a2\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235"+
		"\3\u0235\3\u0235\5\u0235\u20ad\n\u0235\3\u0236\3\u0236\3\u0236\3\u0236"+
		"\3\u0236\3\u0236\3\u0236\3\u0236\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237"+
		"\5\u0237\u20bc\n\u0237\5\u0237\u20be\n\u0237\3\u0238\3\u0238\3\u0239\3"+
		"\u0239\5\u0239\u20c4\n\u0239\3\u0239\3\u0239\3\u023a\3\u023a\3\u023a\7"+
		"\u023a\u20cb\n\u023a\f\u023a\16\u023a\u20ce\13\u023a\3\u023b\3\u023b\3"+
		"\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\5\u023b\u20d9\n"+
		"\u023b\3\u023c\3\u023c\3\u023c\5\u023c\u20de\n\u023c\3\u023c\5\u023c\u20e1"+
		"\n\u023c\3\u023c\5\u023c\u20e4\n\u023c\3\u023c\3\u023c\3\u023c\3\u023c"+
		"\3\u023c\3\u023c\5\u023c\u20ec\n\u023c\3\u023c\5\u023c\u20ef\n\u023c\3"+
		"\u023c\3\u023c\3\u023c\3\u023c\5\u023c\u20f5\n\u023c\3\u023d\3\u023d\3"+
		"\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d"+
		"\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\5\u023d\u2108\n\u023d"+
		"\3\u023e\3\u023e\3\u023e\3\u023e\5\u023e\u210e\n\u023e\3\u023f\3\u023f"+
		"\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\5\u023f\u2117\n\u023f\3\u023f"+
		"\3\u023f\5\u023f\u211b\n\u023f\3\u023f\3\u023f\5\u023f\u211f\n\u023f\3"+
		"\u023f\3\u023f\3\u023f\3\u023f\3\u023f\5\u023f\u2126\n\u023f\3\u023f\3"+
		"\u023f\3\u023f\3\u023f\3\u023f\3\u023f\5\u023f\u212e\n\u023f\3\u0240\3"+
		"\u0240\3\u0240\5\u0240\u2133\n\u0240\3\u0240\3\u0240\3\u0240\3\u0240\3"+
		"\u0240\3\u0241\3\u0241\3\u0241\3\u0241\5\u0241\u213e\n\u0241\3\u0241\3"+
		"\u0241\5\u0241\u2142\n\u0241\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3"+
		"\u0242\5\u0242\u214a\n\u0242\3\u0243\3\u0243\3\u0243\5\u0243\u214f\n\u0243"+
		"\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243"+
		"\5\u0243\u215a\n\u0243\3\u0243\3\u0243\5\u0243\u215e\n\u0243\3\u0243\3"+
		"\u0243\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\5\u0244\u2168\n"+
		"\u0244\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\5\u0245\u216f\n\u0245\3"+
		"\u0246\5\u0246\u2172\n\u0246\3\u0246\3\u0246\5\u0246\u2176\n\u0246\7\u0246"+
		"\u2178\n\u0246\f\u0246\16\u0246\u217b\13\u0246\3\u0247\3\u0247\3\u0247"+
		"\3\u0247\5\u0247\u2181\n\u0247\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248"+
		"\3\u0248\3\u0248\3\u0248\5\u0248\u218b\n\u0248\3\u0248\5\u0248\u218e\n"+
		"\u0248\3\u0248\5\u0248\u2191\n\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3"+
		"\u0248\5\u0248\u2198\n\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3"+
		"\u0248\3\u0248\5\u0248\u21a1\n\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3"+
		"\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\5\u0248"+
		"\u21af\n\u0248\3\u0249\3\u0249\3\u0249\7\u0249\u21b4\n\u0249\f\u0249\16"+
		"\u0249\u21b7\13\u0249\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a"+
		"\3\u024a\5\u024a\u21c0\n\u024a\3\u024b\3\u024b\3\u024b\3\u024b\5\u024b"+
		"\u21c6\n\u024b\3\u024c\3\u024c\3\u024c\7\u024c\u21cb\n\u024c\f\u024c\16"+
		"\u024c\u21ce\13\u024c\3\u024d\3\u024d\3\u024d\5\u024d\u21d3\n\u024d\3"+
		"\u024e\3\u024e\3\u024e\3\u024e\3\u024e\3\u024f\3\u024f\5\u024f\u21dc\n"+
		"\u024f\3\u024f\3\u024f\3\u0250\3\u0250\3\u0250\3\u0251\6\u0251\u21e4\n"+
		"\u0251\r\u0251\16\u0251\u21e5\3\u0252\3\u0252\3\u0252\5\u0252\u21eb\n"+
		"\u0252\3\u0252\3\u0252\3\u0253\3\u0253\3\u0254\3\u0254\3\u0255\3\u0255"+
		"\3\u0256\3\u0256\5\u0256\u21f7\n\u0256\3\u0256\3\u0256\3\u0256\3\u0256"+
		"\5\u0256\u21fd\n\u0256\3\u0256\3\u0256\5\u0256\u2201\n\u0256\3\u0257\5"+
		"\u0257\u2204\n\u0257\3\u0257\3\u0257\5\u0257\u2208\n\u0257\3\u0258\3\u0258"+
		"\3\u0258\3\u0258\3\u0258\5\u0258\u220f\n\u0258\3\u0258\3\u0258\3\u0258"+
		"\5\u0258\u2214\n\u0258\3\u0258\5\u0258\u2217\n\u0258\3\u0258\3\u0258\3"+
		"\u0258\3\u0258\3\u0258\3\u0258\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259"+
		"\5\u0259\u2224\n\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259"+
		"\3\u0259\3\u025a\3\u025a\3\u025a\3\u025a\3\u025a\3\u025a\3\u025a\3\u025a"+
		"\3\u025a\5\u025a\u2236\n\u025a\3\u025b\3\u025b\3\u025b\3\u025b\3\u025b"+
		"\5\u025b\u223d\n\u025b\3\u025b\3\u025b\3\u025b\3\u025b\5\u025b\u2243\n"+
		"\u025b\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025d"+
		"\3\u025d\3\u025d\5\u025d\u224f\n\u025d\3\u025d\3\u025d\3\u025d\3\u025d"+
		"\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025e\3\u025e\3\u025e\3\u025e"+
		"\3\u025e\3\u025f\5\u025f\u2260\n\u025f\3\u025f\3\u025f\3\u025f\5\u025f"+
		"\u2265\n\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\5\u025f\u226c\n"+
		"\u025f\3\u025f\3\u025f\3\u025f\3\u025f\5\u025f\u2272\n\u025f\3\u0260\3"+
		"\u0260\3\u0260\7\u0260\u2277\n\u0260\f\u0260\16\u0260\u227a\13\u0260\3"+
		"\u0261\3\u0261\3\u0261\3\u0261\3\u0261\3\u0261\5\u0261\u2282\n\u0261\3"+
		"\u0261\3\u0261\3\u0261\3\u0261\3\u0261\3\u0261\3\u0262\3\u0262\3\u0262"+
		"\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\5\u0263\u2292\n\u0263\3\u0263"+
		"\3\u0263\5\u0263\u2296\n\u0263\3\u0264\3\u0264\3\u0264\3\u0264\5\u0264"+
		"\u229c\n\u0264\3\u0264\3\u0264\5\u0264\u22a0\n\u0264\3\u0265\3\u0265\3"+
		"\u0265\7\u0265\u22a5\n\u0265\f\u0265\16\u0265\u22a8\13\u0265\3\u0266\3"+
		"\u0266\3\u0266\3\u0266\5\u0266\u22ae\n\u0266\3\u0266\3\u0266\3\u0266\3"+
		"\u0266\3\u0266\3\u0266\5\u0266\u22b6\n\u0266\3\u0267\3\u0267\3\u0267\3"+
		"\u0267\5\u0267\u22bc\n\u0267\3\u0267\3\u0267\5\u0267\u22c0\n\u0267\3\u0268"+
		"\3\u0268\3\u0268\3\u0268\5\u0268\u22c6\n\u0268\3\u0268\3\u0268\5\u0268"+
		"\u22ca\n\u0268\3\u0269\3\u0269\3\u0269\3\u0269\5\u0269\u22d0\n\u0269\3"+
		"\u0269\3\u0269\5\u0269\u22d4\n\u0269\3\u026a\3\u026a\3\u026a\3\u026a\3"+
		"\u026a\5\u026a\u22db\n\u026a\3\u026a\3\u026a\5\u026a\u22df\n\u026a\3\u026b"+
		"\3\u026b\3\u026b\3\u026b\5\u026b\u22e5\n\u026b\3\u026b\3\u026b\5\u026b"+
		"\u22e9\n\u026b\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\5\u026c"+
		"\u22f1\n\u026c\3\u026c\3\u026c\5\u026c\u22f5\n\u026c\3\u026d\3\u026d\3"+
		"\u026d\3\u026d\3\u026d\5\u026d\u22fc\n\u026d\3\u026d\3\u026d\3\u026d\7"+
		"\u026d\u2301\n\u026d\f\u026d\16\u026d\u2304\13\u026d\3\u026d\5\u026d\u2307"+
		"\n\u026d\3\u026e\3\u026e\3\u026e\3\u026e\5\u026e\u230d\n\u026e\3\u026e"+
		"\3\u026e\5\u026e\u2311\n\u026e\3\u026f\3\u026f\3\u026f\7\u026f\u2316\n"+
		"\u026f\f\u026f\16\u026f\u2319\13\u026f\3\u0270\3\u0270\5\u0270\u231d\n"+
		"\u0270\3\u0270\3\u0270\3\u0270\5\u0270\u2322\n\u0270\3\u0270\3\u0270\5"+
		"\u0270\u2326\n\u0270\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\5\u0271\u232d"+
		"\n\u0271\3\u0271\3\u0271\5\u0271\u2331\n\u0271\3\u0272\3\u0272\3\u0272"+
		"\3\u0272\5\u0272\u2337\n\u0272\3\u0272\3\u0272\5\u0272\u233b\n\u0272\3"+
		"\u0273\3\u0273\3\u0273\7\u0273\u2340\n\u0273\f\u0273\16\u0273\u2343\13"+
		"\u0273\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\5\u0274\u234a\n\u0274\3"+
		"\u0274\3\u0274\3\u0274\3\u0274\5\u0274\u2350\n\u0274\3\u0275\3\u0275\3"+
		"\u0275\3\u0275\3\u0275\5\u0275\u2357\n\u0275\3\u0275\3\u0275\3\u0275\3"+
		"\u0275\5\u0275\u235d\n\u0275\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5"+
		"\u0276\u2364\n\u0276\3\u0277\3\u0277\3\u0277\3\u0277\5\u0277\u236a\n\u0277"+
		"\3\u0277\3\u0277\3\u0277\3\u0277\5\u0277\u2370\n\u0277\3\u0278\3\u0278"+
		"\3\u0278\3\u0278\5\u0278\u2376\n\u0278\3\u0278\3\u0278\5\u0278\u237a\n"+
		"\u0278\3\u0279\3\u0279\3\u0279\3\u0279\5\u0279\u2380\n\u0279\3\u0279\3"+
		"\u0279\5\u0279\u2384\n\u0279\3\u027a\3\u027a\3\u027a\3\u027a\5\u027a\u238a"+
		"\n\u027a\3\u027a\3\u027a\5\u027a\u238e\n\u027a\3\u027b\3\u027b\3\u027b"+
		"\3\u027b\5\u027b\u2394\n\u027b\3\u027b\3\u027b\3\u027b\3\u027b\5\u027b"+
		"\u239a\n\u027b\3\u027c\3\u027c\3\u027c\3\u027c\5\u027c\u23a0\n\u027c\3"+
		"\u027c\3\u027c\5\u027c\u23a4\n\u027c\3\u027d\3\u027d\3\u027d\3\u027d\5"+
		"\u027d\u23aa\n\u027d\3\u027d\3\u027d\5\u027d\u23ae\n\u027d\3\u027e\3\u027e"+
		"\3\u027e\3\u027e\5\u027e\u23b4\n\u027e\3\u027e\3\u027e\3\u027f\3\u027f"+
		"\3\u027f\3\u027f\5\u027f\u23bc\n\u027f\3\u027f\3\u027f\5\u027f\u23c0\n"+
		"\u027f\3\u0280\3\u0280\3\u0280\3\u0280\5\u0280\u23c6\n\u0280\3\u0280\3"+
		"\u0280\3\u0281\3\u0281\3\u0281\3\u0281\3\u0281\3\u0281\5\u0281\u23d0\n"+
		"\u0281\3\u0281\3\u0281\5\u0281\u23d4\n\u0281\3\u0282\3\u0282\3\u0282\3"+
		"\u0282\5\u0282\u23da\n\u0282\3\u0282\3\u0282\3\u0282\3\u0282\3\u0282\5"+
		"\u0282\u23e1\n\u0282\3\u0283\3\u0283\3\u0283\3\u0283\5\u0283\u23e7\n\u0283"+
		"\3\u0283\3\u0283\3\u0283\3\u0283\5\u0283\u23ed\n\u0283\3\u0284\3\u0284"+
		"\3\u0284\3\u0284\5\u0284\u23f3\n\u0284\3\u0284\3\u0284\5\u0284\u23f7\n"+
		"\u0284\3\u0285\3\u0285\3\u0285\3\u0285\3\u0285\5\u0285\u23fe\n\u0285\3"+
		"\u0285\3\u0285\3\u0285\3\u0285\3\u0285\3\u0286\3\u0286\3\u0286\3\u0286"+
		"\5\u0286\u2409\n\u0286\3\u0286\3\u0286\5\u0286\u240d\n\u0286\3\u0287\3"+
		"\u0287\3\u0287\3\u0287\3\u0287\5\u0287\u2414\n\u0287\3\u0287\3\u0287\3"+
		"\u0287\3\u0287\3\u0287\3\u0287\5\u0287\u241c\n\u0287\3\u0288\3\u0288\3"+
		"\u0288\3\u0288\3\u0288\3\u0289\3\u0289\3\u0289\5\u0289\u2426\n\u0289\3"+
		"\u028a\3\u028a\3\u028a\3\u028b\3\u028b\3\u028b\3\u028c\3\u028c\3\u028c"+
		"\5\u028c\u2431\n\u028c\3\u028c\3\u028c\3\u028c\3\u028d\3\u028d\3\u028d"+
		"\3\u028d\3\u028e\3\u028e\3\u028e\3\u028e\5\u028e\u243e\n\u028e\3\u028e"+
		"\3\u028e\5\u028e\u2442\n\u028e\3\u028f\3\u028f\3\u028f\3\u0290\3\u0290"+
		"\5\u0290\u2449\n\u0290\3\u0290\3\u0290\3\u0290\3\u0290\5\u0290\u244f\n"+
		"\u0290\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290\5\u0290"+
		"\u2458\n\u0290\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290"+
		"\5\u0290\u2461\n\u0290\3\u0290\3\u0290\5\u0290\u2465\n\u0290\3\u0291\3"+
		"\u0291\3\u0291\7\u0291\u246a\n\u0291\f\u0291\16\u0291\u246d\13\u0291\3"+
		"\u0292\3\u0292\3\u0293\3\u0293\3\u0294\3\u0294\3\u0295\3\u0295\3\u0295"+
		"\3\u0295\3\u0295\5\u0295\u247a\n\u0295\3\u0295\3\u0295\3\u0295\3\u0296"+
		"\3\u0296\3\u0296\3\u0296\3\u0296\5\u0296\u2484\n\u0296\3\u0296\3\u0296"+
		"\3\u0296\3\u0296\3\u0296\3\u0296\3\u0296\3\u0296\5\u0296\u248e\n\u0296"+
		"\3\u0297\3\u0297\3\u0297\3\u0297\3\u0297\3\u0298\3\u0298\3\u0298\3\u0298"+
		"\3\u0298\5\u0298\u249a\n\u0298\3\u0298\3\u0298\3\u0298\3\u0298\3\u0298"+
		"\3\u0298\3\u0298\5\u0298\u24a3\n\u0298\3\u0298\3\u0298\3\u0298\3\u0299"+
		"\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u029a\3\u029a\3\u029a"+
		"\3\u029a\3\u029a\3\u029a\3\u029a\3\u029a\3\u029a\3\u029a\3\u029b\3\u029b"+
		"\3\u029c\3\u029c\3\u029c\3\u029c\3\u029c\3\u029c\3\u029c\3\u029c\3\u029c"+
		"\3\u029c\3\u029c\3\u029c\3\u029c\3\u029c\5\u029c\u24c9\n\u029c\3\u029d"+
		"\3\u029d\3\u029d\5\u029d\u24ce\n\u029d\3\u029e\3\u029e\3\u029e\3\u029e"+
		"\5\u029e\u24d4\n\u029e\3\u029e\3\u029e\3\u029e\3\u029e\3\u029e\3\u029e"+
		"\5\u029e\u24dc\n\u029e\3\u029f\3\u029f\5\u029f\u24e0\n\u029f\3\u029f\5"+
		"\u029f\u24e3\n\u029f\3\u02a0\3\u02a0\5\u02a0\u24e7\n\u02a0\3\u02a0\3\u02a0"+
		"\5\u02a0\u24eb\n\u02a0\3\u02a0\5\u02a0\u24ee\n\u02a0\3\u02a1\3\u02a1\3"+
		"\u02a1\3\u02a2\3\u02a2\5\u02a2\u24f5\n\u02a2\3\u02a2\3\u02a2\5\u02a2\u24f9"+
		"\n\u02a2\3\u02a2\5\u02a2\u24fc\n\u02a2\3\u02a3\3\u02a3\3\u02a3\5\u02a3"+
		"\u2501\n\u02a3\3\u02a4\3\u02a4\5\u02a4\u2505\n\u02a4\3\u02a4\3\u02a4\5"+
		"\u02a4\u2509\n\u02a4\3\u02a4\5\u02a4\u250c\n\u02a4\3\u02a5\3\u02a5\5\u02a5"+
		"\u2510\n\u02a5\3\u02a5\3\u02a5\5\u02a5\u2514\n\u02a5\3\u02a5\5\u02a5\u2517"+
		"\n\u02a5\3\u02a6\3\u02a6\5\u02a6\u251b\n\u02a6\3\u02a6\3\u02a6\3\u02a7"+
		"\3\u02a7\5\u02a7\u2521\n\u02a7\3\u02a7\3\u02a7\5\u02a7\u2525\n\u02a7\3"+
		"\u02a7\3\u02a7\3\u02a8\3\u02a8\3\u02a8\3\u02a8\3\u02a9\3\u02a9\3\u02a9"+
		"\3\u02a9\3\u02aa\3\u02aa\3\u02aa\3\u02aa\3\u02ab\3\u02ab\3\u02ab\5\u02ab"+
		"\u2538\n\u02ab\3\u02ac\3\u02ac\5\u02ac\u253c\n\u02ac\3\u02ac\3\u02ac\5"+
		"\u02ac\u2540\n\u02ac\3\u02ac\5\u02ac\u2543\n\u02ac\3\u02ad\3\u02ad\3\u02ad"+
		"\3\u02ad\3\u02ad\3\u02ad\3\u02ad\3\u02ad\5\u02ad\u254d\n\u02ad\3\u02ae"+
		"\3\u02ae\3\u02ae\3\u02ae\3\u02ae\3\u02ae\5\u02ae\u2555\n\u02ae\3\u02ae"+
		"\3\u02ae\3\u02ae\5\u02ae\u255a\n\u02ae\3\u02af\3\u02af\3\u02af\3\u02af"+
		"\3\u02b0\3\u02b0\5\u02b0\u2562\n\u02b0\3\u02b0\3\u02b0\3\u02b0\5\u02b0"+
		"\u2567\n\u02b0\7\u02b0\u2569\n\u02b0\f\u02b0\16\u02b0\u256c\13\u02b0\3"+
		"\u02b1\3\u02b1\3\u02b1\3\u02b1\3\u02b1\3\u02b1\3\u02b1\3\u02b1\3\u02b1"+
		"\3\u02b1\3\u02b1\3\u02b1\3\u02b1\3\u02b1\3\u02b1\5\u02b1\u257d\n\u02b1"+
		"\5\u02b1\u257f\n\u02b1\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2"+
		"\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2"+
		"\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2"+
		"\5\u02b2\u2599\n\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2"+
		"\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2"+
		"\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2"+
		"\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2"+
		"\5\u02b2\u25bc\n\u02b2\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3"+
		"\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3\5\u02b3\u25c9\n\u02b3\3\u02b4"+
		"\3\u02b4\3\u02b5\3\u02b5\3\u02b5\7\u02b5\u25d0\n\u02b5\f\u02b5\16\u02b5"+
		"\u25d3\13\u02b5\3\u02b6\3\u02b6\3\u02b6\3\u02b6\5\u02b6\u25d9\n\u02b6"+
		"\3\u02b6\7\u02b6\u25dc\n\u02b6\f\u02b6\16\u02b6\u25df\13\u02b6\3\u02b7"+
		"\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7"+
		"\3\u02b7\3\u02b7\3\u02b7\5\u02b7\u25ee\n\u02b7\3\u02b8\3\u02b8\3\u02b8"+
		"\3\u02b8\3\u02b8\3\u02b8\3\u02b8\3\u02b8\3\u02b8\3\u02b8\3\u02b8\3\u02b8"+
		"\3\u02b8\3\u02b8\3\u02b8\3\u02b8\3\u02b8\3\u02b8\3\u02b8\3\u02b8\5\u02b8"+
		"\u2604\n\u02b8\3\u02b9\3\u02b9\3\u02b9\3\u02b9\5\u02b9\u260a\n\u02b9\3"+
		"\u02b9\3\u02b9\3\u02ba\3\u02ba\3\u02ba\3\u02ba\3\u02bb\3\u02bb\5\u02bb"+
		"\u2614\n\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\5\u02bb"+
		"\u261c\n\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\5\u02bb"+
		"\u2624\n\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\5\u02bb"+
		"\u262c\n\u02bb\3\u02bc\7\u02bc\u262f\n\u02bc\f\u02bc\16\u02bc\u2632\13"+
		"\u02bc\3\u02bd\3\u02bd\3\u02bd\3\u02bd\5\u02bd\u2638\n\u02bd\3\u02bd\7"+
		"\u02bd\u263b\n\u02bd\f\u02bd\16\u02bd\u263e\13\u02bd\3\u02be\3\u02be\3"+
		"\u02be\3\u02be\5\u02be\u2644\n\u02be\3\u02be\3\u02be\3\u02bf\3\u02bf\3"+
		"\u02bf\3\u02bf\3\u02c0\3\u02c0\3\u02c0\3\u02c0\3\u02c0\3\u02c0\3\u02c0"+
		"\3\u02c0\3\u02c0\5\u02c0\u2655\n\u02c0\3\u02c1\3\u02c1\3\u02c1\3\u02c1"+
		"\5\u02c1\u265b\n\u02c1\3\u02c1\7\u02c1\u265e\n\u02c1\f\u02c1\16\u02c1"+
		"\u2661\13\u02c1\3\u02c2\3\u02c2\3\u02c2\3\u02c2\3\u02c2\5\u02c2\u2668"+
		"\n\u02c2\3\u02c2\3\u02c2\3\u02c3\5\u02c3\u266d\n\u02c3\3\u02c3\3\u02c3"+
		"\3\u02c3\3\u02c3\3\u02c3\3\u02c3\3\u02c3\5\u02c3\u2676\n\u02c3\3\u02c4"+
		"\7\u02c4\u2679\n\u02c4\f\u02c4\16\u02c4\u267c\13\u02c4\3\u02c5\3\u02c5"+
		"\3\u02c5\3\u02c5\3\u02c5\3\u02c5\5\u02c5\u2684\n\u02c5\3\u02c6\3\u02c6"+
		"\3\u02c6\3\u02c6\5\u02c6\u268a\n\u02c6\3\u02c6\3\u02c6\3\u02c7\3\u02c7"+
		"\3\u02c7\3\u02c7\5\u02c7\u2692\n\u02c7\3\u02c7\3\u02c7\5\u02c7\u2696\n"+
		"\u02c7\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c9"+
		"\3\u02c9\3\u02c9\3\u02c9\3\u02c9\3\u02c9\3\u02c9\3\u02c9\3\u02c9\3\u02c9"+
		"\5\u02c9\u26a9\n\u02c9\3\u02ca\3\u02ca\5\u02ca\u26ad\n\u02ca\3\u02ca\3"+
		"\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca"+
		"\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca\5\u02ca\u26be\n\u02ca\3\u02ca"+
		"\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02ca"+
		"\3\u02ca\5\u02ca\u26cb\n\u02ca\3\u02cb\3\u02cb\3\u02cc\3\u02cc\3\u02cc"+
		"\3\u02cc\3\u02cc\5\u02cc\u26d4\n\u02cc\3\u02cd\3\u02cd\3\u02cd\3\u02cd"+
		"\5\u02cd\u26da\n\u02cd\3\u02ce\3\u02ce\3\u02ce\5\u02ce\u26df\n\u02ce\3"+
		"\u02cf\3\u02cf\3\u02cf\5\u02cf\u26e4\n\u02cf\3\u02cf\3\u02cf\3\u02cf\3"+
		"\u02cf\3\u02cf\5\u02cf\u26eb\n\u02cf\3\u02cf\3\u02cf\3\u02d0\3\u02d0\3"+
		"\u02d0\3\u02d0\3\u02d0\3\u02d0\3\u02d0\3\u02d0\5\u02d0\u26f7\n\u02d0\3"+
		"\u02d1\3\u02d1\3\u02d1\7\u02d1\u26fc\n\u02d1\f\u02d1\16\u02d1\u26ff\13"+
		"\u02d1\3\u02d2\3\u02d2\5\u02d2\u2703\n\u02d2\3\u02d3\3\u02d3\5\u02d3\u2707"+
		"\n\u02d3\3\u02d4\3\u02d4\5\u02d4\u270b\n\u02d4\3\u02d5\3\u02d5\3\u02d6"+
		"\3\u02d6\3\u02d6\3\u02d6\3\u02d6\3\u02d7\3\u02d7\3\u02d8\3\u02d8\5\u02d8"+
		"\u2718\n\u02d8\3\u02d9\3\u02d9\5\u02d9\u271c\n\u02d9\3\u02d9\3\u02d9\3"+
		"\u02d9\3\u02d9\5\u02d9\u2722\n\u02d9\3\u02d9\5\u02d9\u2725\n\u02d9\3\u02da"+
		"\3\u02da\3\u02da\7\u02da\u272a\n\u02da\f\u02da\16\u02da\u272d\13\u02da"+
		"\3\u02db\3\u02db\3\u02db\3\u02dc\3\u02dc\3\u02dc\7\u02dc\u2735\n\u02dc"+
		"\f\u02dc\16\u02dc\u2738\13\u02dc\3\u02dd\3\u02dd\5\u02dd\u273c\n\u02dd"+
		"\3\u02de\3\u02de\5\u02de\u2740\n\u02de\3\u02df\3\u02df\5\u02df\u2744\n"+
		"\u02df\3\u02e0\3\u02e0\3\u02e0\3\u02e1\3\u02e1\5\u02e1\u274b\n\u02e1\3"+
		"\u02e1\5\u02e1\u274e\n\u02e1\3\u02e1\5\u02e1\u2751\n\u02e1\3\u02e1\5\u02e1"+
		"\u2754\n\u02e1\3\u02e1\3\u02e1\3\u02e1\3\u02e1\5\u02e1\u275a\n\u02e1\3"+
		"\u02e1\5\u02e1\u275d\n\u02e1\3\u02e2\3\u02e2\3\u02e2\3\u02e2\5\u02e2\u2763"+
		"\n\u02e2\3\u02e2\3\u02e2\3\u02e3\5\u02e3\u2768\n\u02e3\3\u02e3\3\u02e3"+
		"\5\u02e3\u276c\n\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3"+
		"\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\5\u02e3\u2779\n\u02e3\3\u02e3"+
		"\2\31\f\26\34,\66BLRbv\u008c\u008e\u00f2\u00f4\u00f8\u00fa\u0146\u015e"+
		"\u0178\u0188\u01be\u0204\u045c\u02e4\2\4\6\b\n\f\16\20\22\24\26\30\32"+
		"\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278"+
		"\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290"+
		"\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8"+
		"\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0"+
		"\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8"+
		"\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0"+
		"\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308"+
		"\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320"+
		"\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338"+
		"\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350"+
		"\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368"+
		"\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380"+
		"\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398"+
		"\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0"+
		"\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8"+
		"\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da";
	private static final String _serializedATNSegment1 =
		"\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2"+
		"\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a"+
		"\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422"+
		"\u0424\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a"+
		"\u043c\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452"+
		"\u0454\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a"+
		"\u046c\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482"+
		"\u0484\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a"+
		"\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2"+
		"\u04b4\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca"+
		"\u04cc\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de\u04e0\u04e2"+
		"\u04e4\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4\u04f6\u04f8\u04fa"+
		"\u04fc\u04fe\u0500\u0502\u0504\u0506\u0508\u050a\u050c\u050e\u0510\u0512"+
		"\u0514\u0516\u0518\u051a\u051c\u051e\u0520\u0522\u0524\u0526\u0528\u052a"+
		"\u052c\u052e\u0530\u0532\u0534\u0536\u0538\u053a\u053c\u053e\u0540\u0542"+
		"\u0544\u0546\u0548\u054a\u054c\u054e\u0550\u0552\u0554\u0556\u0558\u055a"+
		"\u055c\u055e\u0560\u0562\u0564\u0566\u0568\u056a\u056c\u056e\u0570\u0572"+
		"\u0574\u0576\u0578\u057a\u057c\u057e\u0580\u0582\u0584\u0586\u0588\u058a"+
		"\u058c\u058e\u0590\u0592\u0594\u0596\u0598\u059a\u059c\u059e\u05a0\u05a2"+
		"\u05a4\u05a6\u05a8\u05aa\u05ac\u05ae\u05b0\u05b2\u05b4\u05b6\u05b8\u05ba"+
		"\u05bc\u05be\u05c0\u05c2\u05c4\2D\4\2\u00e7\u00e7\u019e\u019e\4\2\u00d6"+
		"\u00d6\u00e4\u00e4\4\2\u00a8\u00a8\u0100\u0100\4\2ZZkk\4\2\u0207\u0208"+
		"\u0224\u0224\4\2ZZuu)\2\65\6599>>BCEHPPRWZZcfhmoruwyz|\u0080\u0089\u0089"+
		"\u008e\u008f\u0099\u0099\u00a0\u00a0\u00a2\u00a2\u00b5\u00b7\u00bd\u00bf"+
		"\u00c1\u00c2\u00c4\u00c4\u00c8\u00c8\u00cb\u00cb\u00ce\u00ce\u00da\u00da"+
		"\u00e2\u00e2\u00e7\u00e7\u00ec\u00ec\u00f5\u00f5\u010b\u010b\u0119\u0119"+
		"\u012b\u012b\u0166\u0167\u0189\u0189\u018c\u018d\u0196\u0198\u019a\u019b"+
		"\3\2\4\5:\2\668:=?ADDIILOgg{{\u0081\u0084\u0086\u0086\u0090\u0090\u0092"+
		"\u0092\u0094\u0097\u009a\u009d\u009f\u009f\u00a1\u00a1\u00a3\u00a6\u00a8"+
		"\u00a9\u00ab\u00ab\u00af\u00af\u00b3\u00b4\u00b9\u00b9\u00bc\u00bc\u00c3"+
		"\u00c3\u00c5\u00c5\u00c7\u00c7\u00c9\u00c9\u00cc\u00cc\u00d0\u00d0\u00d2"+
		"\u00d3\u00d5\u00d5\u00d7\u00d9\u00db\u00e1\u00e3\u00e6\u00e8\u00eb\u00ed"+
		"\u00ed\u00f0\u00f4\u00f6\u00fa\u00fc\u00fd\u00ff\u010a\u010c\u0110\u0112"+
		"\u0118\u011a\u011d\u011f\u012a\u012c\u0134\u0136\u013e\u014c\u014c\u015c"+
		"\u015c\u0165\u0165\u0175\u0178\u017a\u017e\u0181\u0184\u018a\u018b\u018e"+
		"\u018f\u0191\u0194\u019c\u021c\r\2[bnnxx\u00aa\u00aa\u00ca\u00ca\u00d1"+
		"\u00d1\u00ee\u00ee\u0164\u0164\u0168\u0168\u0185\u0188\u021d\u021f\4\2"+
		"\6\7lm\4\2\32\32\34 \3\2\6\61\6\2\16\17\21\24\32\32\34 \3\2|}\4\2vw\u00cb"+
		"\u00cb\3\2\u0175\u0178\4\2\u018a\u018a\u0192\u0192\4\2TTvv\3\2\u0087\u0088"+
		"\36\2JKQQXYst\u0085\u0085\u0087\u0088\u008a\u008a\u008c\u008d\u00ac\u00ae"+
		"\u00b0\u00b2\u00b8\u00b8\u00ba\u00bb\u00c0\u00c0\u00c6\u00c6\u00cd\u00cd"+
		"\u00d6\u00d6\u00fe\u00fe\u013f\u013f\u0143\u0143\u014a\u014a\u0158\u0158"+
		"\u016a\u0174\u0179\u0179\u017f\u0180\u0190\u0190\u0195\u0195\u0199\u0199"+
		"\u0221\u0222\4\2\u0099\u0099\u0224\u0224\4\2\32\32kk\4\2\658vv\3\2\65"+
		"8\3\2\u0131\u0132\4\2\u00a5\u00a5\u00d9\u00d9\4\2\u00d9\u00d9\u0125\u0125"+
		"\4\2\u00a5\u00a5\u0103\u0103\3\2\678\4\2pp\u0099\u0099\4\2\u00f6\u00f6"+
		"\u0105\u0105\4\2\u00f9\u00f9\u0106\u0106\t\2vv\u00ed\u00ed\u00f0\u00f0"+
		"\u00f4\u00f4\u0104\u0104\u0108\u0108\u012e\u012f\3\2\u009b\u009c\4\2\u00d8"+
		"\u00d8\u0122\u0122\4\2RR\u0139\u0139\4\2\u0110\u0110\u0134\u0134\4\2;"+
		";AA\6\2\u00fb\u00fb\u00fd\u00fd\u0111\u0111\u011e\u011e\4\2;;@@\b\2\u01d0"+
		"\u01d0\u01ed\u01ed\u01f8\u01f8\u01fe\u01fe\u0209\u0209\u021a\u021a\4\2"+
		"\u00e3\u00e3\u00e7\u00e7\4\2\u01b4\u01b4\u01cd\u01cd\4\2;;@A\4\2pp\u0224"+
		"\u0224\4\2::@@\4\2\u01a2\u01a2\u01a8\u01a8\5\2MM\u0127\u0127\u0200\u0200"+
		"\4\2BBDD\4\2LLNN\n\2vv\u00db\u00db\u00ed\u00ed\u00f0\u00f0\u00f4\u00f4"+
		"\u0104\u0104\u0108\u0108\u012e\u012f\4\2\u01a4\u01a4\u01bd\u01bd\4\2\u00d6"+
		"\u00d6\u0206\u0206\4\2BB\u00d6\u00d6\4\2\u01da\u01da\u01f5\u01f5\6\2\u01b5"+
		"\u01b5\u01b8\u01b8\u01e1\u01e1\u020c\u020c\6\2vv\u0131\u0132\u01e7\u01e7"+
		"\u01f8\u01f8\5\2==\u00f3\u00f3\u019e\u019e\4\2\u00af\u00af\u00f8\u00f8"+
		"\4\2LL\u01a3\u01a3\4\2NN\u0126\u0126\4\2\u00e6\u00e6\u021c\u021c\4\2>"+
		">\u00d0\u00d0\4\2\u00a5\u00a5\u012a\u012a\3\2\u019a\u019b\2\u2bf1\2\u05f2"+
		"\3\2\2\2\4\u05f8\3\2\2\2\6\u0609\3\2\2\2\b\u0620\3\2\2\2\n\u0622\3\2\2"+
		"\2\f\u0624\3\2\2\2\16\u062f\3\2\2\2\20\u0642\3\2\2\2\22\u064e\3\2\2\2"+
		"\24\u0651\3\2\2\2\26\u0660\3\2\2\2\30\u0675\3\2\2\2\32\u0677\3\2\2\2\34"+
		"\u067a\3\2\2\2\36\u0685\3\2\2\2 \u0689\3\2\2\2\"\u069f\3\2\2\2$\u06a1"+
		"\3\2\2\2&\u06a6\3\2\2\2(\u06b0\3\2\2\2*\u06df\3\2\2\2,\u06e4\3\2\2\2."+
		"\u072e\3\2\2\2\60\u0735\3\2\2\2\62\u0737\3\2\2\2\64\u0766\3\2\2\2\66\u0768"+
		"\3\2\2\28\u0773\3\2\2\2:\u077f\3\2\2\2<\u0786\3\2\2\2>\u078c\3\2\2\2@"+
		"\u0792\3\2\2\2B\u0794\3\2\2\2D\u079e\3\2\2\2F\u07a8\3\2\2\2H\u07b5\3\2"+
		"\2\2J\u07b7\3\2\2\2L\u07ba\3\2\2\2N\u07c9\3\2\2\2P\u07d3\3\2\2\2R\u07d5"+
		"\3\2\2\2T\u0805\3\2\2\2V\u080d\3\2\2\2X\u0811\3\2\2\2Z\u0813\3\2\2\2\\"+
		"\u081a\3\2\2\2^\u081c\3\2\2\2`\u081e\3\2\2\2b\u0820\3\2\2\2d\u0837\3\2"+
		"\2\2f\u0839\3\2\2\2h\u083d\3\2\2\2j\u084a\3\2\2\2l\u084c\3\2\2\2n\u084f"+
		"\3\2\2\2p\u0854\3\2\2\2r\u0859\3\2\2\2t\u085f\3\2\2\2v\u0862\3\2\2\2x"+
		"\u086d\3\2\2\2z\u0871\3\2\2\2|\u0880\3\2\2\2~\u0882\3\2\2\2\u0080\u0892"+
		"\3\2\2\2\u0082\u089a\3\2\2\2\u0084\u08a8\3\2\2\2\u0086\u08b5\3\2\2\2\u0088"+
		"\u08b9\3\2\2\2\u008a\u08bb\3\2\2\2\u008c\u08be\3\2\2\2\u008e\u08f6\3\2"+
		"\2\2\u0090\u0913\3\2\2\2\u0092\u0922\3\2\2\2\u0094\u0924\3\2\2\2\u0096"+
		"\u092d\3\2\2\2\u0098\u093a\3\2\2\2\u009a\u093c\3\2\2\2\u009c\u0944\3\2"+
		"\2\2\u009e\u0946\3\2\2\2\u00a0\u0949\3\2\2\2\u00a2\u094d\3\2\2\2\u00a4"+
		"\u0954\3\2\2\2\u00a6\u0956\3\2\2\2\u00a8\u0974\3\2\2\2\u00aa\u0976\3\2"+
		"\2\2\u00ac\u09a0\3\2\2\2\u00ae\u09a7\3\2\2\2\u00b0\u09a9\3\2\2\2\u00b2"+
		"\u09b1\3\2\2\2\u00b4\u09bb\3\2\2\2\u00b6\u09bd\3\2\2\2\u00b8\u09c5\3\2"+
		"\2\2\u00ba\u09ca\3\2\2\2\u00bc\u09f4\3\2\2\2\u00be\u09f7\3\2\2\2\u00c0"+
		"\u09fc\3\2\2\2\u00c2\u0a04\3\2\2\2\u00c4\u0a5b\3\2\2\2\u00c6\u0a5d\3\2"+
		"\2\2\u00c8\u0a61\3\2\2\2\u00ca\u0a64\3\2\2\2\u00cc\u0a6a\3\2\2\2\u00ce"+
		"\u0a75\3\2\2\2\u00d0\u0a77\3\2\2\2\u00d2\u0a7a\3\2\2\2\u00d4\u0a7d\3\2"+
		"\2\2\u00d6\u0a7f\3\2\2\2\u00d8\u0a81\3\2\2\2\u00da\u0a86\3\2\2\2\u00dc"+
		"\u0a8d\3\2\2\2\u00de\u0a91\3\2\2\2\u00e0\u0a93\3\2\2\2\u00e2\u0a96\3\2"+
		"\2\2\u00e4\u0aa3\3\2\2\2\u00e6\u0ab0\3\2\2\2\u00e8\u0ab2\3\2\2\2\u00ea"+
		"\u0ab5\3\2\2\2\u00ec\u0ab9\3\2\2\2\u00ee\u0abb\3\2\2\2\u00f0\u0abd\3\2"+
		"\2\2\u00f2\u0ad1\3\2\2\2\u00f4\u0bd4\3\2\2\2\u00f6\u0c24\3\2\2\2\u00f8"+
		"\u0c26\3\2\2\2\u00fa\u0c30\3\2\2\2\u00fc\u0c49\3\2\2\2\u00fe\u0c4b\3\2"+
		"\2\2\u0100\u0c52\3\2\2\2\u0102\u0c54\3\2\2\2\u0104\u0c5f\3\2\2\2\u0106"+
		"\u0c63\3\2\2\2\u0108\u0c68\3\2\2\2\u010a\u0c6b\3\2\2\2\u010c\u0c71\3\2"+
		"\2\2\u010e\u0c7b\3\2\2\2\u0110\u0c89\3\2\2\2\u0112\u0c8d\3\2\2\2\u0114"+
		"\u0c90\3\2\2\2\u0116\u0c94\3\2\2\2\u0118\u0c9c\3\2\2\2\u011a\u0c9e\3\2"+
		"\2\2\u011c\u0ca5\3\2\2\2\u011e\u0cb1\3\2\2\2\u0120\u0cc1\3\2\2\2\u0122"+
		"\u0ccb\3\2\2\2\u0124\u0ccd\3\2\2\2\u0126\u0cd3\3\2\2\2\u0128\u0cdf\3\2"+
		"\2\2\u012a\u0ce1\3\2\2\2\u012c\u0ce9\3\2\2\2\u012e\u0cf1\3\2\2\2\u0130"+
		"\u0cfc\3\2\2\2\u0132\u0cfe\3\2\2\2\u0134\u0d3d\3\2\2\2\u0136\u0d43\3\2"+
		"\2\2\u0138\u0d56\3\2\2\2\u013a\u0d58\3\2\2\2\u013c\u0d5d\3\2\2\2\u013e"+
		"\u0d6b\3\2\2\2\u0140\u0d82\3\2\2\2\u0142\u0d84\3\2\2\2\u0144\u0d97\3\2"+
		"\2\2\u0146\u0d99\3\2\2\2\u0148\u0dab\3\2\2\2\u014a\u0dad\3\2\2\2\u014c"+
		"\u0dbb\3\2\2\2\u014e\u0dc8\3\2\2\2\u0150\u0dca\3\2\2\2\u0152\u0dd0\3\2"+
		"\2\2\u0154\u0dd8\3\2\2\2\u0156\u0dda\3\2\2\2\u0158\u0eb1\3\2\2\2\u015a"+
		"\u0ece\3\2\2\2\u015c\u0edd\3\2\2\2\u015e\u0edf\3\2\2\2\u0160\u0eea\3\2"+
		"\2\2\u0162\u0ef5\3\2\2\2\u0164\u0f00\3\2\2\2\u0166\u0f02\3\2\2\2\u0168"+
		"\u0f21\3\2\2\2\u016a\u0f3a\3\2\2\2\u016c\u0f42\3\2\2\2\u016e\u0f46\3\2"+
		"\2\2\u0170\u0f48\3\2\2\2\u0172\u0f4d\3\2\2\2\u0174\u0f66\3\2\2\2\u0176"+
		"\u0f6c\3\2\2\2\u0178\u0f6e\3\2\2\2\u017a\u0f7a\3\2\2\2\u017c\u0f80\3\2"+
		"\2\2\u017e\u0f84\3\2\2\2\u0180\u0f86\3\2\2\2\u0182\u0f8e\3\2\2\2\u0184"+
		"\u0f92\3\2\2\2\u0186\u0fb0\3\2\2\2\u0188\u0fb2\3\2\2\2\u018a\u0fc4\3\2"+
		"\2\2\u018c\u0fc6\3\2\2\2\u018e\u0fcf\3\2\2\2\u0190\u0fda\3\2\2\2\u0192"+
		"\u0fdc\3\2\2\2\u0194\u0fdf\3\2\2\2\u0196\u0fe2\3\2\2\2\u0198\u0fea\3\2"+
		"\2\2\u019a\u0ffc\3\2\2\2\u019c\u0ffe\3\2\2\2\u019e\u1003\3\2\2\2\u01a0"+
		"\u1010\3\2\2\2\u01a2\u1021\3\2\2\2\u01a4\u1027\3\2\2\2\u01a6\u1029\3\2"+
		"\2\2\u01a8\u1030\3\2\2\2\u01aa\u1037\3\2\2\2\u01ac\u1043\3\2\2\2\u01ae"+
		"\u1045\3\2\2\2\u01b0\u1048\3\2\2\2\u01b2\u1050\3\2\2\2\u01b4\u1055\3\2"+
		"\2\2\u01b6\u105d\3\2\2\2\u01b8\u1062\3\2\2\2\u01ba\u106c\3\2\2\2\u01bc"+
		"\u107c\3\2\2\2\u01be\u107e\3\2\2\2\u01c0\u109a\3\2\2\2\u01c2\u109c\3\2"+
		"\2\2\u01c4\u10a4\3\2\2\2\u01c6\u10a9\3\2\2\2\u01c8\u10ab\3\2\2\2\u01ca"+
		"\u10af\3\2\2\2\u01cc\u10c4\3\2\2\2\u01ce\u10ca\3\2\2\2\u01d0\u10d3\3\2"+
		"\2\2\u01d2\u10d5\3\2\2\2\u01d4\u10db\3\2\2\2\u01d6\u10dd\3\2\2\2\u01d8"+
		"\u10df\3\2\2\2\u01da\u10fc\3\2\2\2\u01dc\u1109\3\2\2\2\u01de\u110b\3\2"+
		"\2\2\u01e0\u1110\3\2\2\2\u01e2\u1112\3\2\2\2\u01e4\u1116\3\2\2\2\u01e6"+
		"\u112d\3\2\2\2\u01e8\u1135\3\2\2\2\u01ea\u1143\3\2\2\2\u01ec\u1160\3\2"+
		"\2\2\u01ee\u119c\3\2\2\2\u01f0\u119e\3\2\2\2\u01f2\u11a6\3\2\2\2\u01f4"+
		"\u11ad\3\2\2\2\u01f6\u11b2\3\2\2\2\u01f8\u11bf\3\2\2\2\u01fa\u11c6\3\2"+
		"\2\2\u01fc\u11cc\3\2\2\2\u01fe\u11ce\3\2\2\2\u0200\u11d0\3\2\2\2\u0202"+
		"\u11d6\3\2\2\2\u0204\u11d8\3\2\2\2\u0206\u11e3\3\2\2\2\u0208\u11ed\3\2"+
		"\2\2\u020a\u11fc\3\2\2\2\u020c\u1203\3\2\2\2\u020e\u120c\3\2\2\2\u0210"+
		"\u120e\3\2\2\2\u0212\u1218\3\2\2\2\u0214\u1223\3\2\2\2\u0216\u122c\3\2"+
		"\2\2\u0218\u1261\3\2\2\2\u021a\u1263\3\2\2\2\u021c\u1268\3\2\2\2\u021e"+
		"\u1291\3\2\2\2\u0220\u1293\3\2\2\2\u0222\u1297\3\2\2\2\u0224\u1299\3\2"+
		"\2\2\u0226\u12a4\3\2\2\2\u0228\u12a6\3\2\2\2\u022a\u12a9\3\2\2\2\u022c"+
		"\u12ae\3\2\2\2\u022e\u12b2\3\2\2\2\u0230\u12bf\3\2\2\2\u0232\u12c6\3\2"+
		"\2\2\u0234\u12d0\3\2\2\2\u0236\u12d2\3\2\2\2\u0238\u12d6\3\2\2\2\u023a"+
		"\u12e2\3\2\2\2\u023c\u12ea\3\2\2\2\u023e\u12ec\3\2\2\2\u0240\u12f1\3\2"+
		"\2\2\u0242\u12f9\3\2\2\2\u0244\u12fc\3\2\2\2\u0246\u12fe\3\2\2\2\u0248"+
		"\u1306\3\2\2\2\u024a\u131e\3\2\2\2\u024c\u132f\3\2\2\2\u024e\u1337\3\2"+
		"\2\2\u0250\u1339\3\2\2\2\u0252\u1343\3\2\2\2\u0254\u1345\3\2\2\2\u0256"+
		"\u1347\3\2\2\2\u0258\u1352\3\2\2\2\u025a\u135c\3\2\2\2\u025c\u135e\3\2"+
		"\2\2\u025e\u1372\3\2\2\2\u0260\u1394\3\2\2\2\u0262\u1396\3\2\2\2\u0264"+
		"\u1398\3\2\2\2\u0266\u139e\3\2\2\2\u0268\u13a9\3\2\2\2\u026a\u13ad\3\2"+
		"\2\2\u026c\u13af\3\2\2\2\u026e\u13da\3\2\2\2\u0270\u13df\3\2\2\2\u0272"+
		"\u13e1\3\2\2\2\u0274\u13e3\3\2\2\2\u0276\u13e5\3\2\2\2\u0278\u13ed\3\2"+
		"\2\2\u027a\u1429\3\2\2\2\u027c\u1447\3\2\2\2\u027e\u1449\3\2\2\2\u0280"+
		"\u1451\3\2\2\2\u0282\u1454\3\2\2\2\u0284\u145e\3\2\2\2\u0286\u1460\3\2"+
		"\2\2\u0288\u146c\3\2\2\2\u028a\u146e\3\2\2\2\u028c\u1471\3\2\2\2\u028e"+
		"\u147e\3\2\2\2\u0290\u1480\3\2\2\2\u0292\u1486\3\2\2\2\u0294\u1488\3\2"+
		"\2\2\u0296\u14a7\3\2\2\2\u0298\u14ac\3\2\2\2\u029a\u14b4\3\2\2\2\u029c"+
		"\u14b7\3\2\2\2\u029e\u14c3\3\2\2\2\u02a0\u14ec\3\2\2\2\u02a2\u14f4\3\2"+
		"\2\2\u02a4\u1505\3\2\2\2\u02a6\u1507\3\2\2\2\u02a8\u151f\3\2\2\2\u02aa"+
		"\u152a\3\2\2\2\u02ac\u1531\3\2\2\2\u02ae\u1533\3\2\2\2\u02b0\u153b\3\2"+
		"\2\2\u02b2\u153d\3\2\2\2\u02b4\u154d\3\2\2\2\u02b6\u1554\3\2\2\2\u02b8"+
		"\u1556\3\2\2\2\u02ba\u155a\3\2\2\2\u02bc\u1571\3\2\2\2\u02be\u1573\3\2"+
		"\2\2\u02c0\u157f\3\2\2\2\u02c2\u1584\3\2\2\2\u02c4\u15be\3\2\2\2\u02c6"+
		"\u15c0\3\2\2\2\u02c8\u15c8\3\2\2\2\u02ca\u15cb\3\2\2\2\u02cc\u15e8\3\2"+
		"\2\2\u02ce\u15f4\3\2\2\2\u02d0\u15fc\3\2\2\2\u02d2\u1602\3\2\2\2\u02d4"+
		"\u1608\3\2\2\2\u02d6\u160c\3\2\2\2\u02d8\u163e\3\2\2\2\u02da\u1640\3\2"+
		"\2\2\u02dc\u1645\3\2\2\2\u02de\u1658\3\2\2\2\u02e0\u165c\3\2\2\2\u02e2"+
		"\u165e\3\2\2\2\u02e4\u1665\3\2\2\2\u02e6\u1687\3\2\2\2\u02e8\u168b\3\2"+
		"\2\2\u02ea\u168f\3\2\2\2\u02ec\u1692\3\2\2\2\u02ee\u1695\3\2\2\2\u02f0"+
		"\u169a\3\2\2\2\u02f2\u169d\3\2\2\2\u02f4\u16a1\3\2\2\2\u02f6\u16a4\3\2"+
		"\2\2\u02f8\u16ae\3\2\2\2\u02fa\u16b8\3\2\2\2\u02fc\u16bf\3\2\2\2\u02fe"+
		"\u16c1\3\2\2\2\u0300\u16c5\3\2\2\2\u0302\u16c9\3\2\2\2\u0304\u16d1\3\2"+
		"\2\2\u0306\u16d9\3\2\2\2\u0308\u16e1\3\2\2\2\u030a\u16e5\3\2\2\2\u030c"+
		"\u175d\3\2\2\2\u030e\u175f\3\2\2\2\u0310\u176a\3\2\2\2\u0312\u1775\3\2"+
		"\2\2\u0314\u17c6\3\2\2\2\u0316\u17c8\3\2\2\2\u0318\u17df\3\2\2\2\u031a"+
		"\u17e1\3\2\2\2\u031c\u17e9\3\2\2\2\u031e\u17ed\3\2\2\2\u0320\u17f8\3\2"+
		"\2\2\u0322\u1803\3\2\2\2\u0324\u1807\3\2\2\2\u0326\u1809\3\2\2\2\u0328"+
		"\u1811\3\2\2\2\u032a\u1817\3\2\2\2\u032c\u181d\3\2\2\2\u032e\u181f\3\2"+
		"\2\2\u0330\u1827\3\2\2\2\u0332\u183c\3\2\2\2\u0334\u183f\3\2\2\2\u0336"+
		"\u1855\3\2\2\2\u0338\u1857\3\2\2\2\u033a\u1970\3\2\2\2\u033c\u1975\3\2"+
		"\2\2\u033e\u1983\3\2\2\2\u0340\u1985\3\2\2\2\u0342\u198a\3\2\2\2\u0344"+
		"\u1999\3\2\2\2\u0346\u199b\3\2\2\2\u0348\u199d\3\2\2\2\u034a\u19a0\3\2"+
		"\2\2\u034c\u19a4\3\2\2\2\u034e\u19b3\3\2\2\2\u0350\u19ba\3\2\2\2\u0352"+
		"\u19bc\3\2\2\2\u0354\u19c0\3\2\2\2\u0356\u19d1\3\2\2\2\u0358\u19d3\3\2"+
		"\2\2\u035a\u19de\3\2\2\2\u035c\u19e0\3\2\2\2\u035e\u1a06\3\2\2\2\u0360"+
		"\u1a0e\3\2\2\2\u0362\u1a20\3\2\2\2\u0364\u1a22\3\2\2\2\u0366\u1a2a\3\2"+
		"\2\2\u0368\u1a35\3\2\2\2\u036a\u1a37\3\2\2\2\u036c\u1a3a\3\2\2\2\u036e"+
		"\u1a3f\3\2\2\2\u0370\u1a56\3\2\2\2\u0372\u1a58\3\2\2\2\u0374\u1a60\3\2"+
		"\2\2\u0376\u1a6b\3\2\2\2\u0378\u1a6d\3\2\2\2\u037a\u1a7d\3\2\2\2\u037c"+
		"\u1a7f\3\2\2\2\u037e\u1a8d\3\2\2\2\u0380\u1a8f\3\2\2\2\u0382\u1ab5\3\2"+
		"\2\2\u0384\u1ab7\3\2\2\2\u0386\u1abb\3\2\2\2\u0388\u1ac4\3\2\2\2\u038a"+
		"\u1ac8\3\2\2\2\u038c\u1ad9\3\2\2\2\u038e\u1adb\3\2\2\2\u0390\u1af3\3\2"+
		"\2\2\u0392\u1af6\3\2\2\2\u0394\u1b00\3\2\2\2\u0396\u1b02\3\2\2\2\u0398"+
		"\u1b04\3\2\2\2\u039a\u1b3a\3\2\2\2\u039c\u1b3c\3\2\2\2\u039e\u1b3e\3\2"+
		"\2\2\u03a0\u1b4d\3\2\2\2\u03a2\u1b4f\3\2\2\2\u03a4\u1b51\3\2\2\2\u03a6"+
		"\u1bca\3\2\2\2\u03a8\u1bd4\3\2\2\2\u03aa\u1bdc\3\2\2\2\u03ac\u1bde\3\2"+
		"\2\2\u03ae\u1be4\3\2\2\2\u03b0\u1be7\3\2\2\2\u03b2\u1bec\3\2\2\2\u03b4"+
		"\u1bfe\3\2\2\2\u03b6\u1c01\3\2\2\2\u03b8\u1c0d\3\2\2\2\u03ba\u1c0f\3\2"+
		"\2\2\u03bc\u1c11\3\2\2\2\u03be\u1c1f\3\2\2\2\u03c0\u1c21\3\2\2\2\u03c2"+
		"\u1c34\3\2\2\2\u03c4\u1c3f\3\2\2\2\u03c6\u1c7e\3\2\2\2\u03c8\u1c80\3\2"+
		"\2\2\u03ca\u1c90\3\2\2\2\u03cc\u1c98\3\2\2\2\u03ce\u1c9a\3\2\2\2\u03d0"+
		"\u1caf\3\2\2\2\u03d2\u1cbc\3\2\2\2\u03d4\u1cca\3\2\2\2\u03d6\u1ceb\3\2"+
		"\2\2\u03d8\u1ced\3\2\2\2\u03da\u1d06\3\2\2\2\u03dc\u1d09\3\2\2\2\u03de"+
		"\u1d0d\3\2\2\2\u03e0\u1d26\3\2\2\2\u03e2\u1d28\3\2\2\2\u03e4\u1d38\3\2"+
		"\2\2\u03e6\u1d3d\3\2\2\2\u03e8\u1d45\3\2\2\2\u03ea\u1d56\3\2\2\2\u03ec"+
		"\u1d58\3\2\2\2\u03ee\u1d68\3\2\2\2\u03f0\u1d6b\3\2\2\2\u03f2\u1d87\3\2"+
		"\2\2\u03f4\u1da4\3\2\2\2\u03f6\u1dac\3\2\2\2\u03f8\u1dae\3\2\2\2\u03fa"+
		"\u1db6\3\2\2\2\u03fc\u1dc4\3\2\2\2\u03fe\u1df0\3\2\2\2\u0400\u1df2\3\2"+
		"\2\2\u0402\u1dfa\3\2\2\2\u0404\u1e0b\3\2\2\2\u0406\u1e19\3\2\2\2\u0408"+
		"\u1e27\3\2\2\2\u040a\u1e38\3\2\2\2\u040c\u1e65\3\2\2\2\u040e\u1e67\3\2"+
		"\2\2\u0410\u1e8e\3\2\2\2\u0412\u1e90\3\2\2\2\u0414\u1e9b\3\2\2\2\u0416"+
		"\u1e9d\3\2\2\2\u0418\u1eb5\3\2\2\2\u041a\u1eb7\3\2\2\2\u041c\u1ebc\3\2"+
		"\2\2\u041e\u1eca\3\2\2\2\u0420\u1ecd\3\2\2\2\u0422\u1f40\3\2\2\2\u0424"+
		"\u1f42\3\2\2\2\u0426\u1f49\3\2\2\2\u0428\u1f5a\3\2\2\2\u042a\u1f73\3\2"+
		"\2\2\u042c\u1f75\3\2\2\2\u042e\u1f77\3\2\2\2\u0430\u1f80\3\2\2\2\u0432"+
		"\u1f8d\3\2\2\2\u0434\u1f91\3\2\2\2\u0436\u1f99\3\2\2\2\u0438\u1f9d\3\2"+
		"\2\2\u043a\u1fba\3\2\2\2\u043c\u1fbc\3\2\2\2\u043e\u1fcc\3\2\2\2\u0440"+
		"\u1fd9\3\2\2\2\u0442\u1fe2\3\2\2\2\u0444\u1ff2\3\2\2\2\u0446\u1ffa\3\2"+
		"\2\2\u0448\u2000\3\2\2\2\u044a\u2008\3\2\2\2\u044c\u2018\3\2\2\2\u044e"+
		"\u2022\3\2\2\2\u0450\u2024\3\2\2\2\u0452\u202f\3\2\2\2\u0454\u2060\3\2"+
		"\2\2\u0456\u2062\3\2\2\2\u0458\u206d\3\2\2\2\u045a\u206f\3\2\2\2\u045c"+
		"\u2073\3\2\2\2\u045e\u207c\3\2\2\2\u0460\u207e\3\2\2\2\u0462\u2094\3\2"+
		"\2\2\u0464\u209c\3\2\2\2\u0466\u20a0\3\2\2\2\u0468\u20ac\3\2\2\2\u046a"+
		"\u20ae\3\2\2\2\u046c\u20bd\3\2\2\2\u046e\u20bf\3\2\2\2\u0470\u20c1\3\2"+
		"\2\2\u0472\u20c7\3\2\2\2\u0474\u20d8\3\2\2\2\u0476\u20da\3\2\2\2\u0478"+
		"\u2107\3\2\2\2\u047a\u210d\3\2\2\2\u047c\u210f\3\2\2\2\u047e\u212f\3\2"+
		"\2\2\u0480\u2139\3\2\2\2\u0482\u2149\3\2\2\2\u0484\u214b\3\2\2\2\u0486"+
		"\u2167\3\2\2\2\u0488\u216e\3\2\2\2\u048a\u2171\3\2\2\2\u048c\u217c\3\2"+
		"\2\2\u048e\u21ae\3\2\2\2\u0490\u21b0\3\2\2\2\u0492\u21bf\3\2\2\2\u0494"+
		"\u21c5\3\2\2\2\u0496\u21c7\3\2\2\2\u0498\u21d2\3\2\2\2\u049a\u21d4\3\2"+
		"\2\2\u049c\u21d9\3\2\2\2\u049e\u21df\3\2\2\2\u04a0\u21e3\3\2\2\2\u04a2"+
		"\u21e7\3\2\2\2\u04a4\u21ee\3\2\2\2\u04a6\u21f0\3\2\2\2\u04a8\u21f2\3\2"+
		"\2\2\u04aa\u21f4\3\2\2\2\u04ac\u2207\3\2\2\2\u04ae\u2209\3\2\2\2\u04b0"+
		"\u221e\3\2\2\2\u04b2\u222c\3\2\2\2\u04b4\u2237\3\2\2\2\u04b6\u2244\3\2"+
		"\2\2\u04b8\u224b\3\2\2\2\u04ba\u2259\3\2\2\2\u04bc\u2271\3\2\2\2\u04be"+
		"\u2273\3\2\2\2\u04c0\u227b\3\2\2\2\u04c2\u2289\3\2\2\2\u04c4\u228c\3\2"+
		"\2\2\u04c6\u2297\3\2\2\2\u04c8\u22a1\3\2\2\2\u04ca\u22a9\3\2\2\2\u04cc"+
		"\u22b7\3\2\2\2\u04ce\u22c1\3\2\2\2\u04d0\u22cb\3\2\2\2\u04d2\u22d5\3\2"+
		"\2\2\u04d4\u22e0\3\2\2\2\u04d6\u22ea\3\2\2\2\u04d8\u22f6\3\2\2\2\u04da"+
		"\u2308\3\2\2\2\u04dc\u2312\3\2\2\2\u04de\u231a\3\2\2\2\u04e0\u2327\3\2"+
		"\2\2\u04e2\u2332\3\2\2\2\u04e4\u233c\3\2\2\2\u04e6\u2344\3\2\2\2\u04e8"+
		"\u2351\3\2\2\2\u04ea\u235e\3\2\2\2\u04ec\u2365\3\2\2\2\u04ee\u2371\3\2"+
		"\2\2\u04f0\u237b\3\2\2\2\u04f2\u2385\3\2\2\2\u04f4\u238f\3\2\2\2\u04f6"+
		"\u239b\3\2\2\2\u04f8\u23a5\3\2\2\2\u04fa\u23af\3\2\2\2\u04fc\u23b7\3\2"+
		"\2\2\u04fe\u23c1\3\2\2\2\u0500\u23c9\3\2\2\2\u0502\u23d5\3\2\2\2\u0504"+
		"\u23e2\3\2\2\2\u0506\u23ee\3\2\2\2\u0508\u23f8\3\2\2\2\u050a\u2404\3\2"+
		"\2\2\u050c\u240e\3\2\2\2\u050e\u241d\3\2\2\2\u0510\u2425\3\2\2\2\u0512"+
		"\u2427\3\2\2\2\u0514\u242a\3\2\2\2\u0516\u242d\3\2\2\2\u0518\u2435\3\2"+
		"\2\2\u051a\u2439\3\2\2\2\u051c\u2443\3\2\2\2\u051e\u2464\3\2\2\2\u0520"+
		"\u2466\3\2\2\2\u0522\u246e\3\2\2\2\u0524\u2470\3\2\2\2\u0526\u2472\3\2"+
		"\2\2\u0528\u2474\3\2\2\2\u052a\u248d\3\2\2\2\u052c\u248f\3\2\2\2\u052e"+
		"\u2494\3\2\2\2\u0530\u24a7\3\2\2\2\u0532\u24ae\3\2\2\2\u0534\u24b8\3\2"+
		"\2\2\u0536\u24c8\3\2\2\2\u0538\u24ca\3\2\2\2\u053a\u24db\3\2\2\2\u053c"+
		"\u24dd\3\2\2\2\u053e\u24e4\3\2\2\2\u0540\u24ef\3\2\2\2\u0542\u24f2\3\2"+
		"\2\2\u0544\u24fd\3\2\2\2\u0546\u2502\3\2\2\2\u0548\u250d\3\2\2\2\u054a"+
		"\u2518\3\2\2\2\u054c\u251e\3\2\2\2\u054e\u2528\3\2\2\2\u0550\u252c\3\2"+
		"\2\2\u0552\u2530\3\2\2\2\u0554\u2534\3\2\2\2\u0556\u2539\3\2\2\2\u0558"+
		"\u2544\3\2\2\2\u055a\u254e\3\2\2\2\u055c\u255b\3\2\2\2\u055e\u255f\3\2"+
		"\2\2\u0560\u257e\3\2\2\2\u0562\u25bb\3\2\2\2\u0564\u25c8\3\2\2\2\u0566"+
		"\u25ca\3\2\2\2\u0568\u25cc\3\2\2\2\u056a\u25d4\3\2\2\2\u056c\u25ed\3\2"+
		"\2\2\u056e\u2603\3\2\2\2\u0570\u2605\3\2\2\2\u0572\u260d\3\2\2\2\u0574"+
		"\u262b\3\2\2\2\u0576\u2630\3\2\2\2\u0578\u2633\3\2\2\2\u057a\u263f\3\2"+
		"\2\2\u057c\u2647\3\2\2\2\u057e\u264b\3\2\2\2\u0580\u2656\3\2\2\2\u0582"+
		"\u2662\3\2\2\2\u0584\u2675\3\2\2\2\u0586\u267a\3\2\2\2\u0588\u2683\3\2"+
		"\2\2\u058a\u2685\3\2\2\2\u058c\u268d\3\2\2\2\u058e\u2697\3\2\2\2\u0590"+
		"\u269e\3\2\2\2\u0592\u26aa\3\2\2\2\u0594\u26cc\3\2\2\2\u0596\u26ce\3\2"+
		"\2\2\u0598\u26d5\3\2\2\2\u059a\u26db\3\2\2\2\u059c\u26e0\3\2\2\2\u059e"+
		"\u26f6\3\2\2\2\u05a0\u26f8\3\2\2\2\u05a2\u2700\3\2\2\2\u05a4\u2706\3\2"+
		"\2\2\u05a6\u270a\3\2\2\2\u05a8\u270c\3\2\2\2\u05aa\u270e\3\2\2\2\u05ac"+
		"\u2713\3\2\2\2\u05ae\u2717\3\2\2\2\u05b0\u2719\3\2\2\2\u05b2\u2726\3\2"+
		"\2\2\u05b4\u272e\3\2\2\2\u05b6\u2731\3\2\2\2\u05b8\u2739\3\2\2\2\u05ba"+
		"\u273f\3\2\2\2\u05bc\u2743\3\2\2\2\u05be\u2745\3\2\2\2\u05c0\u2748\3\2"+
		"\2\2\u05c2\u275e\3\2\2\2\u05c4\u2778\3\2\2\2\u05c6\u05f3\5&\24\2\u05c7"+
		"\u05f3\5\4\3\2\u05c8\u05f3\5\24\13\2\u05c9\u05f3\5 \21\2\u05ca\u05f3\5"+
		"\u0294\u014b\2\u05cb\u05f3\5\u02a8\u0155\2\u05cc\u05f3\5\u02ae\u0158\2"+
		"\u05cd\u05f3\5\u0278\u013d\2\u05ce\u05f3\5\u02a6\u0154\2\u05cf\u05f3\5"+
		"\u02aa\u0156\2\u05d0\u05f3\5\u02b2\u015a\2\u05d1\u05f3\5\u053a\u029e\2"+
		"\u05d2\u05f3\5\u053c\u029f\2\u05d3\u05f3\5\u053e\u02a0\2\u05d4\u05f3\5"+
		"\u0548\u02a5\2\u05d5\u05f3\5\u0540\u02a1\2\u05d6\u05f3\5\u0554\u02ab\2"+
		"\u05d7\u05f3\5\u0556\u02ac\2\u05d8\u05f3\5\u056a\u02b6\2\u05d9\u05f3\5"+
		"\u0570\u02b9\2\u05da\u05f3\5\u0572\u02ba\2\u05db\u05f3\5\u0578\u02bd\2"+
		"\u05dc\u05f3\5\u057a\u02be\2\u05dd\u05f3\5\u057c\u02bf\2\u05de\u05f3\5"+
		"\u0590\u02c9\2\u05df\u05f3\5\u0592\u02ca\2\u05e0\u05f3\5\u059a\u02ce\2"+
		"\u05e1\u05f3\5\u05c2\u02e2\2\u05e2\u05f3\5\u03de\u01f0\2\u05e3\u05f3\5"+
		"\u0330\u0199\2\u05e4\u05f3\5\u03d8\u01ed\2\u05e5\u05f3\5\u03ec\u01f7\2"+
		"\u05e6\u05f3\5\u029c\u014f\2\u05e7\u05f3\5\u0460\u0231\2\u05e8\u05f3\5"+
		"\u047e\u0240\2\u05e9\u05f3\5\u04ae\u0258\2\u05ea\u05f3\5\u048e\u0248\2"+
		"\u05eb\u05f3\5\u029e\u0150\2\u05ec\u05f3\5\u02a0\u0151\2\u05ed\u05f3\5"+
		"\u04da\u026e\2\u05ee\u05f3\5\u04ee\u0278\2\u05ef\u05f3\5\u04f8\u027d\2"+
		"\u05f0\u05f3\5\u0504\u0283\2\u05f1\u05f3\5\u050a\u0286\2\u05f2\u05c6\3"+
		"\2\2\2\u05f2\u05c7\3\2\2\2\u05f2\u05c8\3\2\2\2\u05f2\u05c9\3\2\2\2\u05f2"+
		"\u05ca\3\2\2\2\u05f2\u05cb\3\2\2\2\u05f2\u05cc\3\2\2\2\u05f2\u05cd\3\2"+
		"\2\2\u05f2\u05ce\3\2\2\2\u05f2\u05cf\3\2\2\2\u05f2\u05d0\3\2\2\2\u05f2"+
		"\u05d1\3\2\2\2\u05f2\u05d2\3\2\2\2\u05f2\u05d3\3\2\2\2\u05f2\u05d4\3\2"+
		"\2\2\u05f2\u05d5\3\2\2\2\u05f2\u05d6\3\2\2\2\u05f2\u05d7\3\2\2\2\u05f2"+
		"\u05d8\3\2\2\2\u05f2\u05d9\3\2\2\2\u05f2\u05da\3\2\2\2\u05f2\u05db\3\2"+
		"\2\2\u05f2\u05dc\3\2\2\2\u05f2\u05dd\3\2\2\2\u05f2\u05de\3\2\2\2\u05f2"+
		"\u05df\3\2\2\2\u05f2\u05e0\3\2\2\2\u05f2\u05e1\3\2\2\2\u05f2\u05e2\3\2"+
		"\2\2\u05f2\u05e3\3\2\2\2\u05f2\u05e4\3\2\2\2\u05f2\u05e5\3\2\2\2\u05f2"+
		"\u05e6\3\2\2\2\u05f2\u05e7\3\2\2\2\u05f2\u05e8\3\2\2\2\u05f2\u05e9\3\2"+
		"\2\2\u05f2\u05ea\3\2\2\2\u05f2\u05eb\3\2\2\2\u05f2\u05ec\3\2\2\2\u05f2"+
		"\u05ed\3\2\2\2\u05f2\u05ee\3\2\2\2\u05f2\u05ef\3\2\2\2\u05f2\u05f0\3\2"+
		"\2\2\u05f2\u05f1\3\2\2\2\u05f3\u05f5\3\2\2\2\u05f4\u05f6\7.\2\2\u05f5"+
		"\u05f4\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\3\3\2\2\2\u05f7\u05f9\5\60\31"+
		"\2\u05f8\u05f7\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb"+
		"\7\66\2\2\u05fb\u05fc\7P\2\2\u05fc\u05fd\5\6\4\2\u05fd\u05ff\5\b\5\2\u05fe"+
		"\u0600\5\20\t\2\u05ff\u05fe\3\2\2\2\u05ff\u0600\3\2\2\2\u0600\u0602\3"+
		"\2\2\2\u0601\u0603\5\36\20\2\u0602\u0601\3\2\2\2\u0602\u0603\3\2\2\2\u0603"+
		"\5\3\2\2\2\u0604\u060a\5N(\2\u0605\u0606\5N(\2\u0606\u0607\7e\2\2\u0607"+
		"\u0608\5\u013a\u009e\2\u0608\u060a\3\2\2\2\u0609\u0604\3\2\2\2\u0609\u0605"+
		"\3\2\2\2\u060a\7\3\2\2\2\u060b\u0621\5&\24\2\u060c\u060d\7\u019d\2\2\u060d"+
		"\u060e\5\n\6\2\u060e\u060f\7\u00bc\2\2\u060f\u0610\5&\24\2\u0610\u0621"+
		"\3\2\2\2\u0611\u0612\7\"\2\2\u0612\u0613\5\f\7\2\u0613\u0614\7#\2\2\u0614"+
		"\u0615\5&\24\2\u0615\u0621\3\2\2\2\u0616\u0617\7\"\2\2\u0617\u0618\5\f"+
		"\7\2\u0618\u0619\7#\2\2\u0619\u061a\7\u019d\2\2\u061a\u061b\5\n\6\2\u061b"+
		"\u061c\7\u00bc\2\2\u061c\u061d\5&\24\2\u061d\u0621\3\2\2\2\u061e\u061f"+
		"\7\u0099\2\2\u061f\u0621\7Q\2\2\u0620\u060b\3\2\2\2\u0620\u060c\3\2\2"+
		"\2\u0620\u0611\3\2\2\2\u0620\u0616\3\2\2\2\u0620\u061e\3\2\2\2\u0621\t"+
		"\3\2\2\2\u0622\u0623\t\2\2\2\u0623\13\3\2\2\2\u0624\u0625\b\7\1\2\u0625"+
		"\u0626\5\16\b\2\u0626\u062c\3\2\2\2\u0627\u0628\f\3\2\2\u0628\u0629\7"+
		"(\2\2\u0629\u062b\5\16\b\2\u062a\u0627\3\2\2\2\u062b\u062e\3\2\2\2\u062c"+
		"\u062a\3\2\2\2\u062c\u062d\3\2\2\2\u062d\r\3\2\2\2\u062e\u062c\3\2\2\2"+
		"\u062f\u0630\5\u013a\u009e\2\u0630\u0631\5\u00fa~\2\u0631\17\3\2\2\2\u0632"+
		"\u0633\7f\2\2\u0633\u0634\7\u019c\2\2\u0634\u0635\5\22\n\2\u0635\u0636"+
		"\7\u00a0\2\2\u0636\u0637\7\67\2\2\u0637\u0638\7A\2\2\u0638\u063a\5\26"+
		"\f\2\u0639\u063b\5\u009aN\2\u063a\u0639\3\2\2\2\u063a\u063b\3\2\2\2\u063b"+
		"\u0643\3\2\2\2\u063c\u063d\7f\2\2\u063d\u063e\7\u019c\2\2\u063e\u063f"+
		"\5\22\n\2\u063f\u0640\7\u00a0\2\2\u0640\u0641\7\u0115\2\2\u0641\u0643"+
		"\3\2\2\2\u0642\u0632\3\2\2\2\u0642\u063c\3\2\2\2\u0643\21\3\2\2\2\u0644"+
		"\u0645\7\"\2\2\u0645\u0646\5\u01d8\u00ed\2\u0646\u0648\7#\2\2\u0647\u0649"+
		"\5\u009aN\2\u0648\u0647\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u064f\3\2\2"+
		"\2\u064a\u064b\7f\2\2\u064b\u064c\7E\2\2\u064c\u064f\5\u00e0q\2\u064d"+
		"\u064f\3\2\2\2\u064e\u0644\3\2\2\2\u064e\u064a\3\2\2\2\u064e\u064d\3\2"+
		"\2\2\u064f\23\3\2\2\2\u0650\u0652\5\60\31\2\u0651\u0650\3\2\2\2\u0651"+
		"\u0652\3\2\2\2\u0652\u0653\3\2\2\2\u0653\u0654\7\67\2\2\u0654\u0655\5"+
		"\"\22\2\u0655\u0656\7A\2\2\u0656\u0658\5\26\f\2\u0657\u0659\5\u008aF\2"+
		"\u0658\u0657\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065b\3\2\2\2\u065a\u065c"+
		"\5\u009cO\2\u065b\u065a\3\2\2\2\u065b\u065c\3\2\2\2\u065c\u065e\3\2\2"+
		"\2\u065d\u065f\5\36\20\2\u065e\u065d\3\2\2\2\u065e\u065f\3\2\2\2\u065f"+
		"\25\3\2\2\2\u0660\u0661\b\f\1\2\u0661\u0662\5\30\r\2\u0662\u0668\3\2\2"+
		"\2\u0663\u0664\f\3\2\2\u0664\u0665\7(\2\2\u0665\u0667\5\30\r\2\u0666\u0663"+
		"\3\2\2\2\u0667\u066a\3\2\2\2\u0668\u0666\3\2\2\2\u0668\u0669\3\2\2\2\u0669"+
		"\27\3\2\2\2\u066a\u0668\3\2\2\2\u066b\u066c\5\32\16\2\u066c\u066d\7\32"+
		"\2\2\u066d\u066e\5\u00f2z\2\u066e\u0676\3\2\2\2\u066f\u0670\7\"\2\2\u0670"+
		"\u0671\5\34\17\2\u0671\u0672\7#\2\2\u0672\u0673\7\32\2\2\u0673\u0674\5"+
		"\u00f2z\2\u0674\u0676\3\2\2\2\u0675\u066b\3\2\2\2\u0675\u066f\3\2\2\2"+
		"\u0676\31\3\2\2\2\u0677\u0678\5\u013a\u009e\2\u0678\u0679\5\u00fa~\2\u0679"+
		"\33\3\2\2\2\u067a\u067b\b\17\1\2\u067b\u067c\5\32\16\2\u067c\u0682\3\2"+
		"\2\2\u067d\u067e\f\3\2\2\u067e\u067f\7(\2\2\u067f\u0681\5\32\16\2\u0680"+
		"\u067d\3\2\2\2\u0681\u0684\3\2\2\2\u0682\u0680\3\2\2\2\u0682\u0683\3\2"+
		"\2\2\u0683\35\3\2\2\2\u0684\u0682\3\2\2\2\u0685\u0686\7\u0197\2\2\u0686"+
		"\u0687\5b\62\2\u0687\37\3\2\2\2\u0688\u068a\5\60\31\2\u0689\u0688\3\2"+
		"\2\2\u0689\u068a\3\2\2\2\u068a\u068b\3\2\2\2\u068b\u068c\78\2\2\u068c"+
		"\u068d\7Z\2\2\u068d\u068f\5\"\22\2\u068e\u0690\5$\23\2\u068f\u068e\3\2"+
		"\2\2\u068f\u0690\3\2\2\2\u0690\u0692\3\2\2\2\u0691\u0693\5\u009cO\2\u0692"+
		"\u0691\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0695\3\2\2\2\u0694\u0696\5\36"+
		"\20\2\u0695\u0694\3\2\2\2\u0695\u0696\3\2\2\2\u0696!\3\2\2\2\u0697\u06a0"+
		"\5\u0098M\2\u0698\u0699\5\u0098M\2\u0699\u069a\5\u013a\u009e\2\u069a\u06a0"+
		"\3\2\2\2\u069b\u069c\5\u0098M\2\u069c\u069d\7e\2\2\u069d\u069e\5\u013a"+
		"\u009e\2\u069e\u06a0\3\2\2\2\u069f\u0697\3\2\2\2\u069f\u0698\3\2\2\2\u069f"+
		"\u069b\3\2\2\2\u06a0#\3\2\2\2\u06a1\u06a2\7c\2\2\u06a2\u06a3\5\u008cG"+
		"\2\u06a3%\3\2\2\2\u06a4\u06a7\5*\26\2\u06a5\u06a7\5(\25\2\u06a6\u06a4"+
		"\3\2\2\2\u06a6\u06a5\3\2\2\2\u06a7\'\3\2\2\2\u06a8\u06a9\7\"\2\2\u06a9"+
		"\u06aa\5*\26\2\u06aa\u06ab\7#\2\2\u06ab\u06b1\3\2\2\2\u06ac\u06ad\7\""+
		"\2\2\u06ad\u06ae\5(\25\2\u06ae\u06af\7#\2\2\u06af\u06b1\3\2\2\2\u06b0"+
		"\u06a8\3\2\2\2\u06b0\u06ac\3\2\2\2\u06b1)\3\2\2\2\u06b2\u06e0\5,\27\2"+
		"\u06b3\u06b4\5,\27\2\u06b4\u06b5\5\u01c8\u00e5\2\u06b5\u06e0\3\2\2\2\u06b6"+
		"\u06b8\5,\27\2\u06b7\u06b9\5\u01c8\u00e5\2\u06b8\u06b7\3\2\2\2\u06b8\u06b9"+
		"\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06bc\5@!\2\u06bb\u06bd\5P)\2\u06bc"+
		"\u06bb\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06e0\3\2\2\2\u06be\u06c0\5,"+
		"\27\2\u06bf\u06c1\5\u01c8\u00e5\2\u06c0\u06bf\3\2\2\2\u06c0\u06c1\3\2"+
		"\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c4\5P)\2\u06c3\u06c5\5@!\2\u06c4\u06c3"+
		"\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06e0\3\2\2\2\u06c6\u06c7\5\60\31\2"+
		"\u06c7\u06c8\5,\27\2\u06c8\u06e0\3\2\2\2\u06c9\u06ca\5\60\31\2\u06ca\u06cb"+
		"\5,\27\2\u06cb\u06cc\5\u01c8\u00e5\2\u06cc\u06e0\3\2\2\2\u06cd\u06ce\5"+
		"\60\31\2\u06ce\u06d0\5,\27\2\u06cf\u06d1\5\u01c8\u00e5\2\u06d0\u06cf\3"+
		"\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d4\5@!\2\u06d3"+
		"\u06d5\5P)\2\u06d4\u06d3\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06e0\3\2\2"+
		"\2\u06d6\u06d7\5\60\31\2\u06d7\u06d9\5,\27\2\u06d8\u06da\5\u01c8\u00e5"+
		"\2\u06d9\u06d8\3\2\2\2\u06d9\u06da\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u06dd"+
		"\5P)\2\u06dc\u06de\5@!\2\u06dd\u06dc\3\2\2\2\u06dd\u06de\3\2\2\2\u06de"+
		"\u06e0\3\2\2\2\u06df\u06b2\3\2\2\2\u06df\u06b3\3\2\2\2\u06df\u06b6\3\2"+
		"\2\2\u06df\u06be\3\2\2\2\u06df\u06c6\3\2\2\2\u06df\u06c9\3\2\2\2\u06df"+
		"\u06cd\3\2\2\2\u06df\u06d6\3\2\2\2\u06e0+\3\2\2\2\u06e1\u06e2\b\27\1\2"+
		"\u06e2\u06e5\5.\30\2\u06e3\u06e5\5(\25\2\u06e4\u06e1\3\2\2\2\u06e4\u06e3"+
		"\3\2\2\2\u06e5\u06fa\3\2\2\2\u06e6\u06e7\f\5\2\2\u06e7\u06e9\7S\2\2\u06e8"+
		"\u06ea\5\u01c6\u00e4\2\u06e9\u06e8\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06eb"+
		"\3\2\2\2\u06eb\u06f9\5,\27\6\u06ec\u06ed\f\4\2\2\u06ed\u06ef\7\u00c1\2"+
		"\2\u06ee\u06f0\5\u01c6\u00e4\2\u06ef\u06ee\3\2\2\2\u06ef\u06f0\3\2\2\2"+
		"\u06f0\u06f1\3\2\2\2\u06f1\u06f9\5,\27\5\u06f2\u06f3\f\3\2\2\u06f3\u06f5"+
		"\7\u00c2\2\2\u06f4\u06f6\5\u01c6\u00e4\2\u06f5\u06f4\3\2\2\2\u06f5\u06f6"+
		"\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06f9\5,\27\4\u06f8\u06e6\3\2\2\2\u06f8"+
		"\u06ec\3\2\2\2\u06f8\u06f2\3\2\2\2\u06f9\u06fc\3\2\2\2\u06fa\u06f8\3\2"+
		"\2\2\u06fa\u06fb\3\2\2\2\u06fb-\3\2\2\2\u06fc\u06fa\3\2\2\2\u06fd\u06ff"+
		"\7\65\2\2\u06fe\u0700\7v\2\2\u06ff\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2\u0700"+
		"\u0702\3\2\2\2\u0701\u0703\5b\62\2\u0702\u0701\3\2\2\2\u0702\u0703\3\2"+
		"\2\2\u0703\u0705\3\2\2\2\u0704\u0706\5\62\32\2\u0705\u0704\3\2\2\2\u0705"+
		"\u0706\3\2\2\2\u0706\u0708\3\2\2\2\u0707\u0709\5\u008aF\2\u0708\u0707"+
		"\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u070b\3\2\2\2\u070a\u070c\5\u009aN"+
		"\2\u070b\u070a\3\2\2\2\u070b\u070c\3\2\2\2\u070c\u070e\3\2\2\2\u070d\u070f"+
		"\5f\64\2\u070e\u070d\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u0711\3\2\2\2\u0710"+
		"\u0712\5\u009eP\2\u0711\u0710\3\2\2\2\u0711\u0712\3\2\2\2\u0712\u0714"+
		"\3\2\2\2\u0713\u0715\5t;\2\u0714\u0713\3\2\2\2\u0714\u0715\3\2\2\2\u0715"+
		"\u072f\3\2\2\2\u0716\u0717\7\65\2\2\u0717\u0718\5\u01d0\u00e9\2\u0718"+
		"\u071a\5b\62\2\u0719\u071b\5\62\32\2\u071a\u0719\3\2\2\2\u071a\u071b\3"+
		"\2\2\2\u071b\u071d\3\2\2\2\u071c\u071e\5\u008aF\2\u071d\u071c\3\2\2\2"+
		"\u071d\u071e\3\2\2\2\u071e\u0720\3\2\2\2\u071f\u0721\5\u009aN\2\u0720"+
		"\u071f\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u0723\3\2\2\2\u0722\u0724\5f"+
		"\64\2\u0723\u0722\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u0726\3\2\2\2\u0725"+
		"\u0727\5\u009eP\2\u0726\u0725\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u0729"+
		"\3\2\2\2\u0728\u072a\5t;\2\u0729\u0728\3\2\2\2\u0729\u072a\3\2\2\2\u072a"+
		"\u072f\3\2\2\2\u072b\u072f\5R*\2\u072c\u072d\7B\2\2\u072d\u072f\5\u0098"+
		"M\2\u072e\u06fd\3\2\2\2\u072e\u0716\3\2\2\2\u072e\u072b\3\2\2\2\u072e"+
		"\u072c\3\2\2\2\u072f/\3\2\2\2\u0730\u0731\7R\2\2\u0731\u0736\5\66\34\2"+
		"\u0732\u0733\7R\2\2\u0733\u0734\7\u013e\2\2\u0734\u0736\5\66\34\2\u0735"+
		"\u0730\3\2\2\2\u0735\u0732\3\2\2\2\u0736\61\3\2\2\2\u0737\u0738\7P\2\2"+
		"\u0738\u0739\5\64\33\2\u0739\63\3\2\2\2\u073a\u073c\7\u0132\2\2\u073b"+
		"\u073d\7B\2\2\u073c\u073b\3\2\2\2\u073c\u073d\3\2\2\2\u073d\u073e\3\2"+
		"\2\2\u073e\u0767\5N(\2\u073f\u0741\7\u0131\2\2\u0740\u0742\7B\2\2\u0741"+
		"\u0740\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0743\3\2\2\2\u0743\u0767\5N"+
		"(\2\u0744\u0745\7\u00a5\2\2\u0745\u0747\7\u0132\2\2\u0746\u0748\7B\2\2"+
		"\u0747\u0746\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u0749\3\2\2\2\u0749\u0767"+
		"\5N(\2\u074a\u074b\7\u00a5\2\2\u074b\u074d\7\u0131\2\2\u074c\u074e\7B"+
		"\2\2\u074d\u074c\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u074f\3\2\2\2\u074f"+
		"\u0767\5N(\2\u0750\u0751\7\u0103\2\2\u0751\u0753\7\u0132\2\2\u0752\u0754"+
		"\7B\2\2\u0753\u0752\3\2\2\2\u0753\u0754\3\2\2\2\u0754\u0755\3\2\2\2\u0755"+
		"\u0767\5N(\2\u0756\u0757\7\u0103\2\2\u0757\u0759\7\u0131\2\2\u0758\u075a"+
		"\7B\2\2\u0759\u0758\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075b\3\2\2\2\u075b"+
		"\u0767\5N(\2\u075c\u075e\7\u0134\2\2\u075d\u075f\7B\2\2\u075e\u075d\3"+
		"\2\2\2\u075e\u075f\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u0767\5N(\2\u0761"+
		"\u0763\7B\2\2\u0762\u0761\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u0764\3\2"+
		"\2\2\u0764\u0767\5N(\2\u0765\u0767\5N(\2\u0766\u073a\3\2\2\2\u0766\u073f"+
		"\3\2\2\2\u0766\u0744\3\2\2\2\u0766\u074a\3\2\2\2\u0766\u0750\3\2\2\2\u0766"+
		"\u0756\3\2\2\2\u0766\u075c\3\2\2\2\u0766\u0762\3\2\2\2\u0766\u0765\3\2"+
		"\2\2\u0767\65\3\2\2\2\u0768\u0769\b\34\1\2\u0769\u076a\58\35\2\u076a\u0770"+
		"\3\2\2\2\u076b\u076c\f\3\2\2\u076c\u076d\7(\2\2\u076d\u076f\58\35\2\u076e"+
		"\u076b\3\2\2\2\u076f\u0772\3\2\2\2\u0770\u076e\3\2\2\2\u0770\u0771\3\2"+
		"\2\2\u0771\67\3\2\2\2\u0772\u0770\3\2\2\2\u0773\u0774\5\u00e0q\2\u0774"+
		"\u0775\5<\37\2\u0775\u0776\7e\2\2\u0776\u0777\5:\36\2\u0777\u0778\7\""+
		"\2\2\u0778\u0779\5> \2\u0779\u077a\7#\2\2\u077a9\3\2\2\2\u077b\u0780\7"+
		"\u0181\2\2\u077c\u077d\7o\2\2\u077d\u0780\7\u0181\2\2\u077e\u0780\3\2"+
		"\2\2\u077f\u077b\3\2\2\2\u077f\u077c\3\2\2\2\u077f\u077e\3\2\2\2\u0780"+
		";\3\2\2\2\u0781\u0782\7\"\2\2\u0782\u0783\5\u01be\u00e0\2\u0783\u0784"+
		"\7#\2\2\u0784\u0787\3\2\2\2\u0785\u0787\3\2\2\2\u0786\u0781\3\2\2\2\u0786"+
		"\u0785\3\2\2\2\u0787=\3\2\2\2\u0788\u078d\5&\24\2\u0789\u078d\5\4\3\2"+
		"\u078a\u078d\5\24\13\2\u078b\u078d\5 \21\2\u078c\u0788\3\2\2\2\u078c\u0789"+
		"\3\2\2\2\u078c\u078a\3\2\2\2\u078c\u078b\3\2\2\2\u078d?\3\2\2\2\u078e"+
		"\u0793\5B\"\2\u078f\u0790\7j\2\2\u0790\u0791\7\u00e1\2\2\u0791\u0793\7"+
		"\u0119\2\2\u0792\u078e\3\2\2\2\u0792\u078f\3\2\2\2\u0793A\3\2\2\2\u0794"+
		"\u0795\b\"\1\2\u0795\u0796\5D#\2\u0796\u079b\3\2\2\2\u0797\u0798\f\3\2"+
		"\2\u0798\u079a\5D#\2\u0799\u0797\3\2\2\2\u079a\u079d\3\2\2\2\u079b\u0799"+
		"\3\2\2\2\u079b\u079c\3\2\2\2\u079cC\3\2\2\2\u079d\u079b\3\2\2\2\u079e"+
		"\u07a0\5H%\2\u079f\u07a1\5J&\2\u07a0\u079f\3\2\2\2\u07a0\u07a1\3\2\2\2"+
		"\u07a1\u07a3\3\2\2\2\u07a2\u07a4\5F$\2\u07a3\u07a2\3\2\2\2\u07a3\u07a4"+
		"\3\2\2\2\u07a4E\3\2\2\2\u07a5\u07a9\7\u018e\2\2\u07a6\u07a7\7\3\2\2\u07a7"+
		"\u07a9\7\u018f\2\2\u07a8\u07a5\3\2\2\2\u07a8\u07a6\3\2\2\2\u07a9G\3\2"+
		"\2\2\u07aa\u07ab\7j\2\2\u07ab\u07b6\7\67\2\2\u07ac\u07ad\7j\2\2\u07ad"+
		"\u07ae\7\u00de\2\2\u07ae\u07af\7I\2\2\u07af\u07b6\7\67\2\2\u07b0\u07b1"+
		"\7j\2\2\u07b1\u07b6\7\u0183\2\2\u07b2\u07b3\7j\2\2\u07b3\u07b4\7I\2\2"+
		"\u07b4\u07b6\7\u0183\2\2\u07b5\u07aa\3\2\2\2\u07b5\u07ac\3\2\2\2\u07b5"+
		"\u07b0\3\2\2\2\u07b5\u07b2\3\2\2\2\u07b6I\3\2\2\2\u07b7\u07b8\7\u013b"+
		"\2\2\u07b8\u07b9\5L\'\2\u07b9K\3\2\2\2\u07ba\u07bb\b\'\1\2\u07bb\u07bc"+
		"\5N(\2\u07bc\u07c2\3\2\2\2\u07bd\u07be\f\3\2\2\u07be\u07bf\7(\2\2\u07bf"+
		"\u07c1\5N(\2\u07c0\u07bd\3\2\2\2\u07c1\u07c4\3\2\2\2\u07c2\u07c0\3\2\2"+
		"\2\u07c2\u07c3\3\2\2\2\u07c3M\3\2\2\2\u07c4\u07c2\3\2\2\2\u07c5\u07ca"+
		"\5\u013a\u009e\2\u07c6\u07c7\5\u013a\u009e\2\u07c7\u07c8\5\u00f8}\2\u07c8"+
		"\u07ca\3\2\2\2\u07c9\u07c5\3\2\2\2\u07c9\u07c6\3\2\2\2\u07caO\3\2\2\2"+
		"\u07cb\u07cc\5T+\2\u07cc\u07cd\5V,\2\u07cd\u07d4\3\2\2\2\u07ce\u07cf\5"+
		"V,\2\u07cf\u07d0\5T+\2\u07d0\u07d4\3\2\2\2\u07d1\u07d4\5T+\2\u07d2\u07d4"+
		"\5V,\2\u07d3\u07cb\3\2\2\2\u07d3\u07ce\3\2\2\2\u07d3\u07d1\3\2\2\2\u07d3"+
		"\u07d2\3\2\2\2\u07d4Q\3\2\2\2\u07d5\u07d6\b*\1\2\u07d6\u07d7\7Q\2\2\u07d7"+
		"\u07d8\7\"\2\2\u07d8\u07d9\5\u015e\u00b0\2\u07d9\u07da\7#\2\2\u07da\u07e3"+
		"\3\2\2\2\u07db\u07dc\f\3\2\2\u07dc\u07dd\7(\2\2\u07dd\u07de\7\"\2\2\u07de"+
		"\u07df\5\u015e\u00b0\2\u07df\u07e0\7#\2\2\u07e0\u07e2\3\2\2\2\u07e1\u07db"+
		"\3\2\2\2\u07e2\u07e5\3\2\2\2\u07e3\u07e1\3\2\2\2\u07e3\u07e4\3\2\2\2\u07e4"+
		"S\3\2\2\2\u07e5\u07e3\3\2\2\2\u07e6\u07e7\7\177\2\2\u07e7\u0806\5X-\2"+
		"\u07e8\u07e9\7\177\2\2\u07e9\u07ea\5X-\2\u07ea\u07eb\7(\2\2\u07eb\u07ec"+
		"\5Z.\2\u07ec\u0806\3\2\2\2\u07ed\u07ee\7\u00c4\2\2\u07ee\u07ef\5`\61\2"+
		"\u07ef\u07f0\5\\/\2\u07f0\u07f1\5^\60\2\u07f1\u07f2\7\u0119\2\2\u07f2"+
		"\u0806\3\2\2\2\u07f3\u07f4\7\u00c4\2\2\u07f4\u07f5\5`\61\2\u07f5\u07f6"+
		"\5\\/\2\u07f6\u07f7\5^\60\2\u07f7\u07f8\7R\2\2\u07f8\u07f9\7\u00c3\2\2"+
		"\u07f9\u0806\3\2\2\2\u07fa\u07fb\7\u00c4\2\2\u07fb\u07fc\5`\61\2\u07fc"+
		"\u07fd\5^\60\2\u07fd\u07fe\7\u0119\2\2\u07fe\u0806\3\2\2\2\u07ff\u0800"+
		"\7\u00c4\2\2\u0800\u0801\5`\61\2\u0801\u0802\5^\60\2\u0802\u0803\7R\2"+
		"\2\u0803\u0804\7\u00c3\2\2\u0804\u0806\3\2\2\2\u0805\u07e6\3\2\2\2\u0805"+
		"\u07e8\3\2\2\2\u0805\u07ed\3\2\2\2\u0805\u07f3\3\2\2\2\u0805\u07fa\3\2"+
		"\2\2\u0805\u07ff\3\2\2\2\u0806U\3\2\2\2\u0807\u0808\7\u0080\2\2\u0808"+
		"\u080e\5Z.\2\u0809\u080a\7\u0080\2\2\u080a\u080b\5\\/\2\u080b\u080c\5"+
		"^\60\2\u080c\u080e\3\2\2\2\u080d\u0807\3\2\2\2\u080d\u0809\3\2\2\2\u080e"+
		"W\3\2\2\2\u080f\u0812\5\u00f2z\2\u0810\u0812\7v\2\2\u0811\u080f\3\2\2"+
		"\2\u0811\u0810\3\2\2\2\u0812Y\3\2\2\2\u0813\u0814\5\u00f2z\2\u0814[\3"+
		"\2\2\2\u0815\u081b\5\u00f6|\2\u0816\u0817\7\21\2\2\u0817\u081b\7\u0225"+
		"\2\2\u0818\u0819\7\22\2\2\u0819\u081b\7\u0225\2\2\u081a\u0815\3\2\2\2"+
		"\u081a\u0816\3\2\2\2\u081a\u0818\3\2\2\2\u081b]\3\2\2\2\u081c\u081d\t"+
		"\3\2\2\u081d_\3\2\2\2\u081e\u081f\t\4\2\2\u081fa\3\2\2\2\u0820\u0821\b"+
		"\62\1\2\u0821\u0822\5d\63\2\u0822\u0828\3\2\2\2\u0823\u0824\f\3\2\2\u0824"+
		"\u0825\7(\2\2\u0825\u0827\5d\63\2\u0826\u0823\3\2\2\2\u0827\u082a\3\2"+
		"\2\2\u0828\u0826\3\2\2\2\u0828\u0829\3\2\2\2\u0829c\3\2\2\2\u082a\u0828"+
		"\3\2\2\2\u082b\u082c\5\u013a\u009e\2\u082c\u082d\7\27\2\2\u082d\u0838"+
		"\3\2\2\2\u082e\u082f\5\u00f2z\2\u082f\u0830\7e\2\2\u0830\u0831\5\u00ce"+
		"h\2\u0831\u0838\3\2\2\2\u0832\u0833\5\u00f2z\2\u0833\u0834\5\u00ceh\2"+
		"\u0834\u0838\3\2\2\2\u0835\u0838\5\u00f2z\2\u0836\u0838\7\23\2\2\u0837"+
		"\u082b\3\2\2\2\u0837\u082e\3\2\2\2\u0837\u0832\3\2\2\2\u0837\u0835\3\2"+
		"\2\2\u0837\u0836\3\2\2\2\u0838e\3\2\2\2\u0839\u083a\7z\2\2\u083a\u083b"+
		"\7{\2\2\u083b\u083c\5h\65\2\u083cg\3\2\2\2\u083d\u0842\5j\66\2\u083e\u083f"+
		"\7(\2\2\u083f\u0841\5j\66\2\u0840\u083e\3\2\2\2\u0841\u0844\3\2\2\2\u0842"+
		"\u0840\3\2\2\2\u0842\u0843\3\2\2\2\u0843i\3\2\2\2\u0844\u0842\3\2\2\2"+
		"\u0845\u084b\5\u00f2z\2\u0846\u084b\5l\67\2\u0847\u084b\5p9\2\u0848\u084b"+
		"\5n8\2\u0849\u084b\5r:\2\u084a\u0845\3\2\2\2\u084a\u0846\3\2\2\2\u084a"+
		"\u0847\3\2\2\2\u084a\u0848\3\2\2\2\u084a\u0849\3\2\2\2\u084bk\3\2\2\2"+
		"\u084c\u084d\7\"\2\2\u084d\u084e\7#\2\2\u084em\3\2\2\2\u084f\u0850\7\u0184"+
		"\2\2\u0850\u0851\7\"\2\2\u0851\u0852\5\u015e\u00b0\2\u0852\u0853\7#\2"+
		"\2\u0853o\3\2\2\2\u0854\u0855\7\u00c5\2\2\u0855\u0856\7\"\2\2\u0856\u0857"+
		"\5\u015e\u00b0\2\u0857\u0858\7#\2\2\u0858q\3\2\2\2\u0859\u085a\7\u00c6"+
		"\2\2\u085a\u085b\7\u00c7\2\2\u085b\u085c\7\"\2\2\u085c\u085d\5h\65\2\u085d"+
		"\u085e\7#\2\2\u085es\3\2\2\2\u085f\u0860\7\u00c8\2\2\u0860\u0861\5v<\2"+
		"\u0861u\3\2\2\2\u0862\u0863\b<\1\2\u0863\u0864\5x=\2\u0864\u086a\3\2\2"+
		"\2\u0865\u0866\f\3\2\2\u0866\u0867\7(\2\2\u0867\u0869\5x=\2\u0868\u0865"+
		"\3\2\2\2\u0869\u086c\3\2\2\2\u086a\u0868\3\2\2\2\u086a\u086b\3\2\2\2\u086b"+
		"w\3\2\2\2\u086c\u086a\3\2\2\2\u086d\u086e\5\u013a\u009e\2\u086e\u086f"+
		"\7e\2\2\u086f\u0870\5z>\2\u0870y\3\2\2\2\u0871\u0873\7\"\2\2\u0872\u0874"+
		"\5|?\2\u0873\u0872\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u0876\3\2\2\2\u0875"+
		"\u0877\5~@\2\u0876\u0875\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0879\3\2\2"+
		"\2\u0878\u087a\5\u01c8\u00e5\2\u0879\u0878\3\2\2\2\u0879\u087a\3\2\2\2"+
		"\u087a\u087c\3\2\2\2\u087b\u087d\5\u0080A\2\u087c\u087b\3\2\2\2\u087c"+
		"\u087d\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u087f\7#\2\2\u087f{\3\2\2\2\u0880"+
		"\u0881\5\u013a\u009e\2\u0881}\3\2\2\2\u0882\u0883\7\u00d5\2\2\u0883\u0884"+
		"\7{\2\2\u0884\u0885\5\u015e\u00b0\2\u0885\177\3\2\2\2\u0886\u0887\7\u0120"+
		"\2\2\u0887\u0888\5\u0082B\2\u0888\u0889\5\u0086D\2\u0889\u0893\3\2\2\2"+
		"\u088a\u088b\7\u00e4\2\2\u088b\u088c\5\u0082B\2\u088c\u088d\5\u0086D\2"+
		"\u088d\u0893\3\2\2\2\u088e\u088f\7\u013d\2\2\u088f\u0890\5\u0082B\2\u0890"+
		"\u0891\5\u0086D\2\u0891\u0893\3\2\2\2\u0892\u0886\3\2\2\2\u0892\u088a"+
		"\3\2\2\2\u0892\u088e\3\2\2\2\u0893\u0081\3\2\2\2\u0894\u089b\5\u0084C"+
		"\2\u0895\u0896\7t\2\2\u0896\u0897\5\u0084C\2\u0897\u0898\7l\2\2\u0898"+
		"\u0899\5\u0084C\2\u0899\u089b\3\2\2\2\u089a\u0894\3\2\2\2\u089a\u0895"+
		"\3\2\2\2\u089b\u0083\3\2\2\2\u089c\u089d\7\u0133\2\2\u089d\u08a9\7\u011f"+
		"\2\2\u089e\u089f\7\u0133\2\2\u089f\u08a9\7\u0101\2\2\u08a0\u08a1\7\u009a"+
		"\2\2\u08a1\u08a9\7\u00d6\2\2\u08a2\u08a3\5\u00f2z\2\u08a3\u08a4\7\u011f"+
		"\2\2\u08a4\u08a9\3\2\2\2\u08a5\u08a6\5\u00f2z\2\u08a6\u08a7\7\u0101\2"+
		"\2\u08a7\u08a9\3\2\2\2\u08a8\u089c\3\2\2\2\u08a8\u089e\3\2\2\2\u08a8\u08a0"+
		"\3\2\2\2\u08a8\u08a2\3\2\2\2\u08a8\u08a5\3\2\2\2\u08a9\u0085\3\2\2\2\u08aa"+
		"\u08ab\7\u00d3\2\2\u08ab\u08ac\7\u009a\2\2\u08ac\u08b6\7\u00d6\2\2\u08ad"+
		"\u08ae\7\u00d3\2\2\u08ae\u08b6\7z\2\2\u08af\u08b0\7\u00d3\2\2\u08b0\u08b6"+
		"\7\u00c3\2\2\u08b1\u08b2\7\u00d3\2\2\u08b2\u08b3\7\u00de\2\2\u08b3\u08b6"+
		"\7\u00c9\2\2\u08b4\u08b6\3\2\2\2\u08b5\u08aa\3\2\2\2\u08b5\u08ad\3\2\2"+
		"\2\u08b5\u08af\3\2\2\2\u08b5\u08b1\3\2\2\2\u08b5\u08b4\3\2\2\2\u08b6\u0087"+
		"\3\2\2\2\u08b7\u08ba\5\u00ceh\2\u08b8\u08ba\7\u0224\2\2\u08b9\u08b7\3"+
		"\2\2\2\u08b9\u08b8\3\2\2\2\u08ba\u0089\3\2\2\2\u08bb\u08bc\7Z\2\2\u08bc"+
		"\u08bd\5\u008cG\2\u08bd\u008b\3\2\2\2\u08be\u08bf\bG\1\2\u08bf\u08c0\5"+
		"\u008eH\2\u08c0\u08c6\3\2\2\2\u08c1\u08c2\f\3\2\2\u08c2\u08c3\7(\2\2\u08c3"+
		"\u08c5\5\u008eH\2\u08c4\u08c1\3\2\2\2\u08c5\u08c8\3\2\2\2\u08c6\u08c4"+
		"\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u008d\3\2\2\2\u08c8\u08c6\3\2\2\2\u08c9"+
		"\u08ca\bH\1\2\u08ca\u08cc\5\u0098M\2\u08cb\u08cd\5\u01bc\u00df\2\u08cc"+
		"\u08cb\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08f7\3\2\2\2\u08ce\u08d0\5\u0098"+
		"M\2\u08cf\u08d1\5\u01bc\u00df\2\u08d0\u08cf\3\2\2\2\u08d0\u08d1\3\2\2"+
		"\2\u08d1\u08d2\3\2\2\2\u08d2\u08d3\5\u01c2\u00e2\2\u08d3\u08f7\3\2\2\2"+
		"\u08d4\u08d6\5\u013e\u00a0\2\u08d5\u08d7\5\u01c0\u00e1\2\u08d6\u08d5\3"+
		"\2\2\2\u08d6\u08d7\3\2\2\2\u08d7\u08f7\3\2\2\2\u08d8\u08d9\7\u0198\2\2"+
		"\u08d9\u08db\5\u013e\u00a0\2\u08da\u08dc\5\u01c0\u00e1\2\u08db\u08da\3"+
		"\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u08f7\3\2\2\2\u08dd\u08df\5\u0140\u00a1"+
		"\2\u08de\u08e0\5\u01bc\u00df\2\u08df\u08de\3\2\2\2\u08df\u08e0\3\2\2\2"+
		"\u08e0\u08f7\3\2\2\2\u08e1\u08e2\7\u0198\2\2\u08e2\u08e4\5\u0140\u00a1"+
		"\2\u08e3\u08e5\5\u01bc\u00df\2\u08e4\u08e3\3\2\2\2\u08e4\u08e5\3\2\2\2"+
		"\u08e5\u08f7\3\2\2\2\u08e6\u08e8\5(\25\2\u08e7\u08e9\5\u01bc\u00df\2\u08e8"+
		"\u08e7\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08f7\3\2\2\2\u08ea\u08eb\7\u0198"+
		"\2\2\u08eb\u08ed\5(\25\2\u08ec\u08ee\5\u01bc\u00df\2\u08ed\u08ec\3\2\2"+
		"\2\u08ed\u08ee\3\2\2\2\u08ee\u08f7\3\2\2\2\u08ef\u08f0\7\"\2\2\u08f0\u08f1"+
		"\5\u008eH\2\u08f1\u08f2\5\u0090I\2\u08f2\u08f4\7#\2\2\u08f3\u08f5\5\u01bc"+
		"\u00df\2\u08f4\u08f3\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f7\3\2\2\2\u08f6"+
		"\u08c9\3\2\2\2\u08f6\u08ce\3\2\2\2\u08f6\u08d4\3\2\2\2\u08f6\u08d8\3\2"+
		"\2\2\u08f6\u08dd\3\2\2\2\u08f6\u08e1\3\2\2\2\u08f6\u08e6\3\2\2\2\u08f6"+
		"\u08ea\3\2\2\2\u08f6\u08ef\3\2\2\2\u08f7\u08fc\3\2\2\2\u08f8\u08f9\f\4"+
		"\2\2\u08f9\u08fb\5\u0090I\2\u08fa\u08f8\3\2\2\2\u08fb\u08fe\3\2\2\2\u08fc"+
		"\u08fa\3\2\2\2\u08fc\u08fd\3\2\2\2\u08fd\u008f\3\2\2\2\u08fe\u08fc\3\2"+
		"\2\2\u08ff\u0900\7b\2\2\u0900\u0901\7\\\2\2\u0901\u0914\5\u008eH\2\u0902"+
		"\u0903\5\u0092J\2\u0903\u0904\7\\\2\2\u0904\u0905\5\u008eH\2\u0905\u0906"+
		"\5\u0096L\2\u0906\u0914\3\2\2\2\u0907\u0908\7\\\2\2\u0908\u0909\5\u008e"+
		"H\2\u0909\u090a\5\u0096L\2\u090a\u0914\3\2\2\2\u090b\u090c\7[\2\2\u090c"+
		"\u090d\5\u0092J\2\u090d\u090e\7\\\2\2\u090e\u090f\5\u008eH\2\u090f\u0914"+
		"\3\2\2\2\u0910\u0911\7[\2\2\u0911\u0912\7\\\2\2\u0912\u0914\5\u008eH\2"+
		"\u0913\u08ff\3\2\2\2\u0913\u0902\3\2\2\2\u0913\u0907\3\2\2\2\u0913\u090b"+
		"\3\2\2\2\u0913\u0910\3\2\2\2\u0914\u0091\3\2\2\2\u0915\u0917\7]\2\2\u0916"+
		"\u0918\5\u0094K\2\u0917\u0916\3\2\2\2\u0917\u0918\3\2\2\2\u0918\u0923"+
		"\3\2\2\2\u0919\u091b\7`\2\2\u091a\u091c\5\u0094K\2\u091b\u091a\3\2\2\2"+
		"\u091b\u091c\3\2\2\2\u091c\u0923\3\2\2\2\u091d\u091f\7a\2\2\u091e\u0920"+
		"\5\u0094K\2\u091f\u091e\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0923\3\2\2"+
		"\2\u0921\u0923\7^\2\2\u0922\u0915\3\2\2\2\u0922\u0919\3\2\2\2\u0922\u091d"+
		"\3\2\2\2\u0922\u0921\3\2\2\2\u0923\u0093\3\2\2\2\u0924\u0925\7_\2\2\u0925"+
		"\u0095\3\2\2\2\u0926\u0927\7c\2\2\u0927\u0928\7\"\2\2\u0928\u0929\5\u01be"+
		"\u00e0\2\u0929\u092a\7#\2\2\u092a\u092e\3\2\2\2\u092b\u092c\7f\2\2\u092c"+
		"\u092e\5\u00f2z\2\u092d\u0926\3\2\2\2\u092d\u092b\3\2\2\2\u092e\u0097"+
		"\3\2\2\2\u092f\u093b\5N(\2\u0930\u0931\5N(\2\u0931\u0932\7\23\2\2\u0932"+
		"\u093b\3\2\2\2\u0933\u0934\7\u0119\2\2\u0934\u093b\5N(\2\u0935\u0936\7"+
		"\u0119\2\2\u0936\u0937\7\"\2\2\u0937\u0938\5N(\2\u0938\u0939\7#\2\2\u0939"+
		"\u093b\3\2\2\2\u093a\u092f\3\2\2\2\u093a\u0930\3\2\2\2\u093a\u0933\3\2"+
		"\2\2\u093a\u0935\3\2\2\2\u093b\u0099\3\2\2\2\u093c\u093d\7d\2\2\u093d"+
		"\u093e\5\u00f2z\2\u093e\u009b\3\2\2\2\u093f\u0945\5\u009aN\2\u0940\u0941"+
		"\7d\2\2\u0941\u0942\7\u009a\2\2\u0942\u0943\7\u013b\2\2\u0943\u0945\5"+
		"\u00f0y\2\u0944\u093f\3\2\2\2\u0944\u0940\3\2\2\2\u0945\u009d\3\2\2\2"+
		"\u0946\u0947\7~\2\2\u0947\u0948\5\u00f2z\2\u0948\u009f\3\2\2\2\u0949\u094a"+
		"\7\u00a0\2\2\u094a\u094b\5\u00a2R\2\u094b\u00a1\3\2\2\2\u094c\u094e\5"+
		"\u00a4S\2\u094d\u094c\3\2\2\2\u094e\u094f\3\2\2\2\u094f\u094d\3\2\2\2"+
		"\u094f\u0950\3\2\2\2\u0950\u00a3\3\2\2\2\u0951\u0955\7\u0224\2\2\u0952"+
		"\u0953\7\u010d\2\2\u0953\u0955\5\u0252\u012a\2\u0954\u0951\3\2\2\2\u0954"+
		"\u0952\3\2\2\2\u0955\u00a5\3\2\2\2\u0956\u0958\7\u0202\2\2\u0957\u0959"+
		"\7B\2\2\u0958\u0957\3\2\2\2\u0958\u0959\3\2\2\2\u0959\u095a\3\2\2\2\u095a"+
		"\u095f\5\u026c\u0137\2\u095b\u095c\7u\2\2\u095c\u095d\5\u00a8U\2\u095d"+
		"\u095e\7\u01de\2\2\u095e\u0960\3\2\2\2\u095f\u095b\3\2\2\2\u095f\u0960"+
		"\3\2\2\2\u0960\u0962\3\2\2\2\u0961\u0963\7\u018e\2\2\u0962\u0961\3\2\2"+
		"\2\u0962\u0963\3\2\2\2\u0963\u00a7\3\2\2\2\u0964\u0965\7\u01a1\2\2\u0965"+
		"\u0975\7\u0183\2\2\u0966\u0967\7\u00d6\2\2\u0967\u0975\7\u0183\2\2\u0968"+
		"\u0969\7\u00d6\2\2\u0969\u0975\7\u01cf\2\2\u096a\u096b\7\u0183\2\2\u096b"+
		"\u096c\7\67\2\2\u096c\u0975\7\u01cf\2\2\u096d\u0975\7\u0183\2\2\u096e"+
		"\u096f\7\u0183\2\2\u096f\u0970\7\u00d6\2\2\u0970\u0975\7\u01cf\2\2\u0971"+
		"\u0975\7\u01cf\2\2\u0972\u0973\7\u01a1\2\2\u0973\u0975\7\u01cf\2\2\u0974"+
		"\u0964\3\2\2\2\u0974\u0966\3\2\2\2\u0974\u0968\3\2\2\2\u0974\u096a\3\2"+
		"\2\2\u0974\u096d\3\2\2\2\u0974\u096e\3\2\2\2\u0974\u0971\3\2\2\2\u0974"+
		"\u0972\3\2\2\2\u0975\u00a9\3\2\2\2\u0976\u0977\7\u01b3\2\2\u0977\u00ab"+
		"\3\2\2\2\u0978\u097a\7\u01ad\2\2\u0979\u097b\7\u00d1\2\2\u097a\u0979\3"+
		"\2\2\2\u097a\u097b\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u0981\5N(\2\u097d"+
		"\u097e\7\"\2\2\u097e\u097f\5\u0224\u0113\2\u097f\u0980\7#\2\2\u0980\u0982"+
		"\3\2\2\2\u0981\u097d\3\2\2\2\u0981\u0982\3\2\2\2\u0982\u0983\3\2\2\2\u0983"+
		"\u0985\t\5\2\2\u0984\u0986\7\u01e5\2\2\u0985\u0984\3\2\2\2\u0985\u0986"+
		"\3\2\2\2\u0986\u0987\3\2\2\2\u0987\u0989\t\6\2\2\u0988\u098a\5\u00be`"+
		"\2\u0989\u0988\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u098c\3\2\2\2\u098b\u098d"+
		"\7R\2\2\u098c\u098b\3\2\2\2\u098c\u098d\3\2\2\2\u098d\u098e\3\2\2\2\u098e"+
		"\u0990\5\u00aeX\2\u098f\u0991\5\u009aN\2\u0990\u098f\3\2\2\2\u0990\u0991"+
		"\3\2\2\2\u0991\u09a1\3\2\2\2\u0992\u0993\7\u01ad\2\2\u0993\u0994\7\"\2"+
		"\2\u0994\u0995\5> \2\u0995\u0996\7#\2\2\u0996\u0998\7k\2\2\u0997\u0999"+
		"\7\u01e5\2\2\u0998\u0997\3\2\2\2\u0998\u0999\3\2\2\2\u0999\u099a\3\2\2"+
		"\2\u099a\u099c\t\6\2\2\u099b\u099d\7R\2\2\u099c\u099b\3\2\2\2\u099c\u099d"+
		"\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u099f\5\u00aeX\2\u099f\u09a1\3\2\2"+
		"\2\u09a0\u0978\3\2\2\2\u09a0\u0992\3\2\2\2\u09a1\u00ad\3\2\2\2\u09a2\u09a8"+
		"\5\u00ba^\2\u09a3\u09a4\7\"\2\2\u09a4\u09a5\5\u00b0Y\2\u09a5\u09a6\7#"+
		"\2\2\u09a6\u09a8\3\2\2\2\u09a7\u09a2\3\2\2\2\u09a7\u09a3\3\2\2\2\u09a8"+
		"\u00af\3\2\2\2\u09a9\u09ae\5\u00b2Z\2\u09aa\u09ab\7(\2\2\u09ab\u09ad\5"+
		"\u00b2Z\2\u09ac\u09aa\3\2\2\2\u09ad\u09b0\3\2\2\2\u09ae\u09ac\3\2\2\2"+
		"\u09ae\u09af\3\2\2\2\u09af\u00b1\3\2\2\2\u09b0\u09ae\3\2\2\2\u09b1\u09b2"+
		"\5\u0232\u011a\2\u09b2\u09b3\5\u00b4[\2\u09b3\u00b3\3\2\2\2\u09b4\u09bc"+
		"\5\u01fa\u00fe\2\u09b5\u09bc\5\u020c\u0107\2\u09b6\u09bc\7\23\2\2\u09b7"+
		"\u09b8\7\"\2\2\u09b8\u09b9\5\u00b6\\\2\u09b9\u09ba\7#\2\2\u09ba\u09bc"+
		"\3\2\2\2\u09bb\u09b4\3\2\2\2\u09bb\u09b5\3\2\2\2\u09bb\u09b6\3\2\2\2\u09bb"+
		"\u09b7\3\2\2\2\u09bc\u00b5\3\2\2\2\u09bd\u09c2\5\u00b8]\2\u09be\u09bf"+
		"\7(\2\2\u09bf\u09c1\5\u00b8]\2\u09c0\u09be\3\2\2\2\u09c1\u09c4\3\2\2\2"+
		"\u09c2\u09c0\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u00b7\3\2\2\2\u09c4\u09c2"+
		"\3\2\2\2\u09c5\u09c6\5\u01fa\u00fe\2\u09c6\u00b9\3\2\2\2\u09c7\u09c9\5"+
		"\u00bc_\2\u09c8\u09c7\3\2\2\2\u09c9\u09cc\3\2\2\2\u09ca\u09c8\3\2\2\2"+
		"\u09ca\u09cb\3\2\2\2\u09cb\u00bb\3\2\2\2\u09cc\u09ca\3\2\2\2\u09cd\u09f5"+
		"\7\u00d1\2\2\u09ce\u09f5\7\u021d\2\2\u09cf\u09d1\7\u01c6\2\2\u09d0\u09d2"+
		"\7e\2\2\u09d1\u09d0\3\2\2\2\u09d1\u09d2\3\2\2\2\u09d2\u09d3\3\2\2\2\u09d3"+
		"\u09f5\7\u0224\2\2\u09d4\u09d6\7p\2\2\u09d5\u09d7\7e\2\2\u09d6\u09d5\3"+
		"\2\2\2\u09d6\u09d7\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09f5\7\u0224\2\2"+
		"\u09d9\u09f5\7\u01af\2\2\u09da\u09f5\7\u01d5\2\2\u09db\u09dd\7\u01ec\2"+
		"\2\u09dc\u09de\7e\2\2\u09dd\u09dc\3\2\2\2\u09dd\u09de\3\2\2\2\u09de\u09df"+
		"\3\2\2\2\u09df\u09f5\7\u0224\2\2\u09e0\u09e2\7\u00d2\2\2\u09e1\u09e3\7"+
		"e\2\2\u09e2\u09e1\3\2\2\2\u09e2\u09e3\3\2\2\2\u09e3\u09e4\3\2\2\2\u09e4"+
		"\u09f5\7\u0224\2\2\u09e5\u09e6\7\u0102\2\2\u09e6\u09e7\7\u01ec\2\2\u09e7"+
		"\u09f5\5\u0224\u0113\2\u09e8\u09e9\7\u0102\2\2\u09e9\u09ea\7\u01ec\2\2"+
		"\u09ea\u09f5\7\23\2\2\u09eb\u09ec\7\u0102\2\2\u09ec\u09ed\7o\2\2\u09ed"+
		"\u09ee\7p\2\2\u09ee\u09f5\5\u0224\u0113\2\u09ef\u09f0\7\u0102\2\2\u09f0"+
		"\u09f1\7p\2\2\u09f1\u09f5\5\u0224\u0113\2\u09f2\u09f3\7\u01c4\2\2\u09f3"+
		"\u09f5\7\u0224\2\2\u09f4\u09cd\3\2\2\2\u09f4\u09ce\3\2\2\2\u09f4\u09cf"+
		"\3\2\2\2\u09f4\u09d4\3\2\2\2\u09f4\u09d9\3\2\2\2\u09f4\u09da\3\2\2\2\u09f4"+
		"\u09db\3\2\2\2\u09f4\u09e0\3\2\2\2\u09f4\u09e5\3\2\2\2\u09f4\u09e8\3\2"+
		"\2\2\u09f4\u09eb\3\2\2\2\u09f4\u09ef\3\2\2\2\u09f4\u09f2\3\2\2\2\u09f5"+
		"\u00bd\3\2\2\2\u09f6\u09f8\7c\2\2\u09f7\u09f6\3\2\2\2\u09f7\u09f8\3\2"+
		"\2\2\u09f8\u09f9\3\2\2\2\u09f9\u09fa\7\u01d3\2\2\u09fa\u09fb\7\u0224\2"+
		"\2\u09fb\u00bf\3\2\2\2\u09fc\u09fe\7\u01ca\2\2\u09fd\u09ff\7\u01f1\2\2"+
		"\u09fe\u09fd\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a02\3\2\2\2\u0a00\u0a03"+
		"\5\u00e0q\2\u0a01\u0a03\7v\2\2\u0a02\u0a00\3\2\2\2\u0a02\u0a01\3\2\2\2"+
		"\u0a03\u00c1\3\2\2\2\u0a04\u0a05\7\u00c4\2\2\u0a05\u0a06\5\u00c4c\2\u0a06"+
		"\u00c3\3\2\2\2\u0a07\u0a5c\5\u00f0y\2\u0a08\u0a09\t\7\2\2\u0a09\u0a5c"+
		"\5\u00f0y\2\u0a0a\u0a0c\7\u00a8\2\2\u0a0b\u0a0d\t\7\2\2\u0a0c\u0a0b\3"+
		"\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u0a0e\3\2\2\2\u0a0e\u0a5c\5\u00f0y\2"+
		"\u0a0f\u0a11\7\u01e9\2\2\u0a10\u0a12\t\7\2\2\u0a11\u0a10\3\2\2\2\u0a11"+
		"\u0a12\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u0a5c\5\u00f0y\2\u0a14\u0a16"+
		"\7\u0100\2\2\u0a15\u0a17\t\7\2\2\u0a16\u0a15\3\2\2\2\u0a16\u0a17\3\2\2"+
		"\2\u0a17\u0a18\3\2\2\2\u0a18\u0a5c\5\u00f0y\2\u0a19\u0a1b\7\u010f\2\2"+
		"\u0a1a\u0a1c\t\7\2\2\u0a1b\u0a1a\3\2\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a1d"+
		"\3\2\2\2\u0a1d\u0a5c\5\u00f0y\2\u0a1e\u0a1f\7\u01a0\2\2\u0a1f\u0a21\5"+
		"\u01f8\u00fd\2\u0a20\u0a22\t\7\2\2\u0a21\u0a20\3\2\2\2\u0a21\u0a22\3\2"+
		"\2\2\u0a22\u0a23\3\2\2\2\u0a23\u0a24\5\u00f0y\2\u0a24\u0a5c\3\2\2\2\u0a25"+
		"\u0a26\7\u01eb\2\2\u0a26\u0a28\5\u01f8\u00fd\2\u0a27\u0a29\t\7\2\2\u0a28"+
		"\u0a27\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a2b\5\u00f0"+
		"y\2\u0a2b\u0a5c\3\2\2\2\u0a2c\u0a2e\5\u01f8\u00fd\2\u0a2d\u0a2f\t\7\2"+
		"\2\u0a2e\u0a2d\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f\u0a30\3\2\2\2\u0a30\u0a31"+
		"\5\u00f0y\2\u0a31\u0a5c\3\2\2\2\u0a32\u0a34\7v\2\2\u0a33\u0a35\t\7\2\2"+
		"\u0a34\u0a33\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u0a5c"+
		"\5\u00f0y\2\u0a37\u0a39\7\u01ce\2\2\u0a38\u0a3a\t\7\2\2\u0a39\u0a38\3"+
		"\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0a5c\5\u00f0y\2"+
		"\u0a3c\u0a3d\7\u01ce\2\2\u0a3d\u0a3f\5\u01f8\u00fd\2\u0a3e\u0a40\t\7\2"+
		"\2\u0a3f\u0a3e\3\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a42"+
		"\5\u00f0y\2\u0a42\u0a5c\3\2\2\2\u0a43\u0a44\7\u01ce\2\2\u0a44\u0a46\7"+
		"v\2\2\u0a45\u0a47\t\7\2\2\u0a46\u0a45\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47"+
		"\u0a48\3\2\2\2\u0a48\u0a5c\5\u00f0y\2\u0a49\u0a4b\7\u01a7\2\2\u0a4a\u0a4c"+
		"\t\7\2\2\u0a4b\u0a4a\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d"+
		"\u0a5c\5\u00f0y\2\u0a4e\u0a4f\7\u01a7\2\2\u0a4f\u0a51\5\u01f8\u00fd\2"+
		"\u0a50\u0a52\t\7\2\2\u0a51\u0a50\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a53"+
		"\3\2\2\2\u0a53\u0a54\5\u00f0y\2\u0a54\u0a5c\3\2\2\2\u0a55\u0a56\7\u01a7"+
		"\2\2\u0a56\u0a58\7v\2\2\u0a57\u0a59\t\7\2\2\u0a58\u0a57\3\2\2\2\u0a58"+
		"\u0a59\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a\u0a5c\5\u00f0y\2\u0a5b\u0a07"+
		"\3\2\2\2\u0a5b\u0a08\3\2\2\2\u0a5b\u0a0a\3\2\2\2\u0a5b\u0a0f\3\2\2\2\u0a5b"+
		"\u0a14\3\2\2\2\u0a5b\u0a19\3\2\2\2\u0a5b\u0a1e\3\2\2\2\u0a5b\u0a25\3\2"+
		"\2\2\u0a5b\u0a2c\3\2\2\2\u0a5b\u0a32\3\2\2\2\u0a5b\u0a37\3\2\2\2\u0a5b"+
		"\u0a3c\3\2\2\2\u0a5b\u0a43\3\2\2\2\u0a5b\u0a49\3\2\2\2\u0a5b\u0a4e\3\2"+
		"\2\2\u0a5b\u0a55\3\2\2\2\u0a5c\u00c5\3\2\2\2\u0a5d\u0a5f\7,\2\2\u0a5e"+
		"\u0a60\5\u00ccg\2\u0a5f\u0a5e\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u00c7"+
		"\3\2\2\2\u0a61\u0a62\t\b\2\2\u0a62\u00c9\3\2\2\2\u0a63\u0a65\7\22\2\2"+
		"\u0a64\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a68"+
		"\7\u0225\2\2\u0a67\u0a69\5\u00ccg\2\u0a68\u0a67\3\2\2\2\u0a68\u0a69\3"+
		"\2\2\2\u0a69\u00cb\3\2\2\2\u0a6a\u0a6b\7\61\2\2\u0a6b\u0a6c\7\u0223\2"+
		"\2\u0a6c\u00cd\3\2\2\2\u0a6d\u0a6f\5\u00d0i\2\u0a6e\u0a6d\3\2\2\2\u0a6e"+
		"\u0a6f\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a72\7\u0223\2\2\u0a71\u0a73"+
		"\5\u00d2j\2\u0a72\u0a71\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73\u0a76\3\2\2"+
		"\2\u0a74\u0a76\5\u00d4k\2\u0a75\u0a6e\3\2\2\2\u0a75\u0a74\3\2\2\2\u0a76"+
		"\u00cf\3\2\2\2\u0a77\u0a78\t\t\2\2\u0a78\u0a79\7\13\2\2\u0a79\u00d1\3"+
		"\2\2\2\u0a7a\u0a7b\7\u013c\2\2\u0a7b\u0a7c\7\u0224\2\2\u0a7c\u00d3\3\2"+
		"\2\2\u0a7d\u0a7e\t\n\2\2\u0a7e\u00d5\3\2\2\2\u0a7f\u0a80\t\13\2\2\u0a80"+
		"\u00d7\3\2\2\2\u0a81\u0a82\5\u00ceh\2\u0a82\u00d9\3\2\2\2\u0a83\u0a84"+
		"\5\u00dep\2\u0a84\u0a85\7\26\2\2\u0a85\u0a87\3\2\2\2\u0a86\u0a83\3\2\2"+
		"\2\u0a86\u0a87\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u0a89\5\u00e0q\2\u0a89"+
		"\u00db\3\2\2\2\u0a8a\u0a8b\5\u00dep\2\u0a8b\u0a8c\7\26\2\2\u0a8c\u0a8e"+
		"\3\2\2\2\u0a8d\u0a8a\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f"+
		"\u0a90\5\u00e0q\2\u0a90\u00dd\3\2\2\2\u0a91\u0a92\5\u00ceh\2\u0a92\u00df"+
		"\3\2\2\2\u0a93\u0a94\5\u00ceh\2\u0a94\u00e1\3\2\2\2\u0a95\u0a97\7\"\2"+
		"\2\u0a96\u0a95\3\2\2\2\u0a96\u0a97\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0a9d"+
		"\5\u00dan\2\u0a99\u0a9a\7(\2\2\u0a9a\u0a9c\5\u00dan\2\u0a9b\u0a99\3\2"+
		"\2\2\u0a9c\u0a9f\3\2\2\2\u0a9d\u0a9b\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e"+
		"\u0aa1\3\2\2\2\u0a9f\u0a9d\3\2\2\2\u0aa0\u0aa2\7#\2\2\u0aa1\u0aa0\3\2"+
		"\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u00e3\3\2\2\2\u0aa3\u0aa4\7\"\2\2\u0aa4"+
		"\u0aa9\5\u00dco\2\u0aa5\u0aa6\7(\2\2\u0aa6\u0aa8\5\u00dco\2\u0aa7\u0aa5"+
		"\3\2\2\2\u0aa8\u0aab\3\2\2\2\u0aa9\u0aa7\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa"+
		"\u0aac\3\2\2\2\u0aab\u0aa9\3\2\2\2\u0aac\u0aad\7#\2\2\u0aad\u00e5\3\2"+
		"\2\2\u0aae\u0ab1\7\u0224\2\2\u0aaf\u0ab1\5\u00ceh\2\u0ab0\u0aae\3\2\2"+
		"\2\u0ab0\u0aaf\3\2\2\2\u0ab1\u00e7\3\2\2\2\u0ab2\u0ab3\5\u00ceh\2\u0ab3"+
		"\u00e9\3\2\2\2\u0ab4\u0ab6\7F\2\2\u0ab5\u0ab4\3\2\2\2\u0ab5\u0ab6\3\2"+
		"\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u0ab8\7I\2\2\u0ab8\u00eb\3\2\2\2\u0ab9"+
		"\u0aba\t\f\2\2\u0aba\u00ed\3\2\2\2\u0abb\u0abc\t\r\2\2\u0abc\u00ef\3\2"+
		"\2\2\u0abd\u0abe\5\u00e0q\2\u0abe\u00f1\3\2\2\2\u0abf\u0ac0\bz\1\2\u0ac0"+
		"\u0ad2\5\u00f6|\2\u0ac1\u0ac2\7\21\2\2\u0ac2\u0ad2\5\u00f2z;\u0ac3\u0ac4"+
		"\7\22\2\2\u0ac4\u0ad2\5\u00f2z:\u0ac5\u0ac6\5\u010e\u0088\2\u0ac6\u0ac7"+
		"\5\u00f2z\61\u0ac7\u0ad2\3\2\2\2\u0ac8\u0ac9\7o\2\2\u0ac9\u0ad2\5\u00f2"+
		"z/\u0aca\u0acb\5\u0120\u0091\2\u0acb\u0acc\7\u00ca\2\2\u0acc\u0acd\5\u0120"+
		"\u0091\2\u0acd\u0ad2\3\2\2\2\u0ace\u0acf\7G\2\2\u0acf\u0ad2\5(\25\2\u0ad0"+
		"\u0ad2\7\u0099\2\2\u0ad1\u0abf\3\2\2\2\u0ad1\u0ac1\3\2\2\2\u0ad1\u0ac3"+
		"\3\2\2\2\u0ad1\u0ac5\3\2\2\2\u0ad1\u0ac8\3\2\2\2\u0ad1\u0aca\3\2\2\2\u0ad1"+
		"\u0ace\3\2\2\2\u0ad1\u0ad0\3\2\2\2\u0ad2\u0bc8\3\2\2\2\u0ad3\u0ad4\f<"+
		"\2\2\u0ad4\u0ad5\7\u00cc\2\2\u0ad5\u0ad6\7\u008c\2\2\u0ad6\u0ad7\7\u013a"+
		"\2\2\u0ad7\u0bc7\5\u00f2z=\u0ad8\u0ad9\f9\2\2\u0ad9\u0ada\7\21\2\2\u0ada"+
		"\u0bc7\5\u00f2z:\u0adb\u0adc\f8\2\2\u0adc\u0add\7\22\2\2\u0add\u0bc7\5"+
		"\u00f2z9\u0ade\u0adf\f\67\2\2\u0adf\u0ae0\7\23\2\2\u0ae0\u0bc7\5\u00f2"+
		"z8\u0ae1\u0ae2\f\66\2\2\u0ae2\u0ae3\7\24\2\2\u0ae3\u0bc7\5\u00f2z\67\u0ae4"+
		"\u0ae5\f\65\2\2\u0ae5\u0ae6\7\17\2\2\u0ae6\u0bc7\5\u00f2z\66\u0ae7\u0ae8"+
		"\f\64\2\2\u0ae8\u0ae9\7\16\2\2\u0ae9\u0bc7\5\u00f2z\65\u0aea\u0aeb\f\63"+
		"\2\2\u0aeb\u0aec\5\u00eex\2\u0aec\u0aed\5\u00f2z\64\u0aed\u0bc7\3\2\2"+
		"\2\u0aee\u0aef\f\62\2\2\u0aef\u0af0\5\u010e\u0088\2\u0af0\u0af1\5\u00f2"+
		"z\63\u0af1\u0bc7\3\2\2\2\u0af2\u0af3\f.\2\2\u0af3\u0af4\7x\2\2\u0af4\u0bc7"+
		"\5\u00f2z/\u0af5\u0af6\f-\2\2\u0af6\u0af7\7x\2\2\u0af7\u0af8\5\u00f2z"+
		"\2\u0af8\u0af9\7\u00d2\2\2\u0af9\u0afa\5\u00f2z.\u0afa\u0bc7\3\2\2\2\u0afb"+
		"\u0afc\f,\2\2\u0afc\u0afd\7o\2\2\u0afd\u0afe\7x\2\2\u0afe\u0bc7\5\u00f2"+
		"z-\u0aff\u0b00\f+\2\2\u0b00\u0b01\7o\2\2\u0b01\u0b02\7x\2\2\u0b02\u0b03"+
		"\5\u00f2z\2\u0b03\u0b04\7\u00d2\2\2\u0b04\u0b05\5\u00f2z,\u0b05\u0bc7"+
		"\3\2\2\2\u0b06\u0b07\f*\2\2\u0b07\u0b08\7\u0185\2\2\u0b08\u0bc7\5\u00f2"+
		"z+\u0b09\u0b0a\f)\2\2\u0b0a\u0b0b\7\u0185\2\2\u0b0b\u0b0c\5\u00f2z\2\u0b0c"+
		"\u0b0d\7\u00d2\2\2\u0b0d\u0b0e\5\u00f2z*\u0b0e\u0bc7\3\2\2\2\u0b0f\u0b10"+
		"\f(\2\2\u0b10\u0b11\7o\2\2\u0b11\u0b12\7\u0185\2\2\u0b12\u0bc7\5\u00f2"+
		"z)\u0b13\u0b14\f\'\2\2\u0b14\u0b15\7o\2\2\u0b15\u0b16\7\u0185\2\2\u0b16"+
		"\u0b17\5\u00f2z\2\u0b17\u0b18\7\u00d2\2\2\u0b18\u0b19\5\u00f2z(\u0b19"+
		"\u0bc7\3\2\2\2\u0b1a\u0b1b\f&\2\2\u0b1b\u0b1c\7\u0186\2\2\u0b1c\u0b1d"+
		"\7k\2\2\u0b1d\u0bc7\5\u00f2z\'\u0b1e\u0b1f\f%\2\2\u0b1f\u0b20\7\u0186"+
		"\2\2\u0b20\u0b21\7k\2\2\u0b21\u0b22\5\u00f2z\2\u0b22\u0b23\7\u00d2\2\2"+
		"\u0b23\u0b24\5\u00f2z&\u0b24\u0bc7\3\2\2\2\u0b25\u0b26\f$\2\2\u0b26\u0b27"+
		"\7o\2\2\u0b27\u0b28\7\u0186\2\2\u0b28\u0b29\7k\2\2\u0b29\u0bc7\5\u00f2"+
		"z%\u0b2a\u0b2b\f#\2\2\u0b2b\u0b2c\7o\2\2\u0b2c\u0b2d\7\u0186\2\2\u0b2d"+
		"\u0b2e\7k\2\2\u0b2e\u0b2f\5\u00f2z\2\u0b2f\u0b30\7\u00d2\2\2\u0b30\u0b31"+
		"\5\u00f2z$\u0b31\u0bc7\3\2\2\2\u0b32\u0b33\f\27\2\2\u0b33\u0b34\7n\2\2"+
		"\u0b34\u0b35\7T\2\2\u0b35\u0b36\7Z\2\2\u0b36\u0bc7\5\u00f2z\30\u0b37\u0b38"+
		"\f\26\2\2\u0b38\u0b39\7n\2\2\u0b39\u0b3a\7o\2\2\u0b3a\u0b3b\7T\2\2\u0b3b"+
		"\u0b3c\7Z\2\2\u0b3c\u0bc7\5\u00f2z\27\u0b3d\u0b3e\f\23\2\2\u0b3e\u0b40"+
		"\7t\2\2\u0b3f\u0b41\7\u018c\2\2\u0b40\u0b3f\3\2\2\2\u0b40\u0b41\3\2\2"+
		"\2\u0b41\u0b42\3\2\2\2\u0b42\u0b43\5\u00f4{\2\u0b43\u0b44\7l\2\2\u0b44"+
		"\u0b45\5\u00f2z\24\u0b45\u0bc7\3\2\2\2\u0b46\u0b47\f\22\2\2\u0b47\u0b48"+
		"\7o\2\2\u0b48\u0b4a\7t\2\2\u0b49\u0b4b\7\u018c\2\2\u0b4a\u0b49\3\2\2\2"+
		"\u0b4a\u0b4b\3\2\2\2\u0b4b\u0b4c\3\2\2\2\u0b4c\u0b4d\5\u00f4{\2\u0b4d"+
		"\u0b4e\7l\2\2\u0b4e\u0b4f\5\u00f2z\23\u0b4f\u0bc7\3\2\2\2\u0b50\u0b51"+
		"\f\21\2\2\u0b51\u0b52\7t\2\2\u0b52\u0b53\7\u0189\2\2\u0b53\u0b54\5\u00f4"+
		"{\2\u0b54\u0b55\7l\2\2\u0b55\u0b56\5\u00f2z\22\u0b56\u0bc7\3\2\2\2\u0b57"+
		"\u0b58\f\20\2\2\u0b58\u0b59\7o\2\2\u0b59\u0b5a\7t\2\2\u0b5a\u0b5b\7\u0189"+
		"\2\2\u0b5b\u0b5c\5\u00f4{\2\u0b5c\u0b5d\7l\2\2\u0b5d\u0b5e\5\u00f2z\21"+
		"\u0b5e\u0bc7\3\2\2\2\u0b5f\u0b60\f\4\2\2\u0b60\u0b61\5\u00ecw\2\u0b61"+
		"\u0b62\5\u00f2z\5\u0b62\u0bc7\3\2\2\2\u0b63\u0b64\f>\2\2\u0b64\u0b65\7"+
		"\61\2\2\u0b65\u0bc7\5\u015a\u00ae\2\u0b66\u0b67\f=\2\2\u0b67\u0b68\7\u00ec"+
		"\2\2\u0b68\u0bc7\5\u01ba\u00de\2\u0b69\u0b6a\f\60\2\2\u0b6a\u0bc7\5\u010e"+
		"\u0088\2\u0b6b\u0b6c\f\"\2\2\u0b6c\u0b6d\7n\2\2\u0b6d\u0bc7\7p\2\2\u0b6e"+
		"\u0b6f\f!\2\2\u0b6f\u0bc7\7\u0187\2\2\u0b70\u0b71\f \2\2\u0b71\u0b72\7"+
		"n\2\2\u0b72\u0b73\7o\2\2\u0b73\u0bc7\7p\2\2\u0b74\u0b75\f\37\2\2\u0b75"+
		"\u0bc7\7\u0188\2\2\u0b76\u0b77\f\35\2\2\u0b77\u0b78\7n\2\2\u0b78\u0bc7"+
		"\7q\2\2\u0b79\u0b7a\f\34\2\2\u0b7a\u0b7b\7n\2\2\u0b7b\u0b7c\7o\2\2\u0b7c"+
		"\u0bc7\7q\2\2\u0b7d\u0b7e\f\33\2\2\u0b7e\u0b7f\7n\2\2\u0b7f\u0bc7\7r\2"+
		"\2\u0b80\u0b81\f\32\2\2\u0b81\u0b82\7n\2\2\u0b82\u0b83\7o\2\2\u0b83\u0bc7"+
		"\7r\2\2\u0b84\u0b85\f\31\2\2\u0b85\u0b86\7n\2\2\u0b86\u0bc7\7\u00d7\2"+
		"\2\u0b87\u0b88\f\30\2\2\u0b88\u0b89\7n\2\2\u0b89\u0b8a\7o\2\2\u0b8a\u0bc7"+
		"\7\u00d7\2\2\u0b8b\u0b8c\f\25\2\2\u0b8c\u0b8d\7n\2\2\u0b8d\u0b8e\7\u013b"+
		"\2\2\u0b8e\u0b8f\7\"\2\2\u0b8f\u0b90\5\u0132\u009a\2\u0b90\u0b91\7#\2"+
		"\2\u0b91\u0bc7\3\2\2\2\u0b92\u0b93\f\24\2\2\u0b93\u0b94\7n\2\2\u0b94\u0b95"+
		"\7o\2\2\u0b95\u0b96\7\u013b\2\2\u0b96\u0b97\7\"\2\2\u0b97\u0b98\5\u0132"+
		"\u009a\2\u0b98\u0b99\7#\2\2\u0b99\u0bc7\3\2\2\2\u0b9a\u0b9b\f\17\2\2\u0b9b"+
		"\u0b9c\7u\2\2\u0b9c\u0bc7\5\u0100\u0081\2\u0b9d\u0b9e\f\16\2\2\u0b9e\u0b9f"+
		"\7o\2\2\u0b9f\u0ba0\7u\2\2\u0ba0\u0bc7\5\u0100\u0081\2\u0ba1\u0ba2\f\r"+
		"\2\2\u0ba2\u0ba3\5\u0110\u0089\2\u0ba3\u0ba4\5\u0126\u0094\2\u0ba4\u0ba5"+
		"\5(\25\2\u0ba5\u0bc7\3\2\2\2\u0ba6\u0ba7\f\f\2\2\u0ba7\u0ba8\5\u0110\u0089"+
		"\2\u0ba8\u0ba9\5\u0126\u0094\2\u0ba9\u0baa\7\"\2\2\u0baa\u0bab\5\u00f2"+
		"z\2\u0bab\u0bac\7#\2\2\u0bac\u0bc7\3\2\2\2\u0bad\u0bae\f\n\2\2\u0bae\u0baf"+
		"\7n\2\2\u0baf\u0bc7\7\u018a\2\2\u0bb0\u0bb1\f\t\2\2\u0bb1\u0bb2\7n\2\2"+
		"\u0bb2\u0bb3\7o\2\2\u0bb3\u0bc7\7\u018a\2\2\u0bb4\u0bb5\f\b\2\2\u0bb5"+
		"\u0bb6\7n\2\2\u0bb6\u0bc7\7\u018b\2\2\u0bb7\u0bb8\f\7\2\2\u0bb8\u0bb9"+
		"\7n\2\2\u0bb9\u0bba\5\u018c\u00c7\2\u0bba\u0bbb\7\u018b\2\2\u0bbb\u0bc7"+
		"\3\2\2\2\u0bbc\u0bbd\f\6\2\2\u0bbd\u0bbe\7n\2\2\u0bbe\u0bbf\7o\2\2\u0bbf"+
		"\u0bc7\7\u018b\2\2\u0bc0\u0bc1\f\5\2\2\u0bc1\u0bc2\7n\2\2\u0bc2\u0bc3"+
		"\7o\2\2\u0bc3\u0bc4\5\u018c\u00c7\2\u0bc4\u0bc5\7\u018b\2\2\u0bc5\u0bc7"+
		"\3\2\2\2\u0bc6\u0ad3\3\2\2\2\u0bc6\u0ad8\3\2\2\2\u0bc6\u0adb\3\2\2\2\u0bc6"+
		"\u0ade\3\2\2\2\u0bc6\u0ae1\3\2\2\2\u0bc6\u0ae4\3\2\2\2\u0bc6\u0ae7\3\2"+
		"\2\2\u0bc6\u0aea\3\2\2\2\u0bc6\u0aee\3\2\2\2\u0bc6\u0af2\3\2\2\2\u0bc6"+
		"\u0af5\3\2\2\2\u0bc6\u0afb\3\2\2\2\u0bc6\u0aff\3\2\2\2\u0bc6\u0b06\3\2"+
		"\2\2\u0bc6\u0b09\3\2\2\2\u0bc6\u0b0f\3\2\2\2\u0bc6\u0b13\3\2\2\2\u0bc6"+
		"\u0b1a\3\2\2\2\u0bc6\u0b1e\3\2\2\2\u0bc6\u0b25\3\2\2\2\u0bc6\u0b2a\3\2"+
		"\2\2\u0bc6\u0b32\3\2\2\2\u0bc6\u0b37\3\2\2\2\u0bc6\u0b3d\3\2\2\2\u0bc6"+
		"\u0b46\3\2\2\2\u0bc6\u0b50\3\2\2\2\u0bc6\u0b57\3\2\2\2\u0bc6\u0b5f\3\2"+
		"\2\2\u0bc6\u0b63\3\2\2\2\u0bc6\u0b66\3\2\2\2\u0bc6\u0b69\3\2\2\2\u0bc6"+
		"\u0b6b\3\2\2\2\u0bc6\u0b6e\3\2\2\2\u0bc6\u0b70\3\2\2\2\u0bc6\u0b74\3\2"+
		"\2\2\u0bc6\u0b76\3\2\2\2\u0bc6\u0b79\3\2\2\2\u0bc6\u0b7d\3\2\2\2\u0bc6"+
		"\u0b80\3\2\2\2\u0bc6\u0b84\3\2\2\2\u0bc6\u0b87\3\2\2\2\u0bc6\u0b8b\3\2"+
		"\2\2\u0bc6\u0b92\3\2\2\2\u0bc6\u0b9a\3\2\2\2\u0bc6\u0b9d\3\2\2\2\u0bc6"+
		"\u0ba1\3\2\2\2\u0bc6\u0ba6\3\2\2\2\u0bc6\u0bad\3\2\2\2\u0bc6\u0bb0\3\2"+
		"\2\2\u0bc6\u0bb4\3\2\2\2\u0bc6\u0bb7\3\2\2\2\u0bc6\u0bbc\3\2\2\2\u0bc6"+
		"\u0bc0\3\2\2\2\u0bc7\u0bca\3\2\2\2\u0bc8\u0bc6\3\2\2\2\u0bc8\u0bc9\3\2"+
		"\2\2\u0bc9\u00f3\3\2\2\2\u0bca\u0bc8\3\2\2\2\u0bcb\u0bcc\b{\1\2\u0bcc"+
		"\u0bd5\5\u00f6|\2\u0bcd\u0bce\7\21\2\2\u0bce\u0bd5\5\u00f4{\r\u0bcf\u0bd0"+
		"\7\22\2\2\u0bd0\u0bd5\5\u00f4{\f\u0bd1\u0bd2\5\u010e\u0088\2\u0bd2\u0bd3"+
		"\5\u00f4{\n\u0bd3\u0bd5\3\2\2\2\u0bd4\u0bcb\3\2\2\2\u0bd4\u0bcd\3\2\2"+
		"\2\u0bd4\u0bcf\3\2\2\2\u0bd4\u0bd1\3\2\2\2\u0bd5\u0c02\3\2\2\2\u0bd6\u0bd7"+
		"\f\13\2\2\u0bd7\u0bd8\5\u010e\u0088\2\u0bd8\u0bd9\5\u00f4{\f\u0bd9\u0c01"+
		"\3\2\2\2\u0bda\u0bdb\f\b\2\2\u0bdb\u0bdc\7n\2\2\u0bdc\u0bdd\7T\2\2\u0bdd"+
		"\u0bde\7Z\2\2\u0bde\u0c01\5\u00f4{\t\u0bdf\u0be0\f\7\2\2\u0be0\u0be1\7"+
		"n\2\2\u0be1\u0be2\7o\2\2\u0be2\u0be3\7T\2\2\u0be3\u0be4\7Z\2\2\u0be4\u0c01"+
		"\5\u00f4{\b\u0be5\u0be6\f\16\2\2\u0be6\u0be7\7\61\2\2\u0be7\u0c01\5\u015a"+
		"\u00ae\2\u0be8\u0be9\f\t\2\2\u0be9\u0c01\5\u010e\u0088\2\u0bea\u0beb\f"+
		"\6\2\2\u0beb\u0bec\7n\2\2\u0bec\u0bed\7\u013b\2\2\u0bed\u0bee\7\"\2\2"+
		"\u0bee\u0bef\5\u0132\u009a\2\u0bef\u0bf0\7#\2\2\u0bf0\u0c01\3\2\2\2\u0bf1"+
		"\u0bf2\f\5\2\2\u0bf2\u0bf3\7n\2\2\u0bf3\u0bf4\7o\2\2\u0bf4\u0bf5\7\u013b"+
		"\2\2\u0bf5\u0bf6\7\"\2\2\u0bf6\u0bf7\5\u0132\u009a\2\u0bf7\u0bf8\7#\2"+
		"\2\u0bf8\u0c01\3\2\2\2\u0bf9\u0bfa\f\4\2\2\u0bfa\u0bfb\7n\2\2\u0bfb\u0c01"+
		"\7\u018a\2\2\u0bfc\u0bfd\f\3\2\2\u0bfd\u0bfe\7n\2\2\u0bfe\u0bff\7o\2\2"+
		"\u0bff\u0c01\7\u018a\2\2\u0c00\u0bd6\3\2\2\2\u0c00\u0bda\3\2\2\2\u0c00"+
		"\u0bdf\3\2\2\2\u0c00\u0be5\3\2\2\2\u0c00\u0be8\3\2\2\2\u0c00\u0bea\3\2"+
		"\2\2\u0c00\u0bf1\3\2\2\2\u0c00\u0bf9\3\2\2\2\u0c00\u0bfc\3\2\2\2\u0c01"+
		"\u0c04\3\2\2\2\u0c02\u0c00\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03\u00f5\3\2"+
		"\2\2\u0c04\u0c02\3\2\2\2\u0c05\u0c25\5\u00c6d\2\u0c06\u0c25\5\u010c\u0087"+
		"\2\u0c07\u0c25\5\u0138\u009d\2\u0c08\u0c0a\7\u0220\2\2\u0c09\u0c0b\5\u00fc"+
		"\177\2\u0c0a\u0c09\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c25\3\2\2\2\u0c0c"+
		"\u0c0d\7\"\2\2\u0c0d\u0c0e\5\u00f2z\2\u0c0e\u0c0f\7#\2\2\u0c0f\u0c10\5"+
		"\u00fa~\2\u0c10\u0c25\3\2\2\2\u0c11\u0c25\5\u0102\u0082\2\u0c12\u0c25"+
		"\5\u014e\u00a8\2\u0c13\u0c25\5(\25\2\u0c14\u0c15\5(\25\2\u0c15\u0c16\5"+
		"\u00f8}\2\u0c16\u0c25\3\2\2\2\u0c17\u0c18\7s\2\2\u0c18\u0c25\5(\25\2\u0c19"+
		"\u0c1a\7\u0089\2\2\u0c1a\u0c25\5(\25\2\u0c1b\u0c1c\7\u0089\2\2\u0c1c\u0c25"+
		"\5\u0128\u0095\2\u0c1d\u0c25\5\u0122\u0092\2\u0c1e\u0c25\5\u0124\u0093"+
		"\2\u0c1f\u0c20\7\u00c6\2\2\u0c20\u0c21\7\"\2\2\u0c21\u0c22\5\u015e\u00b0"+
		"\2\u0c22\u0c23\7#\2\2\u0c23\u0c25\3\2\2\2\u0c24\u0c05\3\2\2\2\u0c24\u0c06"+
		"\3\2\2\2\u0c24\u0c07\3\2\2\2\u0c24\u0c08\3\2\2\2\u0c24\u0c0c\3\2\2\2\u0c24"+
		"\u0c11\3\2\2\2\u0c24\u0c12\3\2\2\2\u0c24\u0c13\3\2\2\2\u0c24\u0c14\3\2"+
		"\2\2\u0c24\u0c17\3\2\2\2\u0c24\u0c19\3\2\2\2\u0c24\u0c1b\3\2\2\2\u0c24"+
		"\u0c1d\3\2\2\2\u0c24\u0c1e\3\2\2\2\u0c24\u0c1f\3\2\2\2\u0c25\u00f7\3\2"+
		"\2\2\u0c26\u0c27\b}\1\2\u0c27\u0c28\5\u00fc\177\2\u0c28\u0c2d\3\2\2\2"+
		"\u0c29\u0c2a\f\3\2\2\u0c2a\u0c2c\5\u00fc\177\2\u0c2b\u0c29\3\2\2\2\u0c2c"+
		"\u0c2f\3\2\2\2\u0c2d\u0c2b\3\2\2\2\u0c2d\u0c2e\3\2\2\2\u0c2e\u00f9\3\2"+
		"\2\2\u0c2f\u0c2d\3\2\2\2\u0c30\u0c35\b~\1\2\u0c31\u0c32\f\4\2\2\u0c32"+
		"\u0c34\5\u00fc\177\2\u0c33\u0c31\3\2\2\2\u0c34\u0c37\3\2\2\2\u0c35\u0c33"+
		"\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u00fb\3\2\2\2\u0c37\u0c35\3\2\2\2\u0c38"+
		"\u0c39\7\26\2\2\u0c39\u0c4a\5\u017a\u00be\2\u0c3a\u0c3b\7\26\2\2\u0c3b"+
		"\u0c4a\7\23\2\2\u0c3c\u0c3d\7&\2\2\u0c3d\u0c3e\5\u00f2z\2\u0c3e\u0c3f"+
		"\7\'\2\2\u0c3f\u0c4a\3\2\2\2\u0c40\u0c42\7&\2\2\u0c41\u0c43\5\u00fe\u0080"+
		"\2\u0c42\u0c41\3\2\2\2\u0c42\u0c43\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0c46"+
		"\7\20\2\2\u0c45\u0c47\5\u00fe\u0080\2\u0c46\u0c45\3\2\2\2\u0c46\u0c47"+
		"\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48\u0c4a\7\'\2\2\u0c49\u0c38\3\2\2\2\u0c49"+
		"\u0c3a\3\2\2\2\u0c49\u0c3c\3\2\2\2\u0c49\u0c40\3\2\2\2\u0c4a\u00fd\3\2"+
		"\2\2\u0c4b\u0c4c\5\u00f2z\2\u0c4c\u00ff\3\2\2\2\u0c4d\u0c53\5(\25\2\u0c4e"+
		"\u0c4f\7\"\2\2\u0c4f\u0c50\5\u015e\u00b0\2\u0c50\u0c51\7#\2\2\u0c51\u0c53"+
		"\3\2\2\2\u0c52\u0c4d\3\2\2\2\u0c52\u0c4e\3\2\2\2\u0c53\u0101\3\2\2\2\u0c54"+
		"\u0c56\7U\2\2\u0c55\u0c57\5\u010a\u0086\2\u0c56\u0c55\3\2\2\2\u0c56\u0c57"+
		"\3\2\2\2\u0c57\u0c58\3\2\2\2\u0c58\u0c5a\5\u0104\u0083\2\u0c59\u0c5b\5"+
		"\u0108\u0085\2\u0c5a\u0c59\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u0c5c\3\2"+
		"\2\2\u0c5c\u0c5d\7\u00ce\2\2\u0c5d\u0103\3\2\2\2\u0c5e\u0c60\5\u0106\u0084"+
		"\2\u0c5f\u0c5e\3\2\2\2\u0c60\u0c61\3\2\2\2\u0c61\u0c5f\3\2\2\2\u0c61\u0c62"+
		"\3\2\2\2\u0c62\u0105\3\2\2\2\u0c63\u0c64\7V\2\2\u0c64\u0c65\5\u00f2z\2"+
		"\u0c65\u0c66\7i\2\2\u0c66\u0c67\5\u00f2z\2\u0c67\u0107\3\2\2\2\u0c68\u0c69"+
		"\7h\2\2\u0c69\u0c6a\5\u00f2z\2\u0c6a\u0109\3\2\2\2\u0c6b\u0c6c\5\u00f2"+
		"z\2\u0c6c\u010b\3\2\2\2\u0c6d\u0c72\5\u013a\u009e\2\u0c6e\u0c6f\5\u013a"+
		"\u009e\2\u0c6f\u0c70\5\u00f8}\2\u0c70\u0c72\3\2\2\2\u0c71\u0c6d\3\2\2"+
		"\2\u0c71\u0c6e\3\2\2\2\u0c72\u010d\3\2\2\2\u0c73\u0c7c\5\u0116\u008c\2"+
		"\u0c74\u0c7c\7/\2\2\u0c75\u0c7c\7\60\2\2\u0c76\u0c77\7\u0182\2\2\u0c77"+
		"\u0c78\7\"\2\2\u0c78\u0c79\5\u011c\u008f\2\u0c79\u0c7a\7#\2\2\u0c7a\u0c7c"+
		"\3\2\2\2\u0c7b\u0c73\3\2\2\2\u0c7b\u0c74\3\2\2\2\u0c7b\u0c75\3\2\2\2\u0c7b"+
		"\u0c76\3\2\2\2\u0c7c\u010f\3\2\2\2\u0c7d\u0c8a\5\u0112\u008a\2\u0c7e\u0c7f"+
		"\7\u0182\2\2\u0c7f\u0c80\7\"\2\2\u0c80\u0c81\5\u011c\u008f\2\u0c81\u0c82"+
		"\7#\2\2\u0c82\u0c8a\3\2\2\2\u0c83\u0c8a\7x\2\2\u0c84\u0c85\7o\2\2\u0c85"+
		"\u0c8a\7x\2\2\u0c86\u0c8a\7\u0185\2\2\u0c87\u0c88\7o\2\2\u0c88\u0c8a\7"+
		"\u0185\2\2\u0c89\u0c7d\3\2\2\2\u0c89\u0c7e\3\2\2\2\u0c89\u0c83\3\2\2\2"+
		"\u0c89\u0c84\3\2\2\2\u0c89\u0c86\3\2\2\2\u0c89\u0c87\3\2\2\2\u0c8a\u0111"+
		"\3\2\2\2\u0c8b\u0c8e\5\u0114\u008b\2\u0c8c\u0c8e\5\u0116\u008c\2\u0c8d"+
		"\u0c8b\3\2\2\2\u0c8d\u0c8c\3\2\2\2\u0c8e\u0113\3\2\2\2\u0c8f\u0c91\t\16"+
		"\2\2\u0c90\u0c8f\3\2\2\2\u0c91\u0c92\3\2\2\2\u0c92\u0c90\3\2\2\2\u0c92"+
		"\u0c93\3\2\2\2\u0c93\u0115\3\2\2\2\u0c94\u0c95\t\17\2\2\u0c95\u0117\3"+
		"\2\2\2\u0c96\u0c9d\5\u0112\u008a\2\u0c97\u0c98\7\u0182\2\2\u0c98\u0c99"+
		"\7\"\2\2\u0c99\u0c9a\5\u011c\u008f\2\u0c9a\u0c9b\7#\2\2\u0c9b\u0c9d\3"+
		"\2\2\2\u0c9c\u0c96\3\2\2\2\u0c9c\u0c97\3\2\2\2\u0c9d\u0119\3\2\2\2\u0c9e"+
		"\u0c9f\t\20\2\2\u0c9f\u011b\3\2\2\2\u0ca0\u0ca6\5\u0112\u008a\2\u0ca1"+
		"\u0ca2\5\u013a\u009e\2\u0ca2\u0ca3\7\26\2\2\u0ca3\u0ca4\5\u011c\u008f"+
		"\2\u0ca4\u0ca6\3\2\2\2\u0ca5\u0ca0\3\2\2\2\u0ca5\u0ca1\3\2\2\2\u0ca6\u011d"+
		"\3\2\2\2\u0ca7\u0ca8\7\u00d3\2\2\u0ca8\u0ca9\7\u009a\2\2\u0ca9\u0cb2\7"+
		"\u00d6\2\2\u0caa\u0cab\7\u00d3\2\2\u0cab\u0cb2\7z\2\2\u0cac\u0cad\7\u00d3"+
		"\2\2\u0cad\u0cb2\7\u00c3\2\2\u0cae\u0caf\7\u00d3\2\2\u0caf\u0cb0\7\u00de"+
		"\2\2\u0cb0\u0cb2\7\u00c9\2\2\u0cb1\u0ca7\3\2\2\2\u0cb1\u0caa\3\2\2\2\u0cb1"+
		"\u0cac\3\2\2\2\u0cb1\u0cae\3\2\2\2\u0cb2\u011f\3\2\2\2\u0cb3\u0cb4\7\u00d6"+
		"\2\2\u0cb4\u0cb5\7\"\2\2\u0cb5\u0cb6\5\u015e\u00b0\2\u0cb6\u0cb7\7#\2"+
		"\2\u0cb7\u0cc2\3\2\2\2\u0cb8\u0cb9\7\u00d6\2\2\u0cb9\u0cba\7\"\2\2\u0cba"+
		"\u0cc2\7#\2\2\u0cbb\u0cbc\7\"\2\2\u0cbc\u0cbd\5\u015e\u00b0\2\u0cbd\u0cbe"+
		"\7(\2\2\u0cbe\u0cbf\5\u00f2z\2\u0cbf\u0cc0\7#\2\2\u0cc0\u0cc2\3\2\2\2"+
		"\u0cc1\u0cb3\3\2\2\2\u0cc1\u0cb8\3\2\2\2\u0cc1\u0cbb\3\2\2\2\u0cc2\u0121"+
		"\3\2\2\2\u0cc3\u0cc4\7\u00d6\2\2\u0cc4\u0cc5\7\"\2\2\u0cc5\u0cc6\5\u015e"+
		"\u00b0\2\u0cc6\u0cc7\7#\2\2\u0cc7\u0ccc\3\2\2\2\u0cc8\u0cc9\7\u00d6\2"+
		"\2\u0cc9\u0cca\7\"\2\2\u0cca\u0ccc\7#\2\2\u0ccb\u0cc3\3\2\2\2\u0ccb\u0cc8"+
		"\3\2\2\2\u0ccc\u0123\3\2\2\2\u0ccd\u0cce\7\"\2\2\u0cce\u0ccf\5\u015e\u00b0"+
		"\2\u0ccf\u0cd0\7(\2\2\u0cd0\u0cd1\5\u00f2z\2\u0cd1\u0cd2\7#\2\2\u0cd2"+
		"\u0125\3\2\2\2\u0cd3\u0cd4\t\21\2\2\u0cd4\u0127\3\2\2\2\u0cd5\u0cd6\7"+
		"&\2\2\u0cd6\u0cd7\5\u015e\u00b0\2\u0cd7\u0cd8\7\'\2\2\u0cd8\u0ce0\3\2"+
		"\2\2\u0cd9\u0cda\7&\2\2\u0cda\u0cdb\5\u012a\u0096\2\u0cdb\u0cdc\7\'\2"+
		"\2\u0cdc\u0ce0\3\2\2\2\u0cdd\u0cde\7&\2\2\u0cde\u0ce0\7\'\2\2\u0cdf\u0cd5"+
		"\3\2\2\2\u0cdf\u0cd9\3\2\2\2\u0cdf\u0cdd\3\2\2\2\u0ce0\u0129\3\2\2\2\u0ce1"+
		"\u0ce6\5\u0128\u0095\2\u0ce2\u0ce3\7(\2\2\u0ce3\u0ce5\5\u0128\u0095\2"+
		"\u0ce4\u0ce2\3\2\2\2\u0ce5\u0ce8\3\2\2\2\u0ce6\u0ce4\3\2\2\2\u0ce6\u0ce7"+
		"\3\2\2\2\u0ce7\u012b\3\2\2\2\u0ce8\u0ce6\3\2\2\2\u0ce9\u0cee\5\u0130\u0099"+
		"\2\u0cea\u0ceb\7(\2\2\u0ceb\u0ced\5\u0130\u0099\2\u0cec\u0cea\3\2\2\2"+
		"\u0ced\u0cf0\3\2\2\2\u0cee\u0cec\3\2\2\2\u0cee\u0cef\3\2\2\2\u0cef\u012d"+
		"\3\2\2\2\u0cf0\u0cee\3\2\2\2\u0cf1\u0cf2\5\u013c\u009f\2\u0cf2\u012f\3"+
		"\2\2\2\u0cf3\u0cfd\5\u00f2z\2\u0cf4\u0cf5\5\u012e\u0098\2\u0cf5\u0cf6"+
		"\7\33\2\2\u0cf6\u0cf7\5\u00f2z\2\u0cf7\u0cfd\3\2\2\2\u0cf8\u0cf9\5\u012e"+
		"\u0098\2\u0cf9\u0cfa\7\36\2\2\u0cfa\u0cfb\5\u00f2z\2\u0cfb\u0cfd\3\2\2"+
		"\2\u0cfc\u0cf3\3\2\2\2\u0cfc\u0cf4\3\2\2\2\u0cfc\u0cf8\3\2\2\2\u0cfd\u0131"+
		"\3\2\2\2\u0cfe\u0d03\5\u015a\u00ae\2\u0cff\u0d00\7(\2\2\u0d00\u0d02\5"+
		"\u015a\u00ae\2\u0d01\u0cff\3\2\2\2\u0d02\u0d05\3\2\2\2\u0d03\u0d01\3\2"+
		"\2\2\u0d03\u0d04\3\2\2\2\u0d04\u0133\3\2\2\2\u0d05\u0d03\3\2\2\2\u0d06"+
		"\u0d07\5\u0136\u009c\2\u0d07\u0d08\7\"\2\2\u0d08\u0d09\7#\2\2\u0d09\u0d3e"+
		"\3\2\2\2\u0d0a\u0d0b\5\u0136\u009c\2\u0d0b\u0d0c\7\"\2\2\u0d0c\u0d0e\5"+
		"\u012c\u0097\2\u0d0d\u0d0f\5\u01c8\u00e5\2\u0d0e\u0d0d\3\2\2\2\u0d0e\u0d0f"+
		"\3\2\2\2\u0d0f\u0d10\3\2\2\2\u0d10\u0d11\7#\2\2\u0d11\u0d3e\3\2\2\2\u0d12"+
		"\u0d13\5\u0136\u009c\2\u0d13\u0d14\7\"\2\2\u0d14\u0d15\7\u018d\2\2\u0d15"+
		"\u0d17\5\u0130\u0099\2\u0d16\u0d18\5\u01c8\u00e5\2\u0d17\u0d16\3\2\2\2"+
		"\u0d17\u0d18\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d1a\7#\2\2\u0d1a\u0d3e"+
		"\3\2\2\2\u0d1b\u0d1c\5\u0136\u009c\2\u0d1c\u0d1d\7\"\2\2\u0d1d\u0d1e\5"+
		"\u012c\u0097\2\u0d1e\u0d1f\7(\2\2\u0d1f\u0d20\7\u018d\2\2\u0d20\u0d22"+
		"\5\u0130\u0099\2\u0d21\u0d23\5\u01c8\u00e5\2\u0d22\u0d21\3\2\2\2\u0d22"+
		"\u0d23\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24\u0d25\7#\2\2\u0d25\u0d3e\3\2"+
		"\2\2\u0d26\u0d27\5\u0136\u009c\2\u0d27\u0d28\7\"\2\2\u0d28\u0d29\7v\2"+
		"\2\u0d29\u0d2b\5\u012c\u0097\2\u0d2a\u0d2c\5\u01c8\u00e5\2\u0d2b\u0d2a"+
		"\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d2e\7#\2\2\u0d2e"+
		"\u0d3e\3\2\2\2\u0d2f\u0d30\5\u0136\u009c\2\u0d30\u0d31\7\"\2\2\u0d31\u0d32"+
		"\7T\2\2\u0d32\u0d34\5\u012c\u0097\2\u0d33\u0d35\5\u01c8\u00e5\2\u0d34"+
		"\u0d33\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35\u0d36\3\2\2\2\u0d36\u0d37\7#"+
		"\2\2\u0d37\u0d3e\3\2\2\2\u0d38\u0d39\5\u0136\u009c\2\u0d39\u0d3a\7\"\2"+
		"\2\u0d3a\u0d3b\7\23\2\2\u0d3b\u0d3c\7#\2\2\u0d3c\u0d3e\3\2\2\2\u0d3d\u0d06"+
		"\3\2\2\2\u0d3d\u0d0a\3\2\2\2\u0d3d\u0d12\3\2\2\2\u0d3d\u0d1b\3\2\2\2\u0d3d"+
		"\u0d26\3\2\2\2\u0d3d\u0d2f\3\2\2\2\u0d3d\u0d38\3\2\2\2\u0d3e\u0135\3\2"+
		"\2\2\u0d3f\u0d44\5\u013c\u009f\2\u0d40\u0d41\5\u013a\u009e\2\u0d41\u0d42"+
		"\5\u00f8}\2\u0d42\u0d44\3\2\2\2\u0d43\u0d3f\3\2\2\2\u0d43\u0d40\3\2\2"+
		"\2\u0d44\u0137\3\2\2\2\u0d45\u0d57\7\u0225\2\2\u0d46\u0d57\7\u0224\2\2"+
		"\u0d47\u0d48\5\u0136\u009c\2\u0d48\u0d49\7\u0224\2\2\u0d49\u0d57\3\2\2"+
		"\2\u0d4a\u0d4b\5\u0136\u009c\2\u0d4b\u0d4c\7\"\2\2\u0d4c\u0d4e\5\u012c"+
		"\u0097\2\u0d4d\u0d4f\5\u01c8\u00e5\2\u0d4e\u0d4d\3\2\2\2\u0d4e\u0d4f\3"+
		"\2\2\2\u0d4f\u0d50\3\2\2\2\u0d50\u0d51\7#\2\2\u0d51\u0d52\7\u0224\2\2"+
		"\u0d52\u0d57\3\2\2\2\u0d53\u0d57\7q\2\2\u0d54\u0d57\7r\2\2\u0d55\u0d57"+
		"\7p\2\2\u0d56\u0d45\3\2\2\2\u0d56\u0d46\3\2\2\2\u0d56\u0d47\3\2\2\2\u0d56"+
		"\u0d4a\3\2\2\2\u0d56\u0d53\3\2\2\2\u0d56\u0d54\3\2\2\2\u0d56\u0d55\3\2"+
		"\2\2\u0d57\u0139\3\2\2\2\u0d58\u0d59\5\u00ceh\2\u0d59\u013b\3\2\2\2\u0d5a"+
		"\u0d5e\5\u00ceh\2\u0d5b\u0d5e\5\u00d4k\2\u0d5c\u0d5e\5\u00d6l\2\u0d5d"+
		"\u0d5a\3\2\2\2\u0d5d\u0d5b\3\2\2\2\u0d5d\u0d5c\3\2\2\2\u0d5e\u013d\3\2"+
		"\2\2\u0d5f\u0d61\5\u0154\u00ab\2\u0d60\u0d62\5\u0156\u00ac\2\u0d61\u0d60"+
		"\3\2\2\2\u0d61\u0d62\3\2\2\2\u0d62\u0d6c\3\2\2\2\u0d63\u0d64\7\u00e4\2"+
		"\2\u0d64\u0d65\7Z\2\2\u0d65\u0d66\7\"\2\2\u0d66\u0d67\5\u01b0\u00d9\2"+
		"\u0d67\u0d69\7#\2\2\u0d68\u0d6a\5\u0156\u00ac\2\u0d69\u0d68\3\2\2\2\u0d69"+
		"\u0d6a\3\2\2\2\u0d6a\u0d6c\3\2\2\2\u0d6b\u0d5f\3\2\2\2\u0d6b\u0d63\3\2"+
		"\2\2\u0d6c\u013f\3\2\2\2\u0d6d\u0d6e\7\u0190\2\2\u0d6e\u0d6f\7\"\2\2\u0d6f"+
		"\u0d70\5\u00f6|\2\u0d70\u0d71\5\u01a2\u00d2\2\u0d71\u0d72\7\u0191\2\2"+
		"\u0d72\u0d73\5\u0142\u00a2\2\u0d73\u0d74\7#\2\2\u0d74\u0d83\3\2\2\2\u0d75"+
		"\u0d76\7\u0190\2\2\u0d76\u0d77\7\"\2\2\u0d77\u0d78\7\u0195\2\2\u0d78\u0d79"+
		"\7\"\2\2\u0d79\u0d7a\5\u014a\u00a6\2\u0d7a\u0d7b\7#\2\2\u0d7b\u0d7c\7"+
		"(\2\2\u0d7c\u0d7d\5\u00f6|\2\u0d7d\u0d7e\5\u01a2\u00d2\2\u0d7e\u0d7f\7"+
		"\u0191\2\2\u0d7f\u0d80\5\u0142\u00a2\2\u0d80\u0d81\7#\2\2\u0d81\u0d83"+
		"\3\2\2\2\u0d82\u0d6d\3\2\2\2\u0d82\u0d75\3\2\2\2\u0d83\u0141\3\2\2\2\u0d84"+
		"\u0d89\5\u0144\u00a3\2\u0d85\u0d86\7(\2\2\u0d86\u0d88\5\u0144\u00a3\2"+
		"\u0d87\u0d85\3\2\2\2\u0d88\u0d8b\3\2\2\2\u0d89\u0d87\3\2\2\2\u0d89\u0d8a"+
		"\3\2\2\2\u0d8a\u0143\3\2\2\2\u0d8b\u0d89\3\2\2\2\u0d8c\u0d8d\5\u013a\u009e"+
		"\2\u0d8d\u0d8e\5\u015a\u00ae\2\u0d8e\u0d98\3\2\2\2\u0d8f\u0d90\5\u013a"+
		"\u009e\2\u0d90\u0d91\5\u015a\u00ae\2\u0d91\u0d92\5\u0146\u00a4\2\u0d92"+
		"\u0d98\3\2\2\2\u0d93\u0d94\5\u013a\u009e\2\u0d94\u0d95\7j\2\2\u0d95\u0d96"+
		"\7\u0165\2\2\u0d96\u0d98\3\2\2\2\u0d97\u0d8c\3\2\2\2\u0d97\u0d8f\3\2\2"+
		"\2\u0d97\u0d93\3\2\2\2\u0d98\u0145\3\2\2\2\u0d99\u0d9a\b\u00a4\1\2\u0d9a"+
		"\u0d9b\5\u0148\u00a5\2\u0d9b\u0da0\3\2\2\2\u0d9c\u0d9d\f\3\2\2\u0d9d\u0d9f"+
		"\5\u0148\u00a5\2\u0d9e\u0d9c\3\2\2\2\u0d9f\u0da2\3\2\2\2\u0da0\u0d9e\3"+
		"\2\2\2\u0da0\u0da1\3\2\2\2\u0da1\u0147\3\2\2\2\u0da2\u0da0\3\2\2\2\u0da3"+
		"\u0da4\5\u00ceh\2\u0da4\u0da5\5\u00f4{\2\u0da5\u0dac\3\2\2\2\u0da6\u0da7"+
		"\7\u0099\2\2\u0da7\u0dac\5\u00f4{\2\u0da8\u0da9\7o\2\2\u0da9\u0dac\7p"+
		"\2\2\u0daa\u0dac\7p\2\2\u0dab\u0da3\3\2\2\2\u0dab\u0da6\3\2\2\2\u0dab"+
		"\u0da8\3\2\2\2\u0dab\u0daa\3\2\2\2\u0dac\u0149\3\2\2\2\u0dad\u0db2\5\u014c"+
		"\u00a7\2\u0dae\u0daf\7(\2\2\u0daf\u0db1\5\u014c\u00a7\2\u0db0\u0dae\3"+
		"\2\2\2\u0db1\u0db4\3\2\2\2\u0db2\u0db0\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3"+
		"\u014b\3\2\2\2\u0db4\u0db2\3\2\2\2\u0db5\u0db6\5\u00f4{\2\u0db6\u0db7"+
		"\7e\2\2\u0db7\u0db8\5\u00ceh\2\u0db8\u0dbc\3\2\2\2\u0db9\u0dba\7\u0099"+
		"\2\2\u0dba\u0dbc\5\u00f4{\2\u0dbb\u0db5\3\2\2\2\u0dbb\u0db9\3\2\2\2\u0dbc"+
		"\u014d\3\2\2\2\u0dbd\u0dbf\5\u0134\u009b\2\u0dbe\u0dc0\5\u0150\u00a9\2"+
		"\u0dbf\u0dbe\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0\u0dc2\3\2\2\2\u0dc1\u0dc3"+
		"\5\u0152\u00aa\2\u0dc2\u0dc1\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u0dc5\3"+
		"\2\2\2\u0dc4\u0dc6\5\u01d4\u00eb\2\u0dc5\u0dc4\3\2\2\2\u0dc5\u0dc6\3\2"+
		"\2\2\u0dc6\u0dc9\3\2\2\2\u0dc7\u0dc9\5\u0158\u00ad\2\u0dc8\u0dbd\3\2\2"+
		"\2\u0dc8\u0dc7\3\2\2\2\u0dc9\u014f\3\2\2\2\u0dca\u0dcb\7\u0138\2\2\u0dcb"+
		"\u0dcc\7z\2\2\u0dcc\u0dcd\7\"\2\2\u0dcd\u0dce\5\u01c8\u00e5\2\u0dce\u0dcf"+
		"\7#\2\2\u0dcf\u0151\3\2\2\2\u0dd0\u0dd1\7\u00ff\2\2\u0dd1\u0dd2\7\"\2"+
		"\2\u0dd2\u0dd3\7d\2\2\u0dd3\u0dd4\5\u00f2z\2\u0dd4\u0dd5\7#\2\2\u0dd5"+
		"\u0153\3\2\2\2\u0dd6\u0dd9\5\u0134\u009b\2\u0dd7\u0dd9\5\u0158\u00ad\2"+
		"\u0dd8\u0dd6\3\2\2\2\u0dd8\u0dd7\3\2\2\2\u0dd9\u0155\3\2\2\2\u0dda\u0ddb"+
		"\7R\2\2\u0ddb\u0ddc\7\u0165\2\2\u0ddc\u0157\3\2\2\2\u0ddd\u0dde\7\u00aa"+
		"\2\2\u0dde\u0ddf\7j\2\2\u0ddf\u0de0\7\"\2\2\u0de0\u0de1\5\u00f2z\2\u0de1"+
		"\u0de2\7#\2\2\u0de2\u0eb2\3\2\2\2\u0de3\u0eb2\7\u00b5\2\2\u0de4\u0eb2"+
		"\7\u00b6\2\2\u0de5\u0de6\7\u00b6\2\2\u0de6\u0de7\7\"\2\2\u0de7\u0de8\7"+
		"\u0225\2\2\u0de8\u0eb2\7#\2\2\u0de9\u0eb2\7\u00b7\2\2\u0dea\u0deb\7\u00b7"+
		"\2\2\u0deb\u0dec\7\"\2\2\u0dec\u0ded\7\u0225\2\2\u0ded\u0eb2\7#\2\2\u0dee"+
		"\u0eb2\7\u008e\2\2\u0def\u0df0\7\u008e\2\2\u0df0\u0df1\7\"\2\2\u0df1\u0df2"+
		"\7\u0225\2\2\u0df2\u0eb2\7#\2\2\u0df3\u0eb2\7\u008f\2\2\u0df4\u0df5\7"+
		"\u008f\2\2\u0df5\u0df6\7\"\2\2\u0df6\u0df7\7\u0225\2\2\u0df7\u0eb2\7#"+
		"\2\2\u0df8\u0eb2\7\u0166\2\2\u0df9\u0eb2\7\u00a2\2\2\u0dfa\u0eb2\7\u012b"+
		"\2\2\u0dfb\u0eb2\7\u00e7\2\2\u0dfc\u0eb2\7\u0167\2\2\u0dfd\u0eb2\7\u0168"+
		"\2\2\u0dfe\u0dff\7W\2\2\u0dff\u0e00\7\"\2\2\u0e00\u0e01\5\u00f2z\2\u0e01"+
		"\u0e02\7e\2\2\u0e02\u0e03\5\u015a\u00ae\2\u0e03\u0e04\7#\2\2\u0e04\u0eb2"+
		"\3\2\2\2\u0e05\u0e06\7\u00fe\2\2\u0e06\u0e08\7\"\2\2\u0e07\u0e09\5\u0160"+
		"\u00b1\2\u0e08\u0e07\3\2\2\2\u0e08\u0e09\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a"+
		"\u0eb2\7#\2\2\u0e0b\u0e0c\7\u0169\2\2\u0e0c\u0e0d\7\"\2\2\u0e0d\u0e0e"+
		"\5\u00f2z\2\u0e0e\u0e0f\7#\2\2\u0e0f\u0eb2\3\2\2\2\u0e10\u0e11\7\u0169"+
		"\2\2\u0e11\u0e12\7\"\2\2\u0e12\u0e13\5\u00f2z\2\u0e13\u0e14\7(\2\2\u0e14"+
		"\u0e15\5\u018c\u00c7\2\u0e15\u0e16\7#\2\2\u0e16\u0eb2\3\2\2\2\u0e17\u0e18"+
		"\7\u016a\2\2\u0e18\u0e19\7\"\2\2\u0e19\u0e1a\5\u0190\u00c9\2\u0e1a\u0e1b"+
		"\7#\2\2\u0e1b\u0eb2\3\2\2\2\u0e1c\u0e1d\7J\2\2\u0e1d\u0e1e\7\"\2\2\u0e1e"+
		"\u0e1f\5\u0198\u00cd\2\u0e1f\u0e20\7#\2\2\u0e20\u0eb2\3\2\2\2\u0e21\u0e22"+
		"\7Y\2\2\u0e22\u0e23\7\"\2\2\u0e23\u0e24\5\u019a\u00ce\2\u0e24\u0e25\7"+
		"#\2\2\u0e25\u0eb2\3\2\2\2\u0e26\u0e27\7\u0173\2\2\u0e27\u0e28\7\"\2\2"+
		"\u0e28\u0e29\5\u00f2z\2\u0e29\u0e2a\7e\2\2\u0e2a\u0e2b\5\u015a\u00ae\2"+
		"\u0e2b\u0e2c\7#\2\2\u0e2c\u0eb2\3\2\2\2\u0e2d\u0e2e\7X\2\2\u0e2e\u0e2f"+
		"\7\"\2\2\u0e2f\u0e30\7\u00bd\2\2\u0e30\u0e31\5\u018e\u00c8\2\u0e31\u0e32"+
		"\7#\2\2\u0e32\u0eb2\3\2\2\2\u0e33\u0e34\7X\2\2\u0e34\u0e35\7\"\2\2\u0e35"+
		"\u0e36\7\u00be\2\2\u0e36\u0e37\5\u018e\u00c8\2\u0e37\u0e38\7#\2\2\u0e38"+
		"\u0eb2\3\2\2\2\u0e39\u0e3a\7X\2\2\u0e3a\u0e3b\7\"\2\2\u0e3b\u0e3c\7\u00bf"+
		"\2\2\u0e3c\u0e3d\5\u018e\u00c8\2\u0e3d\u0e3e\7#\2\2\u0e3e\u0eb2\3\2\2"+
		"\2\u0e3f\u0e40\7X\2\2\u0e40\u0e41\7\"\2\2\u0e41\u0e42\5\u018e\u00c8\2"+
		"\u0e42\u0e43\7#\2\2\u0e43\u0eb2\3\2\2\2\u0e44\u0e45\7\u00b8\2\2\u0e45"+
		"\u0e46\7\"\2\2\u0e46\u0e47\5\u00f2z\2\u0e47\u0e48\7(\2\2\u0e48\u0e49\5"+
		"\u00f2z\2\u0e49\u0e4a\7#\2\2\u0e4a\u0eb2\3\2\2\2\u0e4b\u0e4c\7\u00c0\2"+
		"\2\u0e4c\u0e4d\7\"\2\2\u0e4d\u0e4e\5\u015e\u00b0\2\u0e4e\u0e4f\7#\2\2"+
		"\u0e4f\u0eb2\3\2\2\2\u0e50\u0e51\7\u017f\2\2\u0e51\u0e52\7\"\2\2\u0e52"+
		"\u0e53\5\u015e\u00b0\2\u0e53\u0e54\7#\2\2\u0e54\u0eb2\3\2\2\2\u0e55\u0e56"+
		"\7\u0180\2\2\u0e56\u0e57\7\"\2\2\u0e57\u0e58\5\u015e\u00b0\2\u0e58\u0e59"+
		"\7#\2\2\u0e59\u0eb2\3\2\2\2\u0e5a\u0e5b\7\u016b\2\2\u0e5b\u0e5c\7\"\2"+
		"\2\u0e5c\u0e5d\5\u015e\u00b0\2\u0e5d\u0e5e\7#\2\2\u0e5e\u0eb2\3\2\2\2"+
		"\u0e5f\u0e60\7\u016c\2\2\u0e60\u0e61\7\"\2\2\u0e61\u0e62\7\u00a9\2\2\u0e62"+
		"\u0e63\5\u00ceh\2\u0e63\u0e64\7#\2\2\u0e64\u0eb2\3\2\2\2\u0e65\u0e66\7"+
		"\u016c\2\2\u0e66\u0e67\7\"\2\2\u0e67\u0e68\7\u00a9\2\2\u0e68\u0e69\5\u00ce"+
		"h\2\u0e69\u0e6a\7(\2\2\u0e6a\u0e6b\5\u019c\u00cf\2\u0e6b\u0e6c\7#\2\2"+
		"\u0e6c\u0eb2\3\2\2\2\u0e6d\u0e6e\7\u016c\2\2\u0e6e\u0e6f\7\"\2\2\u0e6f"+
		"\u0e70\7\u00a9\2\2\u0e70\u0e71\5\u00ceh\2\u0e71\u0e72\7(\2\2\u0e72\u0e73"+
		"\5\u015e\u00b0\2\u0e73\u0e74\7#\2\2\u0e74\u0eb2\3\2\2\2\u0e75\u0e76\7"+
		"\u016c\2\2\u0e76\u0e77\7\"\2\2\u0e77\u0e78\7\u00a9\2\2\u0e78\u0e79\5\u00ce"+
		"h\2\u0e79\u0e7a\7(\2\2\u0e7a\u0e7b\5\u019c\u00cf\2\u0e7b\u0e7c\7(\2\2"+
		"\u0e7c\u0e7d\5\u015e\u00b0\2\u0e7d\u0e7e\7#\2\2\u0e7e\u0eb2\3\2\2\2\u0e7f"+
		"\u0e80\7\u016d\2\2\u0e80\u0e81\7\"\2\2\u0e81\u0e82\5\u00f6|\2\u0e82\u0e83"+
		"\5\u01a2\u00d2\2\u0e83\u0e84\7#\2\2\u0e84\u0eb2\3\2\2\2\u0e85\u0e86\7"+
		"\u016e\2\2\u0e86\u0e87\7\"\2\2\u0e87\u0e88\5\u019e\u00d0\2\u0e88\u0e89"+
		"\7#\2\2\u0e89\u0eb2\3\2\2\2\u0e8a\u0e8b\7\u016f\2\2\u0e8b\u0e8c\7\"\2"+
		"\2\u0e8c\u0e8d\5\u01a6\u00d4\2\u0e8d\u0e8e\5\u00f2z\2\u0e8e\u0e8f\5\u01a8"+
		"\u00d5\2\u0e8f\u0e90\7#\2\2\u0e90\u0eb2\3\2\2\2\u0e91\u0e92\7\u0170\2"+
		"\2\u0e92\u0e93\7\"\2\2\u0e93\u0e94\7\u00a9\2\2\u0e94\u0e95\5\u00ceh\2"+
		"\u0e95\u0e96\7#\2\2\u0e96\u0eb2\3\2\2\2\u0e97\u0e98\7\u0170\2\2\u0e98"+
		"\u0e99\7\"\2\2\u0e99\u0e9a\7\u00a9\2\2\u0e9a\u0e9b\5\u00ceh\2\u0e9b\u0e9c"+
		"\7(\2\2\u0e9c\u0e9d\5\u00f2z\2\u0e9d\u0e9e\7#\2\2\u0e9e\u0eb2\3\2\2\2"+
		"\u0e9f\u0ea0\7\u0171\2\2\u0ea0\u0ea1\7\"\2\2\u0ea1\u0ea2\5\u00f2z\2\u0ea2"+
		"\u0ea3\7(\2\2\u0ea3\u0ea5\5\u01aa\u00d6\2\u0ea4\u0ea6\5\u01ac\u00d7\2"+
		"\u0ea5\u0ea4\3\2\2\2\u0ea5\u0ea6";
	private static final String _serializedATNSegment2 =
		"\3\2\2\2\u0ea6\u0ea7\3\2\2\2\u0ea7\u0ea8\7#\2\2\u0ea8\u0eb2\3\2\2\2\u0ea9"+
		"\u0eaa\7\u0172\2\2\u0eaa\u0eab\7\"\2\2\u0eab\u0eac\5\u01a6\u00d4\2\u0eac"+
		"\u0ead\5\u00f2z\2\u0ead\u0eae\7e\2\2\u0eae\u0eaf\5\u015c\u00af\2\u0eaf"+
		"\u0eb0\7#\2\2\u0eb0\u0eb2\3\2\2\2\u0eb1\u0ddd\3\2\2\2\u0eb1\u0de3\3\2"+
		"\2\2\u0eb1\u0de4\3\2\2\2\u0eb1\u0de5\3\2\2\2\u0eb1\u0de9\3\2\2\2\u0eb1"+
		"\u0dea\3\2\2\2\u0eb1\u0dee\3\2\2\2\u0eb1\u0def\3\2\2\2\u0eb1\u0df3\3\2"+
		"\2\2\u0eb1\u0df4\3\2\2\2\u0eb1\u0df8\3\2\2\2\u0eb1\u0df9\3\2\2\2\u0eb1"+
		"\u0dfa\3\2\2\2\u0eb1\u0dfb\3\2\2\2\u0eb1\u0dfc\3\2\2\2\u0eb1\u0dfd\3\2"+
		"\2\2\u0eb1\u0dfe\3\2\2\2\u0eb1\u0e05\3\2\2\2\u0eb1\u0e0b\3\2\2\2\u0eb1"+
		"\u0e10\3\2\2\2\u0eb1\u0e17\3\2\2\2\u0eb1\u0e1c\3\2\2\2\u0eb1\u0e21\3\2"+
		"\2\2\u0eb1\u0e26\3\2\2\2\u0eb1\u0e2d\3\2\2\2\u0eb1\u0e33\3\2\2\2\u0eb1"+
		"\u0e39\3\2\2\2\u0eb1\u0e3f\3\2\2\2\u0eb1\u0e44\3\2\2\2\u0eb1\u0e4b\3\2"+
		"\2\2\u0eb1\u0e50\3\2\2\2\u0eb1\u0e55\3\2\2\2\u0eb1\u0e5a\3\2\2\2\u0eb1"+
		"\u0e5f\3\2\2\2\u0eb1\u0e65\3\2\2\2\u0eb1\u0e6d\3\2\2\2\u0eb1\u0e75\3\2"+
		"\2\2\u0eb1\u0e7f\3\2\2\2\u0eb1\u0e85\3\2\2\2\u0eb1\u0e8a\3\2\2\2\u0eb1"+
		"\u0e91\3\2\2\2\u0eb1\u0e97\3\2\2\2\u0eb1\u0e9f\3\2\2\2\u0eb1\u0ea9\3\2"+
		"\2\2\u0eb2\u0159\3\2\2\2\u0eb3\u0eb4\5\u015c\u00af\2\u0eb4\u0eb5\5\u0188"+
		"\u00c5\2\u0eb5\u0ecf\3\2\2\2\u0eb6\u0eb7\7\u0174\2\2\u0eb7\u0eb8\5\u015c"+
		"\u00af\2\u0eb8\u0eb9\5\u0188\u00c5\2\u0eb9\u0ecf\3\2\2\2\u0eba\u0ebb\5"+
		"\u015c\u00af\2\u0ebb\u0ebc\7\u0089\2\2\u0ebc\u0ebd\7&\2\2\u0ebd\u0ebe"+
		"\7\u0225\2\2\u0ebe\u0ebf\7\'\2\2\u0ebf\u0ecf\3\2\2\2\u0ec0\u0ec1\7\u0174"+
		"\2\2\u0ec1\u0ec2\5\u015c\u00af\2\u0ec2\u0ec3\7\u0089\2\2\u0ec3\u0ec4\7"+
		"&\2\2\u0ec4\u0ec5\7\u0225\2\2\u0ec5\u0ec6\7\'\2\2\u0ec6\u0ecf\3\2\2\2"+
		"\u0ec7\u0ec8\5\u015c\u00af\2\u0ec8\u0ec9\7\u0089\2\2\u0ec9\u0ecf\3\2\2"+
		"\2\u0eca\u0ecb\7\u0174\2\2\u0ecb\u0ecc\5\u015c\u00af\2\u0ecc\u0ecd\7\u0089"+
		"\2\2\u0ecd\u0ecf\3\2\2\2\u0ece\u0eb3\3\2\2\2\u0ece\u0eb6\3\2\2\2\u0ece"+
		"\u0eba\3\2\2\2\u0ece\u0ec0\3\2\2\2\u0ece\u0ec7\3\2\2\2\u0ece\u0eca\3\2"+
		"\2\2\u0ecf\u015b\3\2\2\2\u0ed0\u0ede\5\u0164\u00b3\2\u0ed1\u0ede\5\u0168"+
		"\u00b5\2\u0ed2\u0ede\5\u017e\u00c0\2\u0ed3\u0ede\5\u016e\u00b8\2\u0ed4"+
		"\u0ede\5\u016a\u00b6\2\u0ed5\u0ed6\5\u0184\u00c3\2\u0ed6\u0ed7\5\u0186"+
		"\u00c4\2\u0ed7\u0ede\3\2\2\2\u0ed8\u0ed9\5\u0184\u00c3\2\u0ed9\u0eda\7"+
		"\"\2\2\u0eda\u0edb\7\u0225\2\2\u0edb\u0edc\7#\2\2\u0edc\u0ede\3\2\2\2"+
		"\u0edd\u0ed0\3\2\2\2\u0edd\u0ed1\3\2\2\2\u0edd\u0ed2\3\2\2\2\u0edd\u0ed3"+
		"\3\2\2\2\u0edd\u0ed4\3\2\2\2\u0edd\u0ed5\3\2\2\2\u0edd\u0ed8\3\2\2\2\u0ede"+
		"\u015d\3\2\2\2\u0edf\u0ee0\b\u00b0\1\2\u0ee0\u0ee1\5\u00f2z\2\u0ee1\u0ee7"+
		"\3\2\2\2\u0ee2\u0ee3\f\3\2\2\u0ee3\u0ee4\7(\2\2\u0ee4\u0ee6\5\u00f2z\2"+
		"\u0ee5\u0ee2\3\2\2\2\u0ee6\u0ee9\3\2\2\2\u0ee7\u0ee5\3\2\2\2\u0ee7\u0ee8"+
		"\3\2\2\2\u0ee8\u015f\3\2\2\2\u0ee9\u0ee7\3\2\2\2\u0eea\u0eeb\5\u0162\u00b2"+
		"\2\u0eeb\u0eec\7Z\2\2\u0eec\u0eed\5\u00f2z\2\u0eed\u0161\3\2\2\2\u0eee"+
		"\u0ef6\7\u0090\2\2\u0eef\u0ef6\7\u0092\2\2\u0ef0\u0ef6\7\u0094\2\2\u0ef1"+
		"\u0ef6\7\u0095\2\2\u0ef2\u0ef6\7\u0096\2\2\u0ef3\u0ef6\7\u0097\2\2\u0ef4"+
		"\u0ef6\5\u00ceh\2\u0ef5\u0eee\3\2\2\2\u0ef5\u0eef\3\2\2\2\u0ef5\u0ef0"+
		"\3\2\2\2\u0ef5\u0ef1\3\2\2\2\u0ef5\u0ef2\3\2\2\2\u0ef5\u0ef3\3\2\2\2\u0ef5"+
		"\u0ef4\3\2\2\2\u0ef6\u0163\3\2\2\2\u0ef7\u0ef9\5\u013c\u009f\2\u0ef8\u0efa"+
		"\5\u0166\u00b4\2\u0ef9\u0ef8\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa\u0f01\3"+
		"\2\2\2\u0efb\u0efc\5\u013c\u009f\2\u0efc\u0efe\5\u0178\u00bd\2\u0efd\u0eff"+
		"\5\u0166\u00b4\2\u0efe\u0efd\3\2\2\2\u0efe\u0eff\3\2\2\2\u0eff\u0f01\3"+
		"\2\2\2\u0f00\u0ef7\3\2\2\2\u0f00\u0efb\3\2\2\2\u0f01\u0165\3\2\2\2\u0f02"+
		"\u0f03\7\"\2\2\u0f03\u0f04\5\u015e\u00b0\2\u0f04\u0f05\7#\2\2\u0f05\u0167"+
		"\3\2\2\2\u0f06\u0f22\7\u013f\2\2\u0f07\u0f22\7\u00ac\2\2\u0f08\u0f22\7"+
		"\u00b0\2\2\u0f09\u0f22\7\u00b1\2\2\u0f0a\u0f22\7\u00ad\2\2\u0f0b\u0f0c"+
		"\7\u0143\2\2\u0f0c\u0f22\5\u0176\u00bc\2\u0f0d\u0f0e\7\u0086\2\2\u0f0e"+
		"\u0f22\7K\2\2\u0f0f\u0f11\7\u00ae\2\2\u0f10\u0f12\5\u0166\u00b4\2\u0f11"+
		"\u0f10\3\2\2\2\u0f11\u0f12\3\2\2\2\u0f12\u0f22\3\2\2\2\u0f13\u0f15\7\u00cd"+
		"\2\2\u0f14\u0f16\5\u0166\u00b4\2\u0f15\u0f14\3\2\2\2\u0f15\u0f16\3\2\2"+
		"\2\u0f16\u0f22\3\2\2\2\u0f17\u0f19\7\u00b2\2\2\u0f18\u0f1a\5\u0166\u00b4"+
		"\2\u0f19\u0f18\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f22\3\2\2\2\u0f1b\u0f22"+
		"\7\u0085\2\2\u0f1c\u0f22\7\u0145\2\2\u0f1d\u0f22\7\u0144\2\2\u0f1e\u0f22"+
		"\7\u0140\2\2\u0f1f\u0f22\7\u0141\2\2\u0f20\u0f22\7\u0142\2\2\u0f21\u0f06"+
		"\3\2\2\2\u0f21\u0f07\3\2\2\2\u0f21\u0f08\3\2\2\2\u0f21\u0f09\3\2\2\2\u0f21"+
		"\u0f0a\3\2\2\2\u0f21\u0f0b\3\2\2\2\u0f21\u0f0d\3\2\2\2\u0f21\u0f0f\3\2"+
		"\2\2\u0f21\u0f13\3\2\2\2\u0f21\u0f17\3\2\2\2\u0f21\u0f1b\3\2\2\2\u0f21"+
		"\u0f1c\3\2\2\2\u0f21\u0f1d\3\2\2\2\u0f21\u0f1e\3\2\2\2\u0f21\u0f1f\3\2"+
		"\2\2\u0f21\u0f20\3\2\2\2\u0f22\u0169\3\2\2\2\u0f23\u0f24\7\u008d\2\2\u0f24"+
		"\u0f25\7\"\2\2\u0f25\u0f26\7\u0225\2\2\u0f26\u0f28\7#\2\2\u0f27\u0f29"+
		"\5\u016c\u00b7\2\u0f28\u0f27\3\2\2\2\u0f28\u0f29\3\2\2\2\u0f29\u0f3b\3"+
		"\2\2\2\u0f2a\u0f2c\7\u008d\2\2\u0f2b\u0f2d\5\u016c\u00b7\2\u0f2c\u0f2b"+
		"\3\2\2\2\u0f2c\u0f2d\3\2\2\2\u0f2d\u0f3b\3\2\2\2\u0f2e\u0f2f\7\u008c\2"+
		"\2\u0f2f\u0f30\7\"\2\2\u0f30\u0f31\7\u0225\2\2\u0f31\u0f33\7#\2\2\u0f32"+
		"\u0f34\5\u016c\u00b7\2\u0f33\u0f32\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0f3b"+
		"\3\2\2\2\u0f35\u0f37\7\u008c\2\2\u0f36\u0f38\5\u016c\u00b7\2\u0f37\u0f36"+
		"\3\2\2\2\u0f37\u0f38\3\2\2\2\u0f38\u0f3b\3\2\2\2\u0f39\u0f3b\7\u008b\2"+
		"\2\u0f3a\u0f23\3\2\2\2\u0f3a\u0f2a\3\2\2\2\u0f3a\u0f2e\3\2\2\2\u0f3a\u0f35"+
		"\3\2\2\2\u0f3a\u0f39\3\2\2\2\u0f3b\u016b\3\2\2\2\u0f3c\u0f3d\7R\2\2\u0f3d"+
		"\u0f3e\7\u008c\2\2\u0f3e\u0f43\7\u013a\2\2\u0f3f\u0f40\7\u0139\2\2\u0f40"+
		"\u0f41\7\u008c\2\2\u0f41\u0f43\7\u013a\2\2\u0f42\u0f3c\3\2\2\2\u0f42\u0f3f"+
		"\3\2\2\2\u0f43\u016d\3\2\2\2\u0f44\u0f47\5\u0170\u00b9\2\u0f45\u0f47\5"+
		"\u0172\u00ba\2\u0f46\u0f44\3\2\2\2\u0f46\u0f45\3\2\2\2\u0f47\u016f\3\2"+
		"\2\2\u0f48\u0f49\5\u0174\u00bb\2\u0f49\u0f4a\7\"\2\2\u0f4a\u0f4b\7\u0225"+
		"\2\2\u0f4b\u0f4c\7#\2\2\u0f4c\u0171\3\2\2\2\u0f4d\u0f4e\5\u0174\u00bb"+
		"\2\u0f4e\u0173\3\2\2\2\u0f4f\u0f51\7\u0088\2\2\u0f50\u0f52\7\u00b9\2\2"+
		"\u0f51\u0f50\3\2\2\2\u0f51\u0f52\3\2\2\2\u0f52\u0f67\3\2\2\2\u0f53\u0f55"+
		"\7\u0087\2\2\u0f54\u0f56\7\u00b9\2\2\u0f55\u0f54\3\2\2\2\u0f55\u0f56\3"+
		"\2\2\2\u0f56\u0f67\3\2\2\2\u0f57\u0f67\7\u014a\2\2\u0f58\u0f59\7\u00ba"+
		"\2\2\u0f59\u0f5b\7\u0088\2\2\u0f5a\u0f5c\7\u00b9\2\2\u0f5b\u0f5a\3\2\2"+
		"\2\u0f5b\u0f5c\3\2\2\2\u0f5c\u0f67\3\2\2\2\u0f5d\u0f5e\7\u00ba\2\2\u0f5e"+
		"\u0f60\7\u0087\2\2\u0f5f\u0f61\7\u00b9\2\2\u0f60\u0f5f\3\2\2\2\u0f60\u0f61"+
		"\3\2\2\2\u0f61\u0f67\3\2\2\2\u0f62\u0f64\7\u00bb\2\2\u0f63\u0f65\7\u00b9"+
		"\2\2\u0f64\u0f63\3\2\2\2\u0f64\u0f65\3\2\2\2\u0f65\u0f67\3\2\2\2\u0f66"+
		"\u0f4f\3\2\2\2\u0f66\u0f53\3\2\2\2\u0f66\u0f57\3\2\2\2\u0f66\u0f58\3\2"+
		"\2\2\u0f66\u0f5d\3\2\2\2\u0f66\u0f62\3\2\2\2\u0f67\u0175\3\2\2\2\u0f68"+
		"\u0f69\7\"\2\2\u0f69\u0f6a\7\u0225\2\2\u0f6a\u0f6d\7#\2\2\u0f6b\u0f6d"+
		"\3\2\2\2\u0f6c\u0f68\3\2\2\2\u0f6c\u0f6b\3\2\2\2\u0f6d\u0177\3\2\2\2\u0f6e"+
		"\u0f6f\b\u00bd\1\2\u0f6f\u0f70\7\26\2\2\u0f70\u0f71\5\u017a\u00be\2\u0f71"+
		"\u0f77\3\2\2\2\u0f72\u0f73\f\3\2\2\u0f73\u0f74\7\26\2\2\u0f74\u0f76\5"+
		"\u017a\u00be\2\u0f75\u0f72\3\2\2\2\u0f76\u0f79\3\2\2\2\u0f77\u0f75\3\2"+
		"\2\2\u0f77\u0f78\3\2\2\2\u0f78\u0179\3\2\2\2\u0f79\u0f77\3\2\2\2\u0f7a"+
		"\u0f7b\5\u017c\u00bf\2\u0f7b\u017b\3\2\2\2\u0f7c\u0f81\5\u00ceh\2\u0f7d"+
		"\u0f81\5\u01fe\u0100\2\u0f7e\u0f81\5\u00d6l\2\u0f7f\u0f81\5\u00c8e\2\u0f80"+
		"\u0f7c\3\2\2\2\u0f80\u0f7d\3\2\2\2\u0f80\u0f7e\3\2\2\2\u0f80\u0f7f\3\2"+
		"\2\2\u0f81\u017d\3\2\2\2\u0f82\u0f85\5\u0180\u00c1\2\u0f83\u0f85\5\u0182"+
		"\u00c2\2\u0f84\u0f82\3\2\2\2\u0f84\u0f83\3\2\2\2\u0f85\u017f\3\2\2\2\u0f86"+
		"\u0f88\7\u0158\2\2\u0f87\u0f89\7\u00b9\2\2\u0f88\u0f87\3\2\2\2\u0f88\u0f89"+
		"\3\2\2\2\u0f89\u0f8a\3\2\2\2\u0f8a\u0f8b\7\"\2\2\u0f8b\u0f8c\5\u015e\u00b0"+
		"\2\u0f8c\u0f8d\7#\2\2\u0f8d\u0181\3\2\2\2\u0f8e\u0f90\7\u0158\2\2\u0f8f"+
		"\u0f91\7\u00b9\2\2\u0f90\u0f8f\3\2\2\2\u0f90\u0f91\3\2\2\2\u0f91\u0183"+
		"\3\2\2\2\u0f92\u0f93\7\u008a\2\2\u0f93\u0185\3\2\2\2\u0f94\u0fb1\7\u0090"+
		"\2\2\u0f95\u0fb1\7\u0092\2\2\u0f96\u0fb1\7\u0094\2\2\u0f97\u0fb1\7\u0095"+
		"\2\2\u0f98\u0fb1\7\u0096\2\2\u0f99\u0fb1\5\u018a\u00c6\2\u0f9a\u0f9b\7"+
		"\u0090\2\2\u0f9b\u0f9c\7k\2\2\u0f9c\u0fb1\7\u0092\2\2\u0f9d\u0f9e\7\u0094"+
		"\2\2\u0f9e\u0f9f\7k\2\2\u0f9f\u0fb1\7\u0095\2\2\u0fa0\u0fa1\7\u0094\2"+
		"\2\u0fa1\u0fa2\7k\2\2\u0fa2\u0fb1\7\u0096\2\2\u0fa3\u0fa4\7\u0094\2\2"+
		"\u0fa4\u0fa5\7k\2\2\u0fa5\u0fb1\5\u018a\u00c6\2\u0fa6\u0fa7\7\u0095\2"+
		"\2\u0fa7\u0fa8\7k\2\2\u0fa8\u0fb1\7\u0096\2\2\u0fa9\u0faa\7\u0095\2\2"+
		"\u0faa\u0fab\7k\2\2\u0fab\u0fb1\5\u018a\u00c6\2\u0fac\u0fad\7\u0096\2"+
		"\2\u0fad\u0fae\7k\2\2\u0fae\u0fb1\5\u018a\u00c6\2\u0faf\u0fb1\3\2\2\2"+
		"\u0fb0\u0f94\3\2\2\2\u0fb0\u0f95\3\2\2\2\u0fb0\u0f96\3\2\2\2\u0fb0\u0f97"+
		"\3\2\2\2\u0fb0\u0f98\3\2\2\2\u0fb0\u0f99\3\2\2\2\u0fb0\u0f9a\3\2\2\2\u0fb0"+
		"\u0f9d\3\2\2\2\u0fb0\u0fa0\3\2\2\2\u0fb0\u0fa3\3\2\2\2\u0fb0\u0fa6\3\2"+
		"\2\2\u0fb0\u0fa9\3\2\2\2\u0fb0\u0fac\3\2\2\2\u0fb0\u0faf\3\2\2\2\u0fb1"+
		"\u0187\3\2\2\2\u0fb2\u0fbc\b\u00c5\1\2\u0fb3\u0fb4\f\5\2\2\u0fb4\u0fb5"+
		"\7&\2\2\u0fb5\u0fbb\7\'\2\2\u0fb6\u0fb7\f\4\2\2\u0fb7\u0fb8\7&\2\2\u0fb8"+
		"\u0fb9\7\u0225\2\2\u0fb9\u0fbb\7\'\2\2\u0fba\u0fb3\3\2\2\2\u0fba\u0fb6"+
		"\3\2\2\2\u0fbb\u0fbe\3\2\2\2\u0fbc\u0fba\3\2\2\2\u0fbc\u0fbd\3\2\2\2\u0fbd"+
		"\u0189\3\2\2\2\u0fbe\u0fbc\3\2\2\2\u0fbf\u0fc5\7\u0097\2\2\u0fc0\u0fc1"+
		"\7\u0097\2\2\u0fc1\u0fc2\7\"\2\2\u0fc2\u0fc3\7\u0225\2\2\u0fc3\u0fc5\7"+
		"#\2\2\u0fc4\u0fbf\3\2\2\2\u0fc4\u0fc0\3\2\2\2\u0fc5\u018b\3\2\2\2\u0fc6"+
		"\u0fc7\t\22\2\2\u0fc7\u018d\3\2\2\2\u0fc8\u0fc9\5\u00f2z\2\u0fc9\u0fca"+
		"\7Z\2\2\u0fca\u0fcb\5\u015e\u00b0\2\u0fcb\u0fd0\3\2\2\2\u0fcc\u0fcd\7"+
		"Z\2\2\u0fcd\u0fd0\5\u015e\u00b0\2\u0fce\u0fd0\5\u015e\u00b0\2\u0fcf\u0fc8"+
		"\3\2\2\2\u0fcf\u0fcc\3\2\2\2\u0fcf\u0fce\3\2\2\2\u0fd0\u018f\3\2\2\2\u0fd1"+
		"\u0fd2\5\u00f2z\2\u0fd2\u0fd3\5\u0192\u00ca\2\u0fd3\u0fd4\5\u0194\u00cb"+
		"\2\u0fd4\u0fd5\5\u0196\u00cc\2\u0fd5\u0fdb\3\2\2\2\u0fd6\u0fd7\5\u00f2"+
		"z\2\u0fd7\u0fd8\5\u0192\u00ca\2\u0fd8\u0fd9\5\u0194\u00cb\2\u0fd9\u0fdb"+
		"\3\2\2\2\u0fda\u0fd1\3\2\2\2\u0fda\u0fd6\3\2\2\2\u0fdb\u0191\3\2\2\2\u0fdc"+
		"\u0fdd\7\u0196\2\2\u0fdd\u0fde\5\u00f2z\2\u0fde\u0193\3\2\2\2\u0fdf\u0fe0"+
		"\7Z\2\2\u0fe0\u0fe1\5\u00f2z\2\u0fe1\u0195\3\2\2\2\u0fe2\u0fe3\7j\2\2"+
		"\u0fe3\u0fe4\5\u00f2z\2\u0fe4\u0197\3\2\2\2\u0fe5\u0fe6\5\u00f4{\2\u0fe6"+
		"\u0fe7\7u\2\2\u0fe7\u0fe8\5\u00f4{\2\u0fe8\u0feb\3\2\2\2\u0fe9\u0feb\3"+
		"\2\2\2\u0fea\u0fe5\3\2\2\2\u0fea\u0fe9\3\2\2\2\u0feb\u0199\3\2\2\2\u0fec"+
		"\u0fed\5\u00f2z\2\u0fed\u0fee\5\u0194\u00cb\2\u0fee\u0fef\5\u0196\u00cc"+
		"\2\u0fef\u0ffd\3\2\2\2\u0ff0\u0ff1\5\u00f2z\2\u0ff1\u0ff2\5\u0196\u00cc"+
		"\2\u0ff2\u0ff3\5\u0194\u00cb\2\u0ff3\u0ffd\3\2\2\2\u0ff4\u0ff5\5\u00f2"+
		"z\2\u0ff5\u0ff6\5\u0194\u00cb\2\u0ff6\u0ffd\3\2\2\2\u0ff7\u0ff8\5\u00f2"+
		"z\2\u0ff8\u0ff9\5\u0196\u00cc\2\u0ff9\u0ffd\3\2\2\2\u0ffa\u0ffd\5\u015e"+
		"\u00b0\2\u0ffb\u0ffd\3\2\2\2\u0ffc\u0fec\3\2\2\2\u0ffc\u0ff0\3\2\2\2\u0ffc"+
		"\u0ff4\3\2\2\2\u0ffc\u0ff7\3\2\2\2\u0ffc\u0ffa\3\2\2\2\u0ffc\u0ffb\3\2"+
		"\2\2\u0ffd\u019b\3\2\2\2\u0ffe\u0fff\7\u0179\2\2\u0fff\u1000\7\"\2\2\u1000"+
		"\u1001\5\u019e\u00d0\2\u1001\u1002\7#\2\2\u1002\u019d\3\2\2\2\u1003\u1008"+
		"\5\u01a0\u00d1\2\u1004\u1005\7(\2\2\u1005\u1007\5\u01a0\u00d1\2\u1006"+
		"\u1004\3\2\2\2\u1007\u100a\3\2\2\2\u1008\u1006\3\2\2\2\u1008\u1009\3\2"+
		"\2\2\u1009\u019f\3\2\2\2\u100a\u1008\3\2\2\2\u100b\u100c\5\u00f2z\2\u100c"+
		"\u100d\7e\2\2\u100d\u100e\5\u00ceh\2\u100e\u1011\3\2\2\2\u100f\u1011\5"+
		"\u00f2z\2\u1010\u100b\3\2\2\2\u1010\u100f\3\2\2\2\u1011\u01a1\3\2\2\2"+
		"\u1012\u1013\7\u017b\2\2\u1013\u1022\5\u00f6|\2\u1014\u1015\7\u017b\2"+
		"\2\u1015\u1016\5\u00f6|\2\u1016\u1017\5\u01a4\u00d3\2\u1017\u1022\3\2"+
		"\2\2\u1018\u1019\7\u017b\2\2\u1019\u101a\5\u01a4\u00d3\2\u101a\u101b\5"+
		"\u00f6|\2\u101b\u1022\3\2\2\2\u101c\u101d\7\u017b\2\2\u101d\u101e\5\u01a4"+
		"\u00d3\2\u101e\u101f\5\u00f6|\2\u101f\u1020\5\u01a4\u00d3\2\u1020\u1022"+
		"\3\2\2\2\u1021\u1012\3\2\2\2\u1021\u1014\3\2\2\2\u1021\u1018\3\2\2\2\u1021"+
		"\u101c\3\2\2\2\u1022\u01a3\3\2\2\2\u1023\u1024\7{\2\2\u1024\u1028\7\u017a"+
		"\2\2\u1025\u1026\7{\2\2\u1026\u1028\7\u00bc\2\2\u1027\u1023\3\2\2\2\u1027"+
		"\u1025\3\2\2\2\u1028\u01a5\3\2\2\2\u1029\u102a\t\23\2\2\u102a\u01a7\3"+
		"\2\2\2\u102b\u102c\7\u009f\2\2\u102c\u1031\7\u0194\2\2\u102d\u102e\7\u0193"+
		"\2\2\u102e\u1031\7\u0194\2\2\u102f\u1031\3\2\2\2\u1030\u102b\3\2\2\2\u1030"+
		"\u102d\3\2\2\2\u1030\u102f\3\2\2\2\u1031\u01a9\3\2\2\2\u1032\u1033\7\u017c"+
		"\2\2\u1033\u1038\5\u00f2z\2\u1034\u1035\7\u017c\2\2\u1035\u1036\7\u00de"+
		"\2\2\u1036\u1038\7\u00bc\2\2\u1037\u1032\3\2\2\2\u1037\u1034\3\2\2\2\u1038"+
		"\u01ab\3\2\2\2\u1039\u103a\7(\2\2\u103a\u103b\7\u017e\2\2\u103b\u1044"+
		"\7\u017d\2\2\u103c\u103d\7(\2\2\u103d\u103e\7\u017e\2\2\u103e\u1044\7"+
		"\u00de\2\2\u103f\u1040\7(\2\2\u1040\u1041\7\u017e\2\2\u1041\u1042\7\u00de"+
		"\2\2\u1042\u1044\7\u00bc\2\2\u1043\u1039\3\2\2\2\u1043\u103c\3\2\2\2\u1043"+
		"\u103f\3\2\2\2\u1044\u01ad\3\2\2\2\u1045\u1046\5\u0154\u00ab\2\u1046\u1047"+
		"\5\u01b2\u00da\2\u1047\u01af\3\2\2\2\u1048\u104d\5\u01ae\u00d8\2\u1049"+
		"\u104a\7(\2\2\u104a\u104c\5\u01ae\u00d8\2\u104b\u1049\3\2\2\2\u104c\u104f"+
		"\3\2\2\2\u104d\u104b\3\2\2\2\u104d\u104e\3\2\2\2\u104e\u01b1\3\2\2\2\u104f"+
		"\u104d\3\2\2\2\u1050\u1051\7e\2\2\u1051\u1052\7\"\2\2\u1052\u1053\5\u01b4"+
		"\u00db\2\u1053\u1054\7#\2\2\u1054\u01b3\3\2\2\2\u1055\u105a\5\u01b6\u00dc"+
		"\2\u1056\u1057\7(\2\2\u1057\u1059\5\u01b6\u00dc\2\u1058\u1056\3\2\2\2"+
		"\u1059\u105c\3\2\2\2\u105a\u1058\3\2\2\2\u105a\u105b\3\2\2\2\u105b\u01b5"+
		"\3\2\2\2\u105c\u105a\3\2\2\2\u105d\u105e\5\u013a\u009e\2\u105e\u1060\5"+
		"\u015a\u00ae\2\u105f\u1061\5\u01b8\u00dd\2\u1060\u105f\3\2\2\2\u1060\u1061"+
		"\3\2\2\2\u1061\u01b7\3\2\2\2\u1062\u1064\7\u00ec\2\2\u1063\u1065\7\32"+
		"\2\2\u1064\u1063\3\2\2\2\u1064\u1065\3\2\2\2\u1065\u1066\3\2\2\2\u1066"+
		"\u1067\5\u01ba\u00de\2\u1067\u01b9\3\2\2\2\u1068\u106d\5\u013a\u009e\2"+
		"\u1069\u106a\5\u013a\u009e\2\u106a\u106b\5\u0178\u00bd\2\u106b\u106d\3"+
		"\2\2\2\u106c\u1068\3\2\2\2\u106c\u1069\3\2\2\2\u106d\u01bb\3\2\2\2\u106e"+
		"\u106f\7e\2\2\u106f\u1070\5\u013a\u009e\2\u1070\u1071\7\"\2\2\u1071\u1072"+
		"\5\u01be\u00e0\2\u1072\u1073\7#\2\2\u1073\u107d\3\2\2\2\u1074\u1075\7"+
		"e\2\2\u1075\u107d\5\u013a\u009e\2\u1076\u1077\5\u013a\u009e\2\u1077\u1078"+
		"\7\"\2\2\u1078\u1079\5\u01be\u00e0\2\u1079\u107a\7#\2\2\u107a\u107d\3"+
		"\2\2\2\u107b\u107d\5\u013a\u009e\2\u107c\u106e\3\2\2\2\u107c\u1074\3\2"+
		"\2\2\u107c\u1076\3\2\2\2\u107c\u107b\3\2\2\2\u107d\u01bd\3\2\2\2\u107e"+
		"\u107f\b\u00e0\1\2\u107f\u1080\5\u00e0q\2\u1080\u1086\3\2\2\2\u1081\u1082"+
		"\f\3\2\2\u1082\u1083\7(\2\2\u1083\u1085\5\u00e0q\2\u1084\u1081\3\2\2\2"+
		"\u1085\u1088\3\2\2\2\u1086\u1084\3\2\2\2\u1086\u1087\3\2\2\2\u1087\u01bf"+
		"\3\2\2\2\u1088\u1086\3\2\2\2\u1089\u109b\5\u01bc\u00df\2\u108a\u108b\7"+
		"e\2\2\u108b\u108c\7\"\2\2\u108c\u108d\5\u01b4\u00db\2\u108d\u108e\7#\2"+
		"\2\u108e\u109b\3\2\2\2\u108f\u1090\7e\2\2\u1090\u1091\5\u013a\u009e\2"+
		"\u1091\u1092\7\"\2\2\u1092\u1093\5\u01b4\u00db\2\u1093\u1094\7#\2\2\u1094"+
		"\u109b\3\2\2\2\u1095\u1096\5\u013a\u009e\2\u1096\u1097\7\"\2\2\u1097\u1098"+
		"\5\u01b4\u00db\2\u1098\u1099\7#\2\2\u1099\u109b\3\2\2\2\u109a\u1089\3"+
		"\2\2\2\u109a\u108a\3\2\2\2\u109a\u108f\3\2\2\2\u109a\u1095\3\2\2\2\u109b"+
		"\u01c1\3\2\2\2\u109c\u109d\7\u0164\2\2\u109d\u109e\5\u0136\u009c\2\u109e"+
		"\u109f\7\"\2\2\u109f\u10a0\5\u015e\u00b0\2\u10a0\u10a2\7#\2\2\u10a1\u10a3"+
		"\5\u01c4\u00e3\2\u10a2\u10a1\3\2\2\2\u10a2\u10a3\3\2\2\2\u10a3\u01c3\3"+
		"\2\2\2\u10a4\u10a5\7\u00b4\2\2\u10a5\u10a6\7\"\2\2\u10a6\u10a7\5\u00f2"+
		"z\2\u10a7\u10a8\7#\2\2\u10a8\u01c5\3\2\2\2\u10a9\u10aa\t\24\2\2\u10aa"+
		"\u01c7\3\2\2\2\u10ab\u10ac\7y\2\2\u10ac\u10ad\7{\2\2\u10ad\u10ae\5\u01ca"+
		"\u00e6\2\u10ae\u01c9\3\2\2\2\u10af\u10b4\5\u01cc\u00e7\2\u10b0\u10b1\7"+
		"(\2\2\u10b1\u10b3\5\u01cc\u00e7\2\u10b2\u10b0\3\2\2\2\u10b3\u10b6\3\2"+
		"\2\2\u10b4\u10b2\3\2\2\2\u10b4\u10b5\3\2\2\2\u10b5\u01cb\3\2\2\2\u10b6"+
		"\u10b4\3\2\2\2\u10b7\u10b8\5\u00f2z\2\u10b8\u10b9\7c\2\2\u10b9\u10bb\5"+
		"\u0118\u008d\2\u10ba\u10bc\5\u01ce\u00e8\2\u10bb\u10ba\3\2\2\2\u10bb\u10bc"+
		"\3\2\2\2\u10bc\u10c5\3\2\2\2\u10bd\u10bf\5\u00f2z\2\u10be\u10c0\5\u011a"+
		"\u008e\2\u10bf\u10be\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c2\3\2\2\2\u10c1"+
		"\u10c3\5\u01ce\u00e8\2\u10c2\u10c1\3\2\2\2\u10c2\u10c3\3\2\2\2\u10c3\u10c5"+
		"\3\2\2\2\u10c4\u10b7\3\2\2\2\u10c4\u10bd\3\2\2\2\u10c5\u01cd\3\2\2\2\u10c6"+
		"\u10c7\7\u0116\2\2\u10c7\u10cb\7\u0100\2\2\u10c8\u10c9\7\u0116\2\2\u10c9"+
		"\u10cb\7\u010f\2\2\u10ca\u10c6\3\2\2\2\u10ca\u10c8\3\2\2\2\u10cb\u01cf"+
		"\3\2\2\2\u10cc\u10d4\7T\2\2\u10cd\u10ce\7T\2\2\u10ce\u10cf\7f\2\2\u10cf"+
		"\u10d0\7\"\2\2\u10d0\u10d1\5\u015e\u00b0\2\u10d1\u10d2\7#\2\2\u10d2\u10d4"+
		"\3\2\2\2\u10d3\u10cc\3\2\2\2\u10d3\u10cd\3\2\2\2\u10d4\u01d1\3\2\2\2\u10d5"+
		"\u10d6\7T\2\2\u10d6\u01d3\3\2\2\2\u10d7\u10d8\7\u011a\2\2\u10d8\u10dc"+
		"\5z>\2\u10d9\u10da\7\u011a\2\2\u10da\u10dc\5\u013a\u009e\2\u10db\u10d7"+
		"\3\2\2\2\u10db\u10d9\3\2\2\2\u10dc\u01d5\3\2\2\2\u10dd\u10de\5\u013a\u009e"+
		"\2\u10de\u01d7\3\2\2\2\u10df\u10e4\5\u01dc\u00ef\2\u10e0\u10e1\7(\2\2"+
		"\u10e1\u10e3\5\u01dc\u00ef\2\u10e2\u10e0\3\2\2\2\u10e3\u10e6\3\2\2\2\u10e4"+
		"\u10e2\3\2\2\2\u10e4\u10e5\3\2\2\2\u10e5\u01d9\3\2\2\2\u10e6\u10e4\3\2"+
		"\2\2\u10e7\u10e9\5\u01de\u00f0\2\u10e8\u10e7\3\2\2\2\u10e8\u10e9\3\2\2"+
		"\2\u10e9\u10ea\3\2\2\2\u10ea\u10ec\5\u01e0\u00f1\2\u10eb\u10ed\5\u011a"+
		"\u008e\2\u10ec\u10eb\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed\u10ef\3\2\2\2\u10ee"+
		"\u10f0\5\u01ce\u00e8\2\u10ef\u10ee\3\2\2\2\u10ef\u10f0\3\2\2\2\u10f0\u10fd"+
		"\3\2\2\2\u10f1\u10f3\5\u01de\u00f0\2\u10f2\u10f1\3\2\2\2\u10f2\u10f3\3"+
		"\2\2\2\u10f3\u10f4\3\2\2\2\u10f4\u10f5\5\u01ba\u00de\2\u10f5\u10f7\5\u01e2"+
		"\u00f2\2\u10f6\u10f8\5\u011a\u008e\2\u10f7\u10f6\3\2\2\2\u10f7\u10f8\3"+
		"\2\2\2\u10f8\u10fa\3\2\2\2\u10f9\u10fb\5\u01ce\u00e8\2\u10fa\u10f9\3\2"+
		"\2\2\u10fa\u10fb\3\2\2\2\u10fb\u10fd\3\2\2\2\u10fc\u10e8\3\2\2\2\u10fc"+
		"\u10f2\3\2\2\2\u10fd\u01db\3\2\2\2\u10fe\u10ff\5\u013a\u009e\2\u10ff\u1100"+
		"\5\u01da\u00ee\2\u1100\u110a\3\2\2\2\u1101\u1102\5\u0154\u00ab\2\u1102"+
		"\u1103\5\u01da\u00ee\2\u1103\u110a\3\2\2\2\u1104\u1105\7\"\2\2\u1105\u1106"+
		"\5\u00f2z\2\u1106\u1107\7#\2\2\u1107\u1108\5\u01da\u00ee\2\u1108\u110a"+
		"\3\2\2\2\u1109\u10fe\3\2\2\2\u1109\u1101\3\2\2\2\u1109\u1104\3\2\2\2\u110a"+
		"\u01dd\3\2\2\2\u110b\u110c\7\u00ec\2\2\u110c\u110d\5\u01ba\u00de\2\u110d"+
		"\u01df\3\2\2\2\u110e\u1111\5\u01ba\u00de\2\u110f\u1111\3\2\2\2\u1110\u110e"+
		"\3\2\2\2\u1110\u110f\3\2\2\2\u1111\u01e1\3\2\2\2\u1112\u1113\7\"\2\2\u1113"+
		"\u1114\5\u01e4\u00f3\2\u1114\u1115\7#\2\2\u1115\u01e3\3\2\2\2\u1116\u111b"+
		"\5\u01e6\u00f4\2\u1117\u1118\7(\2\2\u1118\u111a\5\u01e6\u00f4\2\u1119"+
		"\u1117\3\2\2\2\u111a\u111d\3\2\2\2\u111b\u1119\3\2\2\2\u111b\u111c\3\2"+
		"\2\2\u111c\u01e5\3\2\2\2\u111d\u111b\3\2\2\2\u111e\u111f\5\u0088E\2\u111f"+
		"\u1120\7\32\2\2\u1120\u1121\5\u01e8\u00f5\2\u1121\u112e\3\2\2\2\u1122"+
		"\u112e\5\u0088E\2\u1123\u1124\5\u0088E\2\u1124\u1125\7\26\2\2\u1125\u1126"+
		"\5\u0088E\2\u1126\u1127\7\32\2\2\u1127\u1128\5\u01e8\u00f5\2\u1128\u112e"+
		"\3\2\2\2\u1129\u112a\5\u0088E\2\u112a\u112b\7\26\2\2\u112b\u112c\5\u0088"+
		"E\2\u112c\u112e\3\2\2\2\u112d\u111e\3\2\2\2\u112d\u1122\3\2\2\2\u112d"+
		"\u1123\3\2\2\2\u112d\u1129\3\2\2\2\u112e\u01e7\3\2\2\2\u112f\u1136\5\u01ea"+
		"\u00f6\2\u1130\u1136\5\u00c8e\2\u1131\u1136\5\u0118\u008d\2\u1132\u1136"+
		"\7\u0225\2\2\u1133\u1136\7\u0224\2\2\u1134\u1136\7\u0199\2\2\u1135\u112f"+
		"\3\2\2\2\u1135\u1130\3\2\2\2\u1135\u1131\3\2\2\2\u1135\u1132\3\2\2\2\u1135"+
		"\u1133\3\2\2\2\u1135\u1134\3\2\2\2\u1136\u01e9\3\2\2\2\u1137\u1144\5\u015a"+
		"\u00ae\2\u1138\u1139\5\u013c\u009f\2\u1139\u113a\5\u0178\u00bd\2\u113a"+
		"\u113b\7\17\2\2\u113b\u113c\7\u00af\2\2\u113c\u1144\3\2\2\2\u113d\u113e"+
		"\7\u0174\2\2\u113e\u113f\5\u013c\u009f\2\u113f\u1140\5\u0178\u00bd\2\u1140"+
		"\u1141\7\17\2\2\u1141\u1142\7\u00af\2\2\u1142\u1144\3\2\2\2\u1143\u1137"+
		"\3\2\2\2\u1143\u1138\3\2\2\2\u1143\u113d\3\2\2\2\u1144\u01eb\3\2\2\2\u1145"+
		"\u1147\5\u01ee\u00f8\2\u1146\u1148\5\u01f0\u00f9\2\u1147\u1146\3\2\2\2"+
		"\u1147\u1148\3\2\2\2\u1148\u114a\3\2\2\2\u1149\u114b\5\u01f2\u00fa\2\u114a"+
		"\u1149\3\2\2\2\u114a\u114b\3\2\2\2\u114b\u114d\3\2\2\2\u114c\u114e\5\u01b8"+
		"\u00dd\2\u114d\u114c\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u1161\3\2\2\2\u114f"+
		"\u1150\5\u01ee\u00f8\2\u1150\u1151\7\"\2\2\u1151\u1156\7\u0224\2\2\u1152"+
		"\u1153\7(\2\2\u1153\u1155\7\u0224\2\2\u1154\u1152\3\2\2\2\u1155\u1158"+
		"\3\2\2\2\u1156\u1154\3\2\2\2\u1156\u1157\3\2\2\2\u1157\u1159\3\2\2\2\u1158"+
		"\u1156\3\2\2\2\u1159\u115b\7#\2\2\u115a\u115c\5\u01f2\u00fa\2\u115b\u115a"+
		"\3\2\2\2\u115b\u115c\3\2\2\2\u115c\u115e\3\2\2\2\u115d\u115f\5\u01b8\u00dd"+
		"\2\u115e\u115d\3\2\2\2\u115e\u115f\3\2\2\2\u115f\u1161\3\2\2\2\u1160\u1145"+
		"\3\2\2\2\u1160\u114f\3\2\2\2\u1161\u01ed\3\2\2\2\u1162\u119d\7\u013f\2"+
		"\2\u1163\u119d\7\u0140\2\2\u1164\u119d\7\u0141\2\2\u1165\u119d\7\u0142"+
		"\2\2\u1166\u119d\7\u00b0\2\2\u1167\u119d\7\u00ac\2\2\u1168\u119d\7\u00b1"+
		"\2\2\u1169\u119d\7\u00ae\2\2\u116a\u119d\7\u00b2\2\2\u116b\u119d\7\u00ad"+
		"\2\2\u116c\u119d\7\u0143\2\2\u116d\u119d\7\u0144\2\2\u116e\u119d\7\u0145"+
		"\2\2\u116f\u1170\7\u0086\2\2\u1170\u119d\7K\2\2\u1171\u119d\7\u0146\2"+
		"\2\u1172\u119d\7\u0147\2\2\u1173\u119d\7\u0148\2\2\u1174\u119d\7\u0149"+
		"\2\2\u1175\u119d\7\u014a\2\2\u1176\u119d\7\u0088\2\2\u1177\u119d\7\u0087"+
		"\2\2\u1178\u119d\7\u00b3\2\2\u1179\u119d\7\u00a9\2\2\u117a\u119d\7\u014b"+
		"\2\2\u117b\u119d\7\u008d\2\2\u117c\u119d\7\u008b\2\2\u117d\u119d\7\u008c"+
		"\2\2\u117e\u119d\7\u008a\2\2\u117f\u119d\7\u0085\2\2\u1180\u119d\7\u014c"+
		"\2\2\u1181\u119d\7\u014d\2\2\u1182\u119d\7\u014e\2\2\u1183\u119d\7\u014f"+
		"\2\2\u1184\u119d\7\u0150\2\2\u1185\u119d\7\u0151\2\2\u1186\u119d\7\u0152"+
		"\2\2\u1187\u119d\7\u0153\2\2\u1188\u119d\7\u0154\2\2\u1189\u119d\7\u0155"+
		"\2\2\u118a\u119d\7\u0156\2\2\u118b\u119d\7\u0157\2\2\u118c\u119d\7\u0158"+
		"\2\2\u118d\u119d\7\u0159\2\2\u118e\u119d\7\u015a\2\2\u118f\u119d\7\u015b"+
		"\2\2\u1190\u119d\7\u015c\2\2\u1191\u119d\7\u015d\2\2\u1192\u119d\7\u015e"+
		"\2\2\u1193\u119d\7\u015f\2\2\u1194\u119d\7\u0160\2\2\u1195\u119d\7\u0161"+
		"\2\2\u1196\u119d\7\u0162\2\2\u1197\u119d\7\u0163\2\2\u1198\u119d\7\u0089"+
		"\2\2\u1199\u119d\5\u00ceh\2\u119a\u119d\5\u016a\u00b6\2\u119b\u119d\5"+
		"\u015a\u00ae\2\u119c\u1162\3\2\2\2\u119c\u1163\3\2\2\2\u119c\u1164\3\2"+
		"\2\2\u119c\u1165\3\2\2\2\u119c\u1166\3\2\2\2\u119c\u1167\3\2\2\2\u119c"+
		"\u1168\3\2\2\2\u119c\u1169\3\2\2\2\u119c\u116a\3\2\2\2\u119c\u116b\3\2"+
		"\2\2\u119c\u116c\3\2\2\2\u119c\u116d\3\2\2\2\u119c\u116e\3\2\2\2\u119c"+
		"\u116f\3\2\2\2\u119c\u1171\3\2\2\2\u119c\u1172\3\2\2\2\u119c\u1173\3\2"+
		"\2\2\u119c\u1174\3\2\2\2\u119c\u1175\3\2\2\2\u119c\u1176\3\2\2\2\u119c"+
		"\u1177\3\2\2\2\u119c\u1178\3\2\2\2\u119c\u1179\3\2\2\2\u119c\u117a\3\2"+
		"\2\2\u119c\u117b\3\2\2\2\u119c\u117c\3\2\2\2\u119c\u117d\3\2\2\2\u119c"+
		"\u117e\3\2\2\2\u119c\u117f\3\2\2\2\u119c\u1180\3\2\2\2\u119c\u1181\3\2"+
		"\2\2\u119c\u1182\3\2\2\2\u119c\u1183\3\2\2\2\u119c\u1184\3\2\2\2\u119c"+
		"\u1185\3\2\2\2\u119c\u1186\3\2\2\2\u119c\u1187\3\2\2\2\u119c\u1188\3\2"+
		"\2\2\u119c\u1189\3\2\2\2\u119c\u118a\3\2\2\2\u119c\u118b\3\2\2\2\u119c"+
		"\u118c\3\2\2\2\u119c\u118d\3\2\2\2\u119c\u118e\3\2\2\2\u119c\u118f\3\2"+
		"\2\2\u119c\u1190\3\2\2\2\u119c\u1191\3\2\2\2\u119c\u1192\3\2\2\2\u119c"+
		"\u1193\3\2\2\2\u119c\u1194\3\2\2\2\u119c\u1195\3\2\2\2\u119c\u1196\3\2"+
		"\2\2\u119c\u1197\3\2\2\2\u119c\u1198\3\2\2\2\u119c\u1199\3\2\2\2\u119c"+
		"\u119a\3\2\2\2\u119c\u119b\3\2\2\2\u119d\u01ef\3\2\2\2\u119e\u119f\7\""+
		"\2\2\u119f\u11a2\7\u0225\2\2\u11a0\u11a1\7(\2\2\u11a1\u11a3\7\u0225\2"+
		"\2\u11a2\u11a0\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4\u11a5"+
		"\7#\2\2\u11a5\u01f1\3\2\2\2\u11a6\u11a7\t\25\2\2\u11a7\u11a9\7A\2\2\u11a8"+
		"\u11aa\7\32\2\2\u11a9\u11a8\3\2\2\2\u11a9\u11aa\3\2\2\2\u11aa\u11ab\3"+
		"\2\2\2\u11ab\u11ac\5\u01f4\u00fb\2\u11ac\u01f3\3\2\2\2\u11ad\u11b0\5\u00ce"+
		"h\2\u11ae\u11af\7\26\2\2\u11af\u11b1\5\u00ceh\2\u11b0\u11ae\3\2\2\2\u11b0"+
		"\u11b1\3\2\2\2\u11b1\u01f5\3\2\2\2\u11b2\u11b7\5\u01f4\u00fb\2\u11b3\u11b4"+
		"\7(\2\2\u11b4\u11b6\5\u01f4\u00fb\2\u11b5\u11b3\3\2\2\2\u11b6\u11b9\3"+
		"\2\2\2\u11b7\u11b5\3\2\2\2\u11b7\u11b8\3\2\2\2\u11b8\u01f7\3\2\2\2\u11b9"+
		"\u11b7\3\2\2\2\u11ba\u11c0\7\u0225\2\2\u11bb\u11bc\7\21\2\2\u11bc\u11c0"+
		"\7\u0225\2\2\u11bd\u11be\7\22\2\2\u11be\u11c0\7\u0225\2\2\u11bf\u11ba"+
		"\3\2\2\2\u11bf\u11bb\3\2\2\2\u11bf\u11bd\3\2\2\2\u11c0\u01f9\3\2\2\2\u11c1"+
		"\u11c7\7q\2\2\u11c2\u11c7\7r\2\2\u11c3\u11c7\7f\2\2\u11c4\u11c7\5\u01fc"+
		"\u00ff\2\u11c5\u11c7\7\u0224\2\2\u11c6\u11c1\3\2\2\2\u11c6\u11c2\3\2\2"+
		"\2\u11c6\u11c3\3\2\2\2\u11c6\u11c4\3\2\2\2\u11c6\u11c5\3\2\2\2\u11c7\u01fb"+
		"\3\2\2\2\u11c8\u11cd\5\u00ceh\2\u11c9\u11cd\5\u00d4k\2\u11ca\u11cd\5\u01fe"+
		"\u0100\2\u11cb\u11cd\5\u00d6l\2\u11cc\u11c8\3\2\2\2\u11cc\u11c9\3\2\2"+
		"\2\u11cc\u11ca\3\2\2\2\u11cc\u11cb\3\2\2\2\u11cd\u01fd\3\2\2\2\u11ce\u11cf"+
		"\t\26\2\2\u11cf\u01ff\3\2\2\2\u11d0\u11d1\5\u013a\u009e\2\u11d1\u0201"+
		"\3\2\2\2\u11d2\u11d7\5\u00ceh\2\u11d3\u11d7\5\u01fc\u00ff\2\u11d4\u11d7"+
		"\7\u00a2\2\2\u11d5\u11d7\7\u012b\2\2\u11d6\u11d2\3\2\2\2\u11d6\u11d3\3"+
		"\2\2\2\u11d6\u11d4\3\2\2\2\u11d6\u11d5\3\2\2\2\u11d7\u0203\3\2\2\2\u11d8"+
		"\u11d9\b\u0103\1\2\u11d9\u11da\5\u013a\u009e\2\u11da\u11e0\3\2\2\2\u11db"+
		"\u11dc\f\3\2\2\u11dc\u11dd\7\26\2\2\u11dd\u11df\5\u013a\u009e\2\u11de"+
		"\u11db\3\2\2\2\u11df\u11e2\3\2\2\2\u11e0\u11de\3\2\2\2\u11e0\u11e1\3\2"+
		"\2\2\u11e1\u0205\3\2\2\2\u11e2\u11e0\3\2\2\2\u11e3\u11e8\5\u0208\u0105"+
		"\2\u11e4\u11e5\7(\2\2\u11e5\u11e7\5\u0208\u0105\2\u11e6\u11e4\3\2\2\2"+
		"\u11e7\u11ea\3\2\2\2\u11e8\u11e6\3\2\2\2\u11e8\u11e9\3\2\2\2\u11e9\u0207"+
		"\3\2\2\2\u11ea\u11e8\3\2\2\2\u11eb\u11ee\5\u01fa\u00fe\2\u11ec\u11ee\5"+
		"\u020c\u0107\2\u11ed\u11eb\3\2\2\2\u11ed\u11ec\3\2\2\2\u11ee\u0209\3\2"+
		"\2\2\u11ef\u11fd\7\u0224\2\2\u11f0\u11fd\5\u00ceh\2\u11f1\u11f2\7\u008a"+
		"\2\2\u11f2\u11f3\7\u0224\2\2\u11f3\u11fd\5\u0186\u00c4\2\u11f4\u11f5\7"+
		"\u008a\2\2\u11f5\u11f6\7\"\2\2\u11f6\u11f7\7\u0225\2\2\u11f7\u11f8\7#"+
		"\2\2\u11f8\u11fd\7\u0224\2\2\u11f9\u11fd\5\u020c\u0107\2\u11fa\u11fd\7"+
		"\u0099\2\2\u11fb\u11fd\7\u00a5\2\2\u11fc\u11ef\3\2\2\2\u11fc\u11f0\3\2"+
		"\2\2\u11fc\u11f1\3\2\2\2\u11fc\u11f4\3\2\2\2\u11fc\u11f9\3\2\2\2\u11fc"+
		"\u11fa\3\2\2\2\u11fc\u11fb\3\2\2\2\u11fd\u020b\3\2\2\2\u11fe\u1204\7\u0225"+
		"\2\2\u11ff\u1200\7\21\2\2\u1200\u1204\7\u0225\2\2\u1201\u1202\7\22\2\2"+
		"\u1202\u1204\7\u0225\2\2\u1203\u11fe\3\2\2\2\u1203\u11ff\3\2\2\2\u1203"+
		"\u1201\3\2\2\2\u1204\u020d\3\2\2\2\u1205\u1206\7\u00e1\2\2\u1206\u120d"+
		"\7\u020f\2\2\u1207\u1208\7\u00e1\2\2\u1208\u120d\7\u01c3\2\2\u1209\u120a"+
		"\7\u00b4\2\2\u120a\u120d\7\u00e1\2\2\u120b\u120d\7\u0204\2\2\u120c\u1205"+
		"\3\2\2\2\u120c\u1207\3\2\2\2\u120c\u1209\3\2\2\2\u120c\u120b\3\2\2\2\u120d"+
		"\u020f\3\2\2\2\u120e\u120f\5\u013a\u009e\2\u120f\u1211\5\u015a\u00ae\2"+
		"\u1210\u1212\5\u023e\u0120\2\u1211\u1210\3\2\2\2\u1211\u1212\3\2\2\2\u1212"+
		"\u1213\3\2\2\2\u1213\u1214\5\u0212\u010a\2\u1214\u0211\3\2\2\2\u1215\u1217"+
		"\5\u0214\u010b\2\u1216\u1215\3\2\2\2\u1217\u121a\3\2\2\2\u1218\u1216\3"+
		"\2\2\2\u1218\u1219\3\2\2\2\u1219\u0213\3\2\2\2\u121a\u1218\3\2\2\2\u121b"+
		"\u121c\7E\2\2\u121c\u121d\5\u00e0q\2\u121d\u121e\5\u0218\u010d\2\u121e"+
		"\u1224\3\2\2\2\u121f\u1224\5\u0218\u010d\2\u1220\u1224\5\u0216\u010c\2"+
		"\u1221\u1222\7\u00ec\2\2\u1222\u1224\5\u01ba\u00de\2\u1223\u121b\3\2\2"+
		"\2\u1223\u121f\3\2\2\2\u1223\u1220\3\2\2\2\u1223\u1221\3\2\2\2\u1224\u0215"+
		"\3\2\2\2\u1225\u122d\7\u00f5\2\2\u1226\u1227\7o\2\2\u1227\u122d\7\u00f5"+
		"\2\2\u1228\u1229\7\u010b\2\2\u1229\u122d\7\u00f6\2\2\u122a\u122b\7\u010b"+
		"\2\2\u122b\u122d\7\u0105\2\2\u122c\u1225\3\2\2\2\u122c\u1226\3\2\2\2\u122c"+
		"\u1228\3\2\2\2\u122c\u122a\3\2\2\2\u122d\u0217\3\2\2\2\u122e\u122f\7o"+
		"\2\2\u122f\u1262\7p\2\2\u1230\u1262\7p\2\2\u1231\u1234\7G\2\2\u1232\u1233"+
		"\7R\2\2\u1233\u1235\5\u022c\u0117\2\u1234\u1232\3\2\2\2\u1234\u1235\3"+
		"\2\2\2\u1235\u1236\3\2\2\2\u1236\u1262\5\u022a\u0116\2\u1237\u1238\7F"+
		"\2\2\u1238\u123b\7I\2\2\u1239\u123a\7R\2\2\u123a\u123c\5\u022c\u0117\2"+
		"\u123b\u1239\3\2\2\2\u123b\u123c\3\2\2\2\u123c\u123d\3\2\2\2\u123d\u1262"+
		"\5\u022a\u0116\2\u123e\u123f\7\u00da\2\2\u123f\u1240\7\"\2\2\u1240\u1241"+
		"\5\u00f2z\2\u1241\u1243\7#\2\2\u1242\u1244\5\u0228\u0115\2\u1243\u1242"+
		"\3\2\2\2\u1243\u1244\3\2\2\2\u1244\u1262\3\2\2\2\u1245\u1246\7\u0099\2"+
		"\2\u1246\u1262\5\u00f4{\2\u1247\u1248\7\u00db\2\2\u1248\u1249\5\u0226"+
		"\u0114\2\u1249\u124a\7e\2\2\u124a\u124c\7\u0104\2\2\u124b\u124d\5\u021a"+
		"\u010e\2\u124c\u124b\3\2\2\2\u124c\u124d\3\2\2\2\u124d\u1262\3\2\2\2\u124e"+
		"\u124f\7\u00db\2\2\u124f\u1250\5\u0226\u0114\2\u1250\u1251\7e\2\2\u1251"+
		"\u1252\7\"\2\2\u1252\u1253\5\u00f2z\2\u1253\u1254\7#\2\2\u1254\u1255\7"+
		"\u0217\2\2\u1255\u1262\3\2\2\2\u1256\u1257\7\u00e2\2\2\u1257\u1259\5N"+
		"(\2\u1258\u125a\5\u0220\u0111\2\u1259\u1258\3\2\2\2\u1259\u125a\3\2\2"+
		"\2\u125a\u125c\3\2\2\2\u125b\u125d\5\u023c\u011f\2\u125c\u125b\3\2\2\2"+
		"\u125c\u125d\3\2\2\2\u125d\u125f\3\2\2\2\u125e\u1260\5\u0234\u011b\2\u125f"+
		"\u125e\3\2\2\2\u125f\u1260\3\2\2\2\u1260\u1262\3\2\2\2\u1261\u122e\3\2"+
		"\2\2\u1261\u1230\3\2\2\2\u1261\u1231\3\2\2\2\u1261\u1237\3\2\2\2\u1261"+
		"\u123e\3\2\2\2\u1261\u1245\3\2\2\2\u1261\u1247\3\2\2\2\u1261\u124e\3\2"+
		"\2\2\u1261\u1256\3\2\2\2\u1262\u0219\3\2\2\2\u1263\u1264\7\"\2\2\u1264"+
		"\u1265\5\u021c\u010f\2\u1265\u1266\7#\2\2\u1266\u021b\3\2\2\2\u1267\u1269"+
		"\5\u021e\u0110\2\u1268\u1267\3\2\2\2\u1269\u126a\3\2\2\2\u126a\u1268\3"+
		"\2\2\2\u126a\u126b\3\2\2\2\u126b\u021d\3\2\2\2\u126c\u126d\7e\2\2\u126d"+
		"\u1292\5\u015c\u00af\2\u126e\u126f\7\u00e9\2\2\u126f\u1292\5\u020c\u0107"+
		"\2\u1270\u1292\7\u00f1\2\2\u1271\u1272\7\u00de\2\2\u1272\u1292\7\u00f1"+
		"\2\2\u1273\u1275\7\u0107\2\2\u1274\u1276\7{\2\2\u1275\u1274\3\2\2\2\u1275"+
		"\u1276\3\2\2\2\u1276\u1277\3\2\2\2\u1277\u1292\5\u020c\u0107\2\u1278\u1279"+
		"\7\u0113\2\2\u1279\u1292\5\u020c\u0107\2\u127a\u127b\7\u0114\2\2\u127b"+
		"\u1292\5\u020c\u0107\2\u127c\u127d\7\u00de\2\2\u127d\u1292\7\u0113\2\2"+
		"\u127e\u127f\7\u00de\2\2\u127f\u1292\7\u0114\2\2\u1280\u1281\7\u011b\2"+
		"\2\u1281\u1282\7{\2\2\u1282\u1292\5\u01ba\u00de\2\u1283\u1284\7\u0129"+
		"\2\2\u1284\u1285\7\u00a9\2\2\u1285\u1292\5\u01ba\u00de\2\u1286\u1288\7"+
		"\u00e5\2\2\u1287\u1289\7R\2\2\u1288\u1287\3\2\2\2\u1288\u1289\3\2\2\2"+
		"\u1289\u128a\3\2\2\2\u128a\u1292\5\u020c\u0107\2\u128b\u1292\7\u0124\2"+
		"\2\u128c\u128e\7\u0124\2\2\u128d\u128f\7R\2\2\u128e\u128d\3\2\2\2\u128e"+
		"\u128f\3\2\2\2\u128f\u1290\3\2\2\2\u1290\u1292\5\u020c\u0107\2\u1291\u126c"+
		"\3\2\2\2\u1291\u126e\3\2\2\2\u1291\u1270\3\2\2\2\u1291\u1271\3\2\2\2\u1291"+
		"\u1273\3\2\2\2\u1291\u1278\3\2\2\2\u1291\u127a\3\2\2\2\u1291\u127c\3\2"+
		"\2\2\u1291\u127e\3\2\2\2\u1291\u1280\3\2\2\2\u1291\u1283\3\2\2\2\u1291"+
		"\u1286\3\2\2\2\u1291\u128b\3\2\2\2\u1291\u128c\3\2\2\2\u1292\u021f\3\2"+
		"\2\2\u1293\u1294\7\"\2\2\u1294\u1295\5\u0224\u0113\2\u1295\u1296\7#\2"+
		"\2\u1296\u0221\3\2\2\2\u1297\u1298\5\u013a\u009e\2\u1298\u0223\3\2\2\2"+
		"\u1299\u129e\5\u0222\u0112\2\u129a\u129b\7(\2\2\u129b\u129d\5\u0222\u0112"+
		"\2\u129c\u129a\3\2\2\2\u129d\u12a0\3\2\2\2\u129e\u129c\3\2\2\2\u129e\u129f"+
		"\3\2\2\2\u129f\u0225\3\2\2\2\u12a0\u129e\3\2\2\2\u12a1\u12a5\7\u00d8\2"+
		"\2\u12a2\u12a3\7{\2\2\u12a3\u12a5\7\u0099\2\2\u12a4\u12a1\3\2\2\2\u12a4"+
		"\u12a2\3\2\2\2\u12a5\u0227\3\2\2\2\u12a6\u12a7\7\u00de\2\2\u12a7\u12a8"+
		"\7\u0109\2\2\u12a8\u0229\3\2\2\2\u12a9\u12aa\7c\2\2\u12aa\u12ab\7D\2\2"+
		"\u12ab\u12ac\7\u0130\2\2\u12ac\u12ad\5\u00e0q\2\u12ad\u022b\3\2\2\2\u12ae"+
		"\u12af\7\"\2\2\u12af\u12b0\5\u022e\u0118\2\u12b0\u12b1\7#\2\2\u12b1\u022d"+
		"\3\2\2\2\u12b2\u12b7\5\u0230\u0119\2\u12b3\u12b4\7(\2\2\u12b4\u12b6\5"+
		"\u0230\u0119\2\u12b5\u12b3\3\2\2\2\u12b6\u12b9\3\2\2\2\u12b7\u12b5\3\2"+
		"\2\2\u12b7\u12b8\3\2\2\2\u12b8\u022f\3\2\2\2\u12b9\u12b7\3\2\2\2\u12ba"+
		"\u12bb\5\u0232\u011a\2\u12bb\u12bc\7\32\2\2\u12bc\u12bd\5\u01e8\u00f5"+
		"\2\u12bd\u12c0\3\2\2\2\u12be\u12c0\5\u0232\u011a\2\u12bf\u12ba\3\2\2\2"+
		"\u12bf\u12be\3\2\2\2\u12c0\u0231\3\2\2\2\u12c1\u12c7\5\u00ceh\2\u12c2"+
		"\u12c7\5\u00d4k\2\u12c3\u12c7\5\u01fe\u0100\2\u12c4\u12c7\5\u00d6l\2\u12c5"+
		"\u12c7\5\u00c8e\2\u12c6\u12c1\3\2\2\2\u12c6\u12c2\3\2\2\2\u12c6\u12c3"+
		"\3\2\2\2\u12c6\u12c4\3\2\2\2\u12c6\u12c5\3\2\2\2\u12c7\u0233\3\2\2\2\u12c8"+
		"\u12d1\5\u0238\u011d\2\u12c9\u12d1\5\u0236\u011c\2\u12ca\u12cb\5\u0238"+
		"\u011d\2\u12cb\u12cc\5\u0236\u011c\2\u12cc\u12d1\3\2\2\2\u12cd\u12ce\5"+
		"\u0236\u011c\2\u12ce\u12cf\5\u0238\u011d\2\u12cf\u12d1\3\2\2\2\u12d0\u12c8"+
		"\3\2\2\2\u12d0\u12c9\3\2\2\2\u12d0\u12ca\3\2\2\2\u12d0\u12cd\3\2\2\2\u12d1"+
		"\u0235\3\2\2\2\u12d2\u12d3\7f\2\2\u12d3\u12d4\78\2\2\u12d4\u12d5\5\u023a"+
		"\u011e\2\u12d5\u0237\3\2\2\2\u12d6\u12d7\7f\2\2\u12d7\u12d8\7\67\2\2\u12d8"+
		"\u12d9\5\u023a\u011e\2\u12d9\u0239\3\2\2\2\u12da\u12db\7\u00de\2\2\u12db"+
		"\u12e3\7\u00e8\2\2\u12dc\u12e3\7\u0125\2\2\u12dd\u12e3\7\u00d9\2\2\u12de"+
		"\u12df\7A\2\2\u12df\u12e3\7p\2\2\u12e0\u12e1\7A\2\2\u12e1\u12e3\7\u0099"+
		"\2\2\u12e2\u12da\3\2\2\2\u12e2\u12dc\3\2\2\2\u12e2\u12dd\3\2\2\2\u12e2"+
		"\u12de\3\2\2\2\u12e2\u12e0\3\2\2\2\u12e3\u023b\3\2\2\2\u12e4\u12e5\7\u0112"+
		"\2\2\u12e5\u12eb\7]\2\2\u12e6\u12e7\7\u0112\2\2\u12e7\u12eb\7\u011d\2"+
		"\2\u12e8\u12e9\7\u0112\2\2\u12e9\u12eb\7\u012d\2\2\u12ea\u12e4\3\2\2\2"+
		"\u12ea\u12e6\3\2\2\2\u12ea\u12e8\3\2\2\2\u12eb\u023d\3\2\2\2\u12ec\u12ed"+
		"\7\u01f2\2\2\u12ed\u12ee\7\"\2\2\u12ee\u12ef\5\u0240\u0121\2\u12ef\u12f0"+
		"\7#\2\2\u12f0\u023f\3\2\2\2\u12f1\u12f6\5\u0242\u0122\2\u12f2\u12f3\7"+
		"(\2\2\u12f3\u12f5\5\u0242\u0122\2\u12f4\u12f2\3\2\2\2\u12f5\u12f8\3\2"+
		"\2\2\u12f6\u12f4\3\2\2\2\u12f6\u12f7\3\2\2\2\u12f7\u0241\3\2\2\2\u12f8"+
		"\u12f6\3\2\2\2\u12f9\u12fa\5\u0246\u0124\2\u12fa\u12fb\5\u0244\u0123\2"+
		"\u12fb\u0243\3\2\2\2\u12fc\u12fd\7\u0224\2\2\u12fd\u0245\3\2\2\2\u12fe"+
		"\u12ff\5\u017c\u00bf\2\u12ff\u0247\3\2\2\2\u1300\u1307\7\u0115\2\2\u1301"+
		"\u1307\7]\2\2\u1302\u1307\7\u0099\2\2\u1303\u1304\7c\2\2\u1304\u1305\7"+
		"D\2\2\u1305\u1307\5\u00e0q\2\u1306\u1300\3\2\2\2\u1306\u1301\3\2\2\2\u1306"+
		"\u1302\3\2\2\2\u1306\u1303\3\2\2\2\u1307\u0249\3\2\2\2\u1308\u1309\7\""+
		"\2\2\u1309\u130a\5\u015a\u00ae\2\u130a\u130b\7#\2\2\u130b\u131f\3\2\2"+
		"\2\u130c\u130d\7\"\2\2\u130d\u130e\5\u015a\u00ae\2\u130e\u130f\7(\2\2"+
		"\u130f\u1310\5\u015a\u00ae\2\u1310\u1311\7#\2\2\u1311\u131f\3\2\2\2\u1312"+
		"\u1313\7\"\2\2\u1313\u1314\7\u0199\2\2\u1314\u1315\7(\2\2\u1315\u1316"+
		"\5\u015a\u00ae\2\u1316\u1317\7#\2\2\u1317\u131f\3\2\2\2\u1318\u1319\7"+
		"\"\2\2\u1319\u131a\5\u015a\u00ae\2\u131a\u131b\7(\2\2\u131b\u131c\7\u0199"+
		"\2\2\u131c\u131d\7#\2\2\u131d\u131f\3\2\2\2\u131e\u1308\3\2\2\2\u131e"+
		"\u130c\3\2\2\2\u131e\u1312\3\2\2\2\u131e\u1318\3\2\2\2\u131f\u024b\3\2"+
		"\2\2\u1320\u1321\5\u024e\u0128\2\u1321\u1322\5\u012e\u0098\2\u1322\u1323"+
		"\5\u01ea\u00f6\2\u1323\u1330\3\2\2\2\u1324\u1325\5\u012e\u0098\2\u1325"+
		"\u1326\5\u024e\u0128\2\u1326\u1327\5\u01ea\u00f6\2\u1327\u1330\3\2\2\2"+
		"\u1328\u1329\5\u012e\u0098\2\u1329\u132a\5\u01ea\u00f6\2\u132a\u1330\3"+
		"\2\2\2\u132b\u132c\5\u024e\u0128\2\u132c\u132d\5\u01ea\u00f6\2\u132d\u1330"+
		"\3\2\2\2\u132e\u1330\5\u01ea\u00f6\2\u132f\u1320\3\2\2\2\u132f\u1324\3"+
		"\2\2\2\u132f\u1328\3\2\2\2\u132f\u132b\3\2\2\2\u132f\u132e\3\2\2\2\u1330"+
		"\u024d\3\2\2\2\u1331\u1338\7u\2\2\u1332\u1338\7\u0221\2\2\u1333\u1338"+
		"\7\u0222\2\2\u1334\u1335\7u\2\2\u1335\u1338\7\u0221\2\2\u1336\u1338\7"+
		"\u018d\2\2\u1337\u1331\3\2\2\2\u1337\u1332\3\2\2\2\u1337\u1333\3\2\2\2"+
		"\u1337\u1334\3\2\2\2\u1337\u1336\3\2\2\2\u1338\u024f\3\2\2\2\u1339\u133e"+
		"\5\u024c\u0127\2\u133a\u133b\7(\2\2\u133b\u133d\5\u024c\u0127\2\u133c"+
		"\u133a\3\2\2\2\u133d\u1340\3\2\2\2\u133e\u133c\3\2\2\2\u133e\u133f\3\2"+
		"\2\2\u133f\u0251\3\2\2\2\u1340\u133e\3\2\2\2\u1341\u1344\5\u01fc\u00ff"+
		"\2\u1342\u1344\7\u0224\2\2\u1343\u1341\3\2\2\2\u1343\u1342\3\2\2\2\u1344"+
		"\u0253\3\2\2\2\u1345\u1346\7\u0224\2\2\u1346\u0255\3\2\2\2\u1347\u134c"+
		"\5\u0202\u0102\2\u1348\u1349\7(\2\2\u1349\u134b\5\u0202\u0102\2\u134a"+
		"\u1348\3\2\2\2\u134b\u134e\3\2\2\2\u134c\u134a\3\2\2\2\u134c\u134d\3\2"+
		"\2\2\u134d\u0257\3\2\2\2\u134e\u134c\3\2\2\2\u134f\u1350\7A\2\2\u1350"+
		"\u1353\5\u025a\u012e\2\u1351\u1353\5\u0266\u0134\2\u1352\u134f\3\2\2\2"+
		"\u1352\u1351\3\2\2\2\u1353\u0259\3\2\2\2\u1354\u1355\7\u00e6\2\2\u1355"+
		"\u135d\5\u025c\u012f\2\u1356\u1357\7\u012a\2\2\u1357\u1358\7\u00ea\2\2"+
		"\u1358\u1359\7e\2\2\u1359\u135a\7\u00e6\2\2\u135a\u135d\5\u025c\u012f"+
		"\2\u135b\u135d\5\u0260\u0131\2\u135c\u1354\3\2\2\2\u135c\u1356\3\2\2\2"+
		"\u135c\u135b\3\2\2\2\u135d\u025b\3\2\2\2\u135e\u1365\5\u025e\u0130\2\u135f"+
		"\u1361\7(\2\2\u1360\u135f\3\2\2\2\u1360\u1361\3\2\2\2\u1361\u1362\3\2"+
		"\2\2\u1362\u1364\5\u025e\u0130\2\u1363\u1360\3\2\2\2\u1364\u1367\3\2\2"+
		"\2\u1365\u1363\3\2\2\2\u1365\u1366\3\2\2\2\u1366\u025d\3\2\2\2\u1367\u1365"+
		"\3\2\2\2\u1368\u1369\7\u00dc\2\2\u1369\u136a\7\u00dd\2\2\u136a\u1373\5"+
		"\u020e\u0108\2\u136b\u136c\7\u00e1\2\2\u136c\u1373\7\u0119\2\2\u136d\u136e"+
		"\7\u00e1\2\2\u136e\u1373\7\u0218\2\2\u136f\u1373\7\u00f5\2\2\u1370\u1371"+
		"\7o\2\2\u1371\u1373\7\u00f5\2\2\u1372\u1368\3\2\2\2\u1372\u136b\3\2\2"+
		"\2\u1372\u136d\3\2\2\2\u1372\u136f\3\2\2\2\u1372\u1370\3\2\2\2\u1373\u025f"+
		"\3\2\2\2\u1374\u1395\5\u0264\u0133\2\u1375\u1376\5\u0204\u0103\2\u1376"+
		"\u1377\7Z\2\2\u1377\u1378\7\u009a\2\2\u1378\u1395\3\2\2\2\u1379\u137a"+
		"\7\u008c\2\2\u137a\u137b\7\u013a\2\2\u137b\u1395\5\u020a\u0106\2\u137c"+
		"\u137d\7\u01b1\2\2\u137d\u1395\7\u0224\2\2\u137e\u137f\7=\2\2\u137f\u1395"+
		"\7\u0224\2\2\u1380\u1382\7\u00ab\2\2\u1381\u1383\5\u0262\u0132\2\u1382"+
		"\u1381\3\2\2\2\u1382\u1383\3\2\2\2\u1383\u1395\3\2\2\2\u1384\u1385\7\u00e3"+
		"\2\2\u1385\u1395\5\u01fc\u00ff\2\u1386\u1395\7\u0224\2\2\u1387\u1388\7"+
		"\u012a\2\2\u1388\u1389\7\u021e\2\2\u1389\u1395\5\u01fc\u00ff\2\u138a\u1395"+
		"\7\u0224\2\2\u138b\u138c\7\u012a\2\2\u138c\u138d\7\u021e\2\2\u138d\u1395"+
		"\7\u0099\2\2\u138e\u138f\7\u015c\2\2\u138f\u1390\7\u00df\2\2\u1390\u1395"+
		"\5\u01a6\u00d4\2\u1391\u1392\7\u00e6\2\2\u1392\u1393\7\u01ef\2\2\u1393"+
		"\u1395\7\u0224\2\2\u1394\u1374\3\2\2\2\u1394\u1375\3\2\2\2\u1394\u1379"+
		"\3\2\2\2\u1394\u137c\3\2\2\2\u1394\u137e\3\2\2\2\u1394\u1380\3\2\2\2\u1394"+
		"\u1384\3\2\2\2\u1394\u1386\3\2\2\2\u1394\u1387\3\2\2\2\u1394\u138a\3\2"+
		"\2\2\u1394\u138b\3\2\2\2\u1394\u138e\3\2\2\2\u1394\u1391\3\2\2\2\u1395"+
		"\u0261\3\2\2\2\u1396\u1397\t\27\2\2\u1397\u0263\3\2\2\2\u1398\u1399\5"+
		"\u0204\u0103\2\u1399\u139c\t\30\2\2\u139a\u139d\5\u0206\u0104\2\u139b"+
		"\u139d\7\u0099\2\2\u139c\u139a\3\2\2\2\u139c\u139b\3\2\2\2\u139d\u0265"+
		"\3\2\2\2\u139e\u139f\7\u0123\2\2\u139f\u13a0\5\u0268\u0135\2\u13a0\u0267"+
		"\3\2\2\2\u13a1\u13aa\5\u026a\u0136\2\u13a2\u13a3\7\u008c\2\2\u13a3\u13aa"+
		"\7\u013a\2\2\u13a4\u13a5\7\u00e6\2\2\u13a5\u13a6\7\u00dc\2\2\u13a6\u13aa"+
		"\7\u00dd\2\2\u13a7\u13a8\7\u012a\2\2\u13a8\u13aa\7\u021e\2\2\u13a9\u13a1"+
		"\3\2\2\2\u13a9\u13a2\3\2\2\2\u13a9\u13a4\3\2\2\2\u13a9\u13a7\3\2\2\2\u13aa"+
		"\u0269\3\2\2\2\u13ab\u13ae\5\u0204\u0103\2\u13ac\u13ae\7v\2\2\u13ad\u13ab"+
		"\3\2\2\2\u13ad\u13ac\3\2\2\2\u13ae\u026b\3\2\2\2\u13af\u13b4\5\u0098M"+
		"\2\u13b0\u13b1\7(\2\2\u13b1\u13b3\5\u0098M\2\u13b2\u13b0\3\2\2\2\u13b3"+
		"\u13b6\3\2\2\2\u13b4\u13b2\3\2\2\2\u13b4\u13b5\3\2\2\2\u13b5\u026d\3\2"+
		"\2\2\u13b6\u13b4\3\2\2\2\u13b7\u13b8\7\u01b0\2\2\u13b8\u13b9\7f\2\2\u13b9"+
		"\u13ba\7p\2\2\u13ba\u13db\7\u01bf\2\2\u13bb\u13bc\7\u0205\2\2\u13bc\u13bd"+
		"\7p\2\2\u13bd\u13be\7f\2\2\u13be\u13bf\7p\2\2\u13bf\u13db\7\u01bf\2\2"+
		"\u13c0\u13db\7\u0219\2\2\u13c1\u13db\7\u01d6\2\2\u13c2\u13db\7\u020b\2"+
		"\2\u13c3\u13db\7\u0216\2\2\u13c4\u13c5\7\u00fd\2\2\u13c5\u13c6\7\u0128"+
		"\2\2\u13c6\u13db\7\u00a1\2\2\u13c7\u13c8\7\u00fd\2\2\u13c8\u13c9\7\u0128"+
		"\2\2\u13c9\u13db\7\u01f4\2\2\u13ca\u13cb\7\u0128\2\2\u13cb\u13db\7\u00a1"+
		"\2\2\u13cc\u13cd\7\u0128\2\2\u13cd\u13db\7\u01f4\2\2\u13ce\u13db\7\u01c2"+
		"\2\2\u13cf\u13d0\7o\2\2\u13d0\u13db\7\u01c2\2\2\u13d1\u13d2\7\u01ae\2"+
		"\2\u13d2\u13db\5\u020c\u0107\2\u13d3\u13d4\7\u00e4\2\2\u13d4\u13db\5\u020c"+
		"\u0107\2\u13d5\u13d6\7\u020a\2\2\u13d6\u13db\5\u01ba\u00de\2\u13d7\u13db"+
		"\5\u0270\u0139\2\u13d8\u13d9\7\u01c1\2\2\u13d9\u13db\5\u013a\u009e\2\u13da"+
		"\u13b7\3\2\2\2\u13da\u13bb\3\2\2\2\u13da\u13c0\3\2\2\2\u13da\u13c1\3\2"+
		"\2\2\u13da\u13c2\3\2\2\2\u13da\u13c3\3\2\2\2\u13da\u13c4\3\2\2\2\u13da"+
		"\u13c7\3\2\2\2\u13da\u13ca\3\2\2\2\u13da\u13cc\3\2\2\2\u13da\u13ce\3\2"+
		"\2\2\u13da\u13cf\3\2\2\2\u13da\u13d1\3\2\2\2\u13da\u13d3\3\2\2\2\u13da"+
		"\u13d5\3\2\2\2\u13da\u13d7\3\2\2\2\u13da\u13d8\3\2\2\2\u13db\u026f\3\2"+
		"\2\2\u13dc\u13dd\7A\2\2\u13dd\u13e0\5\u0260\u0131\2\u13de\u13e0\5\u0266"+
		"\u0134\2\u13df\u13dc\3\2\2\2\u13df\u13de\3\2\2\2\u13e0\u0271\3\2\2\2\u13e1"+
		"\u13e2\t\31\2\2\u13e2\u0273\3\2\2\2\u13e3\u13e4\t\32\2\2\u13e4\u0275\3"+
		"\2\2\2\u13e5\u13ea\5\u015a\u00ae\2\u13e6\u13e7\7(\2\2\u13e7\u13e9\5\u015a"+
		"\u00ae\2\u13e8\u13e6\3\2\2\2\u13e9\u13ec\3\2\2\2\u13ea\u13e8\3\2\2\2\u13ea"+
		"\u13eb\3\2\2\2\u13eb\u0277\3\2\2\2\u13ec\u13ea\3\2\2\2\u13ed\u13ee\79"+
		"\2\2\u13ee\u13ef\5\u02b6\u015c\2\u13ef\u13f1\7B\2\2\u13f0\u13f2\5\u02b8"+
		"\u015d\2\u13f1\u13f0\3\2\2\2\u13f1\u13f2\3\2\2\2\u13f2\u13f3\3\2\2\2\u13f3"+
		"\u1408\5\u00dan\2\u13f4\u1409\5\u02ba\u015e\2\u13f5\u13f6\7\u013b\2\2"+
		"\u13f6\u13fb\5\u01ba\u00de\2\u13f7\u13f8\7\"\2\2\u13f8\u13f9\5\u0282\u0142"+
		"\2\u13f9\u13fa\7#\2\2\u13fa\u13fc\3\2\2\2\u13fb\u13f7\3\2\2\2\u13fb\u13fc"+
		"\3\2\2\2\u13fc\u1409\3\2\2\2\u13fd\u13fe\7\u00d5\2\2\u13fe\u13ff\7\u013b"+
		"\2\2\u13ff\u1404\5N(\2\u1400\u1401\7\"\2\2\u1401\u1402\5\u0282\u0142\2"+
		"\u1402\u1403\7#\2\2\u1403\u1405\3\2\2\2\u1404\u1400\3\2\2\2\u1404\u1405"+
		"\3\2\2\2\u1405\u1406\3\2\2\2\u1406\u1407\5\u027c\u013f\2\u1407\u1409\3"+
		"\2\2\2\u1408\u13f4\3\2\2\2\u1408\u13f5\3\2\2\2\u1408\u13fd\3\2\2\2\u1409"+
		"\u140a\3\2\2\2\u140a\u140c\5\u02e0\u0171\2\u140b\u140d\5\u02e2\u0172\2"+
		"\u140c\u140b\3\2\2\2\u140c\u140d\3\2\2\2\u140d\u140f\3\2\2\2\u140e\u1410"+
		"\5\u0290\u0149\2\u140f\u140e\3\2\2\2\u140f\u1410\3\2\2\2\u1410\u1412\3"+
		"\2\2\2\u1411\u1413\5\u028e\u0148\2\u1412\u1411\3\2\2\2\u1412\u1413\3\2"+
		"\2\2\u1413\u1415\3\2\2\2\u1414\u1416\5\u028c\u0147\2\u1415\u1414\3\2\2"+
		"\2\u1415\u1416\3\2\2\2\u1416\u1418\3\2\2\2\u1417\u1419\5\u028a\u0146\2"+
		"\u1418\u1417\3\2\2\2\u1418\u1419\3\2\2\2\u1419\u141f\3\2\2\2\u141a\u141b"+
		"\7e\2\2\u141b\u141d\5&\24\2\u141c\u141e\5\u0288\u0145\2\u141d\u141c\3"+
		"\2\2\2\u141d\u141e\3\2\2\2\u141e\u1420\3\2\2\2\u141f\u141a\3\2\2\2\u141f"+
		"\u1420\3\2\2\2\u1420\u1427\3\2\2\2\u1421\u1422\7\u00fa\2\2\u1422\u1423"+
		"\5\u00e0q\2\u1423\u1425\5\u027a\u013e\2\u1424\u1426\5\u0288\u0145\2\u1425"+
		"\u1424\3\2\2\2\u1425\u1426\3\2\2\2\u1426\u1428\3\2\2\2\u1427\u1421\3\2"+
		"\2\2\u1427\u1428\3\2\2\2\u1428\u0279\3\2\2\2\u1429\u142a\7\"\2\2\u142a"+
		"\u142b\5\u015e\u00b0\2\u142b\u142c\7#\2\2\u142c\u027b\3\2\2\2\u142d\u142e"+
		"\7j\2\2\u142e\u142f\7Q\2\2\u142f\u1430\7R\2\2\u1430\u1431\7\"\2\2\u1431"+
		"\u1432\5\u027e\u0140\2\u1432\u1433\7#\2\2\u1433\u1448\3\2\2\2\u1434\u1435"+
		"\7j\2\2\u1435\u1436\7Q\2\2\u1436\u1437\7u\2\2\u1437\u1438\7\"\2\2\u1438"+
		"\u1439\5\u015e\u00b0\2\u1439\u143a\7#\2\2\u143a\u1448\3\2\2\2\u143b\u143c"+
		"\7j\2\2\u143c\u143d\7Q\2\2\u143d\u143e\7Z\2\2\u143e\u143f\7\"\2\2\u143f"+
		"\u1440\5\u015e\u00b0\2\u1440\u1441\7#\2\2\u1441\u1442\7k\2\2\u1442\u1443"+
		"\7\"\2\2\u1443\u1444\5\u015e\u00b0\2\u1444\u1445\7#\2\2\u1445\u1448\3"+
		"\2\2\2\u1446\u1448\7\u0099\2\2\u1447\u142d\3\2\2\2\u1447\u1434\3\2\2\2"+
		"\u1447\u143b\3\2\2\2\u1447\u1446\3\2\2\2\u1448\u027d\3\2\2\2\u1449\u144e"+
		"\5\u0280\u0141\2\u144a\u144b\7(\2\2\u144b\u144d\5\u0280\u0141\2\u144c"+
		"\u144a\3\2\2\2\u144d\u1450\3\2\2\2\u144e\u144c\3\2\2\2\u144e\u144f\3\2"+
		"\2\2\u144f\u027f\3\2\2\2\u1450\u144e\3\2\2\2\u1451\u1452\5\u01fc\u00ff"+
		"\2\u1452\u1453\7\u0225\2\2\u1453\u0281\3\2\2\2\u1454\u1459\5\u0284\u0143"+
		"\2\u1455\u1456\7(\2\2\u1456\u1458\5\u0284\u0143\2\u1457\u1455\3\2\2\2"+
		"\u1458\u145b\3\2\2\2\u1459\u1457\3\2\2\2\u1459\u145a\3\2\2\2\u145a\u0283"+
		"\3\2\2\2\u145b\u1459\3\2\2\2\u145c\u145f\5\u0286\u0144\2\u145d\u145f\5"+
		"\u02d6\u016c\2\u145e\u145c\3\2\2\2\u145e\u145d\3\2\2\2\u145f\u0285\3\2"+
		"\2\2\u1460\u1463\5\u013a\u009e\2\u1461\u1462\7R\2\2\u1462\u1464\7\u01f2"+
		"\2\2\u1463\u1461\3\2\2\2\u1463\u1464\3\2\2\2\u1464\u1465\3\2\2\2\u1465"+
		"\u1466\5\u0212\u010a\2\u1466\u0287\3\2\2\2\u1467\u1468\7R\2\2\u1468\u146d"+
		"\7\u00f2\2\2\u1469\u146a\7R\2\2\u146a\u146b\7\u00de\2\2\u146b\u146d\7"+
		"\u00f2\2\2\u146c\u1467\3\2\2\2\u146c\u1469\3\2\2\2\u146d\u0289\3\2\2\2"+
		"\u146e\u146f\7\u0130\2\2\u146f\u1470\5\u00e0q\2\u1470\u028b\3\2\2\2\u1471"+
		"\u1472\7f\2\2\u1472\u1478\7\u0082\2\2\u1473\u1479\7;\2\2\u1474\u1475\7"+
		"8\2\2\u1475\u1479\7\u00e4\2\2\u1476\u1477\7\u009f\2\2\u1477\u1479\7\u00e4"+
		"\2\2\u1478\u1473\3\2\2\2\u1478\u1474\3\2\2\2\u1478\u1476\3\2\2\2\u1479"+
		"\u028d\3\2\2\2\u147a\u147b\7R\2\2\u147b\u147f\5\u01e2\u00f2\2\u147c\u147d"+
		"\7\u0139\2\2\u147d\u147f\7\u0118\2\2\u147e\u147a\3\2\2\2\u147e\u147c\3"+
		"\2\2\2\u147f\u028f\3\2\2\2\u1480\u1481\7c\2\2\u1481\u1482\5\u0292\u014a"+
		"\2\u1482\u0291\3\2\2\2\u1483\u1487\5\u00ceh\2\u1484\u1487\5\u00d4k\2\u1485"+
		"\u1487\5\u01fe\u0100\2\u1486\u1483\3\2\2\2\u1486\u1484\3\2\2\2\u1486\u1485"+
		"\3\2\2\2\u1487\u0293\3\2\2\2\u1488\u1489\79\2\2\u1489\u148a\5\u02ec\u0177"+
		"\2\u148a\u148b\7D\2\2\u148b\u148f\5\u02ee\u0178\2\u148c\u148d\5\u02f0"+
		"\u0179\2\u148d\u148e\5\u00e8u\2\u148e\u1490\3\2\2\2\u148f\u148c\3\2\2"+
		"\2\u148f\u1490\3\2\2\2\u1490\u1491\3\2\2\2\u1491\u1492\7f\2\2\u1492\u1493"+
		"\5\u02f2\u017a\2\u1493\u1495\5\u00dan\2\u1494\u1496\5\u029a\u014e\2\u1495"+
		"\u1494\3\2\2\2\u1495\u1496\3\2\2\2\u1496\u1497\3\2\2\2\u1497\u1498\7\""+
		"\2\2\u1498\u1499\5\u01d8\u00ed\2\u1499\u149b\7#\2\2\u149a\u149c\5\u0296"+
		"\u014c\2\u149b\u149a\3\2\2\2\u149b\u149c\3\2\2\2\u149c\u149f\3\2\2\2\u149d"+
		"\u149e\7R\2\2\u149e\u14a0\5\u01e2\u00f2\2\u149f\u149d\3\2\2\2\u149f\u14a0"+
		"\3\2\2\2\u14a0\u14a2\3\2\2\2\u14a1\u14a3\5\u028a\u0146\2\u14a2\u14a1\3"+
		"\2\2\2\u14a2\u14a3\3\2\2\2\u14a3\u14a5\3\2\2\2\u14a4\u14a6\5\u009aN\2"+
		"\u14a5\u14a4\3\2\2\2\u14a5\u14a6\3\2\2\2\u14a6\u0295\3\2\2\2\u14a7\u14a8"+
		"\7\u010c\2\2\u14a8\u14a9\7\"\2\2\u14a9\u14aa\5\u0298\u014d\2\u14aa\u14ab"+
		"\7#\2\2\u14ab\u0297\3\2\2\2\u14ac\u14b1\5\u01dc\u00ef\2\u14ad\u14ae\7"+
		"(\2\2\u14ae\u14b0\5\u01dc\u00ef\2\u14af\u14ad\3\2\2\2\u14b0\u14b3\3\2"+
		"\2\2\u14b1\u14af\3\2\2\2\u14b1\u14b2\3\2\2\2\u14b2\u0299\3\2\2\2\u14b3"+
		"\u14b1\3\2\2\2\u14b4\u14b5\7c\2\2\u14b5\u14b6\5\u0292\u014a\2\u14b6\u029b"+
		"\3\2\2\2\u14b7\u14b8\79\2\2\u14b8\u14b9\7\u00f3\2\2\u14b9\u14bb\5\u00e0"+
		"q\2\u14ba\u14bc\7R\2\2\u14bb\u14ba\3\2\2\2\u14bb\u14bc\3\2\2\2\u14bc\u14c0"+
		"\3\2\2\2\u14bd\u14bf\5\u02a2\u0152\2\u14be\u14bd\3\2\2\2\u14bf\u14c2\3"+
		"\2\2\2\u14c0\u14be\3\2\2\2\u14c0\u14c1\3\2\2\2\u14c1\u029d\3\2\2\2\u14c2"+
		"\u14c0\3\2\2\2\u14c3\u14c6\79\2\2\u14c4\u14c5\7m\2\2\u14c5\u14c7\7\u01ee"+
		"\2\2\u14c6\u14c4\3\2\2\2\u14c6\u14c7\3\2\2\2\u14c7\u14c9\3\2\2\2\u14c8"+
		"\u14ca\t\33\2\2\u14c9\u14c8\3\2\2\2\u14c9\u14ca\3\2\2\2\u14ca\u14cc\3"+
		"\2\2\2\u14cb\u14cd\7\u013e\2\2\u14cc\u14cb\3\2\2\2\u14cc\u14cd\3\2\2\2"+
		"\u14cd\u14ce\3\2\2\2\u14ce\u14cf\7O\2\2\u14cf\u14dc\5N(\2\u14d0\u14d9"+
		"\7\"\2\2\u14d1\u14d6\5\u0224\u0113\2\u14d2\u14d3\7(\2\2\u14d3\u14d5\5"+
		"\u0224\u0113\2\u14d4\u14d2\3\2\2\2\u14d5\u14d8\3\2\2\2\u14d6\u14d4\3\2"+
		"\2\2\u14d6\u14d7\3\2\2\2\u14d7\u14da\3\2\2\2\u14d8\u14d6\3\2\2\2\u14d9"+
		"\u14d1\3\2\2\2\u14d9\u14da\3\2\2\2\u14da\u14db\3\2\2\2\u14db\u14dd\7#"+
		"\2\2\u14dc\u14d0\3\2\2\2\u14dc\u14dd\3\2\2\2\u14dd\u14e0\3\2\2\2\u14de"+
		"\u14df\7R\2\2\u14df\u14e1\5\u01e2\u00f2\2\u14e0\u14de\3\2\2\2\u14e0\u14e1"+
		"\3\2\2\2\u14e1\u14e2\3\2\2\2\u14e2\u14e3\7e\2\2\u14e3\u14ea\5&\24\2\u14e4"+
		"\u14e6\7R\2\2\u14e5\u14e7\t\34\2\2\u14e6\u14e5\3\2\2\2\u14e6\u14e7\3\2"+
		"\2\2\u14e7\u14e8\3\2\2\2\u14e8\u14e9\7\u00da\2\2\u14e9\u14eb\7\u00df\2"+
		"\2\u14ea\u14e4\3\2\2\2\u14ea\u14eb\3\2\2\2\u14eb\u029f\3\2\2\2\u14ec\u14ed"+
		"\7;\2\2\u14ed\u14f0\7\u00f3\2\2\u14ee\u14ef\7g\2\2\u14ef\u14f1\7s\2\2"+
		"\u14f0\u14ee\3\2\2\2\u14f0\u14f1\3\2\2\2\u14f1\u14f2\3\2\2\2\u14f2\u14f3"+
		"\5\u00e0q\2\u14f3\u02a1\3\2\2\2\u14f4\u14f6\5\u02a4\u0153\2\u14f5\u14f7"+
		"\7\32\2\2\u14f6\u14f5\3\2\2\2\u14f6\u14f7\3\2\2\2\u14f7\u14fb\3\2\2\2"+
		"\u14f8\u14fc\5\u01f8\u00fd\2\u14f9\u14fc\5\u01fa\u00fe\2\u14fa\u14fc\7"+
		"\u0099\2\2\u14fb\u14f8\3\2\2\2\u14fb\u14f9\3\2\2\2\u14fb\u14fa\3\2\2\2"+
		"\u14fc\u02a3\3\2\2\2\u14fd\u1506\5\u00ceh\2\u14fe\u14ff\7\u01cb\2\2\u14ff"+
		"\u1506\7\177\2\2\u1500\u1506\7\u01c4\2\2\u1501\u1506\7\u01d1\2\2\u1502"+
		"\u1506\7\u011c\2\2\u1503\u1506\7\u0130\2\2\u1504\u1506\7\u020c\2\2\u1505"+
		"\u14fd\3\2\2\2\u1505\u14fe\3\2\2\2\u1505\u1500\3\2\2\2\u1505\u1501\3\2"+
		"\2\2\u1505\u1502\3\2\2\2\u1505\u1503\3\2\2\2\u1505\u1504\3\2\2\2\u1506"+
		"\u02a5\3\2\2\2\u1507\u1508\7:\2\2\u1508\u151d\7B\2\2\u1509\u150a\5\u02f4"+
		"\u017b\2\u150a\u150b\5\u02f2\u017a\2\u150b\u150c\5\u0308\u0185\2\u150c"+
		"\u150d\5\u02f8\u017d\2\u150d\u151e\3\2\2\2\u150e\u150f\7v\2\2\u150f\u1510"+
		"\7u\2\2\u1510\u1511\7\u0130\2\2\u1511\u1515\5\u0308\u0185\2\u1512\u1513"+
		"\7\u011b\2\2\u1513\u1514\7{\2\2\u1514\u1516\5\u0256\u012c\2\u1515\u1512"+
		"\3\2\2\2\u1515\u1516\3\2\2\2\u1516\u1517\3\2\2\2\u1517\u1518\7A\2\2\u1518"+
		"\u1519\7\u0130\2\2\u1519\u151b\5\u00e0q\2\u151a\u151c\7\u018e\2\2\u151b"+
		"\u151a\3\2\2\2\u151b\u151c\3\2\2\2\u151c\u151e\3\2\2\2\u151d\u1509\3\2"+
		"\2\2\u151d\u150e\3\2\2\2\u151e\u02a7\3\2\2\2\u151f\u1520\7:\2\2\u1520"+
		"\u1525\7D\2\2\u1521\u1526\5\u032c\u0197\2\u1522\u1523\7v\2\2\u1523\u1524"+
		"\7u\2\2\u1524\u1526\7\u0130\2\2\u1525\u1521\3\2\2\2\u1525\u1522\3\2\2"+
		"\2\u1526\u1527\3\2\2\2\u1527\u1528\5\u00e8u\2\u1528\u1529\5\u02fc\u017f"+
		"\2\u1529\u02a9\3\2\2\2\u152a\u152b\7;\2\2\u152b\u152c\7B\2\2\u152c\u152d"+
		"\5\u02f4\u017b\2\u152d\u152f\5\u00e2r\2\u152e\u1530\5\u02ac\u0157\2\u152f"+
		"\u152e\3\2\2\2\u152f\u1530\3\2\2\2\u1530\u02ab\3\2\2\2\u1531\u1532\t\35"+
		"\2\2\u1532\u02ad\3\2\2\2\u1533\u1534\7;\2\2\u1534\u1535\7D\2\2\u1535\u1536"+
		"\5\u02ee\u0178\2\u1536\u1537\5\u032c\u0197\2\u1537\u1539\5\u032e\u0198"+
		"\2\u1538\u153a\5\u02b0\u0159\2\u1539\u1538\3\2\2\2\u1539\u153a\3\2\2\2"+
		"\u153a\u02af\3\2\2\2\u153b\u153c\t\35\2\2\u153c\u02b1\3\2\2\2\u153d\u153f"+
		"\7<\2\2\u153e\u1540\7B\2\2\u153f\u153e\3\2\2\2\u153f\u1540\3\2\2\2\u1540"+
		"\u1541\3\2\2\2\u1541\u1542\5\u02f2\u017a\2\u1542\u1544\5\u0306\u0184\2"+
		"\u1543\u1545\5\u02b4\u015b\2\u1544\u1543\3\2\2\2\u1544\u1545\3\2\2\2\u1545"+
		"\u1547\3\2\2\2\u1546\u1548\5\u02ac\u0157\2\u1547\u1546\3\2\2\2\u1547\u1548"+
		"\3\2\2\2\u1548\u02b3\3\2\2\2\u1549\u154a\7\u01ab\2\2\u154a\u154e\7\u0104"+
		"\2\2\u154b\u154c\7\u0124\2\2\u154c\u154e\7\u0104\2\2\u154d\u1549\3\2\2"+
		"\2\u154d\u154b\3\2\2\2\u154e\u02b5\3\2\2\2\u154f\u1551\t\36\2\2\u1550"+
		"\u154f\3\2\2\2\u1550\u1551\3\2\2\2\u1551\u1552\3\2\2\2\u1552\u1555\t\33"+
		"\2\2\u1553\u1555\7\u0134\2\2\u1554\u1550\3\2\2\2\u1554\u1553\3\2\2\2\u1554"+
		"\u1555\3\2\2\2\u1555\u02b7\3\2\2\2\u1556\u1557\7g\2\2\u1557\u1558\7o\2"+
		"\2\u1558\u1559\7s\2\2\u1559\u02b9\3\2\2\2\u155a\u1563\7\"\2\2\u155b\u1560"+
		"\5\u02bc\u015f\2\u155c\u155d\7(\2\2\u155d\u155f\5\u02bc\u015f\2\u155e"+
		"\u155c\3\2\2\2\u155f\u1562\3\2\2\2\u1560\u155e\3\2\2\2\u1560\u1561\3\2"+
		"\2\2\u1561\u1564\3\2\2\2\u1562\u1560\3\2\2\2\u1563\u155b\3\2\2\2\u1563"+
		"\u1564\3\2\2\2\u1564\u1565\3\2\2\2\u1565\u1566\7#\2\2\u1566\u02bb\3\2"+
		"\2\2\u1567\u1572\5\u02be\u0160\2\u1568\u1572\5\u02d6\u016c\2\u1569\u156a"+
		"\7x\2\2\u156a\u156e\5\u00dan\2\u156b\u156d\5\u02d4\u016b\2\u156c\u156b"+
		"\3\2\2\2\u156d\u1570\3\2\2\2\u156e\u156c\3\2\2\2\u156e\u156f\3\2\2\2\u156f"+
		"\u1572\3\2\2\2\u1570\u156e\3\2\2\2\u1571\u1567\3\2\2\2\u1571\u1568\3\2"+
		"\2\2\u1571\u1569\3\2\2\2\u1572\u02bd\3\2\2\2\u1573\u1574\5\u00dco\2\u1574"+
		"\u1576\5\u01ec\u00f7\2\u1575\u1577\5\u01b8\u00dd\2\u1576\u1575\3\2\2\2"+
		"\u1576\u1577\3\2\2\2\u1577\u157b\3\2\2\2\u1578\u157a\5\u02c0\u0161\2\u1579"+
		"\u1578\3\2\2\2\u157a\u157d\3\2\2\2\u157b\u1579\3\2\2\2\u157b\u157c\3\2"+
		"\2\2\u157c\u02bf\3\2\2\2\u157d\u157b\3\2\2\2\u157e\u1580\5\u02c2\u0162"+
		"\2\u157f\u157e\3\2\2\2\u157f\u1580\3\2\2\2\u1580\u1581\3\2\2\2\u1581\u1582"+
		"\5\u02c4\u0163\2\u1582\u1583\5\u02d2\u016a\2\u1583\u02c1\3\2\2\2\u1584"+
		"\u1585\7E\2\2\u1585\u1586\5\u01f4\u00fb\2\u1586\u02c3\3\2\2\2\u1587\u1589"+
		"\7o\2\2\u1588\u1587\3\2\2\2\u1588\u1589\3\2\2\2\u1589\u158a\3\2\2\2\u158a"+
		"\u15bf\7p\2\2\u158b\u15bf\5\u02c6\u0164\2\u158c\u158d\7\u0099\2\2\u158d"+
		"\u15bf\5\u02c8\u0165\2\u158e\u158f\7\u00db\2\2\u158f\u1590\7\u00d8\2\2"+
		"\u1590\u1591\7e\2\2\u1591\u1592\7\"\2\2\u1592\u1593\5\u00f2z\2\u1593\u1594"+
		"\7#\2\2\u1594\u1595\7\u0217\2\2\u1595\u15bf\3\2\2\2\u1596\u159a\7\u00db"+
		"\2\2\u1597\u159b\7\u00d8\2\2\u1598\u1599\7{\2\2\u1599\u159b\7\u0099\2"+
		"\2\u159a\u1597\3\2\2\2\u159a\u1598\3\2\2\2\u159b\u159c\3\2\2\2\u159c\u159d"+
		"\7e\2\2\u159d\u15a2\7\u0104\2\2\u159e\u159f\7\"\2\2\u159f\u15a0\5\u02ca"+
		"\u0166\2\u15a0\u15a1\7#\2\2\u15a1\u15a3\3\2\2\2\u15a2\u159e\3\2\2\2\u15a2"+
		"\u15a3\3\2\2\2\u15a3\u15bf\3\2\2\2\u15a4\u15a5\7G\2\2\u15a5\u15bf\5\u02ce"+
		"\u0168\2\u15a6\u15a7\5\u00eav\2\u15a7\u15a8\5\u02ce\u0168\2\u15a8\u15bf"+
		"\3\2\2\2\u15a9\u15aa\7\u00e2\2\2\u15aa\u15ac\5\u00dan\2\u15ab\u15ad\5"+
		"\u00e4s\2\u15ac\u15ab\3\2\2\2\u15ac\u15ad\3\2\2\2\u15ad\u15b4\3\2\2\2"+
		"\u15ae\u15af\7\u0112\2\2\u15af\u15b5\7]\2\2\u15b0\u15b1\7\u0112\2\2\u15b1"+
		"\u15b5\7\u011d\2\2\u15b2\u15b3\7\u0112\2\2\u15b3\u15b5\7\u012d\2\2\u15b4"+
		"\u15ae\3\2\2\2\u15b4\u15b0\3\2\2\2\u15b4\u15b2\3\2\2\2\u15b4\u15b5\3\2"+
		"\2\2\u15b5\u15bb\3\2\2\2\u15b6\u15b7\7f\2\2\u15b7\u15b8\t\37\2\2\u15b8"+
		"\u15ba\5\u02d0\u0169\2\u15b9\u15b6\3\2\2\2\u15ba\u15bd\3\2\2\2\u15bb\u15b9"+
		"\3\2\2\2\u15bb\u15bc\3\2\2\2\u15bc\u15bf\3\2\2\2\u15bd\u15bb\3\2\2\2\u15be"+
		"\u1588\3\2\2\2\u15be\u158b\3\2\2\2\u15be\u158c\3\2\2\2\u15be\u158e\3\2"+
		"\2\2\u15be\u1596\3\2\2\2\u15be\u15a4\3\2\2\2\u15be\u15a6\3\2\2\2\u15be"+
		"\u15a9\3\2\2\2\u15bf\u02c5\3\2\2\2\u15c0\u15c1\7\u00da\2\2\u15c1\u15c4"+
		"\5\u00f2z\2\u15c2\u15c3\7\u00de\2\2\u15c3\u15c5\7\u0109\2\2\u15c4\u15c2"+
		"\3\2\2\2\u15c4\u15c5\3\2\2\2\u15c5\u02c7\3\2\2\2\u15c6\u15c9\7\u00b7\2"+
		"\2\u15c7\u15c9\5\u00f2z\2\u15c8\u15c6\3\2\2\2\u15c8\u15c7\3\2\2\2\u15c9"+
		"\u02c9\3\2\2\2\u15ca\u15cc\5\u02cc\u0167\2\u15cb\u15ca\3\2\2\2\u15cc\u15cd"+
		"\3\2\2\2\u15cd\u15cb\3\2\2\2\u15cd\u15ce\3\2\2\2\u15ce\u02cb\3\2\2\2\u15cf"+
		"\u15d1\7\u00e5\2\2\u15d0\u15d2\7R\2\2\u15d1\u15d0\3\2\2\2\u15d1\u15d2"+
		"\3\2\2\2\u15d2\u15d3\3\2\2\2\u15d3\u15e9\7\u0225\2\2\u15d4\u15d6\7\u0107"+
		"\2\2\u15d5\u15d7\7{\2\2\u15d6\u15d5\3\2\2\2\u15d6\u15d7\3\2\2\2\u15d7"+
		"\u15d8\3\2\2\2\u15d8\u15e9\7\u0225\2\2\u15d9\u15da\7\u0113\2\2\u15da\u15e9"+
		"\7\u0225\2\2\u15db\u15dc\7\u00de\2\2\u15dc\u15e9\7\u0113\2\2\u15dd\u15de"+
		"\7\u0114\2\2\u15de\u15e9\7\u0225\2\2\u15df\u15e0\7\u00de\2\2\u15e0\u15e9"+
		"\7\u0114\2\2\u15e1\u15e9\7\u00f1\2\2\u15e2\u15e3\7\u00de\2\2\u15e3\u15e9"+
		"\7\u00f1\2\2\u15e4\u15e5\7\u00e9\2\2\u15e5\u15e9\7\u0225\2\2\u15e6\u15e7"+
		"\7\u011b\2\2\u15e7\u15e9\7{\2\2\u15e8\u15cf\3\2\2\2\u15e8\u15d4\3\2\2"+
		"\2\u15e8\u15d9\3\2\2\2\u15e8\u15db\3\2\2\2\u15e8\u15dd\3\2\2\2\u15e8\u15df"+
		"\3\2\2\2\u15e8\u15e1\3\2\2\2\u15e8\u15e2\3\2\2\2\u15e8\u15e4\3\2\2\2\u15e8"+
		"\u15e6\3\2\2\2\u15e9\u02cd\3\2\2\2\u15ea\u15eb\7c\2\2\u15eb\u15ec\7D\2"+
		"\2\u15ec\u15ed\7\u0130\2\2\u15ed\u15ef\5\u01f4\u00fb\2\u15ee\u15ea\3\2"+
		"\2\2\u15ee\u15ef\3\2\2\2\u15ef\u15f5\3\2\2\2\u15f0\u15f1\7\u010c\2\2\u15f1"+
		"\u15f5\5\u00e4s\2\u15f2\u15f3\7R\2\2\u15f3\u15f5\5\u022c\u0117\2\u15f4"+
		"\u15ee\3\2\2\2\u15f4\u15f0\3\2\2\2\u15f4\u15f2\3\2\2\2\u15f5\u02cf\3\2"+
		"\2\2\u15f6\u15f7\7\u00de\2\2\u15f7\u15fd\7\u00e8\2\2\u15f8\u15fd\7\u0125"+
		"\2\2\u15f9\u15fd\7\u00d9\2\2\u15fa\u15fb\7A\2\2\u15fb\u15fd\t \2\2\u15fc"+
		"\u15f6\3\2\2\2\u15fc\u15f8\3\2\2\2\u15fc\u15f9\3\2\2\2\u15fc\u15fa\3\2"+
		"\2\2\u15fd\u02d1\3\2\2\2\u15fe\u1600\7o\2\2\u15ff\u15fe\3\2\2\2\u15ff"+
		"\u1600\3\2\2\2\u1600\u1601\3\2\2\2\u1601\u1603\7\u00f5\2\2\u1602\u15ff"+
		"\3\2\2\2\u1602\u1603\3\2\2\2\u1603\u1606\3\2\2\2\u1604\u1605\7\u010b\2"+
		"\2\u1605\u1607\t!\2\2\u1606\u1604\3\2\2\2\u1606\u1607\3\2\2\2\u1607\u02d3"+
		"\3\2\2\2\u1608\u1609\t\"\2\2\u1609\u160a\t#\2\2\u160a\u02d5\3\2\2\2\u160b"+
		"\u160d\5\u02c2\u0162\2\u160c\u160b\3\2\2\2\u160c\u160d\3\2\2\2\u160d\u160e"+
		"\3\2\2\2\u160e\u160f\5\u02d8\u016d\2\u160f\u1610\5\u02d2\u016a\2\u1610"+
		"\u02d7\3\2\2\2\u1611\u163f\5\u02c6\u0164\2\u1612\u1613\7G\2\2\u1613\u1614"+
		"\5\u00e4s\2\u1614\u1615\5\u02ce\u0168\2\u1615\u163f\3\2\2\2\u1616\u1617"+
		"\5\u00eav\2\u1617\u1618\5\u00e4s\2\u1618\u1619\5\u02ce\u0168\2\u1619\u163f"+
		"\3\2\2\2\u161a\u161d\7\u00d3\2\2\u161b\u161c\7c\2\2\u161c\u161e\5\u01f4"+
		"\u00fb\2\u161d\u161b\3\2\2\2\u161d\u161e\3\2\2\2\u161e\u161f\3\2\2\2\u161f"+
		"\u1620\7\"\2\2\u1620\u1621\5\u02dc\u016f\2\u1621\u1622\7#\2\2\u1622\u1624"+
		"\5\u02ce\u0168\2\u1623\u1625\5\u02da\u016e\2\u1624\u1623\3\2\2\2\u1624"+
		"\u1625\3\2\2\2\u1625\u163f\3\2\2\2\u1626\u1627\7H\2\2\u1627\u1628\7I\2"+
		"\2\u1628\u1629\5\u00e4s\2\u1629\u162a\7\u00e2\2\2\u162a\u162c\5\u00da"+
		"n\2\u162b\u162d\5\u00e4s\2\u162c\u162b\3\2\2\2\u162c\u162d\3\2\2\2\u162d"+
		"\u1634\3\2\2\2\u162e\u162f\7\u0112\2\2\u162f\u1635\7]\2\2\u1630\u1631"+
		"\7\u0112\2\2\u1631\u1635\7\u011d\2\2\u1632\u1633\7\u0112\2\2\u1633\u1635"+
		"\7\u012d\2\2\u1634\u162e\3\2\2\2\u1634\u1630\3\2\2\2\u1634\u1632\3\2\2"+
		"\2\u1634\u1635\3\2\2\2\u1635\u163b\3\2\2\2\u1636\u1637\7f\2\2\u1637\u1638"+
		"\t\37\2\2\u1638\u163a\5\u02d0\u0169\2\u1639\u1636\3\2\2\2\u163a\u163d"+
		"\3\2\2\2\u163b\u1639\3\2\2\2\u163b\u163c\3\2\2\2\u163c\u163f\3\2\2\2\u163d"+
		"\u163b\3\2\2\2\u163e\u1611\3\2\2\2\u163e\u1612\3\2\2\2\u163e\u1616\3\2"+
		"\2\2\u163e\u161a\3\2\2\2\u163e\u1626\3\2\2\2\u163f\u02d9\3\2\2\2\u1640"+
		"\u1641\7d\2\2\u1641\u1642\7\"\2\2\u1642\u1643\5\u00f2z\2\u1643\u1644\7"+
		"#\2\2\u1644\u02db\3\2\2\2\u1645\u164a\5\u02de\u0170\2\u1646\u1647\7(\2"+
		"\2\u1647\u1649\5\u02de\u0170\2\u1648\u1646\3\2\2\2\u1649\u164c\3\2\2\2"+
		"\u164a\u1648\3\2\2\2\u164a\u164b\3\2\2\2\u164b\u02dd\3\2\2\2\u164c\u164a"+
		"\3\2\2\2\u164d\u164e\5\u01dc\u00ef\2\u164e\u164f\7R\2\2\u164f\u1650\5"+
		"\u011c\u008f\2\u1650\u1659\3\2\2\2\u1651\u1652\5\u01dc\u00ef\2\u1652\u1653"+
		"\7R\2\2\u1653\u1654\7\u0182\2\2\u1654\u1655\7\"\2\2\u1655\u1656\5\u011c"+
		"\u008f\2\u1656\u1657\7#\2\2\u1657\u1659\3\2\2\2\u1658\u164d\3\2\2\2\u1658"+
		"\u1651\3\2\2\2\u1659\u02df\3\2\2\2\u165a\u165b\7\u010a\2\2\u165b\u165d"+
		"\5\u00e2r\2\u165c\u165a\3\2\2\2\u165c\u165d\3\2\2\2\u165d\u02e1\3\2\2"+
		"\2\u165e\u165f\7\u00d5\2\2\u165f\u1660\7{\2\2\u1660\u1661\5\u02ea\u0176"+
		"\2\u1661\u1662\7\"\2\2\u1662\u1663\5\u02e4\u0173\2\u1663\u1664\7#\2\2"+
		"\u1664\u02e3\3\2\2\2\u1665\u166a\5\u02e6\u0174\2\u1666\u1667\7(\2\2\u1667"+
		"\u1669\5\u02e6\u0174\2\u1668\u1666\3\2\2\2\u1669\u166c\3\2\2\2\u166a\u1668"+
		"\3\2\2\2\u166a\u166b\3\2\2\2\u166b\u02e5\3\2\2\2\u166c\u166a\3\2\2\2\u166d"+
		"\u1670\5\u013a\u009e\2\u166e\u166f\7\u00ec\2\2\u166f\u1671\5\u01ba\u00de"+
		"\2\u1670\u166e\3\2\2\2\u1670\u1671\3\2\2\2\u1671\u1673\3\2\2\2\u1672\u1674"+
		"\5\u01ba\u00de\2\u1673\u1672\3\2\2\2\u1673\u1674\3\2\2\2\u1674\u1688\3"+
		"\2\2\2\u1675\u1676\7\"\2\2\u1676\u1677\5\u00f2z\2\u1677\u167a\7#\2\2\u1678"+
		"\u1679\7\u00ec\2\2\u1679\u167b\5\u01ba\u00de\2\u167a\u1678\3\2\2\2\u167a"+
		"\u167b\3\2\2\2\u167b\u167d\3\2\2\2\u167c\u167e\5\u01ba\u00de\2\u167d\u167c"+
		"\3\2\2\2\u167d\u167e\3\2\2\2\u167e\u1688\3\2\2\2\u167f\u1682\5\u02e8\u0175"+
		"\2\u1680\u1681\7\u00ec\2\2\u1681\u1683\5\u01ba\u00de\2\u1682\u1680\3\2"+
		"\2\2\u1682\u1683\3\2\2\2\u1683\u1685\3\2\2\2\u1684\u1686\5\u01ba\u00de"+
		"\2\u1685\u1684\3\2\2\2\u1685\u1686\3\2\2\2\u1686\u1688\3\2\2\2\u1687\u166d"+
		"\3\2\2\2\u1687\u1675\3\2\2\2\u1687\u167f\3\2\2\2\u1688\u02e7\3\2\2\2\u1689"+
		"\u168c\5\u0134\u009b\2\u168a\u168c\5\u0158\u00ad\2\u168b\u1689\3\2\2\2"+
		"\u168b\u168a\3\2\2\2\u168c\u02e9\3\2\2\2\u168d\u1690\5\u00ceh\2\u168e"+
		"\u1690\5\u00d4k\2\u168f\u168d\3\2\2\2\u168f\u168e\3\2\2\2\u1690\u02eb"+
		"\3\2\2\2\u1691\u1693\7G\2\2\u1692\u1691\3\2\2\2\u1692\u1693\3\2\2\2\u1693"+
		"\u02ed\3\2\2\2\u1694\u1696\7\u00ee\2\2\u1695\u1694\3\2\2\2\u1695\u1696"+
		"\3\2\2\2\u1696\u02ef\3\2\2\2\u1697\u1698\7g\2\2\u1698\u1699\7o\2\2\u1699"+
		"\u169b\7s\2\2\u169a\u1697\3\2\2\2\u169a\u169b\3\2\2\2\u169b\u02f1\3\2"+
		"\2\2\u169c\u169e\7\u0119\2\2\u169d\u169c\3\2\2\2\u169d\u169e\3\2\2\2\u169e"+
		"\u02f3\3\2\2\2\u169f\u16a0\7g\2\2\u16a0\u16a2\7s\2\2\u16a1\u169f\3\2\2"+
		"\2\u16a1\u16a2\3\2\2\2\u16a2\u02f5\3\2\2\2\u16a3\u16a5\7\23\2\2\u16a4"+
		"\u16a3\3\2\2\2\u16a4\u16a5\3\2\2\2\u16a5\u02f7\3\2\2\2\u16a6\u16af\5\u030a"+
		"\u0186\2\u16a7\u16af\5\u0326\u0194\2\u16a8\u16af\5\u0328\u0195\2\u16a9"+
		"\u16af\5\u032a\u0196\2\u16aa\u16ab\7A\2\2\u16ab\u16ac\7=\2\2\u16ac\u16af"+
		"\5\u00e0q\2\u16ad\u16af\5\u02fa\u017e\2\u16ae\u16a6\3\2\2\2\u16ae\u16a7"+
		"\3\2\2\2\u16ae\u16a8\3\2\2\2\u16ae\u16a9\3\2\2\2\u16ae\u16aa\3\2\2\2\u16ae"+
		"\u16ad\3\2\2\2\u16af\u02f9\3\2\2\2\u16b0\u16b1\7\u01a5\2\2\u16b1\u16b2"+
		"\7\u00d5\2\2\u16b2\u16b3\5N(\2\u16b3\u16b4\5\u027c\u013f\2\u16b4\u16b9"+
		"\3\2\2\2\u16b5\u16b6\7\u01b7\2\2\u16b6\u16b7\7\u00d5\2\2\u16b7\u16b9\5"+
		"N(\2\u16b8\u16b0\3\2\2\2\u16b8\u16b5\3\2\2\2\u16b9\u02fb\3\2\2\2\u16ba"+
		"\u16c0\5\u0300\u0181\2\u16bb\u16c0\5\u0302\u0182\2\u16bc\u16c0\5\u0304"+
		"\u0183\2\u16bd\u16c0\5\u0338\u019d\2\u16be\u16c0\5\u02fe\u0180\2\u16bf"+
		"\u16ba\3\2\2\2\u16bf\u16bb\3\2\2\2\u16bf\u16bc\3\2\2\2\u16bf\u16bd\3\2"+
		"\2\2\u16bf\u16be\3\2\2\2\u16c0\u02fd\3\2\2\2\u16c1\u16c2\7\u01a5\2\2\u16c2"+
		"\u16c3\7\u00d5\2\2\u16c3\u16c4\5N(\2\u16c4\u02ff\3\2\2\2\u16c5\u16c6\7"+
		"\u0121\2\2\u16c6\u16c7\7k\2\2\u16c7\u16c8\5\u00e8u\2\u16c8\u0301\3\2\2"+
		"\2\u16c9\u16ca\7\u00f7\2\2\u16ca\u16cb\7f\2\2\u16cb\u16cc\7\u00fc\2\2"+
		"\u16cc\u16cd\5\u01f4\u00fb\2\u16cd\u0303\3\2\2\2\u16ce\u16cf\7\u011b\2"+
		"\2\u16cf\u16d0\7{\2\2\u16d0\u16d2\5\u01f6\u00fc\2\u16d1\u16ce\3\2\2\2"+
		"\u16d1\u16d2\3\2\2\2\u16d2\u16d3\3\2\2\2\u16d3\u16d4\7A\2\2\u16d4\u16d5"+
		"\7\u0130\2\2\u16d5\u16d7\5\u00e0q\2\u16d6\u16d8\7\u018e\2\2\u16d7\u16d6"+
		"\3\2\2\2\u16d7\u16d8\3\2\2\2\u16d8\u0305\3\2\2\2\u16d9\u16de\5\u0308\u0185"+
		"\2\u16da\u16db\7(\2\2\u16db\u16dd\5\u0308\u0185\2\u16dc\u16da\3\2\2\2"+
		"\u16dd\u16e0\3\2\2\2\u16de\u16dc\3\2\2\2\u16de\u16df\3\2\2\2\u16df\u0307"+
		"\3\2\2\2\u16e0\u16de\3\2\2\2\u16e1\u16e3\5\u00dan\2\u16e2\u16e4\7\23\2"+
		"\2\u16e3\u16e2\3\2\2\2\u16e3\u16e4\3\2\2\2\u16e4\u0309\3\2\2\2\u16e5\u16ea"+
		"\5\u030c\u0187\2\u16e6\u16e7\7(\2\2\u16e7\u16e9\5\u030c\u0187\2\u16e8"+
		"\u16e6\3\2\2\2\u16e9\u16ec\3\2\2\2\u16ea\u16e8\3\2\2\2\u16ea\u16eb\3\2"+
		"\2\2\u16eb\u030b\3\2\2\2\u16ec\u16ea\3\2\2\2\u16ed\u175e\5\u030e\u0188"+
		"\2\u16ee\u175e\5\u0310\u0189\2\u16ef\u175e\5\u0314\u018b\2\u16f0\u175e"+
		"\5\u031e\u0190\2\u16f1\u16f2\7:\2\2\u16f2\u16f3\7E\2\2\u16f3\u16f4\5\u01f4"+
		"\u00fb\2\u16f4\u16f5\5\u02d2\u016a\2\u16f5\u175e\3\2\2\2\u16f6\u16f7\7"+
		"\u0137\2\2\u16f7\u16f8\7E\2\2\u16f8\u175e\5\u01f4\u00fb\2\u16f9\u16fa"+
		"\7;\2\2\u16fa\u16fb\7E\2\2\u16fb\u16fc\5\u032c\u0197\2\u16fc\u16fe\5\u01f4"+
		"\u00fb\2\u16fd\u16ff\t\35\2\2\u16fe\u16fd\3\2\2\2\u16fe\u16ff\3\2\2\2"+
		"\u16ff\u175e\3\2\2\2\u1700\u1701\t$\2\2\u1701\u1705\7M\2\2\u1702\u1706"+
		"\5\u01f4\u00fb\2\u1703\u1706\7v\2\2\u1704\u1706\7\u00e7\2\2\u1705\u1702"+
		"\3\2\2\2\u1705\u1703\3\2\2\2\u1705\u1704\3\2\2\2\u1705\u1706\3\2\2\2\u1706"+
		"\u175e\3\2\2\2\u1707\u1708\7\u009b\2\2\u1708\u1709\t%\2\2\u1709\u170a"+
		"\7M\2\2\u170a\u175e\5\u01f4\u00fb\2\u170b\u170c\t$\2\2\u170c\u170d\7\u0127"+
		"\2\2\u170d\u175e\5\u01f4\u00fb\2\u170e\u170f\7\u009b\2\2\u170f\u1710\t"+
		"%\2\2\u1710\u1711\7\u0127\2\2\u1711\u175e\5\u01f4\u00fb\2\u1712\u1719"+
		"\7\u009c\2\2\u1713\u1719\7\u009b\2\2\u1714\u1716\7\u00de\2\2\u1715\u1714"+
		"\3\2\2\2\u1715\u1716\3\2\2\2\u1716\u1717\3\2\2\2\u1717\u1719\7\u0102\2"+
		"\2\u1718\u1712\3\2\2\2\u1718\u1713\3\2\2\2\u1718\u1715\3\2\2\2\u1719\u171a"+
		"\3\2\2\2\u171a\u171b\7\u00d6\2\2\u171b\u171c\7\u00dd\2\2\u171c\u175e\7"+
		"\u0128\2\2\u171d\u171e\7\u00eb\2\2\u171e\u171f\7f\2\2\u171f\u175e\5\u00e8"+
		"u\2\u1720\u1721\7A\2\2\u1721\u1722\7\u0139\2\2\u1722\u175e\7\u00eb\2\2"+
		"\u1723\u1724\7A\2\2\u1724\u1725\t&\2\2\u1725\u175e\7\u0118\2\2\u1726\u1727"+
		"\7A\2\2\u1727\u1728\7\u0130\2\2\u1728\u175e\5\u01f4\u00fb\2\u1729\u172a"+
		"\7A\2\2\u172a\u175e\t\'\2\2\u172b\u172c\7A\2\2\u172c\u172d\7\"\2\2\u172d"+
		"\u1732\5\u0322\u0192\2\u172e\u172f\7(\2\2\u172f\u1731\5\u0322\u0192\2"+
		"\u1730\u172e\3\2\2\2\u1731\u1734\3\2\2\2\u1732\u1730\3\2\2\2\u1732\u1733"+
		"\3\2\2\2\u1733\u1735\3\2\2\2\u1734\u1732\3\2\2\2\u1735\u1736\7#\2\2\u1736"+
		"\u175e\3\2\2\2\u1737\u1738\7\u0123\2\2\u1738\u1739\7\"\2\2\u1739\u173e"+
		"\5\u0324\u0193\2\u173a\u173b\7(\2\2\u173b\u173d\5\u0324\u0193\2\u173c"+
		"\u173a\3\2\2\2\u173d\u1740\3\2\2\2\u173e\u173c\3\2\2\2\u173e\u173f\3\2"+
		"\2\2\u173f\u1741\3\2\2\2\u1740\u173e\3\2\2\2\u1741\u1742\7#\2\2\u1742"+
		"\u175e\3\2\2\2\u1743\u1744\7\u0109\2\2\u1744\u175e\5\u00dan\2\u1745\u1746"+
		"\7\u00de\2\2\u1746\u1747\7\u0109\2\2\u1747\u175e\5\u00dan\2\u1748\u1749"+
		"\7\u013b\2\2\u1749\u175e\5\u01ee\u00f8\2\u174a\u174b\7o\2\2\u174b\u175e"+
		"\7\u013b\2\2\u174c\u174d\7\u011c\2\2\u174d\u1751\7k\2\2\u174e\u1752\5"+
		"\u01f4\u00fb\2\u174f\u1752\7\u00a2\2\2\u1750\u1752\7\u012b\2\2\u1751\u174e"+
		"\3\2\2\2\u1751\u174f\3\2\2\2\u1751\u1750\3\2\2\2\u1752\u175e\3\2\2\2\u1753"+
		"\u1754\7\u0122\2\2\u1754\u175b\7\u0104\2\2\u1755\u175c\7\u0099\2\2\u1756"+
		"\u1757\7c\2\2\u1757\u1758\7D\2\2\u1758\u175c\5\u00e8u\2\u1759\u175c\7"+
		"]\2\2\u175a\u175c\7\u0115\2\2\u175b\u1755\3\2\2\2\u175b\u1756\3\2\2\2"+
		"\u175b\u1759\3\2\2\2\u175b\u175a\3\2\2\2\u175c\u175e\3\2\2\2\u175d\u16ed"+
		"\3\2\2\2\u175d\u16ee\3\2\2\2\u175d\u16ef\3\2\2\2\u175d\u16f0\3\2\2\2\u175d"+
		"\u16f1\3\2\2\2\u175d\u16f6\3\2\2\2\u175d\u16f9\3\2\2\2\u175d\u1700\3\2"+
		"\2\2\u175d\u1707\3\2\2\2\u175d\u170b\3\2\2\2\u175d\u170e\3\2\2\2\u175d"+
		"\u1718\3\2\2\2\u175d\u171d\3\2\2\2\u175d\u1720\3\2\2\2\u175d\u1723\3\2"+
		"\2\2\u175d\u1726\3\2\2\2\u175d\u1729\3\2\2\2\u175d\u172b\3\2\2\2\u175d"+
		"\u1737\3\2\2\2\u175d\u1743\3\2\2\2\u175d\u1745\3\2\2\2\u175d\u1748\3\2"+
		"\2\2\u175d\u174a\3\2\2\2\u175d\u174c\3\2\2\2\u175d\u1753\3\2\2\2\u175e"+
		"\u030d\3\2\2\2\u175f\u1761\7@\2\2\u1760\u1762\7C\2\2\u1761\u1760\3\2\2"+
		"\2\u1761\u1762\3\2\2\2\u1762\u1766\3\2\2\2\u1763\u1764\7g\2\2\u1764\u1765"+
		"\7o\2\2\u1765\u1767\7s\2\2\u1766\u1763\3\2\2\2\u1766\u1767\3\2\2\2\u1767"+
		"\u1768\3\2\2\2\u1768\u1769\5\u02be\u0160\2\u1769\u030f\3\2\2\2\u176a\u176c"+
		"\7;\2\2\u176b\u176d\7C\2\2\u176c\u176b\3\2\2\2\u176c\u176d\3\2\2\2\u176d"+
		"\u176e\3\2\2\2\u176e\u176f\5\u0312\u018a\2\u176f\u1771\5\u00dco\2\u1770"+
		"\u1772\t\35\2\2\u1771\u1770\3\2\2\2\u1771\u1772\3\2\2\2\u1772\u0311\3"+
		"\2\2\2\u1773\u1774\7g\2\2\u1774\u1776\7s\2\2\u1775\u1773\3\2\2\2\u1775"+
		"\u1776\3\2\2\2\u1776\u0313\3\2\2\2\u1777\u177a\5\u0316\u018c\2\u1778\u1779"+
		"\7A\2\2\u1779\u177b\7\u00f2\2\2\u177a\u1778\3\2\2\2\u177a\u177b\3\2\2"+
		"\2\u177b\u177c\3\2\2\2\u177c\u177d\7\u00af\2\2\u177d\u177f\5\u01ec\u00f7"+
		"\2\u177e\u1780\5\u01b8\u00dd\2\u177f\u177e\3\2\2\2\u177f\u1780\3\2\2\2"+
		"\u1780\u1783\3\2\2\2\u1781\u1782\7c\2\2\u1782\u1784\5\u00f2z\2\u1783\u1781"+
		"\3\2\2\2\u1783\u1784\3\2\2\2\u1784\u17c7\3\2\2\2\u1785\u1786\5\u0316\u018c"+
		"\2\u1786\u1787\7A\2\2\u1787\u1788\7\u0099\2\2\u1788\u1789\5\u00f2z\2\u1789"+
		"\u17c7\3\2\2\2\u178a\u178b\5\u0316\u018c\2\u178b\u178c\7;\2\2\u178c\u178d"+
		"\7\u0099\2\2\u178d\u17c7\3\2\2\2\u178e\u178f\5\u0316\u018c\2\u178f\u1790"+
		"\t(\2\2\u1790\u1791\7o\2\2\u1791\u1792\7p\2\2\u1792\u17c7\3\2\2\2\u1793"+
		"\u1794\5\u0316\u018c\2\u1794\u1795\7@\2\2\u1795\u1799\7\u00db\2\2\u1796"+
		"\u179a\7\u00d8\2\2\u1797\u1798\7{\2\2\u1798\u179a\7\u0099\2\2\u1799\u1796"+
		"\3\2\2\2\u1799\u1797\3\2\2\2\u179a\u179b\3\2\2\2\u179b\u179c\7e\2\2\u179c"+
		"\u17a1\7\u0104\2\2\u179d\u179e\7\"\2\2\u179e\u179f\5\u02ca\u0166\2\u179f"+
		"\u17a0\7#\2\2\u17a0\u17a2\3\2\2\2\u17a1\u179d\3\2\2\2\u17a1\u17a2\3\2"+
		"\2\2\u17a2\u17c7\3\2\2\2\u17a3\u17a4\5\u0316\u018c\2\u17a4\u17a8\5\u0318"+
		"\u018d\2\u17a5\u17a7\5\u0318\u018d\2\u17a6\u17a5\3\2\2\2\u17a7\u17aa\3"+
		"\2\2\2\u17a8\u17a6\3\2\2\2\u17a8\u17a9\3\2\2\2\u17a9\u17c7\3\2\2\2\u17aa"+
		"\u17a8\3\2\2\2\u17ab\u17ac\5\u0316\u018c\2\u17ac\u17ad\7;\2\2\u17ad\u17ae"+
		"\7\u0104\2\2\u17ae\u17af\5\u0312\u018a\2\u17af\u17c7\3\2\2\2\u17b0\u17b1"+
		"\5\u0316\u018c\2\u17b1\u17b2\7A\2\2\u17b2\u17b3\7\u012e\2\2\u17b3\u17b4"+
		"\7\u0225\2\2\u17b4\u17c7\3\2\2\2\u17b5\u17b6\5\u0316\u018c\2\u17b6\u17b7"+
		"\7A\2\2\u17b7\u17b8\7\"\2\2\u17b8\u17b9\5\u031a\u018e\2\u17b9\u17ba\7"+
		"#\2\2\u17ba\u17c7\3\2\2\2\u17bb\u17bc\5\u0316\u018c\2\u17bc\u17bd\7\u0123"+
		"\2\2\u17bd\u17be\7\"\2\2\u17be\u17bf\5\u031a\u018e\2\u17bf\u17c0\7#\2"+
		"\2\u17c0\u17c7\3\2\2\2\u17c1\u17c2\5\u0316\u018c\2\u17c2\u17c3\7A\2\2"+
		"\u17c3\u17c4\7\u012f\2\2\u17c4\u17c5\t)\2\2\u17c5\u17c7\3\2\2\2\u17c6"+
		"\u1777\3\2\2\2\u17c6\u1785\3\2\2\2\u17c6\u178a\3\2\2\2\u17c6\u178e\3\2"+
		"\2\2\u17c6\u1793\3\2\2\2\u17c6\u17a3\3\2\2\2\u17c6\u17ab\3\2\2\2\u17c6"+
		"\u17b0\3\2\2\2\u17c6\u17b5\3\2\2\2\u17c6\u17bb\3\2\2\2\u17c6\u17c1\3\2"+
		"\2\2\u17c7\u0315\3\2\2\2\u17c8\u17ca\7:\2\2\u17c9\u17cb\7C\2\2\u17ca\u17c9"+
		"\3\2\2\2\u17ca\u17cb\3\2\2\2\u17cb\u17cc\3\2\2\2\u17cc\u17cd\5\u00dco"+
		"\2\u17cd\u0317\3\2\2\2\u17ce\u17d6\7A\2\2\u17cf\u17d3\7\u00db\2\2\u17d0"+
		"\u17d4\7\u00d8\2\2\u17d1\u17d2\7{\2\2\u17d2\u17d4\7\u0099\2\2\u17d3\u17d0"+
		"\3\2\2\2\u17d3\u17d1\3\2\2\2\u17d4\u17d7\3\2\2\2\u17d5\u17d7\5\u02cc\u0167"+
		"\2\u17d6\u17cf\3\2\2\2\u17d6\u17d5\3\2\2\2\u17d7\u17e0\3\2\2\2\u17d8\u17dd"+
		"\7\u0124\2\2\u17d9\u17db\7R\2\2\u17da\u17d9\3\2\2\2\u17da\u17db\3\2\2"+
		"\2\u17db\u17dc\3\2\2\2\u17dc\u17de\7\u0225\2\2\u17dd\u17da\3\2\2\2\u17dd"+
		"\u17de\3\2\2\2\u17de\u17e0\3\2\2\2\u17df\u17ce\3\2\2\2\u17df\u17d8\3\2"+
		"\2\2\u17e0\u0319\3\2\2\2\u17e1\u17e6\5\u031c\u018f\2\u17e2\u17e3\7(\2"+
		"\2\u17e3\u17e5\5\u031c\u018f\2\u17e4\u17e2\3\2\2\2\u17e5\u17e8\3\2\2\2"+
		"\u17e6\u17e4\3\2\2\2\u17e6\u17e7\3\2\2\2\u17e7\u031b\3\2\2\2\u17e8\u17e6"+
		"\3\2\2\2\u17e9\u17ea\7\u0223\2\2\u17ea\u17eb\7\32\2\2\u17eb\u17ec\5\u00f2"+
		"z\2\u17ec\u031d\3\2\2\2\u17ed\u17f4\7@\2\2\u17ee\u17f1\5\u02d6\u016c\2"+
		"\u17ef\u17f0\7o\2\2\u17f0\u17f2\7\u0136\2\2\u17f1\u17ef\3\2\2\2\u17f1"+
		"\u17f2\3\2\2\2\u17f2\u17f5\3\2\2\2\u17f3\u17f5\5\u0320\u0191\2\u17f4\u17ee"+
		"\3\2\2\2\u17f4\u17f3\3\2\2\2\u17f5\u031f\3\2\2\2\u17f6\u17f7\7E\2\2\u17f7"+
		"\u17f9\5\u01f4\u00fb\2\u17f8\u17f6\3\2\2\2\u17f8\u17f9\3\2\2\2\u17f9\u17fc"+
		"\3\2\2\2\u17fa\u17fd\7G\2\2\u17fb\u17fd\5\u00eav\2\u17fc\u17fa\3\2\2\2"+
		"\u17fc\u17fb\3\2\2\2\u17fd\u17fe\3\2\2\2\u17fe\u17ff\7c\2\2\u17ff\u1800"+
		"\7D\2\2\u1800\u1801\5\u00e8u\2\u1801\u1802\5\u02d2\u016a\2\u1802\u0321"+
		"\3\2\2\2\u1803\u1804\5\u0324\u0193\2\u1804\u1805\7\32\2\2\u1805\u1806"+
		"\5\u00f2z\2\u1806\u0323\3\2\2\2\u1807\u1808\7\u0223\2\2\u1808\u0325\3"+
		"\2\2\2\u1809\u180b\7\u0121\2\2\u180a\u180c\7C\2\2\u180b\u180a\3\2\2\2"+
		"\u180b\u180c\3\2\2\2\u180c\u180d\3\2\2\2\u180d\u180e\5\u00dco\2\u180e"+
		"\u180f\7k\2\2\u180f\u1810\5\u00dco\2\u1810\u0327\3\2\2\2\u1811\u1812\7"+
		"\u0121\2\2\u1812\u1813\7E\2\2\u1813\u1814\5\u01f4\u00fb\2\u1814\u1815"+
		"\7k\2\2\u1815\u1816\5\u01f4\u00fb\2\u1816\u0329\3\2\2\2\u1817\u1818\7"+
		"\u0121\2\2\u1818\u1819\7k\2\2\u1819\u181a\5\u00ceh\2\u181a\u032b\3\2\2"+
		"\2\u181b\u181c\7g\2\2\u181c\u181e\7s\2\2\u181d\u181b\3\2\2\2\u181d\u181e"+
		"\3\2\2\2\u181e\u032d\3\2\2\2\u181f\u1824\5\u00e8u\2\u1820\u1821\7(\2\2"+
		"\u1821\u1823\5\u00e8u\2\u1822\u1820\3\2\2\2\u1823\u1826\3\2\2\2\u1824"+
		"\u1822\3\2\2\2\u1824\u1825\3\2\2\2\u1825\u032f\3\2\2\2\u1826\u1824\3\2"+
		"\2\2\u1827\u1828\7:\2\2\u1828\u1829\7\u00f3\2\2\u1829\u182a\5\u0200\u0101"+
		"\2\u182a\u182b\5\u0332\u019a\2\u182b\u0331\3\2\2\2\u182c\u182e\7R\2\2"+
		"\u182d\u182c\3\2\2\2\u182d\u182e\3\2\2\2\u182e\u1830\3\2\2\2\u182f\u1831"+
		"\5\u0334\u019b\2\u1830\u182f\3\2\2\2\u1830\u1831\3\2\2\2\u1831\u183d\3"+
		"\2\2\2\u1832\u1833\7\u0121\2\2\u1833\u1834\7k\2\2\u1834\u183d\5\u0200"+
		"\u0101\2\u1835\u1836\7\u011c\2\2\u1836\u1837\7k\2\2\u1837\u183d\5\u0202"+
		"\u0102\2\u1838\u1839\7A\2\2\u1839\u183a\7\u0130\2\2\u183a\u183d\5\u00e0"+
		"q\2\u183b\u183d\5\u0258\u012d\2\u183c\u182d\3\2\2\2\u183c\u1832\3\2\2"+
		"\2\u183c\u1835\3\2\2\2\u183c\u1838\3\2\2\2\u183c\u183b\3\2\2\2\u183d\u0333"+
		"\3\2\2\2\u183e\u1840\5\u0336\u019c\2\u183f\u183e\3\2\2\2\u1840\u1841\3"+
		"\2\2\2\u1841\u183f\3\2\2\2\u1841\u1842\3\2\2\2\u1842\u0335\3\2\2\2\u1843"+
		"\u1845\5\u02a4\u0153\2\u1844\u1846\7\32\2\2\u1845\u1844\3\2\2\2\u1845"+
		"\u1846\3\2\2\2\u1846\u1847\3\2\2\2\u1847\u1848\5\u01f8\u00fd\2\u1848\u1856"+
		"\3\2\2\2\u1849\u184b\5\u02a4\u0153\2\u184a\u184c\7\32\2\2\u184b\u184a"+
		"\3\2\2\2\u184b\u184c\3\2\2\2\u184c\u184d\3\2\2\2\u184d\u184e\5\u01fa\u00fe"+
		"\2\u184e\u1856\3\2\2\2\u184f\u1851\5\u02a4\u0153\2\u1850\u1852\7\32\2"+
		"\2\u1851\u1850\3\2\2\2\u1851\u1852\3\2\2\2\u1852\u1853\3\2\2\2\u1853\u1854"+
		"\7\u0099\2\2\u1854\u1856\3\2\2\2\u1855\u1843\3\2\2\2\u1855\u1849\3\2\2"+
		"\2\u1855\u184f\3\2\2\2\u1856\u0337\3\2\2\2\u1857\u185c\5\u033a\u019e\2"+
		"\u1858\u1859\7(\2\2\u1859\u185b\5\u033a\u019e\2\u185a\u1858\3\2\2\2\u185b"+
		"\u185e\3\2\2\2\u185c\u185a\3\2\2\2\u185c\u185d\3\2\2\2\u185d\u0339\3\2"+
		"\2\2\u185e\u185c\3\2\2\2\u185f\u1861\7@\2\2\u1860\u1862\7C\2\2\u1861\u1860"+
		"\3\2\2\2\u1861\u1862\3\2\2\2\u1862\u1866\3\2\2\2\u1863\u1864\7g\2\2\u1864"+
		"\u1865\7o\2\2\u1865\u1867\7s\2\2\u1866\u1863\3\2\2\2\u1866\u1867\3\2\2"+
		"\2\u1867\u1868\3\2\2\2\u1868\u1971\5\u0210\u0109\2\u1869\u186b\7:\2\2"+
		"\u186a\u186c\7C\2\2\u186b\u186a\3\2\2\2\u186b\u186c\3\2\2\2\u186c\u186d"+
		"\3\2\2\2\u186d\u186e\5\u013a\u009e\2\u186e\u186f\5\u0350\u01a9\2\u186f"+
		"\u1971\3\2\2\2\u1870\u1872\7:\2\2\u1871\u1873\7C\2\2\u1872\u1871\3\2\2"+
		"\2\u1872\u1873\3\2\2\2\u1873\u1874\3\2\2\2\u1874\u1875\5\u013a\u009e\2"+
		"\u1875\u1876\7;\2\2\u1876\u1877\7o\2\2\u1877\u1878\7p\2\2\u1878\u1971"+
		"\3\2\2\2\u1879\u187b\7:\2\2\u187a\u187c\7C\2\2\u187b\u187a\3\2\2\2\u187b"+
		"\u187c\3\2\2\2\u187c\u187d\3\2\2\2\u187d\u187e\5\u013a\u009e\2\u187e\u187f"+
		"\7A\2\2\u187f\u1880\7o\2\2\u1880\u1881\7p\2\2\u1881\u1971\3\2\2\2\u1882"+
		"\u1884\7:\2\2\u1883\u1885\7C\2\2\u1884\u1883\3\2\2\2\u1884\u1885\3\2\2"+
		"\2\u1885\u1886\3\2\2\2\u1886\u1887\5\u013a\u009e\2\u1887\u1888\7A\2\2"+
		"\u1888\u1889\7\u012e\2\2\u1889\u188a\5\u01f8\u00fd\2\u188a\u1971\3\2\2"+
		"\2\u188b\u188d\7:\2\2\u188c\u188e\7C\2\2\u188d\u188c\3\2\2\2\u188d\u188e"+
		"\3\2\2\2\u188e\u188f\3\2\2\2\u188f\u1890\7\u0225\2\2\u1890\u1891\7A\2"+
		"\2\u1891\u1892\7\u012e\2\2\u1892\u1971\5\u01f8\u00fd\2\u1893\u1895\7:"+
		"\2\2\u1894\u1896\7C\2\2\u1895\u1894\3\2\2\2\u1895\u1896\3\2\2\2\u1896"+
		"\u1897\3\2\2\2\u1897\u1898\5\u013a\u009e\2\u1898\u1899\7A\2\2\u1899\u189a"+
		"\5\u01e2\u00f2\2\u189a\u1971\3\2\2\2\u189b\u189d\7:\2\2\u189c\u189e\7"+
		"C\2\2\u189d\u189c\3\2\2\2\u189d\u189e\3\2\2\2\u189e\u189f\3\2\2\2\u189f"+
		"\u18a0\5\u013a\u009e\2\u18a0\u18a1\7\u0123\2\2\u18a1\u18a2\5\u01e2\u00f2"+
		"\2\u18a2\u1971\3\2\2\2\u18a3\u18a5\7:\2\2\u18a4\u18a6\7C\2\2\u18a5\u18a4"+
		"\3\2\2\2\u18a5\u18a6\3\2\2\2\u18a6\u18a7\3\2\2\2\u18a7\u18a8\5\u013a\u009e"+
		"\2\u18a8\u18a9\7A\2\2\u18a9\u18aa\7\u012f\2\2\u18aa\u18ab\5\u013a\u009e"+
		"\2\u18ab\u1971\3\2\2\2\u18ac\u18ae\7:\2\2\u18ad\u18af\7C\2\2\u18ae\u18ad"+
		"\3\2\2\2\u18ae\u18af\3\2\2\2\u18af\u18b0\3\2\2\2\u18b0\u18b1\5\u013a\u009e"+
		"\2\u18b1\u18b2\7@\2\2\u18b2\u18b3\7\u00db\2\2\u18b3\u18b4\5\u0226\u0114"+
		"\2\u18b4\u18b5\7e\2\2\u18b5\u18b7\7\u0104\2\2\u18b6\u18b8\5\u021a\u010e"+
		"\2\u18b7\u18b6\3\2\2\2\u18b7\u18b8\3\2\2\2\u18b8\u1971\3\2\2\2\u18b9\u18bb"+
		"\7:\2\2\u18ba\u18bc\7C\2\2\u18bb\u18ba\3\2\2\2\u18bb\u18bc\3\2\2\2\u18bc"+
		"\u18bd\3\2\2\2\u18bd\u18be\5\u013a\u009e\2\u18be\u18bf\5\u034c\u01a7\2"+
		"\u18bf\u1971\3\2\2\2\u18c0\u18c2\7:\2\2\u18c1\u18c3\7C\2\2\u18c2\u18c1"+
		"\3\2\2\2\u18c2\u18c3\3\2\2\2\u18c3\u18c4\3\2\2\2\u18c4\u18c5\5\u013a\u009e"+
		"\2\u18c5\u18c6\7;\2\2\u18c6\u18c7\7\u0104\2\2\u18c7\u1971\3\2\2\2\u18c8"+
		"\u18ca\7:\2\2\u18c9\u18cb\7C\2\2\u18ca\u18c9\3\2\2\2\u18ca\u18cb\3\2\2"+
		"\2\u18cb\u18cc\3\2\2\2\u18cc\u18cd\5\u013a\u009e\2\u18cd\u18ce\7;\2\2"+
		"\u18ce\u18cf\7\u0104\2\2\u18cf\u18d0\7g\2\2\u18d0\u18d1\7s\2\2\u18d1\u1971"+
		"\3\2\2\2\u18d2\u18d4\7;\2\2\u18d3\u18d5\7C\2\2\u18d4\u18d3\3\2\2\2\u18d4"+
		"\u18d5\3\2\2\2\u18d5\u18d6\3\2\2\2\u18d6\u18d7\7g\2\2\u18d7\u18d8\7s\2"+
		"\2\u18d8\u18da\5\u013a\u009e\2\u18d9\u18db\5\u0346\u01a4\2\u18da\u18d9"+
		"\3\2\2\2\u18da\u18db\3\2\2\2\u18db\u1971\3\2\2\2\u18dc\u18de\7;\2\2\u18dd"+
		"\u18df\7C\2\2\u18de\u18dd\3\2\2\2\u18de\u18df\3\2\2\2\u18df\u18e0\3\2"+
		"\2\2\u18e0\u18e2\5\u013a\u009e\2\u18e1\u18e3\5\u0346\u01a4\2\u18e2\u18e1"+
		"\3\2\2\2\u18e2\u18e3\3\2\2\2\u18e3\u1971\3\2\2\2\u18e4\u18e6\7:\2\2\u18e5"+
		"\u18e7\7C\2\2\u18e6\u18e5\3\2\2\2\u18e6\u18e7\3\2\2\2\u18e7\u18e8\3\2"+
		"\2\2\u18e8\u18ea\5\u013a\u009e\2\u18e9\u18eb\5\u034a\u01a6\2\u18ea\u18e9"+
		"\3\2\2\2\u18ea\u18eb\3\2\2\2\u18eb\u18ec\3\2\2\2\u18ec\u18ed\7\u00af\2"+
		"\2\u18ed\u18ef\5\u015a\u00ae\2\u18ee\u18f0\5\u01b8\u00dd\2\u18ef\u18ee"+
		"\3\2\2\2\u18ef\u18f0\3\2\2\2\u18f0\u18f2\3\2\2\2\u18f1\u18f3\5\u0348\u01a5"+
		"\2\u18f2\u18f1\3\2\2\2\u18f2\u18f3\3\2\2\2\u18f3\u1971\3\2\2\2\u18f4\u18f6"+
		"\7:\2\2\u18f5\u18f7\7C\2\2\u18f6\u18f5\3\2\2\2\u18f6\u18f7\3\2\2\2\u18f7"+
		"\u18f8\3\2\2\2\u18f8\u18f9\5\u013a\u009e\2\u18f9\u18fa\5\u0340\u01a1\2"+
		"\u18fa\u1971\3\2\2\2\u18fb\u18fc\7@\2\2\u18fc\u1971\5\u02d6\u016c\2\u18fd"+
		"\u18fe\7:\2\2\u18fe\u18ff\7E\2\2\u18ff\u1900\5\u00e0q\2\u1900\u1901\5"+
		"\u033c\u019f\2\u1901\u1971\3\2\2\2\u1902\u1903\7\u0137\2\2\u1903\u1904"+
		"\7E\2\2\u1904\u1971\5\u00e0q\2\u1905\u1906\7;\2\2\u1906\u1907\7E\2\2\u1907"+
		"\u1908\7g\2\2\u1908\u1909\7s\2\2\u1909\u190b\5\u00e0q\2\u190a\u190c\5"+
		"\u0346\u01a4\2\u190b\u190a\3\2\2\2\u190b\u190c\3\2\2\2\u190c\u1971\3\2"+
		"\2\2\u190d\u190e\7;\2\2\u190e\u190f\7E\2\2\u190f\u1911\5\u00e0q\2\u1910"+
		"\u1912\5\u0346\u01a4\2\u1911\u1910\3\2\2\2\u1911\u1912\3\2\2\2\u1912\u1971"+
		"\3\2\2\2\u1913\u1914\7A\2\2\u1914\u1915\7\u0139\2\2\u1915\u1971\7\u0118"+
		"\2\2\u1916\u1917\7\u00eb\2\2\u1917\u1918\7f\2\2\u1918\u1971\5\u00e0q\2"+
		"\u1919\u191a\7A\2\2\u191a\u191b\7\u0139\2\2\u191b\u1971\7\u00eb\2\2\u191c"+
		"\u191d\7A\2\2\u191d\u1971\7\u0110\2\2\u191e\u191f\7A\2\2\u191f\u1971\7"+
		"\u0134\2\2\u1920\u1921\7\u009b\2\2\u1921\u1922\7M\2\2\u1922\u1971\5\u00e0"+
		"q\2\u1923\u1924\7\u009b\2\2\u1924\u1925\7\u00d8\2\2\u1925\u1926\7M\2\2"+
		"\u1926\u1971\5\u00e0q\2\u1927\u1928\7\u009b\2\2\u1928\u1929\7\u0122\2"+
		"\2\u1929\u192a\7M\2\2\u192a\u1971\5\u00e0q\2\u192b\u192c\7\u009b\2\2\u192c"+
		"\u192d\7M\2\2\u192d\u1971\7v\2\2\u192e\u192f\7\u009b\2\2\u192f\u1930\7"+
		"M\2\2\u1930\u1971\7\u00e7\2\2\u1931\u1932\7\u009c\2\2\u1932\u1933\7M\2"+
		"\2\u1933\u1971\5\u00e0q\2\u1934\u1935\7\u009c\2\2\u1935\u1936\7M\2\2\u1936"+
		"\u1971\7v\2\2\u1937\u1938\7\u009c\2\2\u1938\u1939\7M\2\2\u1939\u1971\7"+
		"\u00e7\2\2\u193a\u193b\7\u009b\2\2\u193b\u193c\7\u0127\2\2\u193c\u1971"+
		"\5\u00e0q\2\u193d\u193e\7\u009b\2\2\u193e\u193f\7\u00d8\2\2\u193f\u1940"+
		"\7\u0127\2\2\u1940\u1971\5\u00e0q\2\u1941\u1942\7\u009b\2\2\u1942\u1943"+
		"\7\u0122\2\2\u1943\u1944\7\u0127\2\2\u1944\u1971\5\u00e0q\2\u1945\u1946"+
		"\7\u009c\2\2\u1946\u1947\7\u0127\2\2\u1947\u1971\5\u00e0q\2\u1948\u1949"+
		"\7\u0109\2\2\u1949\u1971\5N(\2\u194a\u194b\7\u00de\2\2\u194b\u194c\7\u0109"+
		"\2\2\u194c\u1971\5N(\2\u194d\u194e\7\u013b\2\2\u194e\u1971\5\u01ba\u00de"+
		"\2\u194f\u1950\7o\2\2\u1950\u1971\7\u013b\2\2\u1951\u1952\7\u011c\2\2"+
		"\u1952\u1953\7k\2\2\u1953\u1971\5\u0202\u0102\2\u1954\u1955\7A\2\2\u1955"+
		"\u1956\7\u0130\2\2\u1956\u1971\5\u00e0q\2\u1957\u1958\7A\2\2\u1958\u1971"+
		"\5\u01e2\u00f2\2\u1959\u195a\7\u0123\2\2\u195a\u1971\5\u01e2\u00f2\2\u195b"+
		"\u195c\7\u0122\2\2\u195c\u195d\7\u0104\2\2\u195d\u1971\5\u0248\u0125\2"+
		"\u195e\u195f\7\u009b\2\2\u195f\u1960\7\u00d6\2\2\u1960\u1961\7\u00dd\2"+
		"\2\u1961\u1971\7\u0128\2\2\u1962\u1963\7\u009c\2\2\u1963\u1964\7\u00d6"+
		"\2\2\u1964\u1965\7\u00dd\2\2\u1965\u1971\7\u0128\2\2\u1966\u1967\7\u0102"+
		"\2\2\u1967\u1968\7\u00d6\2\2\u1968\u1969\7\u00dd\2\2\u1969\u1971\7\u0128"+
		"\2\2\u196a\u196b\7\u00de\2\2\u196b\u196c\7\u0102\2\2\u196c\u196d\7\u00d6"+
		"\2\2\u196d\u196e\7\u00dd\2\2\u196e\u1971\7\u0128\2\2\u196f\u1971\5\u0340"+
		"\u01a1\2\u1970\u185f\3\2\2\2\u1970\u1869\3\2\2\2\u1970\u1870\3\2\2\2\u1970"+
		"\u1879\3\2\2\2\u1970\u1882\3\2\2\2\u1970\u188b\3\2\2\2\u1970\u1893\3\2"+
		"\2\2\u1970\u189b\3\2\2\2\u1970\u18a3\3\2\2\2\u1970\u18ac\3\2\2\2\u1970"+
		"\u18b9\3\2\2\2\u1970\u18c0\3\2\2\2\u1970\u18c8\3\2\2\2\u1970\u18d2\3\2"+
		"\2\2\u1970\u18dc\3\2\2\2\u1970\u18e4\3\2\2\2\u1970\u18f4\3\2\2\2\u1970"+
		"\u18fb\3\2\2\2\u1970\u18fd\3\2\2\2\u1970\u1902\3\2\2\2\u1970\u1905\3\2"+
		"\2\2\u1970\u190d\3\2\2\2\u1970\u1913\3\2\2\2\u1970\u1916\3\2\2\2\u1970"+
		"\u1919\3\2\2\2\u1970\u191c\3\2\2\2\u1970\u191e\3\2\2\2\u1970\u1920\3\2"+
		"\2\2\u1970\u1923\3\2\2\2\u1970\u1927\3\2\2\2\u1970\u192b\3\2\2\2\u1970"+
		"\u192e\3\2\2\2\u1970\u1931\3\2\2\2\u1970\u1934\3\2\2\2\u1970\u1937\3\2"+
		"\2\2\u1970\u193a\3\2\2\2\u1970\u193d\3\2\2\2\u1970\u1941\3\2\2\2\u1970"+
		"\u1945\3\2\2\2\u1970\u1948\3\2\2\2\u1970\u194a\3\2\2\2\u1970\u194d\3\2"+
		"\2\2\u1970\u194f\3\2\2\2\u1970\u1951\3\2\2\2\u1970\u1954\3\2\2\2\u1970"+
		"\u1957\3\2\2\2\u1970\u1959\3\2\2\2\u1970\u195b\3\2\2\2\u1970\u195e\3\2"+
		"\2\2\u1970\u1962\3\2\2\2\u1970\u1966\3\2\2\2\u1970\u196a\3\2\2\2\u1970"+
		"\u196f\3\2\2\2\u1971\u033b\3\2\2\2\u1972\u1974\5\u033e\u01a0\2\u1973\u1972"+
		"\3\2\2\2\u1974\u1977\3\2\2\2\u1975\u1973\3\2\2\2\u1975\u1976\3\2\2\2\u1976"+
		"\u033d\3\2\2\2\u1977\u1975\3\2\2\2\u1978\u1979\7o\2\2\u1979\u1984\7\u00f5"+
		"\2\2\u197a\u1984\7\u00f5\2\2\u197b\u197c\7\u010b\2\2\u197c\u1984\7\u0105"+
		"\2\2\u197d\u197e\7\u010b\2\2\u197e\u1984\7\u00f6\2\2\u197f\u1980\7o\2"+
		"\2\u1980\u1984\7\u0136\2\2\u1981\u1982\7\u00de\2\2\u1982\u1984\7\u0109"+
		"\2\2\u1983\u1978\3\2\2\2\u1983\u197a\3\2\2\2\u1983\u197b\3\2\2\2\u1983"+
		"\u197d\3\2\2\2\u1983\u197f\3\2\2\2\u1983\u1981\3\2\2\2\u1984\u033f\3\2"+
		"\2\2\u1985\u1986\7\u01f2\2\2\u1986\u1987\7\"\2\2\u1987\u1988\5\u0342\u01a2"+
		"\2\u1988\u1989\7#\2\2\u1989\u0341\3\2\2\2\u198a\u198f\5\u0344\u01a3\2"+
		"\u198b\u198c\7(\2\2\u198c\u198e\5\u0344\u01a3\2\u198d\u198b\3\2\2\2\u198e"+
		"\u1991\3\2\2\2\u198f\u198d\3\2\2\2\u198f\u1990\3\2\2\2\u1990\u0343\3\2"+
		"\2\2\u1991\u198f\3\2\2\2\u1992\u199a\5\u0242\u0122\2\u1993\u1994\7A\2"+
		"\2\u1994\u199a\5\u0242\u0122\2\u1995\u1996\7@\2\2\u1996\u199a\5\u0242"+
		"\u0122\2\u1997\u1998\7;\2\2\u1998\u199a\5\u0246\u0124\2\u1999\u1992\3"+
		"\2\2\2\u1999\u1993\3\2\2\2\u1999\u1995\3\2\2\2\u1999\u1997\3\2\2\2\u199a"+
		"\u0345\3\2\2\2\u199b\u199c\t\35\2\2\u199c\u0347\3\2\2\2\u199d\u199e\7"+
		"c\2\2\u199e\u199f\5\u00f2z\2\u199f\u0349\3\2\2\2\u19a0\u19a1\7A\2\2\u19a1"+
		"\u19a2\7\u00f2\2\2\u19a2\u034b\3\2\2\2\u19a3\u19a5\5\u034e\u01a8\2\u19a4"+
		"\u19a3\3\2\2\2\u19a5\u19a6\3\2\2\2\u19a6\u19a4\3\2\2\2\u19a6\u19a7\3\2"+
		"\2\2\u19a7\u034d\3\2\2\2\u19a8\u19b4\7\u0124\2\2\u19a9\u19ab\7\u0124\2"+
		"\2\u19aa\u19ac\7R\2\2\u19ab\u19aa\3\2\2\2\u19ab\u19ac\3\2\2\2\u19ac\u19ad"+
		"\3\2\2\2\u19ad\u19b4\5\u020c\u0107\2\u19ae\u19af\7A\2\2\u19af\u19b4\5"+
		"\u021e\u0110\2\u19b0\u19b1\7A\2\2\u19b1\u19b2\7\u00db\2\2\u19b2\u19b4"+
		"\5\u0226\u0114\2\u19b3\u19a8\3\2\2\2\u19b3\u19a9\3\2\2\2\u19b3\u19ae\3"+
		"\2\2\2\u19b3\u19b0\3\2\2\2\u19b4\u034f\3\2\2\2\u19b5\u19b6\7A\2\2\u19b6"+
		"\u19b7\7\u0099\2\2\u19b7\u19bb\5\u00f2z\2\u19b8\u19b9\7;\2\2\u19b9\u19bb"+
		"\7\u0099\2\2\u19ba\u19b5\3\2\2\2\u19ba\u19b8\3\2\2\2\u19bb\u0351\3\2\2"+
		"\2\u19bc\u19bd\7:\2\2\u19bd\u19be\7\u0182\2\2\u19be\u19bf\5\u0362\u01b2"+
		"\2\u19bf\u0353\3\2\2\2\u19c0\u19c1\7:\2\2\u19c1\u19c2\7\u0182\2\2\u19c2"+
		"\u19c3\7\u01b4\2\2\u19c3\u19c4\5\u01ba\u00de\2\u19c4\u19c5\7c\2\2\u19c5"+
		"\u19c6\5\u00e0q\2\u19c6\u19c7\5\u0356\u01ac\2\u19c7\u0355\3\2\2\2\u19c8"+
		"\u19c9\7\u0121\2\2\u19c9\u19ca\7k\2\2\u19ca\u19d2\5\u00e0q\2\u19cb\u19cc"+
		"\7A\2\2\u19cc\u19cd\7=\2\2\u19cd\u19d2\5\u00e0q\2\u19ce\u19cf\7\u011c"+
		"\2\2\u19cf\u19d0\7k\2\2\u19d0\u19d2\5\u0202\u0102\2\u19d1\u19c8\3\2\2"+
		"\2\u19d1\u19cb\3\2\2\2\u19d1\u19ce\3\2\2\2\u19d2\u0357\3\2\2\2\u19d3\u19d4"+
		"\7:\2\2\u19d4\u19d5\7\u0182\2\2\u19d5\u19d6\7\u01cd\2\2\u19d6\u19d7\5"+
		"\u01ba\u00de\2\u19d7\u19d8\7c\2\2\u19d8\u19d9\5\u00e0q\2\u19d9\u19da\5"+
		"\u035a\u01ae\2\u19da\u0359\3\2\2\2\u19db\u19dc\t*\2\2\u19dc\u19df\5\u035c"+
		"\u01af\2\u19dd\u19df\5\u0356\u01ac\2\u19de\u19db\3\2\2\2\u19de\u19dd\3"+
		"\2\2\2\u19df\u035b\3\2\2\2\u19e0\u19e5\5\u035e\u01b0\2\u19e1\u19e2\7("+
		"\2\2\u19e2\u19e4\5\u035e\u01b0\2\u19e3\u19e1\3\2\2\2\u19e4\u19e7\3\2\2"+
		"\2\u19e5\u19e3\3\2\2\2\u19e5\u19e6\3\2\2\2\u19e6\u035d\3\2\2\2\u19e7\u19e5"+
		"\3\2\2\2\u19e8\u19e9\7\u0182\2\2\u19e9\u19ea\7\u0225\2\2\u19ea\u19ec\5"+
		"\u011c\u008f\2\u19eb\u19ed\5\u0360\u01b1\2\u19ec\u19eb\3\2\2\2\u19ec\u19ed"+
		"\3\2\2\2\u19ed\u19ef\3\2\2\2\u19ee\u19f0\7\u01ff\2\2\u19ef\u19ee\3\2\2"+
		"\2\u19ef\u19f0\3\2\2\2\u19f0";
	private static final String _serializedATNSegment3 =
		"\u1a07\3\2\2\2\u19f1\u19f2\7\u0182\2\2\u19f2\u19f3\7\u0225\2\2\u19f3\u19f5"+
		"\5\u036a\u01b6\2\u19f4\u19f6\5\u0360\u01b1\2\u19f5\u19f4\3\2\2\2\u19f5"+
		"\u19f6\3\2\2\2\u19f6\u19f8\3\2\2\2\u19f7\u19f9\7\u01ff\2\2\u19f8\u19f7"+
		"\3\2\2\2\u19f8\u19f9\3\2\2\2\u19f9\u1a07\3\2\2\2\u19fa\u19fb\7L\2\2\u19fb"+
		"\u19fc\7\u0225\2\2\u19fc\u1a07\5\u03a8\u01d5\2\u19fd\u19fe\7L\2\2\u19fe"+
		"\u19ff\7\u0225\2\2\u19ff\u1a00\7\"\2\2\u1a00\u1a01\5\u0132\u009a\2\u1a01"+
		"\u1a02\7#\2\2\u1a02\u1a03\5\u03a8\u01d5\2\u1a03\u1a07\3\2\2\2\u1a04\u1a05"+
		"\7\u012f\2\2\u1a05\u1a07\5\u015a\u00ae\2\u1a06\u19e8\3\2\2\2\u1a06\u19f1"+
		"\3\2\2\2\u1a06\u19fa\3\2\2\2\u1a06\u19fd\3\2\2\2\u1a06\u1a04\3\2\2\2\u1a07"+
		"\u035f\3\2\2\2\u1a08\u1a09\7j\2\2\u1a09\u1a0f\7\u01fd\2\2\u1a0a\u1a0b"+
		"\7j\2\2\u1a0b\u1a0c\7y\2\2\u1a0c\u1a0d\7{\2\2\u1a0d\u1a0f\5\u01ba\u00de"+
		"\2\u1a0e\u1a08\3\2\2\2\u1a0e\u1a0a\3\2\2\2\u1a0f\u0361\3\2\2\2\u1a10\u1a11"+
		"\5\u036a\u01b6\2\u1a11\u1a12\7A\2\2\u1a12\u1a13\7=\2\2\u1a13\u1a14\5\u00e0"+
		"q\2\u1a14\u1a21\3\2\2\2\u1a15\u1a16\5\u036a\u01b6\2\u1a16\u1a17\7A\2\2"+
		"\u1a17\u1a18\7\"\2\2\u1a18\u1a19\5\u0364\u01b3\2\u1a19\u1a1a\7#\2\2\u1a1a"+
		"\u1a21\3\2\2\2\u1a1b\u1a1c\5\u036a\u01b6\2\u1a1c\u1a1d\7\u011c\2\2\u1a1d"+
		"\u1a1e\7k\2\2\u1a1e\u1a1f\5\u0202\u0102\2\u1a1f\u1a21\3\2\2\2\u1a20\u1a10"+
		"\3\2\2\2\u1a20\u1a15\3\2\2\2\u1a20\u1a1b\3\2\2\2\u1a21\u0363\3\2\2\2\u1a22"+
		"\u1a27\5\u0366\u01b4\2\u1a23\u1a24\7(\2\2\u1a24\u1a26\5\u0366\u01b4\2"+
		"\u1a25\u1a23\3\2\2\2\u1a26\u1a29\3\2\2\2\u1a27\u1a25\3\2\2\2\u1a27\u1a28"+
		"\3\2\2\2\u1a28\u0365\3\2\2\2\u1a29\u1a27\3\2\2\2\u1a2a\u1a2b\5\u0232\u011a"+
		"\2\u1a2b\u1a2e\7\32\2\2\u1a2c\u1a2f\7\u0199\2\2\u1a2d\u1a2f\5\u0368\u01b5"+
		"\2\u1a2e\u1a2c\3\2\2\2\u1a2e\u1a2d\3\2\2\2\u1a2f\u0367\3\2\2\2\u1a30\u1a36"+
		"\5\u01ea\u00f6\2\u1a31\u1a36\5\u00c8e\2\u1a32\u1a36\5\u0118\u008d\2\u1a33"+
		"\u1a36\5\u020c\u0107\2\u1a34\u1a36\7\u0224\2\2\u1a35\u1a30\3\2\2\2\u1a35"+
		"\u1a31\3\2\2\2\u1a35\u1a32\3\2\2\2\u1a35\u1a33\3\2\2\2\u1a35\u1a34\3\2"+
		"\2\2\u1a36\u0369\3\2\2\2\u1a37\u1a38\5\u011c\u008f\2\u1a38\u1a39\5\u024a"+
		"\u0126\2\u1a39\u036b\3\2\2\2\u1a3a\u1a3b\7:\2\2\u1a3b\u1a3c\7\u01a3\2"+
		"\2\u1a3c\u1a3d\5\u036e\u01b8\2\u1a3d\u1a3e\5\u0376\u01bc\2\u1a3e\u036d"+
		"\3\2\2\2\u1a3f\u1a40\5\u0136\u009c\2\u1a40\u1a41\5\u0370\u01b9\2\u1a41"+
		"\u036f\3\2\2\2\u1a42\u1a43\7\"\2\2\u1a43\u1a44\7\23\2\2\u1a44\u1a57\7"+
		"#\2\2\u1a45\u1a46\7\"\2\2\u1a46\u1a47\5\u0372\u01ba\2\u1a47\u1a48\7#\2"+
		"\2\u1a48\u1a57\3\2\2\2\u1a49\u1a4a\7\"\2\2\u1a4a\u1a4b\7y\2\2\u1a4b\u1a4c"+
		"\7{\2\2\u1a4c\u1a4d\5\u0372\u01ba\2\u1a4d\u1a4e\7#\2\2\u1a4e\u1a57\3\2"+
		"\2\2\u1a4f\u1a50\7\"\2\2\u1a50\u1a51\5\u0372\u01ba\2\u1a51\u1a52\7y\2"+
		"\2\u1a52\u1a53\7{\2\2\u1a53\u1a54\5\u0372\u01ba\2\u1a54\u1a55\7#\2\2\u1a55"+
		"\u1a57\3\2\2\2\u1a56\u1a42\3\2\2\2\u1a56\u1a45\3\2\2\2\u1a56\u1a49\3\2"+
		"\2\2\u1a56\u1a4f\3\2\2\2\u1a57\u0371\3\2\2\2\u1a58\u1a5d\5\u0374\u01bb"+
		"\2\u1a59\u1a5a\7(\2\2\u1a5a\u1a5c\5\u0374\u01bb\2\u1a5b\u1a59\3\2\2\2"+
		"\u1a5c\u1a5f\3\2\2\2\u1a5d\u1a5b\3\2\2\2\u1a5d\u1a5e\3\2\2\2\u1a5e\u0373"+
		"\3\2\2\2\u1a5f\u1a5d\3\2\2\2\u1a60\u1a61\5\u024c\u0127\2\u1a61\u0375\3"+
		"\2\2\2\u1a62\u1a63\7\u0121\2\2\u1a63\u1a64\7k\2\2\u1a64\u1a6c\5\u00e0"+
		"q\2\u1a65\u1a66\7\u011c\2\2\u1a66\u1a67\7k\2\2\u1a67\u1a6c\5\u0202\u0102"+
		"\2\u1a68\u1a69\7A\2\2\u1a69\u1a6a\7=\2\2\u1a6a\u1a6c\5\u00d8m\2\u1a6b"+
		"\u1a62\3\2\2\2\u1a6b\u1a65\3\2\2\2\u1a6b\u1a68\3\2\2\2\u1a6c\u0377\3\2"+
		"\2\2\u1a6d\u1a6e\7:\2\2\u1a6e\u1a6f\7\u00aa\2\2\u1a6f\u1a70\5\u01ba\u00de"+
		"\2\u1a70\u1a71\5\u037a\u01be\2\u1a71\u0379\3\2\2\2\u1a72\u1a73\7\u01f0"+
		"\2\2\u1a73\u1a7e\7\u017c\2\2\u1a74\u1a75\7\u0121\2\2\u1a75\u1a76\7k\2"+
		"\2\u1a76\u1a7e\5\u00e0q\2\u1a77\u1a78\7\u011c\2\2\u1a78\u1a79\7k\2\2\u1a79"+
		"\u1a7e\5\u0202\u0102\2\u1a7a\u1a7b\7A\2\2\u1a7b\u1a7c\7=\2\2\u1a7c\u1a7e"+
		"\5\u00d8m\2\u1a7d\u1a72\3\2\2\2\u1a7d\u1a74\3\2\2\2\u1a7d\u1a77\3\2\2"+
		"\2\u1a7d\u1a7a\3\2\2\2\u1a7e\u037b\3\2\2\2\u1a7f\u1a80\7:\2\2\u1a80\u1a81"+
		"\7\u01ac\2\2\u1a81\u1a82\5\u01ba\u00de\2\u1a82\u1a83\5\u037e\u01c0\2\u1a83"+
		"\u037d\3\2\2\2\u1a84\u1a85\7\u0121\2\2\u1a85\u1a86\7k\2\2\u1a86\u1a8e"+
		"\5\u00e0q\2\u1a87\u1a88\7\u011c\2\2\u1a88\u1a89\7k\2\2\u1a89\u1a8e\5\u0202"+
		"\u0102\2\u1a8a\u1a8b\7A\2\2\u1a8b\u1a8c\7=\2\2\u1a8c\u1a8e\5\u00d8m\2"+
		"\u1a8d\u1a84\3\2\2\2\u1a8d\u1a87\3\2\2\2\u1a8d\u1a8a\3\2\2\2\u1a8e\u037f"+
		"\3\2\2\2\u1a8f\u1a90\7:\2\2\u1a90\u1a91\7\u0099\2\2\u1a91\u1a93\7\u00e0"+
		"\2\2\u1a92\u1a94\5\u0392\u01ca\2\u1a93\u1a92\3\2\2\2\u1a93\u1a94\3\2\2"+
		"\2\u1a94\u1a95\3\2\2\2\u1a95\u1a96\5\u0382\u01c2\2\u1a96\u0381\3\2\2\2"+
		"\u1a97\u1a98\7>\2\2\u1a98\u1a99\5\u038c\u01c7\2\u1a99\u1a9a\7f\2\2\u1a9a"+
		"\u1a9b\5\u038a\u01c6\2\u1a9b\u1a9c\7k\2\2\u1a9c\u1a9e\5\u0386\u01c4\2"+
		"\u1a9d\u1a9f\5\u0384\u01c3\2\u1a9e\u1a9d\3\2\2\2\u1a9e\u1a9f\3\2\2\2\u1a9f"+
		"\u1ab6\3\2\2\2\u1aa0\u1aa1\7?\2\2\u1aa1\u1aa2\5\u038c\u01c7\2\u1aa2\u1aa3"+
		"\7f\2\2\u1aa3\u1aa4\5\u038a\u01c6\2\u1aa4\u1aa5\7Z\2\2\u1aa5\u1aa7\5\u0386"+
		"\u01c4\2\u1aa6\u1aa8\5\u0346\u01a4\2\u1aa7\u1aa6\3\2\2\2\u1aa7\u1aa8\3"+
		"\2\2\2\u1aa8\u1ab6\3\2\2\2\u1aa9\u1aaa\7?\2\2\u1aaa\u1aab\7>\2\2\u1aab"+
		"\u1aac\7\u00df\2\2\u1aac\u1aad\7j\2\2\u1aad\u1aae\5\u038c\u01c7\2\u1aae"+
		"\u1aaf\7f\2\2\u1aaf\u1ab0\5\u038a\u01c6\2\u1ab0\u1ab1\7Z\2\2\u1ab1\u1ab3"+
		"\5\u0386\u01c4\2\u1ab2\u1ab4\5\u0346\u01a4\2\u1ab3\u1ab2\3\2\2\2\u1ab3"+
		"\u1ab4\3\2\2\2\u1ab4\u1ab6\3\2\2\2\u1ab5\u1a97\3\2\2\2\u1ab5\u1aa0\3\2"+
		"\2\2\u1ab5\u1aa9\3\2\2\2\u1ab6\u0383\3\2\2\2\u1ab7\u1ab8\7R\2\2\u1ab8"+
		"\u1ab9\7>\2\2\u1ab9\u1aba\7\u00df\2\2\u1aba\u0385\3\2\2\2\u1abb\u1ac0"+
		"\5\u0388\u01c5\2\u1abc\u1abd\7(\2\2\u1abd\u1abf\5\u0388\u01c5\2\u1abe"+
		"\u1abc\3\2\2\2\u1abf\u1ac2\3\2\2\2\u1ac0\u1abe\3\2\2\2\u1ac0\u1ac1\3\2"+
		"\2\2\u1ac1\u0387\3\2\2\2\u1ac2\u1ac0\3\2\2\2\u1ac3\u1ac5\7z\2\2\u1ac4"+
		"\u1ac3\3\2\2\2\u1ac4\u1ac5\3\2\2\2\u1ac5\u1ac6\3\2\2\2\u1ac6\u1ac7\5\u0202"+
		"\u0102\2\u1ac7\u0389\3\2\2\2\u1ac8\u1ac9\t+\2\2\u1ac9\u038b\3\2\2\2\u1aca"+
		"\u1ada\5\u038e\u01c8\2\u1acb\u1ada\7v\2\2\u1acc\u1acd\7v\2\2\u1acd\u1ada"+
		"\7\u00e0\2\2\u1ace\u1acf\7v\2\2\u1acf\u1ad0\7\"\2\2\u1ad0\u1ad1\5\u0224"+
		"\u0113\2\u1ad1\u1ad2\7#\2\2\u1ad2\u1ada\3\2\2\2\u1ad3\u1ad4\7v\2\2\u1ad4"+
		"\u1ad5\7\u00e0\2\2\u1ad5\u1ad6\7\"\2\2\u1ad6\u1ad7\5\u0224\u0113\2\u1ad7"+
		"\u1ad8\7#\2\2\u1ad8\u1ada\3\2\2\2\u1ad9\u1aca\3\2\2\2\u1ad9\u1acb\3\2"+
		"\2\2\u1ad9\u1acc\3\2\2\2\u1ad9\u1ace\3\2\2\2\u1ad9\u1ad3\3\2\2\2\u1ada"+
		"\u038d\3\2\2\2\u1adb\u1ae0\5\u0390\u01c9\2\u1adc\u1add\7(\2\2\u1add\u1adf"+
		"\5\u0390\u01c9\2\u1ade\u1adc\3\2\2\2\u1adf\u1ae2\3\2\2\2\u1ae0\u1ade\3"+
		"\2\2\2\u1ae0\u1ae1\3\2\2\2\u1ae1\u038f\3\2\2\2\u1ae2\u1ae0\3\2\2\2\u1ae3"+
		"\u1ae5\7\65\2\2\u1ae4\u1ae6\5\u0220\u0111\2\u1ae5\u1ae4\3\2\2\2\u1ae5"+
		"\u1ae6\3\2\2\2\u1ae6\u1af4\3\2\2\2\u1ae7\u1ae9\7\u00e2\2\2\u1ae8\u1aea"+
		"\5\u0220\u0111\2\u1ae9\u1ae8\3\2\2\2\u1ae9\u1aea\3\2\2\2\u1aea\u1af4\3"+
		"\2\2\2\u1aeb\u1aed\79\2\2\u1aec\u1aee\5\u0220\u0111\2\u1aed\u1aec\3\2"+
		"\2\2\u1aed\u1aee\3\2\2\2\u1aee\u1af4\3\2\2\2\u1aef\u1af1\5\u013a\u009e"+
		"\2\u1af0\u1af2\5\u0220\u0111\2\u1af1\u1af0\3\2\2\2\u1af1\u1af2\3\2\2\2"+
		"\u1af2\u1af4\3\2\2\2\u1af3\u1ae3\3\2\2\2\u1af3\u1ae7\3\2\2\2\u1af3\u1aeb"+
		"\3\2\2\2\u1af3\u1aef\3\2\2\2\u1af4\u0391\3\2\2\2\u1af5\u1af7\5\u0394\u01cb"+
		"\2\u1af6\u1af5\3\2\2\2\u1af7\u1af8\3\2\2\2\u1af8\u1af6\3\2\2\2\u1af8\u1af9"+
		"\3\2\2\2\u1af9\u0393\3\2\2\2\u1afa\u1afb\7u\2\2\u1afb\u1afc\7=\2\2\u1afc"+
		"\u1b01\5\u0396\u01cc\2\u1afd\u1afe\7j\2\2\u1afe\u1aff\t,\2\2\u1aff\u1b01"+
		"\5\u0256\u012c\2\u1b00\u1afa\3\2\2\2\u1b00\u1afd\3\2\2\2\u1b01\u0395\3"+
		"\2\2\2\u1b02\u1b03\5\u01be\u00e0\2\u1b03\u0397\3\2\2\2\u1b04\u1b05\7:"+
		"\2\2\u1b05\u1b06\7\u00f8\2\2\u1b06\u1b07\5\u039a\u01ce\2\u1b07\u0399\3"+
		"\2\2\2\u1b08\u1b09\5\u01ba\u00de\2\u1b09\u1b0a\t(\2\2\u1b0a\u1b0b\7o\2"+
		"\2\u1b0b\u1b0c\7p\2\2\u1b0c\u1b3b\3\2\2\2\u1b0d\u1b0e\5\u01ba\u00de\2"+
		"\u1b0e\u1b0f\7@\2\2\u1b0f\u1b10\5\u02d6\u016c\2\u1b10\u1b3b\3\2\2\2\u1b11"+
		"\u1b12\5\u01ba\u00de\2\u1b12\u1b13\7;\2\2\u1b13\u1b16\7E\2\2\u1b14\u1b15"+
		"\7g\2\2\u1b15\u1b17\7s\2\2\u1b16\u1b14\3\2\2\2\u1b16\u1b17\3\2\2\2\u1b17"+
		"\u1b18\3\2\2\2\u1b18\u1b1a\5\u00e0q\2\u1b19\u1b1b\5\u0346\u01a4\2\u1b1a"+
		"\u1b19\3\2\2\2\u1b1a\u1b1b\3\2\2\2\u1b1b\u1b3b\3\2\2\2\u1b1c\u1b1d\5\u01ba"+
		"\u00de\2\u1b1d\u1b1e\7\u0137\2\2\u1b1e\u1b1f\7E\2\2\u1b1f\u1b20\5\u00e0"+
		"q\2\u1b20\u1b3b\3\2\2\2\u1b21\u1b22\5\u01ba\u00de\2\u1b22\u1b23\7\u0121"+
		"\2\2\u1b23\u1b24\7E\2\2\u1b24\u1b25\5\u039c\u01cf\2\u1b25\u1b26\7k\2\2"+
		"\u1b26\u1b27\5\u039c\u01cf\2\u1b27\u1b3b\3\2\2\2\u1b28\u1b29\5\u01ba\u00de"+
		"\2\u1b29\u1b2a\7\u011c\2\2\u1b2a\u1b2b\7k\2\2\u1b2b\u1b2c\5\u0202\u0102"+
		"\2\u1b2c\u1b3b\3\2\2\2\u1b2d\u1b2e\5\u01ba\u00de\2\u1b2e\u1b2f\7\u0121"+
		"\2\2\u1b2f\u1b30\7k\2\2\u1b30\u1b31\5\u01ba\u00de\2\u1b31\u1b3b\3\2\2"+
		"\2\u1b32\u1b33\5\u01ba\u00de\2\u1b33\u1b34\7A\2\2\u1b34\u1b35\7=\2\2\u1b35"+
		"\u1b36\5\u00e0q\2\u1b36\u1b3b\3\2\2\2\u1b37\u1b38\5\u01ba\u00de\2\u1b38"+
		"\u1b39\5\u0350\u01a9\2\u1b39\u1b3b\3\2\2\2\u1b3a\u1b08\3\2\2\2\u1b3a\u1b0d"+
		"\3\2\2\2\u1b3a\u1b11\3\2\2\2\u1b3a\u1b1c\3\2\2\2\u1b3a\u1b21\3\2\2\2\u1b3a"+
		"\u1b28\3\2\2\2\u1b3a\u1b2d\3\2\2\2\u1b3a\u1b32\3\2\2\2\u1b3a\u1b37\3\2"+
		"\2\2\u1b3b\u039b\3\2\2\2\u1b3c\u1b3d\5\u013a\u009e\2\u1b3d\u039d\3\2\2"+
		"\2\u1b3e\u1b3f\7:\2\2\u1b3f\u1b40\7\u01c9\2\2\u1b40\u1b41\7M\2\2\u1b41"+
		"\u1b42\5\u03a2\u01d2\2\u1b42\u1b43\5\u03a0\u01d1\2\u1b43\u039f\3\2\2\2"+
		"\u1b44\u1b4e\7\u009c\2\2\u1b45\u1b46\7\u009b\2\2\u1b46\u1b4e\t%\2\2\u1b47"+
		"\u1b48\7\u011c\2\2\u1b48\u1b49\7k\2\2\u1b49\u1b4e\5\u0202\u0102\2\u1b4a"+
		"\u1b4b\7\u0121\2\2\u1b4b\u1b4c\7k\2\2\u1b4c\u1b4e\5\u03a2\u01d2\2\u1b4d"+
		"\u1b44\3\2\2\2\u1b4d\u1b45\3\2\2\2\u1b4d\u1b47\3\2\2\2\u1b4d\u1b4a\3\2"+
		"\2\2\u1b4e\u03a1\3\2\2\2\u1b4f\u1b50\5\u013a\u009e\2\u1b50\u03a3\3\2\2"+
		"\2\u1b51\u1b52\7:\2\2\u1b52\u1b53\7\u00fc\2\2\u1b53\u1b54\5\u00e0q\2\u1b54"+
		"\u1b55\5\u03a6\u01d4\2\u1b55\u03a5\3\2\2\2\u1b56\u1b57\7\67\2\2\u1b57"+
		"\u1bcb\5\u03ae\u01d8\2\u1b58\u1b59\t*\2\2\u1b59\u1b5a\7\u01a1\2\2\u1b5a"+
		"\u1b5b\7\u01db\2\2\u1b5b\u1bcb\5\u00e0q\2\u1b5c\u1b5d\t*\2\2\u1b5d\u1b5e"+
		"\7\u01a3\2\2\u1b5e\u1bcb\5\u03ac\u01d7\2\u1b5f\u1b60\t*\2\2\u1b60\u1b61"+
		"\7W\2\2\u1b61\u1b62\7\"\2\2\u1b62\u1b63\5\u015a\u00ae\2\u1b63\u1b64\7"+
		"e\2\2\u1b64\u1b65\5\u015a\u00ae\2\u1b65\u1b66\7#\2\2\u1b66\u1bcb\3\2\2"+
		"\2\u1b67\u1b68\t*\2\2\u1b68\u1b69\7\u00aa\2\2\u1b69\u1bcb\5\u01ba\u00de"+
		"\2\u1b6a\u1b6b\t*\2\2\u1b6b\u1b6c\7\u01ac\2\2\u1b6c\u1bcb\5\u01ba\u00de"+
		"\2\u1b6d\u1b6e\t*\2\2\u1b6e\u1b6f\7\u00f8\2\2\u1b6f\u1bcb\5\u015a\u00ae"+
		"\2\u1b70\u1b71\t*\2\2\u1b71\u1b72\7L\2\2\u1b72\u1bcb\5\u03a8\u01d5\2\u1b73"+
		"\u1b75\t*\2\2\u1b74\u1b76\7\u01e0\2\2\u1b75\u1b74\3\2\2\2\u1b75\u1b76"+
		"\3\2\2\2\u1b76\u1b77\3\2\2\2\u1b77\u1b78\7\u010d\2\2\u1b78\u1bcb\5\u00e0"+
		"q\2\u1b79\u1b7a\t*\2\2\u1b7a\u1b7b\7\u0182\2\2\u1b7b\u1bcb\5\u036a\u01b6"+
		"\2\u1b7c\u1b7d\t*\2\2\u1b7d\u1b7e\7\u0182\2\2\u1b7e\u1b7f\t-\2\2\u1b7f"+
		"\u1b80\5\u01ba\u00de\2\u1b80\u1b81\7c\2\2\u1b81\u1b82\5\u0292\u014a\2"+
		"\u1b82\u1bcb\3\2\2\2\u1b83\u1b84\t*\2\2\u1b84\u1b85\7N\2\2\u1b85\u1bcb"+
		"\5\u03a8\u01d5\2\u1b86\u1b87\t*\2\2\u1b87\u1b88\7\u0126\2\2\u1b88\u1bcb"+
		"\5\u03a8\u01d5\2\u1b89\u1b8a\t*\2\2\u1b8a\u1b8b\7=\2\2\u1b8b\u1bcb\5\u00e0"+
		"q\2\u1b8c\u1b8d\t*\2\2\u1b8d\u1b8e\7\u01c9\2\2\u1b8e\u1b8f\7M\2\2\u1b8f"+
		"\u1bcb\5\u00e0q\2\u1b90\u1b91\t*\2\2\u1b91\u1b92\7B\2\2\u1b92\u1bcb\5"+
		"\u01ba\u00de\2\u1b93\u1b94\t*\2\2\u1b94\u1b95\7\u00b3\2\2\u1b95\u1b96"+
		"\7\u01fd\2\2\u1b96\u1b97\7\u01e1\2\2\u1b97\u1bcb\5\u01ba\u00de\2\u1b98"+
		"\u1b99\t*\2\2\u1b99\u1b9a\7\u00b3\2\2\u1b9a\u1b9b\7\u01fd\2\2\u1b9b\u1b9c"+
		"\7\u01b8\2\2\u1b9c\u1bcb\5\u01ba\u00de\2\u1b9d\u1b9e\t*\2\2\u1b9e\u1b9f"+
		"\7\u00b3\2\2\u1b9f\u1ba0\7\u01fd\2\2\u1ba0\u1ba1\7\u020c\2\2\u1ba1\u1bcb"+
		"\5\u01ba\u00de\2\u1ba2\u1ba3\t*\2\2\u1ba3\u1ba4\7\u00b3\2\2\u1ba4\u1ba5"+
		"\7\u01fd\2\2\u1ba5\u1ba6\7\u01b5\2\2\u1ba6\u1bcb\5\u01ba\u00de\2\u1ba7"+
		"\u1ba8\t*\2\2\u1ba8\u1ba9\7\u0129\2\2\u1ba9\u1bcb\5\u01ba\u00de\2\u1baa"+
		"\u1bab\t*\2\2\u1bab\u1bac\7O\2\2\u1bac\u1bcb\5\u01ba\u00de\2\u1bad\u1bae"+
		"\t*\2\2\u1bae\u1baf\7\u0181\2\2\u1baf\u1bb0\7O\2\2\u1bb0\u1bcb\5\u01ba"+
		"\u00de\2\u1bb1\u1bb2\t*\2\2\u1bb2\u1bb3\7H\2\2\u1bb3\u1bb4\7B\2\2\u1bb4"+
		"\u1bcb\5\u01ba\u00de\2\u1bb5\u1bb6\t*\2\2\u1bb6\u1bb7\7H\2\2\u1bb7\u1bb8"+
		"\7\u00f2\2\2\u1bb8\u1bb9\7\u021b\2\2\u1bb9\u1bcb\5\u00e0q\2\u1bba\u1bbb"+
		"\t*\2\2\u1bbb\u1bbc\7\u01fb\2\2\u1bbc\u1bcb\5\u00e0q\2\u1bbd\u1bbe\t*"+
		"\2\2\u1bbe\u1bbf\7\u0210\2\2\u1bbf\u1bc0\7j\2\2\u1bc0\u1bc1\5\u015a\u00ae"+
		"\2\u1bc1\u1bc2\7\u010d\2\2\u1bc2\u1bc3\5\u00e0q\2\u1bc3\u1bcb\3\2\2\2"+
		"\u1bc4\u1bc5\t*\2\2\u1bc5\u1bc6\7\u00af\2\2\u1bc6\u1bcb\5\u015a\u00ae"+
		"\2\u1bc7\u1bc8\7A\2\2\u1bc8\u1bc9\7=\2\2\u1bc9\u1bcb\5\u00e0q\2\u1bca"+
		"\u1b56\3\2\2\2\u1bca\u1b58\3\2\2\2\u1bca\u1b5c\3\2\2\2\u1bca\u1b5f\3\2"+
		"\2\2\u1bca\u1b67\3\2\2\2\u1bca\u1b6a\3\2\2\2\u1bca\u1b6d\3\2\2\2\u1bca"+
		"\u1b70\3\2\2\2\u1bca\u1b73\3\2\2\2\u1bca\u1b79\3\2\2\2\u1bca\u1b7c\3\2"+
		"\2\2\u1bca\u1b83\3\2\2\2\u1bca\u1b86\3\2\2\2\u1bca\u1b89\3\2\2\2\u1bca"+
		"\u1b8c\3\2\2\2\u1bca\u1b90\3\2\2\2\u1bca\u1b93\3\2\2\2\u1bca\u1b98\3\2"+
		"\2\2\u1bca\u1b9d\3\2\2\2\u1bca\u1ba2\3\2\2\2\u1bca\u1ba7\3\2\2\2\u1bca"+
		"\u1baa\3\2\2\2\u1bca\u1bad\3\2\2\2\u1bca\u1bb1\3\2\2\2\u1bca\u1bb5\3\2"+
		"\2\2\u1bca\u1bba\3\2\2\2\u1bca\u1bbd\3\2\2\2\u1bca\u1bc4\3\2\2\2\u1bca"+
		"\u1bc7\3\2\2\2\u1bcb\u03a7\3\2\2\2\u1bcc\u1bcd\5\u0136\u009c\2\u1bcd\u1bce"+
		"\5\u03aa\u01d6\2\u1bce\u1bd5\3\2\2\2\u1bcf\u1bd5\5\u00d6l\2\u1bd0\u1bd5"+
		"\5\u013a\u009e\2\u1bd1\u1bd2\5\u013a\u009e\2\u1bd2\u1bd3\5\u00f8}\2\u1bd3"+
		"\u1bd5\3\2\2\2\u1bd4\u1bcc\3\2\2\2\u1bd4\u1bcf\3\2\2\2\u1bd4\u1bd0\3\2"+
		"\2\2\u1bd4\u1bd1\3\2\2\2\u1bd5\u03a9\3\2\2\2\u1bd6\u1bd7\7\"\2\2\u1bd7"+
		"\u1bd8\5\u0250\u0129\2\u1bd8\u1bd9\7#\2\2\u1bd9\u1bdd\3\2\2\2\u1bda\u1bdb"+
		"\7\"\2\2\u1bdb\u1bdd\7#\2\2\u1bdc\u1bd6\3\2\2\2\u1bdc\u1bda\3\2\2\2\u1bdd"+
		"\u03ab\3\2\2\2\u1bde\u1bdf\5\u0136\u009c\2\u1bdf\u1be0\5\u0370\u01b9\2"+
		"\u1be0\u03ad\3\2\2\2\u1be1\u1be3\5\u03b0\u01d9\2\u1be2\u1be1\3\2\2\2\u1be3"+
		"\u1be6\3\2\2\2\u1be4\u1be2\3\2\2\2\u1be4\u1be5\3\2\2\2\u1be5\u03af\3\2"+
		"\2\2\u1be6\u1be4\3\2\2\2\u1be7\u1bea\7k\2\2\u1be8\u1beb\5\u01fc\u00ff"+
		"\2\u1be9\u1beb\7\u0224\2\2\u1bea\u1be8\3\2\2\2\u1bea\u1be9\3\2\2\2\u1beb"+
		"\u03b1\3\2\2\2\u1bec\u1bed\7:\2\2\u1bed\u1bee\7H\2\2\u1bee\u1bef\7\u00f2"+
		"\2\2\u1bef\u1bf0\7\u021b\2\2\u1bf0\u1bf1\5\u013a\u009e\2\u1bf1\u1bf2\5"+
		"\u03b4\u01db\2\u1bf2\u03b3\3\2\2\2\u1bf3\u1bf5\5\u03b6\u01dc\2\u1bf4\u1bf3"+
		"\3\2\2\2\u1bf4\u1bf5\3\2\2\2\u1bf5\u1bf6\3\2\2\2\u1bf6\u1bff\5\u0340\u01a1"+
		"\2\u1bf7\u1bff\5\u03b6\u01dc\2\u1bf8\u1bf9\7\u0121\2\2\u1bf9\u1bfa\7k"+
		"\2\2\u1bfa\u1bff\5\u00e0q\2\u1bfb\u1bfc\7\u011c\2\2\u1bfc\u1bfd\7k\2\2"+
		"\u1bfd\u1bff\5\u0202\u0102\2\u1bfe\u1bf4\3\2\2\2\u1bfe\u1bf7\3\2\2\2\u1bfe"+
		"\u1bf8\3\2\2\2\u1bfe\u1bfb\3\2\2\2\u1bff\u03b5\3\2\2\2\u1c00\u1c02\5\u03b8"+
		"\u01dd\2\u1c01\u1c00\3\2\2\2\u1c02\u1c03\3\2\2\2\u1c03\u1c01\3\2\2\2\u1c03"+
		"\u1c04\3\2\2\2\u1c04\u03b7\3\2\2\2\u1c05\u1c06\7\u01d4\2\2\u1c06\u1c0e"+
		"\5\u03ba\u01de\2\u1c07\u1c08\7\u00de\2\2\u1c08\u1c0e\7\u01d4\2\2\u1c09"+
		"\u1c0a\7\u0213\2\2\u1c0a\u1c0e\5\u03ba\u01de\2\u1c0b\u1c0c\7\u00de\2\2"+
		"\u1c0c\u1c0e\7\u0213\2\2\u1c0d\u1c05\3\2\2\2\u1c0d\u1c07\3\2\2\2\u1c0d"+
		"\u1c09\3\2\2\2\u1c0d\u1c0b\3\2\2\2\u1c0e\u03b9\3\2\2\2\u1c0f\u1c10\5\u01ba"+
		"\u00de\2\u1c10\u03bb\3\2\2\2\u1c11\u1c12\7:\2\2\u1c12\u1c13\7z\2\2\u1c13"+
		"\u1c14\5\u03be\u01e0\2\u1c14\u03bd\3\2\2\2\u1c15\u1c16\5\u0202\u0102\2"+
		"\u1c16\u1c17\t*\2\2\u1c17\u1c18\7\u00e7\2\2\u1c18\u1c19\5\u0256\u012c"+
		"\2\u1c19\u1c20\3\2\2\2\u1c1a\u1c1b\5\u0202\u0102\2\u1c1b\u1c1c\7\u0121"+
		"\2\2\u1c1c\u1c1d\7k\2\2\u1c1d\u1c1e\5\u0202\u0102\2\u1c1e\u1c20\3\2\2"+
		"\2\u1c1f\u1c15\3\2\2\2\u1c1f\u1c1a\3\2\2\2\u1c20\u03bf\3\2\2\2\u1c21\u1c23"+
		"\7:\2\2\u1c22\u1c24\7\u01e0\2\2\u1c23\u1c22\3\2\2\2\u1c23\u1c24\3\2\2"+
		"\2\u1c24\u1c25\3\2\2\2\u1c25\u1c32\7\u010d\2\2\u1c26\u1c27\5\u013a\u009e"+
		"\2\u1c27\u1c28\7\u0121\2\2\u1c28\u1c29\7k\2\2\u1c29\u1c2a\5\u013a\u009e"+
		"\2\u1c2a\u1c33\3\2\2\2\u1c2b\u1c2c\7\u011c\2\2\u1c2c\u1c30\7k\2\2\u1c2d"+
		"\u1c31\5\u01f4\u00fb\2\u1c2e\u1c31\7\u00a2\2\2\u1c2f\u1c31\7\u012b\2\2"+
		"\u1c30\u1c2d\3\2\2\2\u1c30\u1c2e\3\2\2\2\u1c30\u1c2f\3\2\2\2\u1c31\u1c33"+
		"\3\2\2\2\u1c32\u1c26\3\2\2\2\u1c32\u1c2b\3\2\2\2\u1c33\u03c1\3\2\2\2\u1c34"+
		"\u1c35\7:\2\2\u1c35\u1c36\7\u010e\2\2\u1c36\u1c37\7\u0117\2\2\u1c37\u1c38"+
		"\5\u020c\u0107\2\u1c38\u1c39\7\u011c\2\2\u1c39\u1c3d\7k\2\2\u1c3a\u1c3e"+
		"\5\u01f4\u00fb\2\u1c3b\u1c3e\7\u00a2\2\2\u1c3c\u1c3e\7\u012b\2\2\u1c3d"+
		"\u1c3a\3\2\2\2\u1c3d\u1c3b\3\2\2\2\u1c3d\u1c3c\3\2\2\2\u1c3e\u03c3\3\2"+
		"\2\2\u1c3f\u1c40\7:\2\2\u1c40\u1c41\7\u0181\2\2\u1c41\u1c42\7O\2\2\u1c42"+
		"\u1c43\5\u03c6\u01e4\2\u1c43\u03c5\3\2\2\2\u1c44\u1c45\7g\2\2\u1c45\u1c47"+
		"\7s\2\2\u1c46\u1c44\3\2\2\2\u1c46\u1c47\3\2\2\2\u1c47\u1c48\3\2\2\2\u1c48"+
		"\u1c49\5N(\2\u1c49\u1c4a\5\u0338\u019d\2\u1c4a\u1c7f\3\2\2\2\u1c4b\u1c4c"+
		"\5N(\2\u1c4c\u1c4d\7\u00f7\2\2\u1c4d\u1c4e\7f\2\2\u1c4e\u1c4f\7\u00fc"+
		"\2\2\u1c4f\u1c50\5\u00e0q\2\u1c50\u1c7f\3\2\2\2\u1c51\u1c52\7g\2\2\u1c52"+
		"\u1c54\7s\2\2\u1c53\u1c51\3\2\2\2\u1c53\u1c54\3\2\2\2\u1c54\u1c55\3\2"+
		"\2\2\u1c55\u1c56\5N(\2\u1c56\u1c58\7\u0121\2\2\u1c57\u1c59\7C\2\2\u1c58"+
		"\u1c57\3\2\2\2\u1c58\u1c59\3\2\2\2\u1c59\u1c5a\3\2\2\2\u1c5a\u1c5b\5\u00dc"+
		"o\2\u1c5b\u1c5c\7k\2\2\u1c5c\u1c5d\5\u00dco\2\u1c5d\u1c7f\3\2\2\2\u1c5e"+
		"\u1c5f\7g\2\2\u1c5f\u1c61\7s\2\2\u1c60\u1c5e\3\2\2\2\u1c60\u1c61\3\2\2"+
		"\2\u1c61\u1c62\3\2\2\2\u1c62\u1c63\5N(\2\u1c63\u1c64\7\u0121\2\2\u1c64"+
		"\u1c65\7k\2\2\u1c65\u1c66\5N(\2\u1c66\u1c7f\3\2\2\2\u1c67\u1c68\7g\2\2"+
		"\u1c68\u1c6a\7s\2\2\u1c69\u1c67\3\2\2\2\u1c69\u1c6a\3\2\2\2\u1c6a\u1c6b"+
		"\3\2\2\2\u1c6b\u1c6c\5N(\2\u1c6c\u1c6d\7A\2\2\u1c6d\u1c6e\7=\2\2\u1c6e"+
		"\u1c6f\5\u00d8m\2\u1c6f\u1c7f\3\2\2\2\u1c70\u1c71\7v\2\2\u1c71\u1c72\7"+
		"u\2\2\u1c72\u1c73\7\u0130\2\2\u1c73\u1c74\5\u00e0q\2\u1c74\u1c75\7\u011b"+
		"\2\2\u1c75\u1c76\7{\2\2\u1c76\u1c77\5\u0256\u012c\2\u1c77\u1c78\3\2\2"+
		"\2\u1c78\u1c79\7A\2\2\u1c79\u1c7a\7\u0130\2\2\u1c7a\u1c7c\5\u00e0q\2\u1c7b"+
		"\u1c7d\7\u018e\2\2\u1c7c\u1c7b\3\2\2\2\u1c7c\u1c7d\3\2\2\2\u1c7d\u1c7f"+
		"\3\2\2\2\u1c7e\u1c46\3\2\2\2\u1c7e\u1c4b\3\2\2\2\u1c7e\u1c53\3\2\2\2\u1c7e"+
		"\u1c60\3\2\2\2\u1c7e\u1c69\3\2\2\2\u1c7e\u1c70\3\2\2\2\u1c7f\u03c7\3\2"+
		"\2\2\u1c80\u1c81\7\u01cc\2\2\u1c81\u1c82\5\u00e0q\2\u1c82\u1c83\5\u03ca"+
		"\u01e6\2\u1c83\u1c88\7\u01c7\2\2\u1c84\u1c85\7R\2\2\u1c85\u1c89\7\u01d8"+
		"\2\2\u1c86\u1c87\7\u0139\2\2\u1c87\u1c89\7\u01d8\2\2\u1c88\u1c84\3\2\2"+
		"\2\u1c88\u1c86\3\2\2\2\u1c88\u1c89\3\2\2\2\u1c89\u1c8a\3\2\2\2\u1c8a\u1c8b"+
		"\7j\2\2\u1c8b\u1c8c\5&\24\2\u1c8c\u03c9\3\2\2\2\u1c8d\u1c8f\5\u03cc\u01e7"+
		"\2\u1c8e\u1c8d\3\2\2\2\u1c8f\u1c92\3\2\2\2\u1c90\u1c8e\3\2\2\2\u1c90\u1c91"+
		"\3\2\2\2\u1c91\u03cb\3\2\2\2\u1c92\u1c90\3\2\2\2\u1c93\u1c94\7\u00de\2"+
		"\2\u1c94\u1c99\7\u01f7\2\2\u1c95\u1c99\7\u01f7\2\2\u1c96\u1c99\7\u00d1"+
		"\2\2\u1c97\u1c99\7\u01ba\2\2\u1c98\u1c93\3\2\2\2\u1c98\u1c95\3\2\2\2\u1c98"+
		"\u1c96\3\2\2\2\u1c98\u1c97\3\2\2\2\u1c99\u03cd\3\2\2\2\u1c9a\u1c9c\79"+
		"\2\2\u1c9b\u1c9d\7\u0134\2\2\u1c9c\u1c9b\3\2\2\2\u1c9c\u1c9d\3\2\2\2\u1c9d"+
		"\u1c9e\3\2\2\2\u1c9e\u1c9f\7\u0181\2\2\u1c9f\u1ca3\7O\2\2\u1ca0\u1ca1"+
		"\7g\2\2\u1ca1\u1ca2\7o\2\2\u1ca2\u1ca4\7s\2\2\u1ca3\u1ca0\3\2\2\2\u1ca3"+
		"\u1ca4\3\2\2\2\u1ca4\u1ca5\3\2\2\2\u1ca5\u1ca6\5\u03d0\u01e9\2\u1ca6\u1ca7"+
		"\7e\2\2\u1ca7\u1cad\5&\24\2\u1ca8\u1ca9\7R\2\2\u1ca9\u1cae\7\u00f2\2\2"+
		"\u1caa\u1cab\7R\2\2\u1cab\u1cac\7\u00de\2\2\u1cac\u1cae\7\u00f2\2\2\u1cad"+
		"\u1ca8\3\2\2\2\u1cad\u1caa\3\2\2\2\u1cad\u1cae\3\2\2\2\u1cae\u03cf\3\2"+
		"\2\2\u1caf\u1cb1\5N(\2\u1cb0\u1cb2\5\u0220\u0111\2\u1cb1\u1cb0\3\2\2\2"+
		"\u1cb1\u1cb2\3\2\2\2\u1cb2\u1cb3\3\2\2\2\u1cb3\u1cb6\5\u0290\u0149\2\u1cb4"+
		"\u1cb5\7R\2\2\u1cb5\u1cb7\5\u01e2\u00f2\2\u1cb6\u1cb4\3\2\2\2\u1cb6\u1cb7"+
		"\3\2\2\2\u1cb7\u1cba\3\2\2\2\u1cb8\u1cb9\7\u0130\2\2\u1cb9\u1cbb\5\u00e0"+
		"q\2\u1cba\u1cb8\3\2\2\2\u1cba\u1cbb\3\2\2\2\u1cbb\u03d1\3\2\2\2\u1cbc"+
		"\u1cbd\7\u01f0\2\2\u1cbd\u1cbe\7\u0181\2\2\u1cbe\u1cc0\7O\2\2\u1cbf\u1cc1"+
		"\7\u00ee\2\2\u1cc0\u1cbf\3\2\2\2\u1cc0\u1cc1\3\2\2\2\u1cc1\u1cc2\3\2\2"+
		"\2\u1cc2\u1cc8\5N(\2\u1cc3\u1cc4\7R\2\2\u1cc4\u1cc9\7\u00f2\2\2\u1cc5"+
		"\u1cc6\7R\2\2\u1cc6\u1cc7\7\u00de\2\2\u1cc7\u1cc9\7\u00f2\2\2\u1cc8\u1cc3"+
		"\3\2\2\2\u1cc8\u1cc5\3\2\2\2\u1cc8\u1cc9\3\2\2\2\u1cc9\u03d3\3\2\2\2\u1cca"+
		"\u1ccb\7:\2\2\u1ccb\u1cce\7\u0200\2\2\u1ccc\u1ccd\7g\2\2\u1ccd\u1ccf\7"+
		"s\2\2\u1cce\u1ccc\3\2\2\2\u1cce\u1ccf\3\2\2\2\u1ccf\u1cd0\3\2\2\2\u1cd0"+
		"\u1cd1\5\u00e0q\2\u1cd1\u1cd2\7f\2\2\u1cd2\u1cd3\5N(\2\u1cd3\u1cd4\5\u03d6"+
		"\u01ec\2\u1cd4\u03d5\3\2\2\2\u1cd5\u1cd6\7k\2\2\u1cd6\u1cd8\5\u0256\u012c"+
		"\2\u1cd7\u1cd5\3\2\2\2\u1cd7\u1cd8\3\2\2\2\u1cd8\u1cde\3\2\2\2\u1cd9\u1cda"+
		"\7c\2\2\u1cda\u1cdb\7\"\2\2\u1cdb\u1cdc\5\u00f2z\2\u1cdc\u1cdd\7#\2\2"+
		"\u1cdd\u1cdf\3\2\2\2\u1cde\u1cd9\3\2\2\2\u1cde\u1cdf\3\2\2\2\u1cdf\u1ce6"+
		"\3\2\2\2\u1ce0\u1ce1\7R\2\2\u1ce1\u1ce2\7\u00da\2\2\u1ce2\u1ce3\7\"\2"+
		"\2\u1ce3\u1ce4\5\u00f2z\2\u1ce4\u1ce5\7#\2\2\u1ce5\u1ce7\3\2\2\2\u1ce6"+
		"\u1ce0\3\2\2\2\u1ce6\u1ce7\3\2\2\2\u1ce7\u1cec\3\2\2\2\u1ce8\u1ce9\7\u0121"+
		"\2\2\u1ce9\u1cea\7k\2\2\u1cea\u1cec\5\u00e0q\2\u1ceb\u1cd7\3\2\2\2\u1ceb"+
		"\u1ce8\3\2\2\2\u1cec\u03d7\3\2\2\2\u1ced\u1cee\7:\2\2\u1cee\u1cef\7N\2"+
		"\2\u1cef\u1cf0\5\u03a8\u01d5\2\u1cf0\u1cf1\5\u03da\u01ee\2\u1cf1\u03d9"+
		"\3\2\2\2\u1cf2\u1cf4\5\u03dc\u01ef\2\u1cf3\u1cf5\7\u0125\2\2\u1cf4\u1cf3"+
		"\3\2\2\2\u1cf4\u1cf5\3\2\2\2\u1cf5\u1d07\3\2\2\2\u1cf6\u1cf7\7\u0121\2"+
		"\2\u1cf7\u1cf8\7k\2\2\u1cf8\u1d07\5\u00e0q\2\u1cf9\u1cfb\7\u00de\2\2\u1cfa"+
		"\u1cf9\3\2\2\2\u1cfa\u1cfb\3\2\2\2\u1cfb\u1cfc\3\2\2\2\u1cfc\u1cfd\7\u00f7"+
		"\2\2\u1cfd\u1cfe\7f\2\2\u1cfe\u1cff\7\u00fc\2\2\u1cff\u1d07\5\u00e0q\2"+
		"\u1d00\u1d01\7A\2\2\u1d01\u1d02\7=\2\2\u1d02\u1d07\5\u00e0q\2\u1d03\u1d04"+
		"\7\u011c\2\2\u1d04\u1d05\7k\2\2\u1d05\u1d07\5\u0202\u0102\2\u1d06\u1cf2"+
		"\3\2\2\2\u1d06\u1cf6\3\2\2\2\u1d06\u1cfa\3\2\2\2\u1d06\u1d00\3\2\2\2\u1d06"+
		"\u1d03\3\2\2\2\u1d07\u03db\3\2\2\2\u1d08\u1d0a\5\u026e\u0138\2\u1d09\u1d08"+
		"\3\2\2\2\u1d0a\u1d0b\3\2\2\2\u1d0b\u1d09\3\2\2\2\u1d0b\u1d0c\3\2\2\2\u1d0c"+
		"\u03dd\3\2\2\2\u1d0d\u1d0e\7:\2\2\u1d0e\u1d0f\7L\2\2\u1d0f\u1d10\5\u03a8"+
		"\u01d5\2\u1d10\u1d11\5\u03e0\u01f1\2\u1d11\u03df\3\2\2\2\u1d12\u1d14\5"+
		"\u03dc\u01ef\2\u1d13\u1d15\7\u0125\2\2\u1d14\u1d13\3\2\2\2\u1d14\u1d15"+
		"\3\2\2\2\u1d15\u1d27\3\2\2\2\u1d16\u1d17\7\u0121\2\2\u1d17\u1d18\7k\2"+
		"\2\u1d18\u1d27\5\u00e0q\2\u1d19\u1d1b\7\u00de\2\2\u1d1a\u1d19\3\2\2\2"+
		"\u1d1a\u1d1b\3\2\2\2\u1d1b\u1d1c\3\2\2\2\u1d1c\u1d1d\7\u00f7\2\2\u1d1d"+
		"\u1d1e\7f\2\2\u1d1e\u1d1f\7\u00fc\2\2\u1d1f\u1d27\5\u00e0q\2\u1d20\u1d21"+
		"\7A\2\2\u1d21\u1d22\7=\2\2\u1d22\u1d27\5\u00e0q\2\u1d23\u1d24\7\u011c"+
		"\2\2\u1d24\u1d25\7k\2\2\u1d25\u1d27\5\u0202\u0102\2\u1d26\u1d12\3\2\2"+
		"\2\u1d26\u1d16\3\2\2\2\u1d26\u1d1a\3\2\2\2\u1d26\u1d20\3\2\2\2\u1d26\u1d23"+
		"\3\2\2\2\u1d27\u03e1\3\2\2\2\u1d28\u1d29\7:\2\2\u1d29\u1d2a\7\u01e4\2"+
		"\2\u1d2a\u1d36\5\u00e0q\2\u1d2b\u1d2c\7\u0121\2\2\u1d2c\u1d2d\7k\2\2\u1d2d"+
		"\u1d37\5\u00e0q\2\u1d2e\u1d2f\7\u011c\2\2\u1d2f\u1d30\7k\2\2\u1d30\u1d37"+
		"\5\u0202\u0102\2\u1d31\u1d32\7A\2\2\u1d32\u1d37\5\u022c\u0117\2\u1d33"+
		"\u1d34\t.\2\2\u1d34\u1d35\7B\2\2\u1d35\u1d37\5\u026c\u0137\2\u1d36\u1d2b"+
		"\3\2\2\2\u1d36\u1d2e\3\2\2\2\u1d36\u1d31\3\2\2\2\u1d36\u1d33\3\2\2\2\u1d37"+
		"\u03e3\3\2\2\2\u1d38\u1d39\7:\2\2\u1d39\u1d3a\7\u0126\2\2\u1d3a\u1d3b"+
		"\5\u03a8\u01d5\2\u1d3b\u1d3c\5\u03da\u01ee\2\u1d3c\u03e5\3\2\2\2\u1d3d"+
		"\u1d3e\7:\2\2\u1d3e\u1d3f\7\u0127\2\2\u1d3f\u1d40\7f\2\2\u1d40\u1d41\5"+
		"N(\2\u1d41\u1d42\7\u0121\2\2\u1d42\u1d43\7k\2\2\u1d43\u1d44\5\u00e0q\2"+
		"\u1d44\u03e7\3\2\2\2\u1d45\u1d46\7:\2\2\u1d46\u1d49\7\u0129\2\2\u1d47"+
		"\u1d48\7g\2\2\u1d48\u1d4a\7s\2\2\u1d49\u1d47\3\2\2\2\u1d49\u1d4a\3\2\2"+
		"\2\u1d4a\u1d4b\3\2\2\2\u1d4b\u1d4c\5N(\2\u1d4c\u1d4d\5\u03ea\u01f6\2\u1d4d"+
		"\u03e9\3\2\2\2\u1d4e\u1d57\5\u0338\u019d\2\u1d4f\u1d57\5\u021c\u010f\2"+
		"\u1d50\u1d51\7\u0121\2\2\u1d51\u1d52\7k\2\2\u1d52\u1d57\5\u00e0q\2\u1d53"+
		"\u1d54\7A\2\2\u1d54\u1d55\7=\2\2\u1d55\u1d57\5\u00e0q\2\u1d56\u1d4e\3"+
		"\2\2\2\u1d56\u1d4f\3\2\2\2\u1d56\u1d50\3\2\2\2\u1d56\u1d53\3\2\2\2\u1d57"+
		"\u03eb\3\2\2\2\u1d58\u1d59\7:\2\2\u1d59\u1d5a\7\u01fb\2\2\u1d5a\u1d66"+
		"\5\u00e0q\2\u1d5b\u1d5c\5\u03ee\u01f8\2\u1d5c\u1d5d\5\u0340\u01a1\2\u1d5d"+
		"\u1d67\3\2\2\2\u1d5e\u1d67\5\u03ee\u01f8\2\u1d5f\u1d67\5\u0340\u01a1\2"+
		"\u1d60\u1d61\7\u0121\2\2\u1d61\u1d62\7k\2\2\u1d62\u1d67\5\u00e0q\2\u1d63"+
		"\u1d64\7\u011c\2\2\u1d64\u1d65\7k\2\2\u1d65\u1d67\5\u0202\u0102\2\u1d66"+
		"\u1d5b\3\2\2\2\u1d66\u1d5e\3\2\2\2\u1d66\u1d5f\3\2\2\2\u1d66\u1d60\3\2"+
		"\2\2\u1d66\u1d63\3\2\2\2\u1d67\u03ed\3\2\2\2\u1d68\u1d69\7\u017c\2\2\u1d69"+
		"\u1d6a\t/\2\2\u1d6a\u03ef\3\2\2\2\u1d6b\u1d6c\7:\2\2\u1d6c\u1d85\7\u012e"+
		"\2\2\u1d6d\u1d6e\7g\2\2\u1d6e\u1d70\7s\2\2\u1d6f\u1d6d\3\2\2\2\u1d6f\u1d70"+
		"\3\2\2\2\u1d70\u1d71\3\2\2\2\u1d71\u1d72\5\u01ba\u00de\2\u1d72\u1d73\7"+
		"A\2\2\u1d73\u1d74\7\u012e\2\2\u1d74\u1d75\5\u01f8\u00fd\2\u1d75\u1d86"+
		"\3\2\2\2\u1d76\u1d77\5\u01ba\u00de\2\u1d77\u1d78\7\u0121\2\2\u1d78\u1d79"+
		"\7k\2\2\u1d79\u1d7a\5\u00e0q\2\u1d7a\u1d86\3\2\2\2\u1d7b\u1d7c\5\u01ba"+
		"\u00de\2\u1d7c\u1d7d\7A\2\2\u1d7d\u1d7e\7=\2\2\u1d7e\u1d7f\5\u00e0q\2"+
		"\u1d7f\u1d86\3\2\2\2\u1d80\u1d81\5\u01ba\u00de\2\u1d81\u1d82\7\u011c\2"+
		"\2\u1d82\u1d83\7k\2\2\u1d83\u1d84\5\u0202\u0102\2\u1d84\u1d86\3\2\2\2"+
		"\u1d85\u1d6f\3\2\2\2\u1d85\u1d76\3\2\2\2\u1d85\u1d7b\3\2\2\2\u1d85\u1d80"+
		"\3\2\2\2\u1d86\u03f1\3\2\2\2\u1d87\u1d88\7:\2\2\u1d88\u1d89\7\u01fc\2"+
		"\2\u1d89\u1da2\5\u00e0q\2\u1d8a\u1d8b\7\u0121\2\2\u1d8b\u1d8c\7k\2\2\u1d8c"+
		"\u1da3\5\u00e0q\2\u1d8d\u1d8e\7\u011c\2\2\u1d8e\u1d8f\7k\2\2\u1d8f\u1da3"+
		"\5\u0202\u0102\2\u1d90\u1d91\7A\2\2\u1d91\u1da3\5\u022c\u0117\2\u1d92"+
		"\u1d93\7\u01cb\2\2\u1d93\u1da3\7\u0224\2\2\u1d94\u1d95\7\u01f0\2\2\u1d95"+
		"\u1d98\7\u01e4\2\2\u1d96\u1d97\7R\2\2\u1d97\u1d99\5\u022c\u0117\2\u1d98"+
		"\u1d96\3\2\2\2\u1d98\u1d99\3\2\2\2\u1d99\u1da3\3\2\2\2\u1d9a\u1d9b\7A"+
		"\2\2\u1d9b\u1d9c\7\u01e4\2\2\u1d9c\u1d9f\5\u03f4\u01fb\2\u1d9d\u1d9e\7"+
		"R\2\2\u1d9e\u1da0\5\u022c\u0117\2\u1d9f\u1d9d\3\2\2\2\u1d9f\u1da0\3\2"+
		"\2\2\u1da0\u1da3\3\2\2\2\u1da1\u1da3\t$\2\2\u1da2\u1d8a\3\2\2\2\u1da2"+
		"\u1d8d\3\2\2\2\u1da2\u1d90\3\2\2\2\u1da2\u1d92\3\2\2\2\u1da2\u1d94\3\2"+
		"\2\2\u1da2\u1d9a\3\2\2\2\u1da2\u1da1\3\2\2\2\u1da3\u03f3\3\2\2\2\u1da4"+
		"\u1da9\5\u03f6\u01fc\2\u1da5\u1da6\7(\2\2\u1da6\u1da8\5\u03f6\u01fc\2"+
		"\u1da7\u1da5\3\2\2\2\u1da8\u1dab\3\2\2\2\u1da9\u1da7\3\2\2\2\u1da9\u1daa"+
		"\3\2\2\2\u1daa\u03f5\3\2\2\2\u1dab\u1da9\3\2\2\2\u1dac\u1dad\5\u0232\u011a"+
		"\2\u1dad\u03f7\3\2\2\2\u1dae\u1daf\7:\2\2\u1daf\u1db4\7\u019e\2\2\u1db0"+
		"\u1db1\7A\2\2\u1db1\u1db5\5\u0264\u0133\2\u1db2\u1db3\7\u0123\2\2\u1db3"+
		"\u1db5\5\u026a\u0136\2\u1db4\u1db0\3\2\2\2\u1db4\u1db2\3\2\2\2\u1db5\u03f9"+
		"\3\2\2\2\u1db6\u1db7\7:\2\2\u1db7\u1db8\7\u0130\2\2\u1db8\u1dc2\5\u00e0"+
		"q\2\u1db9\u1dc3\7A\2\2\u1dba\u1dbb\7\u0123\2\2\u1dbb\u1dc3\5\u01e2\u00f2"+
		"\2\u1dbc\u1dbd\7\u0121\2\2\u1dbd\u1dbe\7k\2\2\u1dbe\u1dc3\5\u00e0q\2\u1dbf"+
		"\u1dc0\7\u011c\2\2\u1dc0\u1dc1\7k\2\2\u1dc1\u1dc3\5\u0202\u0102\2\u1dc2"+
		"\u1db9\3\2\2\2\u1dc2\u1dba\3\2\2\2\u1dc2\u1dbc\3\2\2\2\u1dc2\u1dbf\3\2"+
		"\2\2\u1dc3\u03fb\3\2\2\2\u1dc4\u1dc5\7:\2\2\u1dc5\u1dc6\7\u00b3\2\2\u1dc6"+
		"\u1dc7\7\u01fd\2\2\u1dc7\u1dc8\7\u01b5\2\2\u1dc8\u1dc9\5\u01ba\u00de\2"+
		"\u1dc9\u1dca\5\u03fe\u0200\2\u1dca\u03fd\3\2\2\2\u1dcb\u1dcc\7\u0121\2"+
		"\2\u1dcc\u1dcd\7k\2\2\u1dcd\u1df1\5\u00e0q\2\u1dce\u1dcf\7A\2\2\u1dcf"+
		"\u1dd0\7=\2\2\u1dd0\u1df1\5\u00e0q\2\u1dd1\u1dd2\7\u011c\2\2\u1dd2\u1dd3"+
		"\7k\2\2\u1dd3\u1df1\5\u0202\u0102\2\u1dd4\u1dd5\t\60\2\2\u1dd5\u1dd6\7"+
		"\u01d9\2\2\u1dd6\u1dd7\7j\2\2\u1dd7\u1dd9\5\u01be\u00e0\2\u1dd8\u1dda"+
		"\7R\2\2\u1dd9\u1dd8\3\2\2\2\u1dd9\u1dda\3\2\2\2\u1dda\u1ddb\3\2\2\2\u1ddb"+
		"\u1ddc\5\u0400\u0201\2\u1ddc\u1df1\3\2\2\2\u1ddd\u1dde\7:\2\2\u1dde\u1de1"+
		"\7\u01d9\2\2\u1ddf\u1de0\7j\2\2\u1de0\u1de2\5\u01be\u00e0\2\u1de1\u1ddf"+
		"\3\2\2\2\u1de1\u1de2\3\2\2\2\u1de2\u1de3\3\2\2\2\u1de3\u1de4\7\u01ee\2"+
		"\2\u1de4\u1de5\5\u01ba\u00de\2\u1de5\u1de6\7R\2\2\u1de6\u1de7\5\u01ba"+
		"\u00de\2\u1de7\u1df1\3\2\2\2\u1de8\u1de9\7;\2\2\u1de9\u1dec\7\u01d9\2"+
		"\2\u1dea\u1deb\7g\2\2\u1deb\u1ded\7s\2\2\u1dec\u1dea\3\2\2\2\u1dec\u1ded"+
		"\3\2\2\2\u1ded\u1dee\3\2\2\2\u1dee\u1def\7j\2\2\u1def\u1df1\5\u01be\u00e0"+
		"\2\u1df0\u1dcb\3\2\2\2\u1df0\u1dce\3\2\2\2\u1df0\u1dd1\3\2\2\2\u1df0\u1dd4"+
		"\3\2\2\2\u1df0\u1ddd\3\2\2\2\u1df0\u1de8\3\2\2\2\u1df1\u03ff\3\2\2\2\u1df2"+
		"\u1df7\5\u01ba\u00de\2\u1df3\u1df4\7(\2\2\u1df4\u1df6\5\u01ba\u00de\2"+
		"\u1df5\u1df3\3\2\2\2\u1df6\u1df9\3\2\2\2\u1df7\u1df5\3\2\2\2\u1df7\u1df8"+
		"\3\2\2\2\u1df8\u0401\3\2\2\2\u1df9\u1df7\3\2\2\2\u1dfa\u1dfb\7:\2\2\u1dfb"+
		"\u1dfc\7\u00b3\2\2\u1dfc\u1dfd\7\u01fd\2\2\u1dfd\u1dfe\7\u01b8\2\2\u1dfe"+
		"\u1e09\5\u01ba\u00de\2\u1dff\u1e00\7\u0121\2\2\u1e00\u1e01\7k\2\2\u1e01"+
		"\u1e0a\5\u00e0q\2\u1e02\u1e03\7A\2\2\u1e03\u1e04\7=\2\2\u1e04\u1e0a\5"+
		"\u00e0q\2\u1e05\u1e06\7\u011c\2\2\u1e06\u1e07\7k\2\2\u1e07\u1e0a\5\u0202"+
		"\u0102\2\u1e08\u1e0a\5\u022c\u0117\2\u1e09\u1dff\3\2\2\2\u1e09\u1e02\3"+
		"\2\2\2\u1e09\u1e05\3\2\2\2\u1e09\u1e08\3\2\2\2\u1e0a\u0403\3\2\2\2\u1e0b"+
		"\u1e0c\7:\2\2\u1e0c\u1e0d\7\u00b3\2\2\u1e0d\u1e0e\7\u01fd\2\2\u1e0e\u1e17"+
		"\7\u01e1\2\2\u1e0f\u1e10\5\u01ba\u00de\2\u1e10\u1e11\7\u0121\2\2\u1e11"+
		"\u1e12\7k\2\2\u1e12\u1e13\5\u00e0q\2\u1e13\u1e18\3\2\2\2\u1e14\u1e15\7"+
		"A\2\2\u1e15\u1e16\7=\2\2\u1e16\u1e18\5\u00e0q\2\u1e17\u1e0f\3\2\2\2\u1e17"+
		"\u1e14\3\2\2\2\u1e18\u0405\3\2\2\2\u1e19\u1e1a\7:\2\2\u1e1a\u1e1b\7\u00b3"+
		"\2\2\u1e1b\u1e1c\7\u01fd\2\2\u1e1c\u1e25\7\u020c\2\2\u1e1d\u1e1e\5\u01ba"+
		"\u00de\2\u1e1e\u1e1f\7\u0121\2\2\u1e1f\u1e20\7k\2\2\u1e20\u1e21\5\u00e0"+
		"q\2\u1e21\u1e26\3\2\2\2\u1e22\u1e23\7A\2\2\u1e23\u1e24\7=\2\2\u1e24\u1e26"+
		"\5\u00e0q\2\u1e25\u1e1d\3\2\2\2\u1e25\u1e22\3\2\2\2\u1e26\u0407\3\2\2"+
		"\2\u1e27\u1e28\7:\2\2\u1e28\u1e29\7M\2\2\u1e29\u1e2a\5\u00e0q\2\u1e2a"+
		"\u1e2b\7f\2\2\u1e2b\u1e36\5N(\2\u1e2c\u1e2d\7\u0121\2\2\u1e2d\u1e2e\7"+
		"k\2\2\u1e2e\u1e37\5\u00e0q\2\u1e2f\u1e31\7\u00de\2\2\u1e30\u1e2f\3\2\2"+
		"\2\u1e30\u1e31\3\2\2\2\u1e31\u1e32\3\2\2\2\u1e32\u1e33\7\u00f7\2\2\u1e33"+
		"\u1e34\7f\2\2\u1e34\u1e35\7\u00fc\2\2\u1e35\u1e37\5\u00e0q\2\u1e36\u1e2c"+
		"\3\2\2\2\u1e36\u1e30\3\2\2\2\u1e37\u0409\3\2\2\2\u1e38\u1e39\7:\2\2\u1e39"+
		"\u1e3a\7\u00af\2\2\u1e3a\u1e3b\5\u01ba\u00de\2\u1e3b\u1e3c\5\u040c\u0207"+
		"\2\u1e3c\u040b\3\2\2\2\u1e3d\u1e66\5\u040e\u0208\2\u1e3e\u1e3f\7@\2\2"+
		"\u1e3f\u1e43\7\u00bc\2\2\u1e40\u1e41\7g\2\2\u1e41\u1e42\7o\2\2\u1e42\u1e44"+
		"\7s\2\2\u1e43\u1e40\3\2\2\2\u1e43\u1e44\3\2\2\2\u1e44\u1e45\3\2\2\2\u1e45"+
		"\u1e48\7\u0224\2\2\u1e46\u1e47\t\61\2\2\u1e47\u1e49\7\u0224\2\2\u1e48"+
		"\u1e46\3\2\2\2\u1e48\u1e49\3\2\2\2\u1e49\u1e66\3\2\2\2\u1e4a\u1e4b\7\u0121"+
		"\2\2\u1e4b\u1e4c\7\u00bc\2\2\u1e4c\u1e4d\7\u0224\2\2\u1e4d\u1e4e\7k\2"+
		"\2\u1e4e\u1e66\7\u0224\2\2\u1e4f\u1e50\7\u0121\2\2\u1e50\u1e51\7k\2\2"+
		"\u1e51\u1e66\5\u00e0q\2\u1e52\u1e53\7\u0121\2\2\u1e53\u1e54\7\u01a6\2"+
		"\2\u1e54\u1e55\5\u00e0q\2\u1e55\u1e56\7k\2\2\u1e56\u1e58\5\u00e0q\2\u1e57"+
		"\u1e59\5\u0346\u01a4\2\u1e58\u1e57\3\2\2\2\u1e58\u1e59\3\2\2\2\u1e59\u1e66"+
		"\3\2\2\2\u1e5a\u1e5b\7A\2\2\u1e5b\u1e5c\7=\2\2\u1e5c\u1e66\5\u00e0q\2"+
		"\u1e5d\u1e5e\7A\2\2\u1e5e\u1e5f\7\"\2\2\u1e5f\u1e60\5\u0364\u01b3\2\u1e60"+
		"\u1e61\7#\2\2\u1e61\u1e66\3\2\2\2\u1e62\u1e63\7\u011c\2\2\u1e63\u1e64"+
		"\7k\2\2\u1e64\u1e66\5\u0202\u0102\2\u1e65\u1e3d\3\2\2\2\u1e65\u1e3e\3"+
		"\2\2\2\u1e65\u1e4a\3\2\2\2\u1e65\u1e4f\3\2\2\2\u1e65\u1e52\3\2\2\2\u1e65"+
		"\u1e5a\3\2\2\2\u1e65\u1e5d\3\2\2\2\u1e65\u1e62\3\2\2\2\u1e66\u040d\3\2"+
		"\2\2\u1e67\u1e6a\5\u0410\u0209\2\u1e68\u1e69\7(\2\2\u1e69\u1e6b\5\u0410"+
		"\u0209\2\u1e6a\u1e68\3\2\2\2\u1e6a\u1e6b\3\2\2\2\u1e6b\u040f\3\2\2\2\u1e6c"+
		"\u1e6d\7@\2\2\u1e6d\u1e6e\7\u01a6\2\2\u1e6e\u1e70\5\u01b6\u00dc\2\u1e6f"+
		"\u1e71\5\u0346\u01a4\2\u1e70\u1e6f\3\2\2\2\u1e70\u1e71\3\2\2\2\u1e71\u1e8f"+
		"\3\2\2\2\u1e72\u1e73\7;\2\2\u1e73\u1e74\7\u01a6\2\2\u1e74\u1e75\7g\2\2"+
		"\u1e75\u1e76\7s\2\2\u1e76\u1e78\5\u013a\u009e\2\u1e77\u1e79\5\u0346\u01a4"+
		"\2\u1e78\u1e77\3\2\2\2\u1e78\u1e79\3\2\2\2\u1e79\u1e8f\3\2\2\2\u1e7a\u1e7b"+
		"\7;\2\2\u1e7b\u1e7c\7\u01a6\2\2\u1e7c\u1e7e\5\u013a\u009e\2\u1e7d\u1e7f"+
		"\5\u0346\u01a4\2\u1e7e\u1e7d\3\2\2\2\u1e7e\u1e7f\3\2\2\2\u1e7f\u1e8f\3"+
		"\2\2\2\u1e80\u1e81\7:\2\2\u1e81\u1e82\7\u01a6\2\2\u1e82\u1e84\5\u013a"+
		"\u009e\2\u1e83\u1e85\5\u034a\u01a6\2\u1e84\u1e83\3\2\2\2\u1e84\u1e85\3"+
		"\2\2\2\u1e85\u1e86\3\2\2\2\u1e86\u1e87\7\u00af\2\2\u1e87\u1e89\5\u015a"+
		"\u00ae\2\u1e88\u1e8a\5\u01b8\u00dd\2\u1e89\u1e88\3\2\2\2\u1e89\u1e8a\3"+
		"\2\2\2\u1e8a\u1e8c\3\2\2\2\u1e8b\u1e8d\5\u0346\u01a4\2\u1e8c\u1e8b\3\2"+
		"\2\2\u1e8c\u1e8d\3\2\2\2\u1e8d\u1e8f\3\2\2\2\u1e8e\u1e6c\3\2\2\2\u1e8e"+
		"\u1e72\3\2\2\2\u1e8e\u1e7a\3\2\2\2\u1e8e\u1e80\3\2\2\2\u1e8f\u0411\3\2"+
		"\2\2\u1e90\u1e91\7:\2\2\u1e91\u1e92\7\u00e7\2\2\u1e92\u1e93\7\u01d9\2"+
		"\2\u1e93\u1e94\7j\2\2\u1e94\u1e95\5\u0414\u020b\2\u1e95\u1e96\7\u01fb"+
		"\2\2\u1e96\u1e97\5\u00e0q\2\u1e97\u1e98\5\u0340\u01a1\2\u1e98\u0413\3"+
		"\2\2\2\u1e99\u1e9c\5\u0202\u0102\2\u1e9a\u1e9c\7\u00e7\2\2\u1e9b\u1e99"+
		"\3\2\2\2\u1e9b\u1e9a\3\2\2\2\u1e9c\u0415\3\2\2\2\u1e9d\u1e9e\7:\2\2\u1e9e"+
		"\u1ea1\7O\2\2\u1e9f\u1ea0\7g\2\2\u1ea0\u1ea2\7s\2\2\u1ea1\u1e9f\3\2\2"+
		"\2\u1ea1\u1ea2\3\2\2\2\u1ea2\u1ea3\3\2\2\2\u1ea3\u1ea4\5N(\2\u1ea4\u1ea5"+
		"\5\u0418\u020d\2\u1ea5\u0417\3\2\2\2\u1ea6\u1eb6\5\u0338\u019d\2\u1ea7"+
		"\u1ea8\7\u0121\2\2\u1ea8\u1ea9\7k\2\2\u1ea9\u1eb6\5\u00e0q\2\u1eaa\u1eac"+
		"\7\u0121\2\2\u1eab\u1ead\7C\2\2\u1eac\u1eab\3\2\2\2\u1eac\u1ead\3\2\2"+
		"\2\u1ead\u1eae\3\2\2\2\u1eae\u1eaf\5\u00e0q\2\u1eaf\u1eb0\7k\2\2\u1eb0"+
		"\u1eb1\5\u00e0q\2\u1eb1\u1eb6\3\2\2\2\u1eb2\u1eb3\7A\2\2\u1eb3\u1eb4\7"+
		"=\2\2\u1eb4\u1eb6\5\u00e0q\2\u1eb5\u1ea6\3\2\2\2\u1eb5\u1ea7\3\2\2\2\u1eb5"+
		"\u1eaa\3\2\2\2\u1eb5\u1eb2\3\2\2\2\u1eb6\u0419\3\2\2\2\u1eb7\u1eba\7\u00a6"+
		"\2\2\u1eb8\u1ebb\5\u00f0y\2\u1eb9\u1ebb\7v\2\2\u1eba\u1eb8\3\2\2\2\u1eba"+
		"\u1eb9\3\2\2\2\u1ebb\u041b\3\2\2\2\u1ebc\u1ebe\7\u00eb\2\2\u1ebd\u1ebf"+
		"\7\u021f\2\2\u1ebe\u1ebd\3\2\2\2\u1ebe\u1ebf\3\2\2\2\u1ebf\u1ec8\3\2\2"+
		"\2\u1ec0\u1ec2\5N(\2\u1ec1\u1ec3\5\u041e\u0210\2\u1ec2\u1ec1\3\2\2\2\u1ec2"+
		"\u1ec3\3\2\2\2\u1ec3\u1ec9\3\2\2\2\u1ec4\u1ec5\5\u00e0q\2\u1ec5\u1ec6"+
		"\7f\2\2\u1ec6\u1ec7\5N(\2\u1ec7\u1ec9\3\2\2\2\u1ec8\u1ec0\3\2\2\2\u1ec8"+
		"\u1ec4\3\2\2\2\u1ec8\u1ec9\3\2\2\2\u1ec9\u041d\3\2\2\2\u1eca\u1ecb\7c"+
		"\2\2\u1ecb\u1ecc\5\u00e0q\2\u1ecc\u041f\3\2\2\2\u1ecd\u1ece\7\u01b6\2"+
		"\2\u1ece\u1ecf\7f\2\2\u1ecf\u1ed0\5\u0422\u0212\2\u1ed0\u0421\3\2\2\2"+
		"\u1ed1\u1ed2\5\u042a\u0216\2\u1ed2\u1ed3\5\u01ba\u00de\2\u1ed3\u1ed4\7"+
		"n\2\2\u1ed4\u1ed5\5\u042c\u0217\2\u1ed5\u1f41\3\2\2\2\u1ed6\u1ed7\7C\2"+
		"\2\u1ed7\u1ed8\5\u01ba\u00de\2\u1ed8\u1ed9\7n\2\2\u1ed9\u1eda\5\u042c"+
		"\u0217\2\u1eda\u1f41\3\2\2\2\u1edb\u1edc\5\u0426\u0214\2\u1edc\u1edd\5"+
		"\u00e0q\2\u1edd\u1ede\7n\2\2\u1ede\u1edf\5\u042c\u0217\2\u1edf\u1f41\3"+
		"\2\2\2\u1ee0\u1ee1\7\u00af\2\2\u1ee1\u1ee2\5\u015a\u00ae\2\u1ee2\u1ee3"+
		"\7n\2\2\u1ee3\u1ee4\5\u042c\u0217\2\u1ee4\u1f41\3\2\2\2\u1ee5\u1ee6\7"+
		"\u00f8\2\2\u1ee6\u1ee7\5\u015a\u00ae\2\u1ee7\u1ee8\7n\2\2\u1ee8\u1ee9"+
		"\5\u042c\u0217\2\u1ee9\u1f41\3\2\2\2\u1eea\u1eeb\7\u01a3\2\2\u1eeb\u1eec"+
		"\5\u03ac\u01d7\2\u1eec\u1eed\7n\2\2\u1eed\u1eee\5\u042c\u0217\2\u1eee"+
		"\u1f41\3\2\2\2\u1eef\u1ef0\7L\2\2\u1ef0\u1ef1\5\u03a8\u01d5\2\u1ef1\u1ef2"+
		"\7n\2\2\u1ef2\u1ef3\5\u042c\u0217\2\u1ef3\u1f41\3\2\2\2\u1ef4\u1ef5\7"+
		"\u0182\2\2\u1ef5\u1ef6\5\u036a\u01b6\2\u1ef6\u1ef7\7n\2\2\u1ef7\u1ef8"+
		"\5\u042c\u0217\2\u1ef8\u1f41\3\2\2\2\u1ef9\u1efa\7E\2\2\u1efa\u1efb\5"+
		"\u00e0q\2\u1efb\u1efc\7f\2\2\u1efc\u1efd\5\u01ba\u00de\2\u1efd\u1efe\7"+
		"n\2\2\u1efe\u1eff\5\u042c\u0217\2\u1eff\u1f41\3\2\2\2\u1f00\u1f01\7E\2"+
		"\2\u1f01\u1f02\5\u00e0q\2\u1f02\u1f03\7f\2\2\u1f03\u1f04\7\u00f8\2\2\u1f04"+
		"\u1f05\5\u01ba\u00de\2\u1f05\u1f06\7n\2\2\u1f06\u1f07\5\u042c\u0217\2"+
		"\u1f07\u1f41\3\2\2\2\u1f08\u1f09\5\u0424\u0213\2\u1f09\u1f0a\5\u00e0q"+
		"\2\u1f0a\u1f0b\7f\2\2\u1f0b\u1f0c\5\u01ba\u00de\2\u1f0c\u1f0d\7n\2\2\u1f0d"+
		"\u1f0e\5\u042c\u0217\2\u1f0e\u1f41\3\2\2\2\u1f0f\u1f10\7N\2\2\u1f10\u1f11"+
		"\5\u03a8\u01d5\2\u1f11\u1f12\7n\2\2\u1f12\u1f13\5\u042c\u0217\2\u1f13"+
		"\u1f41\3\2\2\2\u1f14\u1f15\7\u0126\2\2\u1f15\u1f16\5\u03a8\u01d5\2\u1f16"+
		"\u1f17\7n\2\2\u1f17\u1f18\5\u042c\u0217\2\u1f18\u1f41\3\2\2\2\u1f19\u1f1a"+
		"\7\u0210\2\2\u1f1a\u1f1b\7j\2\2\u1f1b\u1f1c\5\u015a\u00ae\2\u1f1c\u1f1d"+
		"\7\u010d\2\2\u1f1d\u1f1e\5\u00e0q\2\u1f1e\u1f1f\7n\2\2\u1f1f\u1f20\5\u042c"+
		"\u0217\2\u1f20\u1f41\3\2\2\2\u1f21\u1f22\7\u0182\2\2\u1f22\u1f23\7\u01b4"+
		"\2\2\u1f23\u1f24\5\u01ba\u00de\2\u1f24\u1f25\7c\2\2\u1f25\u1f26\5\u00e0"+
		"q\2\u1f26\u1f27\7n\2\2\u1f27\u1f28\5\u042c\u0217\2\u1f28\u1f41\3\2\2\2"+
		"\u1f29\u1f2a\7\u0182\2\2\u1f2a\u1f2b\7\u01cd\2\2\u1f2b\u1f2c\5\u01ba\u00de"+
		"\2\u1f2c\u1f2d\7c\2\2\u1f2d\u1f2e\5\u00e0q\2\u1f2e\u1f2f\7n\2\2\u1f2f"+
		"\u1f30\5\u042c\u0217\2\u1f30\u1f41\3\2\2\2\u1f31\u1f32\7\u010e\2\2\u1f32"+
		"\u1f33\7\u0117\2\2\u1f33\u1f34\5\u020c\u0107\2\u1f34\u1f35\7n\2\2\u1f35"+
		"\u1f36\5\u042c\u0217\2\u1f36\u1f41\3\2\2\2\u1f37\u1f38\7W\2\2\u1f38\u1f39"+
		"\7\"\2\2\u1f39\u1f3a\5\u015a\u00ae\2\u1f3a\u1f3b\7e\2\2\u1f3b\u1f3c\5"+
		"\u015a\u00ae\2\u1f3c\u1f3d\7#\2\2\u1f3d\u1f3e\7n\2\2\u1f3e\u1f3f\5\u042c"+
		"\u0217\2\u1f3f\u1f41\3\2\2\2\u1f40\u1ed1\3\2\2\2\u1f40\u1ed6\3\2\2\2\u1f40"+
		"\u1edb\3\2\2\2\u1f40\u1ee0\3\2\2\2\u1f40\u1ee5\3\2\2\2\u1f40\u1eea\3\2"+
		"\2\2\u1f40\u1eef\3\2\2\2\u1f40\u1ef4\3\2\2\2\u1f40\u1ef9\3\2\2\2\u1f40"+
		"\u1f00\3\2\2\2\u1f40\u1f08\3\2\2\2\u1f40\u1f0f\3\2\2\2\u1f40\u1f14\3\2"+
		"\2\2\u1f40\u1f19\3\2\2\2\u1f40\u1f21\3\2\2\2\u1f40\u1f29\3\2\2\2\u1f40"+
		"\u1f31\3\2\2\2\u1f40\u1f37\3\2\2\2\u1f41\u0423\3\2\2\2\u1f42\u1f43\t\62"+
		"\2\2\u1f43\u0425\3\2\2\2\u1f44\u1f4a\5\u0428\u0215\2\u1f45\u1f4a\7\u00f3"+
		"\2\2\u1f46\u1f4a\7\u00e3\2\2\u1f47\u1f4a\7\u01fc\2\2\u1f48\u1f4a\7\u0130"+
		"\2\2\u1f49\u1f44\3\2\2\2\u1f49\u1f45\3\2\2\2\u1f49\u1f46\3\2\2\2\u1f49"+
		"\u1f47\3\2\2\2\u1f49\u1f48\3\2\2\2\u1f4a\u0427\3\2\2\2\u1f4b\u1f4c\7\u01a1"+
		"\2\2\u1f4c\u1f5b\7\u01db\2\2\u1f4d\u1f4e\7\u01c9\2\2\u1f4e\u1f5b\7M\2"+
		"\2\u1f4f\u1f5b\7\u00fc\2\2\u1f50\u1f51\7H\2\2\u1f51\u1f52\7\u00f2\2\2"+
		"\u1f52\u1f5b\7\u021b\2\2\u1f53\u1f55\7\u01e0\2\2\u1f54\u1f53\3\2\2\2\u1f54"+
		"\u1f55\3\2\2\2\u1f55\u1f56\3\2\2\2\u1f56\u1f5b\7\u010d\2\2\u1f57\u1f5b"+
		"\7\u01e4\2\2\u1f58\u1f5b\7=\2\2\u1f59\u1f5b\7\u01fb\2\2\u1f5a\u1f4b\3"+
		"\2\2\2\u1f5a\u1f4d\3\2\2\2\u1f5a\u1f4f\3\2\2\2\u1f5a\u1f50\3\2\2\2\u1f5a"+
		"\u1f54\3\2\2\2\u1f5a\u1f57\3\2\2\2\u1f5a\u1f58\3\2\2\2\u1f5a\u1f59\3\2"+
		"\2\2\u1f5b\u0429\3\2\2\2\u1f5c\u1f74\7B\2\2\u1f5d\u1f74\7\u0129\2\2\u1f5e"+
		"\u1f74\7O\2\2\u1f5f\u1f60\7\u0181\2\2\u1f60\u1f74\7O\2\2\u1f61\u1f74\7"+
		"D\2\2\u1f62\u1f63\7H\2\2\u1f63\u1f74\7B\2\2\u1f64\u1f74\7\u00aa\2\2\u1f65"+
		"\u1f74\7\u01ac\2\2\u1f66\u1f74\7\u012e\2\2\u1f67\u1f68\7\u00b3\2\2\u1f68"+
		"\u1f69\7\u01fd\2\2\u1f69\u1f74\7\u01e1\2\2\u1f6a\u1f6b\7\u00b3\2\2\u1f6b"+
		"\u1f6c\7\u01fd\2\2\u1f6c\u1f74\7\u01b8\2\2\u1f6d\u1f6e\7\u00b3\2\2\u1f6e"+
		"\u1f6f\7\u01fd\2\2\u1f6f\u1f74\7\u020c\2\2\u1f70\u1f71\7\u00b3\2\2\u1f71"+
		"\u1f72\7\u01fd\2\2\u1f72\u1f74\7\u01b5\2\2\u1f73\u1f5c\3\2\2\2\u1f73\u1f5d"+
		"\3\2\2\2\u1f73\u1f5e\3\2\2\2\u1f73\u1f5f\3\2\2\2\u1f73\u1f61\3\2\2\2\u1f73"+
		"\u1f62\3\2\2\2\u1f73\u1f64\3\2\2\2\u1f73\u1f65\3\2\2\2\u1f73\u1f66\3\2"+
		"\2\2\u1f73\u1f67\3\2\2\2\u1f73\u1f6a\3\2\2\2\u1f73\u1f6d\3\2\2\2\u1f73"+
		"\u1f70\3\2\2\2\u1f74\u042b\3\2\2\2\u1f75\u1f76\t/\2\2\u1f76\u042d\3\2"+
		"\2\2\u1f77\u1f78\79\2\2\u1f78\u1f79\7\u01a1\2\2\u1f79\u1f7a\7\u01db\2"+
		"\2\u1f7a\u1f7b\5\u00e0q\2\u1f7b\u1f7c\7\u00af\2\2\u1f7c\u1f7d\t\63\2\2"+
		"\u1f7d\u1f7e\7\u01d4\2\2\u1f7e\u1f7f\5\u03ba\u01de\2\u1f7f\u042f\3\2\2"+
		"\2\u1f80\u1f83\79\2\2\u1f81\u1f82\7m\2\2\u1f82\u1f84\7\u01ee\2\2\u1f83"+
		"\u1f81\3\2\2\2\u1f83\u1f84\3\2\2\2\u1f84\u1f85\3\2\2\2\u1f85\u1f86\7\u01a3"+
		"\2\2\u1f86\u1f8b\5\u0136\u009c\2\u1f87\u1f88\5\u0370\u01b9\2\u1f88\u1f89"+
		"\5\u022c\u0117\2\u1f89\u1f8c\3\2\2\2\u1f8a\u1f8c\5\u0432\u021a\2\u1f8b"+
		"\u1f87\3\2\2\2\u1f8b\u1f8a\3\2\2\2\u1f8c\u0431\3\2\2\2\u1f8d\u1f8e\7\""+
		"\2\2\u1f8e\u1f8f\5\u0434\u021b\2\u1f8f\u1f90\7#\2\2\u1f90\u0433\3\2\2"+
		"\2\u1f91\u1f96\5\u0436\u021c\2\u1f92\u1f93\7(\2\2\u1f93\u1f95\5\u0436"+
		"\u021c\2\u1f94\u1f92\3\2\2\2\u1f95\u1f98\3\2\2\2\u1f96\u1f94\3\2\2\2\u1f96"+
		"\u1f97\3\2\2\2\u1f97\u0435\3\2\2\2\u1f98\u1f96\3\2\2\2\u1f99\u1f9a\5\u00ce"+
		"h\2\u1f9a\u1f9b\7\32\2\2\u1f9b\u1f9c\5\u01e8\u00f5\2\u1f9c\u0437\3\2\2"+
		"\2\u1f9d\u1f9e\79\2\2\u1f9e\u1f9f\7W\2\2\u1f9f\u1fa0\7\"\2\2\u1fa0\u1fa1"+
		"\5\u015a\u00ae\2\u1fa1\u1fa2\7e\2\2\u1fa2\u1fa3\5\u015a\u00ae\2\u1fa3"+
		"\u1fb4\7#\2\2\u1fa4\u1fa5\7R\2\2\u1fa5\u1fa6\7L\2\2\u1fa6\u1fa8\5\u03a8"+
		"\u01d5\2\u1fa7\u1fa9\5\u043a\u021e\2\u1fa8\u1fa7\3\2\2\2\u1fa8\u1fa9\3"+
		"\2\2\2\u1fa9\u1fb5\3\2\2\2\u1faa\u1fab\7\u0139\2\2\u1fab\u1fad\7L\2\2"+
		"\u1fac\u1fae\5\u043a\u021e\2\u1fad\u1fac\3\2\2\2\u1fad\u1fae\3\2\2\2\u1fae"+
		"\u1fb5\3\2\2\2\u1faf\u1fb0\7R\2\2\u1fb0\u1fb2\7\u0222\2\2\u1fb1\u1fb3"+
		"\5\u043a\u021e\2\u1fb2\u1fb1\3\2\2\2\u1fb2\u1fb3\3\2\2\2\u1fb3\u1fb5\3"+
		"\2\2\2\u1fb4\u1fa4\3\2\2\2\u1fb4\u1faa\3\2\2\2\u1fb4\u1faf\3\2\2\2\u1fb5"+
		"\u0439\3\2\2\2\u1fb6\u1fb7\7e\2\2\u1fb7\u1fbb\7\u01c5\2\2\u1fb8\u1fb9"+
		"\7e\2\2\u1fb9\u1fbb\7\u01aa\2\2\u1fba\u1fb6\3\2\2\2\u1fba\u1fb8\3\2\2"+
		"\2\u1fbb\u043b\3\2\2\2\u1fbc\u1fbd\79\2\2\u1fbd\u1fc1\7\u00aa\2\2\u1fbe"+
		"\u1fbf\7g\2\2\u1fbf\u1fc0\7o\2\2\u1fc0\u1fc2\7s\2\2\u1fc1\u1fbe\3\2\2"+
		"\2\u1fc1\u1fc2\3\2\2\2\u1fc2\u1fca\3\2\2\2\u1fc3\u1fc4\5\u01ba\u00de\2"+
		"\u1fc4\u1fc5\5\u022c\u0117\2\u1fc5\u1fcb\3\2\2\2\u1fc6\u1fc7\5\u01ba\u00de"+
		"\2\u1fc7\u1fc8\7Z\2\2\u1fc8\u1fc9\5\u01ba\u00de\2\u1fc9\u1fcb\3\2\2\2"+
		"\u1fca\u1fc3\3\2\2\2\u1fca\u1fc6\3\2\2\2\u1fcb\u043d\3\2\2\2\u1fcc\u1fce"+
		"\79\2\2\u1fcd\u1fcf\7\u0099\2\2\u1fce\u1fcd\3\2\2\2\u1fce\u1fcf\3\2\2"+
		"\2\u1fcf\u1fd0\3\2\2\2\u1fd0\u1fd1\7\u01ac\2\2\u1fd1\u1fd2\5\u01ba\u00de"+
		"\2\u1fd2\u1fd3\7j\2\2\u1fd3\u1fd4\7\u0224\2\2\u1fd4\u1fd5\7k\2\2\u1fd5"+
		"\u1fd6\7\u0224\2\2\u1fd6\u1fd7\7Z\2\2\u1fd7\u1fd8\5\u01ba\u00de\2\u1fd8"+
		"\u043f\3\2\2\2\u1fd9\u1fda\79\2\2\u1fda\u1fdb\7\u00f8\2\2\u1fdb\u1fdd"+
		"\5\u01ba\u00de\2\u1fdc\u1fde\7e\2\2\u1fdd\u1fdc\3\2\2\2\u1fdd\u1fde\3"+
		"\2\2\2\u1fde\u1fdf\3\2\2\2\u1fdf\u1fe0\5\u015a\u00ae\2\u1fe0\u1fe1\5\u0212"+
		"\u010a\2\u1fe1\u0441\3\2\2\2\u1fe2\u1fe3\79\2\2\u1fe3\u1fe4\7\u01c9\2"+
		"\2\u1fe4\u1fe5\7M\2\2\u1fe5\u1fe6\5\u00e0q\2\u1fe6\u1fe7\7f\2\2\u1fe7"+
		"\u1fea\5\u0232\u011a\2\u1fe8\u1fe9\7V\2\2\u1fe9\u1feb\5\u0444\u0223\2"+
		"\u1fea\u1fe8\3\2\2\2\u1fea\u1feb\3\2\2\2\u1feb\u1fec\3\2\2\2\u1fec\u1fed"+
		"\7\u00fa\2\2\u1fed\u1fee\t\64\2\2\u1fee\u1fef\5\u0136\u009c\2\u1fef\u1ff0"+
		"\7\"\2\2\u1ff0\u1ff1\7#\2\2\u1ff1\u0443\3\2\2\2\u1ff2\u1ff7\5\u0446\u0224"+
		"\2\u1ff3\u1ff4\7l\2\2\u1ff4\u1ff6\5\u0446\u0224\2\u1ff5\u1ff3\3\2\2\2"+
		"\u1ff6\u1ff9\3\2\2\2\u1ff7\u1ff5\3\2\2\2\u1ff7\u1ff8\3\2\2\2\u1ff8\u0445"+
		"\3\2\2\2\u1ff9\u1ff7\3\2\2\2\u1ffa\u1ffb\5\u013a\u009e\2\u1ffb\u1ffc\7"+
		"u\2\2\u1ffc\u1ffd\7\"\2\2\u1ffd\u1ffe\5\u0448\u0225\2\u1ffe\u1fff\7#\2"+
		"\2\u1fff\u0447\3\2\2\2\u2000\u2005\7\u0224\2\2\u2001\u2002\7(\2\2\u2002"+
		"\u2004\7\u0224\2\2\u2003\u2001\3\2\2\2\u2004\u2007\3\2\2\2\u2005\u2003"+
		"\3\2\2\2\u2005\u2006\3\2\2\2\u2006\u0449\3\2\2\2\u2007\u2005\3\2\2\2\u2008"+
		"\u2009\79\2\2\u2009\u200d\7\u00fc\2\2\u200a\u200b\7g\2\2\u200b\u200c\7"+
		"o\2\2\u200c\u200e\7s\2\2\u200d\u200a\3\2\2\2\u200d\u200e\3\2\2\2\u200e"+
		"\u200f\3\2\2\2\u200f\u2011\5\u00e0q\2\u2010\u2012\7R\2\2\u2011\u2010\3"+
		"\2\2\2\u2011\u2012\3\2\2\2\u2012\u2013\3\2\2\2\u2013\u2014\5\u044c\u0227"+
		"\2\u2014\u044b\3\2\2\2\u2015\u2017\5\u044e\u0228\2\u2016\u2015\3\2\2\2"+
		"\u2017\u201a\3\2\2\2\u2018\u2016\3\2\2\2\u2018\u2019\3\2\2\2\u2019\u044d"+
		"\3\2\2\2\u201a\u2018\3\2\2\2\u201b\u201c\7=\2\2\u201c\u2023\5\u00e0q\2"+
		"\u201d\u201e\7\u017c\2\2\u201e\u2023\5\u0252\u012a\2\u201f\u2020\7Z\2"+
		"\2\u2020\u2023\5\u0252\u012a\2\u2021\u2023\7\u00d9\2\2\u2022\u201b\3\2"+
		"\2\2\u2022\u201d\3\2\2\2\u2022\u201f\3\2\2\2\u2022\u2021\3\2\2\2\u2023"+
		"\u044f\3\2\2\2\u2024\u2025\79\2\2\u2025\u2026\7H\2\2\u2026\u2027\7\u00f2"+
		"\2\2\u2027\u2028\7\u021b\2\2\u2028\u202a\5\u00e0q\2\u2029\u202b\5\u03b6"+
		"\u01dc\2\u202a\u2029\3\2\2\2\u202a\u202b\3\2\2\2\u202b\u202d\3\2\2\2\u202c"+
		"\u202e\5\u023e\u0120\2\u202d\u202c\3\2\2\2\u202d\u202e\3\2\2\2\u202e\u0451"+
		"\3\2\2\2\u202f\u2030\79\2\2\u2030\u2031\7H\2\2\u2031\u2032\7B\2\2\u2032"+
		"\u2033\5\u0454\u022b\2\u2033\u0453\3\2\2\2\u2034\u2035\7g\2\2\u2035\u2036"+
		"\7o\2\2\u2036\u2038\7s\2\2\u2037\u2034\3\2\2\2\u2037\u2038\3\2\2\2\u2038"+
		"\u2039\3\2\2\2\u2039\u203a\5N(\2\u203a\u203c\7\"\2\2\u203b\u203d\5\u0456"+
		"\u022c\2\u203c\u203b\3\2\2\2\u203c\u203d\3\2\2\2\u203d\u203e\3\2\2\2\u203e"+
		"\u2044\7#\2\2\u203f\u2040\7\u010a\2\2\u2040\u2041\7\"\2\2\u2041\u2042"+
		"\5L\'\2\u2042\u2043\7#\2\2\u2043\u2045\3\2\2\2\u2044\u203f\3\2\2\2\u2044"+
		"\u2045\3\2\2\2\u2045\u2046\3\2\2\2\u2046\u2047\7\u01fb\2\2\u2047\u2049"+
		"\5\u00e0q\2\u2048\u204a\5\u023e\u0120\2\u2049\u2048\3\2\2\2\u2049\u204a"+
		"\3\2\2\2\u204a\u2061\3\2\2\2\u204b\u204c\7g\2\2\u204c\u204d\7o\2\2\u204d"+
		"\u204f\7s\2\2\u204e\u204b\3\2\2\2\u204e\u204f\3\2\2\2\u204f\u2050\3\2"+
		"\2\2\u2050\u2051\5N(\2\u2051\u2052\7\u00d5\2\2\u2052\u2053\7\u013b\2\2"+
		"\u2053\u2058\5N(\2\u2054\u2055\7\"\2\2\u2055\u2056\5\u0282\u0142\2\u2056"+
		"\u2057\7#\2\2\u2057\u2059\3\2\2\2\u2058\u2054\3\2\2\2\u2058\u2059\3\2"+
		"\2\2\u2059\u205a\3\2\2\2\u205a\u205b\5\u027c\u013f\2\u205b\u205c\7\u01fb"+
		"\2\2\u205c\u205e\5\u00e0q\2\u205d\u205f\5\u023e\u0120\2\u205e\u205d\3"+
		"\2\2\2\u205e\u205f\3\2\2\2\u205f\u2061\3\2\2\2\u2060\u2037\3\2\2\2\u2060"+
		"\u204e\3\2\2\2\u2061\u0455\3\2\2\2\u2062\u2067\5\u0458\u022d\2\u2063\u2064"+
		"\7(\2\2\u2064\u2066\5\u0458\u022d\2\u2065\u2063\3\2\2\2\u2066\u2069\3"+
		"\2\2\2\u2067\u2065\3\2\2\2\u2067\u2068\3\2\2\2\u2068\u0457\3\2\2\2\u2069"+
		"\u2067\3\2\2\2\u206a\u206e\5\u0210\u0109\2\u206b\u206e\5\u045a\u022e\2"+
		"\u206c\u206e\5\u02d6\u016c\2\u206d\u206a\3\2\2\2\u206d\u206b\3\2\2\2\u206d"+
		"\u206c\3\2\2\2\u206e\u0459\3\2\2\2\u206f\u2070\7x\2\2\u2070\u2071\5N("+
		"\2\u2071\u2072\5\u045c\u022f\2\u2072\u045b\3\2\2\2\u2073\u2079\b\u022f"+
		"\1\2\u2074\u2075\f\4\2\2\u2075\u2076\t\"\2\2\u2076\u2078\5\u045e\u0230"+
		"\2\u2077\u2074\3\2\2\2\u2078\u207b\3\2\2\2\u2079\u2077\3\2\2\2\u2079\u207a"+
		"\3\2\2\2\u207a\u045d\3\2\2\2\u207b\u2079\3\2\2\2\u207c\u207d\t\65\2\2"+
		"\u207d\u045f\3\2\2\2\u207e\u2081\79\2\2\u207f\u2080\7m\2\2\u2080\u2082"+
		"\7\u01ee\2\2\u2081\u207f\3\2\2\2\u2081\u2082\3\2\2\2\u2082\u2083\3\2\2"+
		"\2\u2083\u2084\7L\2\2\u2084\u2085\5\u0136\u009c\2\u2085\u2092\5\u0470"+
		"\u0239\2\u2086\u2087\7\u0205\2\2\u2087\u2088\5\u046e\u0238\2\u2088\u2089"+
		"\5\u0466\u0234\2\u2089\u2093\3\2\2\2\u208a\u208b\7\u0205\2\2\u208b\u208c"+
		"\7B\2\2\u208c\u208d\7\"\2\2\u208d\u208e\5\u0462\u0232\2\u208e\u208f\7"+
		"#\2\2\u208f\u2090\5\u0466\u0234\2\u2090\u2093\3\2\2\2\u2091\u2093\5\u0466"+
		"\u0234\2\u2092\u2086\3\2\2\2\u2092\u208a\3\2\2\2\u2092\u2091\3\2\2\2\u2093"+
		"\u0461\3\2\2\2\u2094\u2099\5\u0464\u0233\2\u2095\u2096\7(\2\2\u2096\u2098"+
		"\5\u0464\u0233\2\u2097\u2095\3\2\2\2\u2098\u209b\3\2\2\2\u2099\u2097\3"+
		"\2\2\2\u2099\u209a\3\2\2\2\u209a\u0463\3\2\2\2\u209b\u2099\3\2\2\2\u209c"+
		"\u209d\5\u012e\u0098\2\u209d\u209e\5\u01ea\u00f6\2\u209e\u0465\3\2\2\2"+
		"\u209f\u20a1\5\u0468\u0235\2\u20a0\u209f\3\2\2\2\u20a1\u20a2\3\2\2\2\u20a2"+
		"\u20a0\3\2\2\2\u20a2\u20a3\3\2\2\2\u20a3\u0467\3\2\2\2\u20a4\u20a5\7e"+
		"\2\2\u20a5\u20ad\5\u046c\u0237\2\u20a6\u20a7\7\u010d\2\2\u20a7\u20ad\5"+
		"\u0252\u012a\2\u20a8\u20a9\7\u0210\2\2\u20a9\u20ad\5\u046a\u0236\2\u20aa"+
		"\u20ad\7\u00c8\2\2\u20ab\u20ad\5\u026e\u0138\2\u20ac\u20a4\3\2\2\2\u20ac"+
		"\u20a6\3\2\2\2\u20ac\u20a8\3\2\2\2\u20ac\u20aa\3\2\2\2\u20ac\u20ab\3\2"+
		"\2\2\u20ad\u0469\3\2\2\2\u20ae\u20af\7j\2\2\u20af\u20b0\7\u00af\2\2\u20b0"+
		"\u20b1\5\u015a\u00ae\2\u20b1\u20b2\7(\2\2\u20b2\u20b3\7j\2\2\u20b3\u20b4"+
		"\7\u00af\2\2\u20b4\u20b5\5\u015a\u00ae\2\u20b5\u046b\3\2\2\2\u20b6\u20be"+
		"\5\u00ceh\2\u20b7\u20bb\7\u0224\2\2\u20b8\u20b9\7(\2\2\u20b9\u20bc\5\u00ce"+
		"h\2\u20ba\u20bc\7\u0224\2\2\u20bb\u20b8\3\2\2\2\u20bb\u20ba\3\2\2\2\u20bb"+
		"\u20bc\3\2\2\2\u20bc\u20be\3\2\2\2\u20bd\u20b6\3\2\2\2\u20bd\u20b7\3\2"+
		"\2\2\u20be\u046d\3\2\2\2\u20bf\u20c0\5\u01ea\u00f6\2\u20c0\u046f\3\2\2"+
		"\2\u20c1\u20c3\7\"\2\2\u20c2\u20c4\5\u0472\u023a\2\u20c3\u20c2\3\2\2\2"+
		"\u20c3\u20c4\3\2\2\2\u20c4\u20c5\3\2\2\2\u20c5\u20c6\7#\2\2\u20c6\u0471"+
		"\3\2\2\2\u20c7\u20cc\5\u0474\u023b\2\u20c8\u20c9\7(\2\2\u20c9\u20cb\5"+
		"\u0474\u023b\2\u20ca\u20c8\3\2\2\2\u20cb\u20ce\3\2\2\2\u20cc\u20ca\3\2"+
		"\2\2\u20cc\u20cd\3\2\2\2\u20cd\u0473\3\2\2\2\u20ce\u20cc\3\2\2\2\u20cf"+
		"\u20d9\5\u024c\u0127\2\u20d0\u20d1\5\u024c\u0127\2\u20d1\u20d2\7\u0099"+
		"\2\2\u20d2\u20d3\5\u00f2z\2\u20d3\u20d9\3\2\2\2\u20d4\u20d5\5\u024c\u0127"+
		"\2\u20d5\u20d6\7\32\2\2\u20d6\u20d7\5\u00f2z\2\u20d7\u20d9\3\2\2\2\u20d8"+
		"\u20cf\3\2\2\2\u20d8\u20d0\3\2\2\2\u20d8\u20d4\3\2\2\2\u20d9\u0475\3\2"+
		"\2\2\u20da\u20dd\79\2\2\u20db\u20dc\7m\2\2\u20dc\u20de\7\u01ee\2\2\u20dd"+
		"\u20db\3\2\2\2\u20dd\u20de\3\2\2\2\u20de\u20e0\3\2\2\2\u20df\u20e1\7\u0212"+
		"\2\2\u20e0\u20df\3\2\2\2\u20e0\u20e1\3\2\2\2\u20e1\u20e3\3\2\2\2\u20e2"+
		"\u20e4\7\u01e0\2\2\u20e3\u20e2\3\2\2\2\u20e3\u20e4\3\2\2\2\u20e4\u20e5"+
		"\3\2\2\2\u20e5\u20e6\7\u010d\2\2\u20e6\u20f4\5\u00e0q\2\u20e7\u20e8\7"+
		"\u01d4\2\2\u20e8\u20eb\5\u03ba\u01de\2\u20e9\u20ea\7\u01c0\2\2\u20ea\u20ec"+
		"\5\u03ba\u01de\2\u20eb\u20e9\3\2\2\2\u20eb\u20ec\3\2\2\2\u20ec\u20ee\3"+
		"\2\2\2\u20ed\u20ef\5\u047a\u023e\2\u20ee\u20ed\3\2\2\2\u20ee\u20ef\3\2"+
		"\2\2\u20ef\u20f5\3\2\2\2\u20f0\u20f1\7\"\2\2\u20f1\u20f2\5\u0478\u023d"+
		"\2\u20f2\u20f3\7#\2\2\u20f3\u20f5\3\2\2\2\u20f4\u20e7\3\2\2\2\u20f4\u20f0"+
		"\3\2\2\2\u20f4\u20f5\3\2\2\2\u20f5\u0477\3\2\2\2\u20f6\u20f7\7Z\2\2\u20f7"+
		"\u20f8\7\u00a3\2\2\u20f8\u20f9\7R\2\2\u20f9\u20fa\7L\2\2\u20fa\u20fb\5"+
		"\u03a8\u01d5\2\u20fb\u20fc\7(\2\2\u20fc\u20fd\t\5\2\2\u20fd\u20fe\7\u00a3"+
		"\2\2\u20fe\u20ff\7R\2\2\u20ff\u2100\7L\2\2\u2100\u2101\5\u03a8\u01d5\2"+
		"\u2101\u2108\3\2\2\2\u2102\u2103\t\5\2\2\u2103\u2104\7\u00a3\2\2\u2104"+
		"\u2105\7R\2\2\u2105\u2106\7L\2\2\u2106\u2108\5\u03a8\u01d5\2\u2107\u20f6"+
		"\3\2\2\2\u2107\u2102\3\2\2\2\u2108\u0479\3\2\2\2\u2109\u210a\7\u0213\2"+
		"\2\u210a\u210e\5\u03ba\u01de\2\u210b\u210c\7\u00de\2\2\u210c\u210e\7\u0213"+
		"\2\2\u210d\u2109\3\2\2\2\u210d\u210b\3\2\2\2\u210e\u047b\3\2\2\2\u210f"+
		"\u2110\79\2\2\u2110\u2111\7\u0200\2\2\u2111\u2112\5\u00e0q\2\u2112\u2113"+
		"\7f\2\2\u2113\u2116\5N(\2\u2114\u2115\7e\2\2\u2115\u2117\5\u00ceh\2\u2116"+
		"\u2114\3\2\2\2\u2116\u2117\3\2\2\2\u2117\u211a\3\2\2\2\u2118\u2119\7j"+
		"\2\2\u2119\u211b\5\u0272\u013a\2\u211a\u2118\3\2\2\2\u211a\u211b\3\2\2"+
		"\2\u211b\u211e\3\2\2\2\u211c\u211d\7k\2\2\u211d\u211f\5\u0256\u012c\2"+
		"\u211e\u211c\3\2\2\2\u211e\u211f\3\2\2\2\u211f\u2125\3\2\2\2\u2120\u2121"+
		"\7c\2\2\u2121\u2122\7\"\2\2\u2122\u2123\5\u00f2z\2\u2123\u2124\7#\2\2"+
		"\u2124\u2126\3\2\2\2\u2125\u2120\3\2\2\2\u2125\u2126\3\2\2\2\u2126\u212d"+
		"\3\2\2\2\u2127\u2128\7R\2\2\u2128\u2129\7\u00da\2\2\u2129\u212a\7\"\2"+
		"\2\u212a\u212b\5\u00f2z\2\u212b\u212c\7#\2\2\u212c\u212e\3\2\2\2\u212d"+
		"\u2127\3\2\2\2\u212d\u212e\3\2\2\2\u212e\u047d\3\2\2\2\u212f\u2132\79"+
		"\2\2\u2130\u2131\7m\2\2\u2131\u2133\7\u01ee\2\2\u2132\u2130\3\2\2\2\u2132"+
		"\u2133\3\2\2\2\u2133\u2134\3\2\2\2\u2134\u2135\7N\2\2\u2135\u2136\5\u0136"+
		"\u009c\2\u2136\u2137\5\u0470\u0239\2\u2137\u2138\5\u0466\u0234\2\u2138"+
		"\u047f\3\2\2\2\u2139\u213a\79\2\2\u213a\u213b\7\u01e4\2\2\u213b\u213d"+
		"\5\u00e0q\2\u213c\u213e\5\u0482\u0242\2\u213d\u213c\3\2\2\2\u213d\u213e"+
		"\3\2\2\2\u213e\u2141\3\2\2\2\u213f\u2140\7R\2\2\u2140\u2142\5\u022c\u0117"+
		"\2\u2141\u213f\3\2\2\2\u2141\u2142\3\2\2\2\u2142\u0481\3\2\2\2\u2143\u2144"+
		"\7j\2\2\u2144\u2145\7B\2\2\u2145\u214a\5\u026c\u0137\2\u2146\u2147\7j"+
		"\2\2\u2147\u2148\7v\2\2\u2148\u214a\7\u0209\2\2\u2149\u2143\3\2\2\2\u2149"+
		"\u2146\3\2\2\2\u214a\u0483\3\2\2\2\u214b\u214e\79\2\2\u214c\u214d\7m\2"+
		"\2\u214d\u214f\7\u01ee\2\2\u214e\u214c\3\2\2\2\u214e\u214f\3\2\2\2\u214f"+
		"\u2150\3\2\2\2\u2150\u2151\7\u0127\2\2\u2151\u2152\5\u00e0q\2\u2152\u2153"+
		"\7e\2\2\u2153\u2154\7f\2\2\u2154\u2155\5\u0274\u013b\2\u2155\u2156\7k"+
		"\2\2\u2156\u2159\5N(\2\u2157\u2158\7d\2\2\u2158\u215a\5\u00f2z\2\u2159"+
		"\u2157\3\2\2\2\u2159\u215a\3\2\2\2\u215a\u215b\3\2\2\2\u215b\u215d\7\u00a0"+
		"\2\2\u215c\u215e\t\66\2\2\u215d\u215c\3\2\2\2\u215d\u215e\3\2\2\2\u215e"+
		"\u215f\3\2\2\2\u215f\u2160\5\u0486\u0244\2\u2160\u0485\3\2\2\2\u2161\u2168"+
		"\7\u0115\2\2\u2162\u2168\5\u0488\u0245\2\u2163\u2164\7\"\2\2\u2164\u2165"+
		"\5\u048a\u0246\2\u2165\u2166\7#\2\2\u2166\u2168\3\2\2\2\u2167\u2161\3"+
		"\2\2\2\u2167\u2162\3\2\2\2\u2167\u2163\3\2\2\2\u2168\u0487\3\2\2\2\u2169"+
		"\u216f\5&\24\2\u216a\u216f\5\4\3\2\u216b\u216f\5\24\13\2\u216c\u216f\5"+
		" \21\2\u216d\u216f\5\u048c\u0247\2\u216e\u2169\3\2\2\2\u216e\u216a\3\2"+
		"\2\2\u216e\u216b\3\2\2\2\u216e\u216c\3\2\2\2\u216e\u216d\3\2\2\2\u216f"+
		"\u0489\3\2\2\2\u2170\u2172\5\u0488\u0245\2\u2171\u2170\3\2\2\2\u2171\u2172"+
		"\3\2\2\2\u2172\u2179\3\2\2\2\u2173\u2175\7.\2\2\u2174\u2176\5\u0488\u0245"+
		"\2\u2175\u2174\3\2\2\2\u2175\u2176\3\2\2\2\u2176\u2178\3\2\2\2\u2177\u2173"+
		"\3\2\2\2\u2178\u217b\3\2\2\2\u2179\u2177\3\2\2\2\u2179\u217a\3\2\2\2\u217a"+
		"\u048b\3\2\2\2\u217b\u2179\3\2\2\2\u217c\u217d\7\u0201\2\2\u217d\u2180"+
		"\5\u013a\u009e\2\u217e\u217f\7(\2\2\u217f\u2181\7\u0224\2\2\u2180\u217e"+
		"\3\2\2\2\u2180\u2181\3\2\2\2\u2181\u048d\3\2\2\2\u2182\u2183\79\2\2\u2183"+
		"\u2184\7M\2\2\u2184\u2185\5\u00e0q\2\u2185\u2186\5\u0494\u024b\2\u2186"+
		"\u2187\5\u0490\u0249\2\u2187\u2188\7f\2\2\u2188\u218a\5N(\2\u2189\u218b"+
		"\5\u049e\u0250\2\u218a\u2189\3\2\2\2\u218a\u218b\3\2\2\2\u218b\u218d\3"+
		"\2\2\2\u218c\u218e\5\u049c\u024f\2\u218d\u218c\3\2\2\2\u218d\u218e\3\2"+
		"\2\2\u218e\u2190\3\2\2\2\u218f\u2191\5\u049a\u024e\2\u2190\u218f\3\2\2"+
		"\2\u2190\u2191\3\2\2\2\u2191\u2192\3\2\2\2\u2192\u2193\7\u00fa\2\2\u2193"+
		"\u2194\t\64\2\2\u2194\u2195\5\u0136\u009c\2\u2195\u2197\7\"\2\2\u2196"+
		"\u2198\5\u0496\u024c\2\u2197\u2196\3\2\2\2\u2197\u2198\3\2\2\2\u2198\u2199"+
		"\3\2\2\2\u2199\u219a\7#\2\2\u219a\u21af\3\2\2\2\u219b\u219c\79\2\2\u219c"+
		"\u219d\7E\2\2\u219d\u21a0\7M\2\2\u219e\u219f\7Z\2\2\u219f\u21a1\5N(\2"+
		"\u21a0\u219e\3\2\2\2\u21a0\u21a1\3\2\2\2\u21a1\u21a2\3\2\2\2\u21a2\u21a3"+
		"\5\u033c\u019f\2\u21a3\u21a4\7j\2\2\u21a4\u21a5\7\u01c8\2\2\u21a5\u21a6"+
		"\7\u00d6\2\2\u21a6\u21a7\5\u049a\u024e\2\u21a7\u21a8\7\u00fa\2\2\u21a8"+
		"\u21a9\t\64\2\2\u21a9\u21aa\5\u0136\u009c\2\u21aa\u21ab\7\"\2\2\u21ab"+
		"\u21ac\5\u0496\u024c\2\u21ac\u21ad\7#\2\2\u21ad\u21af\3\2\2\2\u21ae\u2182"+
		"\3\2\2\2\u21ae\u219b\3\2\2\2\u21af\u048f\3\2\2\2\u21b0\u21b5\5\u0492\u024a"+
		"\2\u21b1\u21b2\7m\2\2\u21b2\u21b4\5\u0492\u024a\2\u21b3\u21b1\3\2\2\2"+
		"\u21b4\u21b7\3\2\2\2\u21b5\u21b3\3\2\2\2\u21b5\u21b6\3\2\2\2\u21b6\u0491"+
		"\3\2\2\2\u21b7\u21b5\3\2\2\2\u21b8\u21c0\7\66\2\2\u21b9\u21c0\78\2\2\u21ba"+
		"\u21c0\7\67\2\2\u21bb\u21bc\7\67\2\2\u21bc\u21bd\7\u013b\2\2\u21bd\u21c0"+
		"\5\u0224\u0113\2\u21be\u21c0\7<\2\2\u21bf\u21b8\3\2\2\2\u21bf\u21b9\3"+
		"\2\2\2\u21bf\u21ba\3\2\2\2\u21bf\u21bb\3\2\2\2\u21bf\u21be\3\2\2\2\u21c0"+
		"\u0493\3\2\2\2\u21c1\u21c6\7\u01a8\2\2\u21c2\u21c6\7\u01a2\2\2\u21c3\u21c4"+
		"\7\u01bd\2\2\u21c4\u21c6\7\u013b\2\2\u21c5\u21c1\3\2\2\2\u21c5\u21c2\3"+
		"\2\2\2\u21c5\u21c3\3\2\2\2\u21c6\u0495\3\2\2\2\u21c7\u21cc\5\u0498\u024d"+
		"\2\u21c8\u21c9\7(\2\2\u21c9\u21cb\5\u0498\u024d\2\u21ca\u21c8\3\2\2\2"+
		"\u21cb\u21ce\3\2\2\2\u21cc\u21ca\3\2\2\2\u21cc\u21cd\3\2\2\2\u21cd\u0497"+
		"\3\2\2\2\u21ce\u21cc\3\2\2\2\u21cf\u21d3\7\u0225\2\2\u21d0\u21d3\7\u0224"+
		"\2\2\u21d1\u21d3\5\u0232\u011a\2\u21d2\u21cf\3\2\2\2\u21d2\u21d0\3\2\2"+
		"\2\u21d2\u21d1\3\2\2\2\u21d3\u0499\3\2\2\2\u21d4\u21d5\7V\2\2\u21d5\u21d6"+
		"\7\"\2\2\u21d6\u21d7\5\u00f2z\2\u21d7\u21d8\7#\2\2\u21d8\u049b\3\2\2\2"+
		"\u21d9\u21db\7j\2\2\u21da\u21dc\7\u01c8\2\2\u21db\u21da\3\2\2\2\u21db"+
		"\u21dc\3\2\2\2\u21dc\u21dd\3\2\2\2\u21dd\u21de\t\67\2\2\u21de\u049d\3"+
		"\2\2\2\u21df\u21e0\7\u01e6\2\2\u21e0\u21e1\5\u04a0\u0251\2\u21e1\u049f"+
		"\3\2\2\2\u21e2\u21e4\5\u04a2\u0252\2\u21e3\u21e2\3\2\2\2\u21e4\u21e5\3"+
		"\2\2\2\u21e5\u21e3\3\2\2\2\u21e5\u21e6\3\2\2\2\u21e6\u04a1\3\2\2\2\u21e7"+
		"\u21e8\5\u04a8\u0255\2\u21e8\u21ea\5\u04a6\u0254\2\u21e9\u21eb\7e\2\2"+
		"\u21ea\u21e9\3\2\2\2\u21ea\u21eb\3\2\2\2\u21eb\u21ec\3\2\2\2\u21ec\u21ed"+
		"\5\u04a4\u0253\2\u21ed\u04a3\3\2\2\2\u21ee\u21ef\5\u013a\u009e\2\u21ef"+
		"\u04a5\3\2\2\2\u21f0\u21f1\t8\2\2\u21f1\u04a7\3\2\2\2\u21f2\u21f3\t9\2"+
		"\2\u21f3\u04a9\3\2\2\2\u21f4\u21f6\79\2\2\u21f5\u21f7\5\u04ac\u0257\2"+
		"\u21f6\u21f5\3\2\2\2\u21f6\u21f7\3\2\2\2\u21f7\u21f8\3\2\2\2\u21f8\u21fc"+
		"\7\u0129\2\2\u21f9\u21fa\7g\2\2\u21fa\u21fb\7o\2\2\u21fb\u21fd\7s\2\2"+
		"\u21fc\u21f9\3\2\2\2\u21fc\u21fd\3\2\2\2\u21fd\u21fe\3\2\2\2\u21fe\u2200"+
		"\5N(\2\u21ff\u2201\5\u021c\u010f\2\u2200\u21ff\3\2\2\2\u2200\u2201\3\2"+
		"\2\2\u2201\u04ab\3\2\2\2\u2202\u2204\t\36\2\2\u2203\u2202\3\2\2\2\u2203"+
		"\u2204\3\2\2\2\u2204\u2205\3\2\2\2\u2205\u2208\t\33\2\2\u2206\u2208\7"+
		"\u0134\2\2\u2207\u2203\3\2\2\2\u2207\u2206\3\2\2\2\u2208\u04ad\3\2\2\2"+
		"\u2209\u220a\79\2\2\u220a\u220e\7\u01fb\2\2\u220b\u220c\7g\2\2\u220c\u220d"+
		"\7o\2\2\u220d\u220f\7s\2\2\u220e\u220b\3\2\2\2\u220e\u220f\3\2\2\2\u220f"+
		"\u2210\3\2\2\2\u2210\u2213\5\u00e0q\2\u2211\u2212\7\u00af\2\2\u2212\u2214"+
		"\7\u0224\2\2\u2213\u2211\3\2\2\2\u2213\u2214\3\2\2\2\u2214\u2216\3\2\2"+
		"\2\u2215\u2217\5\u03ee\u01f8\2\u2216\u2215\3\2\2\2\u2216\u2217\3\2\2\2"+
		"\u2217\u2218\3\2\2\2\u2218\u2219\7H\2\2\u2219\u221a\7\u00f2\2\2\u221a"+
		"\u221b\7\u021b\2\2\u221b\u221c\5\u00e0q\2\u221c\u221d\5\u023e\u0120\2"+
		"\u221d\u04af\3\2\2\2\u221e\u221f\79\2\2\u221f\u2223\7\u012e\2\2\u2220"+
		"\u2221\7g\2\2\u2221\u2222\7o\2\2\u2222\u2224\7s\2\2\u2223\u2220\3\2\2"+
		"\2\u2223\u2224\3\2\2\2\u2224\u2225\3\2\2\2\u2225\u2226\5\u01ba\u00de\2"+
		"\u2226\u2227\5<\37\2\u2227\u2228\7f\2\2\u2228\u2229\5\u015e\u00b0\2\u2229"+
		"\u222a\7Z\2\2\u222a\u222b\5\u008cG\2\u222b\u04b1\3\2\2\2\u222c\u222d\7"+
		"9\2\2\u222d\u222e\7\u01fc\2\2\u222e\u222f\5\u00e0q\2\u222f\u2230\7\u01cb"+
		"\2\2\u2230\u2231\7\u0224\2\2\u2231\u2232\7\u01e4\2\2\u2232\u2235\5\u03f4"+
		"\u01fb\2\u2233\u2234\7R\2\2\u2234\u2236\5\u022c\u0117\2\u2235\u2233\3"+
		"\2\2\2\u2235\u2236\3\2\2\2\u2236\u04b3\3\2\2\2\u2237\u2238\79\2\2\u2238"+
		"\u2239\7\u0130\2\2\u2239\u223c\5\u00e0q\2\u223a\u223b\7\u011c\2\2\u223b"+
		"\u223d\5\u0202\u0102\2\u223c\u223a\3\2\2\2\u223c\u223d\3\2\2\2\u223d\u223e"+
		"\3\2\2\2\u223e\u223f\7\u01d1\2\2\u223f\u2242\7\u0224\2\2\u2240\u2241\7"+
		"R\2\2\u2241\u2243\5\u01e2\u00f2\2\u2242\u2240\3\2\2\2\u2242\u2243\3\2"+
		"\2\2\u2243\u04b5\3\2\2\2\u2244\u2245\79\2\2\u2245\u2246\7\u00b3\2\2\u2246"+
		"\u2247\7\u01fd\2\2\u2247\u2248\t:\2\2\u2248\u2249\5\u01ba\u00de\2\u2249"+
		"\u224a\5\u022c\u0117\2\u224a\u04b7\3\2\2\2\u224b\u224e\79\2\2\u224c\u224d"+
		"\7m\2\2\u224d\u224f\7\u01ee\2\2\u224e\u224c\3\2\2\2\u224e\u224f\3\2\2"+
		"\2\u224f\u2250\3\2\2\2\u2250\u2251\7\u0210\2\2\u2251\u2252\7j\2\2\u2252"+
		"\u2253\5\u015a\u00ae\2\u2253\u2254\7\u010d\2\2\u2254\u2255\5\u00e0q\2"+
		"\u2255\u2256\7\"\2\2\u2256\u2257\5\u0478\u023d\2\u2257\u2258\7#\2\2\u2258"+
		"\u04b9\3\2\2\2\u2259\u225a\79\2\2\u225a\u225b\7\u00af\2\2\u225b\u225c"+
		"\5\u01ba\u00de\2\u225c\u225d\5\u04bc\u025f\2\u225d\u04bb\3\2\2\2\u225e"+
		"\u2260\5\u022c\u0117\2\u225f\u225e\3\2\2\2\u225f\u2260\3\2\2\2\u2260\u2272"+
		"\3\2\2\2\u2261\u2262\7e\2\2\u2262\u2264\7\"\2\2\u2263\u2265\5\u01b4\u00db"+
		"\2\u2264\u2263\3\2\2\2\u2264\u2265\3\2\2\2\u2265\u2266\3\2\2\2\u2266\u2272"+
		"\7#\2\2\u2267\u2268\7e\2\2\u2268\u2269\7\u014c\2\2\u2269\u226b\7\"\2\2"+
		"\u226a\u226c\5\u04be\u0260\2\u226b\u226a\3\2\2\2\u226b\u226c\3\2\2\2\u226c"+
		"\u226d\3\2\2\2\u226d\u2272\7#\2\2\u226e\u226f\7e\2\2\u226f\u2270\7\u0120"+
		"\2\2\u2270\u2272\5\u022c\u0117\2\u2271\u225f\3\2\2\2\u2271\u2261\3\2\2"+
		"\2\u2271\u2267\3\2\2\2\u2271\u226e\3\2\2\2\u2272\u04bd\3\2\2\2\u2273\u2278"+
		"\7\u0224\2\2\u2274\u2275\7(\2\2\u2275\u2277\7\u0224\2\2\u2276\u2274\3"+
		"\2\2\2\u2277\u227a\3\2\2\2\u2278\u2276\3\2\2\2\u2278\u2279\3\2\2\2\u2279"+
		"\u04bf\3\2\2\2\u227a\u2278\3\2\2\2\u227b\u227c\79\2\2\u227c\u227d\7\u00e7"+
		"\2\2\u227d\u2281\7\u01d9\2\2\u227e\u227f\7g\2\2\u227f\u2280\7o\2\2\u2280"+
		"\u2282\7s\2\2\u2281\u227e\3\2\2\2\u2281\u2282\3\2\2\2\u2282\u2283\3\2"+
		"\2\2\u2283\u2284\7j\2\2\u2284\u2285\5\u0414\u020b\2\u2285\u2286\7\u01fb"+
		"\2\2\u2286\u2287\5\u00e0q\2\u2287\u2288\5\u023e\u0120\2\u2288\u04c1\3"+
		"\2\2\2\u2289\u228a\7\u01bb\2\2\u228a\u228b\t;\2\2\u228b\u04c3\3\2\2\2"+
		"\u228c\u228d\7;\2\2\u228d\u228e\7\u01a1\2\2\u228e\u2291\7\u01db\2\2\u228f"+
		"\u2290\7g\2\2\u2290\u2292\7s\2\2\u2291\u228f\3\2\2\2\u2291\u2292\3\2\2"+
		"\2\u2292\u2293\3\2\2\2\u2293\u2295\5\u00e0q\2\u2294\u2296\5\u0346\u01a4"+
		"\2\u2295\u2294\3\2\2\2\u2295\u2296\3\2\2\2\u2296\u04c5\3\2\2\2\u2297\u2298"+
		"\7;\2\2\u2298\u229b\7\u01a3\2\2\u2299\u229a\7g\2\2\u229a\u229c\7s\2\2"+
		"\u229b\u2299\3\2\2\2\u229b\u229c\3\2\2\2\u229c\u229d\3\2\2\2\u229d\u229f"+
		"\5\u04c8\u0265\2\u229e\u22a0\5\u0346\u01a4\2\u229f\u229e\3\2\2\2\u229f"+
		"\u22a0\3\2\2\2\u22a0\u04c7\3\2\2\2\u22a1\u22a6\5\u03ac\u01d7\2\u22a2\u22a3"+
		"\7(\2\2\u22a3\u22a5\5\u03ac\u01d7\2\u22a4\u22a2\3\2\2\2\u22a5\u22a8\3"+
		"\2\2\2\u22a6\u22a4\3\2\2\2\u22a6\u22a7\3\2\2\2\u22a7\u04c9\3\2\2\2\u22a8"+
		"\u22a6\3\2\2\2\u22a9\u22aa\7;\2\2\u22aa\u22ad\7W\2\2\u22ab\u22ac\7g\2"+
		"\2\u22ac\u22ae\7s\2\2\u22ad\u22ab\3\2\2\2\u22ad\u22ae\3\2\2\2\u22ae\u22af"+
		"\3\2\2\2\u22af\u22b0\7\"\2\2\u22b0\u22b1\5\u015a\u00ae\2\u22b1\u22b2\7"+
		"e\2\2\u22b2\u22b3\5\u015a\u00ae\2\u22b3\u22b5\7#\2\2\u22b4\u22b6\5\u0346"+
		"\u01a4\2\u22b5\u22b4\3\2\2\2\u22b5\u22b6\3\2\2\2\u22b6\u04cb\3\2\2\2\u22b7"+
		"\u22b8\7;\2\2\u22b8\u22bb\7\u00aa\2\2\u22b9\u22ba\7g\2\2\u22ba\u22bc\7"+
		"s\2\2\u22bb\u22b9\3\2\2\2\u22bb\u22bc\3\2\2\2\u22bc\u22bd\3\2\2\2\u22bd"+
		"\u22bf\5\u00e0q\2\u22be\u22c0\5\u0346\u01a4\2\u22bf\u22be\3\2\2\2\u22bf"+
		"\u22c0\3\2\2\2\u22c0\u04cd\3\2\2\2\u22c1\u22c2\7;\2\2\u22c2\u22c5\7\u01ac"+
		"\2\2\u22c3\u22c4\7g\2\2\u22c4\u22c6\7s\2\2\u22c5\u22c3\3\2\2\2\u22c5\u22c6"+
		"\3\2\2\2\u22c6\u22c7\3\2\2\2\u22c7\u22c9\5\u00e0q\2\u22c8\u22ca\5\u0346"+
		"\u01a4\2\u22c9\u22c8\3\2\2\2\u22c9\u22ca\3\2\2\2\u22ca\u04cf\3\2\2\2\u22cb"+
		"\u22cc\7;\2\2\u22cc\u22cf\7\u00f8\2\2\u22cd\u22ce\7g\2\2\u22ce\u22d0\7"+
		"s\2\2\u22cf\u22cd\3\2\2\2\u22cf\u22d0\3\2\2\2\u22d0\u22d1\3\2\2\2\u22d1"+
		"\u22d3\5\u01be\u00e0\2\u22d2\u22d4\5\u0346\u01a4\2\u22d3\u22d2\3\2\2\2"+
		"\u22d3\u22d4\3\2\2\2\u22d4\u04d1\3\2\2\2\u22d5\u22d6\7;\2\2\u22d6\u22d7"+
		"\7\u01c9\2\2\u22d7\u22da\7M\2\2\u22d8\u22d9\7g\2\2\u22d9\u22db\7s\2\2"+
		"\u22da\u22d8\3\2\2\2\u22da\u22db\3\2\2\2\u22db\u22dc\3\2\2\2\u22dc\u22de"+
		"\5\u00e0q\2\u22dd\u22df\5\u0346\u01a4\2\u22de\u22dd\3\2\2\2\u22de\u22df"+
		"\3\2\2\2\u22df\u04d3\3\2\2\2\u22e0\u22e1\7;\2\2\u22e1\u22e4\7\u00fc\2"+
		"\2\u22e2\u22e3\7g\2\2\u22e3\u22e5\7s\2\2\u22e4\u22e2\3\2\2\2\u22e4\u22e5"+
		"\3\2\2\2\u22e5\u22e6\3\2\2\2\u22e6\u22e8\5\u01be\u00e0\2\u22e7\u22e9\5"+
		"\u0346\u01a4\2\u22e8\u22e7\3\2\2\2\u22e8\u22e9\3\2\2\2\u22e9\u04d5\3\2"+
		"\2\2\u22ea\u22eb\7;\2\2\u22eb\u22ec\7H\2\2\u22ec\u22ed\7\u00f2\2\2\u22ed"+
		"\u22f0\7\u021b\2\2\u22ee\u22ef\7g\2\2\u22ef\u22f1\7s\2\2\u22f0\u22ee\3"+
		"\2\2\2\u22f0\u22f1\3\2\2\2\u22f1\u22f2\3\2\2\2\u22f2\u22f4\5\u01be\u00e0"+
		"\2\u22f3\u22f5\5\u0346\u01a4\2\u22f4\u22f3\3\2\2\2\u22f4\u22f5\3\2\2\2"+
		"\u22f5\u04d7\3\2\2\2\u22f6\u22f7\7;\2\2\u22f7\u22f8\7H\2\2\u22f8\u22fb"+
		"\7B\2\2\u22f9\u22fa\7g\2\2\u22fa\u22fc\7s\2\2\u22fb\u22f9\3\2\2\2\u22fb"+
		"\u22fc\3\2\2\2\u22fc\u22fd\3\2\2\2\u22fd\u2302\5\u00dan\2\u22fe\u22ff"+
		"\7(\2\2\u22ff\u2301\5\u00dan\2\u2300\u22fe\3\2\2\2\u2301\u2304\3\2\2\2"+
		"\u2302\u2300\3\2\2\2\u2302\u2303\3\2\2\2\u2303\u2306\3\2\2\2\u2304\u2302"+
		"\3\2\2\2\u2305\u2307\5\u0346\u01a4\2\u2306\u2305\3\2\2\2\u2306\u2307\3"+
		"\2\2\2\u2307\u04d9\3\2\2\2\u2308\u2309\7;\2\2\u2309\u230c\7L\2\2\u230a"+
		"\u230b\7g\2\2\u230b\u230d\7s\2\2\u230c\u230a\3\2\2\2\u230c\u230d\3\2\2"+
		"\2\u230d\u230e\3\2\2\2\u230e\u2310\5\u04dc\u026f\2\u230f\u2311\5\u0346"+
		"\u01a4\2\u2310\u230f\3\2\2\2\u2310\u2311\3\2\2\2\u2311\u04db\3\2\2\2\u2312"+
		"\u2317\5\u03a8\u01d5\2\u2313\u2314\7(\2\2\u2314\u2316\5\u03a8\u01d5\2"+
		"\u2315\u2313\3\2\2\2\u2316\u2319\3\2\2\2\u2317\u2315\3\2\2\2\u2317\u2318"+
		"\3\2\2\2\u2318\u04dd\3\2\2\2\u2319\u2317\3\2\2\2\u231a\u231c\7;\2\2\u231b"+
		"\u231d\7\u01e0\2\2\u231c\u231b\3\2\2\2\u231c\u231d\3\2\2\2\u231d\u231e"+
		"\3\2\2\2\u231e\u2321\7\u010d\2\2\u231f\u2320\7g\2\2\u2320\u2322\7s\2\2"+
		"\u2321\u231f\3\2\2\2\u2321\u2322\3\2\2\2\u2322\u2323\3\2\2\2\u2323\u2325"+
		"\5\u00e0q\2\u2324\u2326\5\u0346\u01a4\2\u2325\u2324\3\2\2\2\u2325\u2326"+
		"\3\2\2\2\u2326\u04df\3\2\2\2\u2327\u2328\7;\2\2\u2328\u2329\7\u0181\2"+
		"\2\u2329\u232c\7O\2\2\u232a\u232b\7g\2\2\u232b\u232d\7s\2\2\u232c\u232a"+
		"\3\2\2\2\u232c\u232d\3\2\2\2\u232d\u232e\3\2\2\2\u232e\u2330\5\u0400\u0201"+
		"\2\u232f\u2331\5\u0346\u01a4\2\u2330\u232f\3\2\2\2\u2330\u2331\3\2\2\2"+
		"\u2331\u04e1\3\2\2\2\u2332\u2333\7;\2\2\u2333\u2336\7\u0182\2\2\u2334"+
		"\u2335\7g\2\2\u2335\u2337\7s\2\2\u2336\u2334\3\2\2\2\u2336\u2337\3\2\2"+
		"\2\u2337\u2338\3\2\2\2\u2338\u233a\5\u04e4\u0273\2\u2339\u233b\5\u0346"+
		"\u01a4\2\u233a\u2339\3\2\2\2\u233a\u233b\3\2\2\2\u233b\u04e3\3\2\2\2\u233c"+
		"\u2341\5\u036a\u01b6\2\u233d\u233e\7(\2\2\u233e\u2340\5\u036a\u01b6\2"+
		"\u233f\u233d\3\2\2\2\u2340\u2343\3\2\2\2\u2341\u233f\3\2\2\2\u2341\u2342"+
		"\3\2\2\2\u2342\u04e5\3\2\2\2\u2343\u2341\3\2\2\2\u2344\u2345\7;\2\2\u2345"+
		"\u2346\7\u0182\2\2\u2346\u2349\7\u01b4\2\2\u2347\u2348\7g\2\2\u2348\u234a"+
		"\7s\2\2\u2349\u2347\3\2\2\2\u2349\u234a\3\2\2\2\u234a\u234b\3\2\2\2\u234b"+
		"\u234c\5\u01ba\u00de\2\u234c\u234d\7c\2\2\u234d\u234f\5\u00e0q\2\u234e"+
		"\u2350\5\u0346\u01a4\2\u234f\u234e\3\2\2\2\u234f\u2350\3\2\2\2\u2350\u04e7"+
		"\3\2\2\2\u2351\u2352\7;\2\2\u2352\u2353\7\u0182\2\2\u2353\u2356\7\u01cd"+
		"\2\2\u2354\u2355\7g\2\2\u2355\u2357\7s\2\2\u2356\u2354\3\2\2\2\u2356\u2357"+
		"\3\2\2\2\u2357\u2358\3\2\2\2\u2358\u2359\5\u01ba\u00de\2\u2359\u235a\7"+
		"c\2\2\u235a\u235c\5\u00e0q\2\u235b\u235d\5\u0346\u01a4\2\u235c\u235b\3"+
		"\2\2\2\u235c\u235d\3\2\2\2\u235d\u04e9\3\2\2\2\u235e\u235f\7;\2\2\u235f"+
		"\u2360\7\u011b\2\2\u2360\u2361\7{\2\2\u2361\u2363\5\u0256\u012c\2\u2362"+
		"\u2364\5\u0346\u01a4\2\u2363\u2362\3\2\2\2\u2363\u2364\3\2\2\2\u2364\u04eb"+
		"\3\2\2\2\u2365\u2366\7;\2\2\u2366\u2369\7\u0200\2\2\u2367\u2368\7g\2\2"+
		"\u2368\u236a\7s\2\2\u2369\u2367\3\2\2\2\u2369\u236a\3\2\2\2\u236a\u236b"+
		"\3\2\2\2\u236b\u236c\5\u00e0q\2\u236c\u236d\7f\2\2\u236d\u236f\5\u00da"+
		"n\2\u236e\u2370\5\u0346\u01a4\2\u236f\u236e\3\2\2\2\u236f\u2370\3\2\2"+
		"\2\u2370\u04ed\3\2\2\2\u2371\u2372\7;\2\2\u2372\u2375\7N\2\2\u2373\u2374"+
		"\7g\2\2\u2374\u2376\7s\2\2\u2375\u2373\3\2\2\2\u2375\u2376\3\2\2\2\u2376"+
		"\u2377\3\2\2\2\u2377\u2379\5\u04dc\u026f\2\u2378\u237a\5\u0346\u01a4\2"+
		"\u2379\u2378\3\2\2\2\u2379\u237a\3\2\2\2\u237a\u04ef\3\2\2\2\u237b\u237c"+
		"\7;\2\2\u237c\u237f\7\u01e4\2\2\u237d\u237e\7g\2\2\u237e\u2380\7s\2\2"+
		"\u237f\u237d\3\2\2\2\u237f\u2380\3\2\2\2\u2380\u2381\3\2\2\2\u2381\u2383"+
		"\5\u0400\u0201\2\u2382\u2384\5\u0346\u01a4\2\u2383\u2382\3\2\2\2\u2383"+
		"\u2384\3\2\2\2\u2384\u04f1\3\2\2\2\u2385\u2386\7;\2\2\u2386\u2389\7\u0126"+
		"\2\2\u2387\u2388\7g\2\2\u2388\u238a\7s\2\2\u2389\u2387\3\2\2\2\u2389\u238a"+
		"\3\2\2\2\u238a\u238b\3\2\2\2\u238b\u238d\5\u04dc\u026f\2\u238c\u238e\5"+
		"\u0346\u01a4\2\u238d\u238c\3\2\2\2\u238d\u238e\3\2\2\2\u238e\u04f3\3\2"+
		"\2\2\u238f\u2390\7;\2\2\u2390\u2393\7\u0127\2\2\u2391\u2392\7g\2\2\u2392"+
		"\u2394\7s\2\2\u2393\u2391\3\2\2\2\u2393\u2394\3\2\2\2\u2394\u2395\3\2"+
		"\2\2\u2395\u2396\5\u00e0q\2\u2396\u2397\7f\2\2\u2397\u2399\5\u00dan\2"+
		"\u2398\u239a\5\u0346\u01a4\2\u2399\u2398\3\2\2\2\u2399\u239a\3\2\2\2\u239a"+
		"\u04f5\3\2\2\2\u239b\u239c\7;\2\2\u239c\u239f\7\u0129\2\2\u239d\u239e"+
		"\7g\2\2\u239e\u23a0\7s\2\2\u239f\u239d\3\2\2\2\u239f\u23a0\3\2\2\2\u23a0"+
		"\u23a1\3\2\2\2\u23a1\u23a3\5L\'\2\u23a2\u23a4\5\u0346\u01a4\2\u23a3\u23a2"+
		"\3\2\2\2\u23a3\u23a4\3\2\2\2\u23a4\u04f7\3\2\2\2\u23a5\u23a6\7;\2\2\u23a6"+
		"\u23a9\7\u01fb\2\2\u23a7\u23a8\7g\2\2\u23a8\u23aa\7s\2\2\u23a9\u23a7\3"+
		"\2\2\2\u23a9\u23aa\3\2\2\2\u23aa\u23ab\3\2\2\2\u23ab\u23ad\5L\'\2\u23ac"+
		"\u23ae\5\u0346\u01a4\2\u23ad\u23ac\3\2\2\2\u23ad\u23ae\3\2\2\2\u23ae\u04f9"+
		"\3\2\2\2\u23af\u23b0\7;\2\2\u23b0\u23b3\7\u012e\2\2\u23b1\u23b2\7g\2\2"+
		"\u23b2\u23b4\7s\2\2\u23b3\u23b1\3\2\2\2\u23b3\u23b4\3\2\2\2\u23b4\u23b5"+
		"\3\2\2\2\u23b5\u23b6\5L\'\2\u23b6\u04fb\3\2\2\2\u23b7\u23b8\7;\2\2\u23b8"+
		"\u23bb\7\u01fc\2\2\u23b9\u23ba\7g\2\2\u23ba\u23bc\7s\2\2\u23bb\u23b9\3"+
		"\2\2\2\u23bb\u23bc\3\2\2\2\u23bc\u23bd\3\2\2\2\u23bd\u23bf\5N(\2\u23be"+
		"\u23c0\5\u0346\u01a4\2\u23bf\u23be\3\2\2\2\u23bf\u23c0\3\2\2\2\u23c0\u04fd"+
		"\3\2\2\2\u23c1\u23c2\7;\2\2\u23c2\u23c5\7\u0130\2\2\u23c3\u23c4\7g\2\2"+
		"\u23c4\u23c6\7s\2\2\u23c5\u23c3\3\2\2\2\u23c5\u23c6\3\2\2\2\u23c6\u23c7"+
		"\3\2\2\2\u23c7\u23c8\5N(\2\u23c8\u04ff\3\2\2\2\u23c9\u23ca\7;\2\2\u23ca"+
		"\u23cb\7\u00b3\2\2\u23cb\u23cc\7\u01fd\2\2\u23cc\u23cf\t:\2\2\u23cd\u23ce"+
		"\7g\2\2\u23ce\u23d0\7s\2\2\u23cf\u23cd\3\2\2\2\u23cf\u23d0\3\2\2\2\u23d0"+
		"\u23d1\3\2\2\2\u23d1\u23d3\5\u00e0q\2\u23d2\u23d4\5\u0346\u01a4\2\u23d3"+
		"\u23d2\3\2\2\2\u23d3\u23d4\3\2\2\2\u23d4\u0501\3\2\2\2\u23d5\u23d6\7;"+
		"\2\2\u23d6\u23d9\7\u0210\2\2\u23d7\u23d8\7g\2\2\u23d8\u23da\7s\2\2\u23d9"+
		"\u23d7\3\2\2\2\u23d9\u23da\3\2\2\2\u23da\u23db\3\2\2\2\u23db\u23dc\7j"+
		"\2\2\u23dc\u23dd\5\u015a\u00ae\2\u23dd\u23de\7\u010d\2\2\u23de\u23e0\5"+
		"\u00e0q\2\u23df\u23e1\5\u0346\u01a4\2\u23e0\u23df\3\2\2\2\u23e0\u23e1"+
		"\3\2\2\2\u23e1\u0503\3\2\2\2\u23e2\u23e3\7;\2\2\u23e3\u23e6\7M\2\2\u23e4"+
		"\u23e5\7g\2\2\u23e5\u23e7\7s\2\2\u23e6\u23e4\3\2\2\2\u23e6\u23e7\3\2\2"+
		"\2\u23e7\u23e8\3\2\2\2\u23e8\u23e9\5N(\2\u23e9\u23ea\7f\2\2\u23ea\u23ec"+
		"\5\u00dan\2\u23eb\u23ed\5\u0346\u01a4\2\u23ec\u23eb\3\2\2\2\u23ec\u23ed"+
		"\3\2\2\2\u23ed\u0505\3\2\2\2\u23ee\u23ef\7;\2\2\u23ef\u23f2\7\u00af\2"+
		"\2\u23f0\u23f1\7g\2\2\u23f1\u23f3\7s\2\2\u23f2\u23f0\3\2\2\2\u23f2\u23f3"+
		"\3\2\2\2\u23f3\u23f4\3\2\2\2\u23f4\u23f6\5\u0400\u0201\2\u23f5\u23f7\5"+
		"\u0346\u01a4\2\u23f6\u23f5\3\2\2\2\u23f6\u23f7\3\2\2\2\u23f7\u0507\3\2"+
		"\2\2\u23f8\u23f9\7;\2\2\u23f9\u23fa\7\u00e7\2\2\u23fa\u23fd\7\u01d9\2"+
		"\2\u23fb\u23fc\7g\2\2\u23fc\u23fe\7s\2\2\u23fd\u23fb\3\2\2\2\u23fd\u23fe"+
		"\3\2\2\2\u23fe\u23ff\3\2\2\2\u23ff\u2400\7j\2\2\u2400\u2401\5\u0414\u020b"+
		"\2\u2401\u2402\7\u01fb\2\2\u2402\u2403\5\u00e0q\2\u2403\u0509\3\2\2\2"+
		"\u2404\u2405\7;\2\2\u2405\u2408\7O\2\2\u2406\u2407\7g\2\2\u2407\u2409"+
		"\7s\2\2\u2408\u2406\3\2\2\2\u2408\u2409\3\2\2\2\u2409\u240a\3\2\2\2\u240a"+
		"\u240c\5\u01be\u00e0\2\u240b\u240d\5\u0346\u01a4\2\u240c\u240b\3\2\2\2"+
		"\u240c\u240d\3\2\2\2\u240d\u050b\3\2\2\2\u240e\u240f\7\u01f3\2\2\u240f"+
		"\u2410\7H\2\2\u2410\u2411\7=\2\2\u2411\u2413\5\u00e0q\2\u2412\u2414\5"+
		"\u050e\u0288\2\u2413\u2412\3\2\2\2\u2413\u2414\3\2\2\2\u2414\u2415\3\2"+
		"\2\2\u2415\u2416\7Z\2\2\u2416\u2417\7\u01fb\2\2\u2417\u2418\5\u00e0q\2"+
		"\u2418\u2419\7P\2\2\u2419\u241b\5\u00e0q\2\u241a\u241c\5\u023e\u0120\2"+
		"\u241b\u241a\3\2\2\2\u241b\u241c\3\2\2\2\u241c\u050d\3\2\2\2\u241d\u241e"+
		"\5\u0510\u0289\2\u241e\u241f\7\"\2\2\u241f\u2420\5\u026c\u0137\2\u2420"+
		"\u2421\7#\2\2\u2421\u050f\3\2\2\2\u2422\u2423\7\177\2\2\u2423\u2426\7"+
		"k\2\2\u2424\u2426\7\u00c2\2\2\u2425\u2422\3\2\2\2\u2425\u2424\3\2\2\2"+
		"\u2426\u0511\3\2\2\2\u2427\u2428\7\u01dd\2\2\u2428\u2429\5\u013a\u009e"+
		"\2\u2429\u0513\3\2\2\2\u242a\u242b\7\u01df\2\2\u242b\u242c\5\u00c4c\2"+
		"\u242c\u0515\3\2\2\2\u242d\u242e\7\u01f1\2\2\u242e\u2430\5\u00e0q\2\u242f"+
		"\u2431\5\u0518\u028d\2\u2430\u242f\3\2\2\2\u2430\u2431\3\2\2\2\u2431\u2432"+
		"\3\2\2\2\u2432\u2433\7e\2\2\u2433\u2434\5> \2\u2434\u0517\3\2\2\2\u2435"+
		"\u2436\7\"\2\2\u2436\u2437\5\u0132\u009a\2\u2437\u2438\7#\2\2\u2438\u0519"+
		"\3\2\2\2\u2439\u243a\7\u01f0\2\2\u243a\u243b\7\u0181\2\2\u243b\u243d\7"+
		"O\2\2\u243c\u243e\7\u00ee\2\2\u243d\u243c\3\2\2\2\u243d\u243e\3\2\2\2"+
		"\u243e\u243f\3\2\2\2\u243f\u2441\5N(\2\u2440\u2442\5\u0288\u0145\2\u2441"+
		"\u2440\3\2\2\2\u2441\u2442\3\2\2\2\u2442\u051b\3\2\2\2\u2443\u2444\7\u01e8"+
		"\2\2\u2444\u2445\5\u051e\u0290\2\u2445\u051d\3\2\2\2\u2446\u2448\5\u0526"+
		"\u0294\2\u2447\u2449\7\u00ee\2\2\u2448\u2447\3\2\2\2\u2448\u2449\3\2\2"+
		"\2\u2449\u244a\3\2\2\2\u244a\u244b\5N(\2\u244b\u2465\3\2\2\2\u244c\u244e"+
		"\5\u0524\u0293\2\u244d\u244f\7\u00ee\2\2\u244e\u244d\3\2\2\2\u244e\u244f"+
		"\3\2\2\2\u244f\u2450\3\2\2\2\u2450\u2451\5\u00e0q\2\u2451\u2465\3\2\2"+
		"\2\u2452\u2453\7\"\2\2\u2453\u2454\5\u0520\u0291\2\u2454\u2455\7#\2\2"+
		"\u2455\u2457\5\u0526\u0294\2\u2456\u2458\7\u00ee\2\2\u2457\u2456\3\2\2"+
		"\2\u2457\u2458\3\2\2\2\u2458\u2459\3\2\2\2\u2459\u245a\5N(\2\u245a\u2465"+
		"\3\2\2\2\u245b\u245c\7\"\2\2\u245c\u245d\5\u0520\u0291\2\u245d\u245e\7"+
		"#\2\2\u245e\u2460\5\u0524\u0293\2\u245f\u2461\7\u00ee\2\2\u2460\u245f"+
		"\3\2\2\2\u2460\u2461\3\2\2\2\u2461\u2462\3\2\2\2\u2462\u2463\5\u00e0q"+
		"\2\u2463\u2465\3\2\2\2\u2464\u2446\3\2\2\2\u2464\u244c\3\2\2\2\u2464\u2452"+
		"\3\2\2\2\u2464\u245b\3\2\2\2\u2465\u051f\3\2\2\2\u2466\u246b\5\u0522\u0292"+
		"\2\u2467\u2468\7(\2\2\u2468\u246a\5\u0522\u0292\2\u2469\u2467\3\2\2\2"+
		"\u246a\u246d\3\2\2\2\u246b\u2469\3\2\2\2\u246b\u246c\3\2\2\2\u246c\u0521"+
		"\3\2\2\2\u246d\u246b\3\2\2\2\u246e\u246f\7\u021f\2\2\u246f\u0523\3\2\2"+
		"\2\u2470\u2471\t<\2\2\u2471\u0525\3\2\2\2\u2472\u2473\t\63\2\2\u2473\u0527"+
		"\3\2\2\2\u2474\u2475\7:\2\2\u2475\u2476\7H\2\2\u2476\u2479\7B\2\2\u2477"+
		"\u2478\7g\2\2\u2478\u247a\7s\2\2\u2479\u2477\3\2\2\2\u2479\u247a\3\2\2"+
		"\2\u247a\u247b\3\2\2\2\u247b\u247c\5\u0098M\2\u247c\u247d\5\u052a\u0296"+
		"\2\u247d\u0529\3\2\2\2\u247e\u247f\7\u0121\2\2\u247f\u2480\7k\2\2\u2480"+
		"\u248e\5\u00e0q\2\u2481\u2483\7\u0121\2\2\u2482\u2484\7C\2\2\u2483\u2482"+
		"\3\2\2\2\u2483\u2484\3\2\2\2\u2484\u2485\3\2\2\2\u2485\u2486\5\u00e0q"+
		"\2\u2486\u2487\7k\2\2\u2487\u2488\5\u00e0q\2\u2488\u248e\3\2\2\2\u2489"+
		"\u248e\5\u0338\u019d\2\u248a\u248b\7A\2\2\u248b\u248c\7=\2\2\u248c\u248e"+
		"\5\u00e0q\2\u248d\u247e\3\2\2\2\u248d\u2481\3\2\2\2\u248d\u2489\3\2\2"+
		"\2\u248d\u248a\3\2\2\2\u248e\u052b\3\2\2\2\u248f\u2490\79\2\2\u2490\u2491"+
		"\7\u0182\2\2\u2491\u2492\5\u011c\u008f\2\u2492\u2493\5\u022c\u0117\2\u2493"+
		"\u052d\3\2\2\2\u2494\u2495\79\2\2\u2495\u2496\7\u0182\2\2\u2496\u2497"+
		"\7\u01b4\2\2\u2497\u2499\5\u01ba\u00de\2\u2498\u249a\7\u0099\2\2\u2499"+
		"\u2498\3\2\2\2\u2499\u249a\3\2\2\2\u249a\u249b\3\2\2\2\u249b\u249c\7j"+
		"\2\2\u249c\u249d\7\u00af\2\2\u249d\u249e\5\u015a\u00ae\2\u249e\u249f\7"+
		"c\2\2\u249f\u24a2\5\u00e0q\2\u24a0\u24a1\7\u01cd\2\2\u24a1\u24a3\5\u01ba"+
		"\u00de\2\u24a2\u24a0\3\2\2\2\u24a2\u24a3\3\2\2\2\u24a3\u24a4\3\2\2\2\u24a4"+
		"\u24a5\7e\2\2\u24a5\u24a6\5\u035c\u01af\2\u24a6\u052f\3\2\2\2\u24a7\u24a8"+
		"\79\2\2\u24a8\u24a9\7\u0182\2\2\u24a9\u24aa\7\u01cd\2\2\u24aa\u24ab\5"+
		"\u01ba\u00de\2\u24ab\u24ac\7c\2\2\u24ac\u24ad\5\u00e0q\2\u24ad\u0531\3"+
		"\2\2\2\u24ae\u24af\7\u0128\2\2\u24af\u24b0\7\u01d2\2\2\u24b0\u24b1\7j"+
		"\2\2\u24b1\u24b2\5\u0252\u012a\2\u24b2\u24b3\3\2\2\2\u24b3\u24b4\7f\2"+
		"\2\u24b4\u24b5\5\u0536\u029c\2\u24b5\u24b6\7n\2\2\u24b6\u24b7\5\u0534"+
		"\u029b\2\u24b7\u0533\3\2\2\2\u24b8\u24b9\t/\2\2\u24b9\u0535\3\2\2\2\u24ba"+
		"\u24bb\5\u042a\u0216\2\u24bb\u24bc\5\u01ba\u00de\2\u24bc\u24c9\3\2\2\2"+
		"\u24bd\u24be\7C\2\2\u24be\u24c9\5\u01ba\u00de\2\u24bf\u24c0\t=\2\2\u24c0"+
		"\u24c9\5\u015a\u00ae\2\u24c1\u24c2\t>\2\2\u24c2\u24c9\5\u03ac\u01d7\2"+
		"\u24c3\u24c4\7\u010e\2\2\u24c4\u24c5\7\u0117\2\2\u24c5\u24c9\5\u020c\u0107"+
		"\2\u24c6\u24c7\t?\2\2\u24c7\u24c9\5\u03a8\u01d5\2\u24c8\u24ba\3\2\2\2"+
		"\u24c8\u24bd\3\2\2\2\u24c8\u24bf\3\2\2\2\u24c8\u24c1\3\2\2\2\u24c8\u24c3"+
		"\3\2\2\2\u24c8\u24c6\3\2\2\2\u24c9\u0537\3\2\2\2\u24ca\u24cd\7\u0211\2"+
		"\2\u24cb\u24ce\5\u013a\u009e\2\u24cc\u24ce\7\23\2\2\u24cd\u24cb\3\2\2"+
		"\2\u24cd\u24cc\3\2\2\2\u24ce\u0539\3\2\2\2\u24cf\u24d3\7A\2\2\u24d0\u24d1"+
		"\7\u012a\2\2\u24d1\u24d2\7\u00ea\2\2\u24d2\u24d4\7e\2\2\u24d3\u24d0\3"+
		"\2\2\2\u24d3\u24d4\3\2\2\2\u24d4\u24d5\3\2\2\2\u24d5\u24d6\7\u00e6\2\2"+
		"\u24d6\u24dc\5\u025c\u012f\2\u24d7\u24d8\7A\2\2\u24d8\u24d9\7\u00e6\2"+
		"\2\u24d9\u24da\7\u01ef\2\2\u24da\u24dc\7\u0224\2\2\u24db\u24cf\3\2\2\2"+
		"\u24db\u24d7\3\2\2\2\u24dc\u053b\3\2\2\2\u24dd\u24df\7\u0081\2\2\u24de"+
		"\u24e0\t@\2\2\u24df\u24de\3\2\2\2\u24df\u24e0\3\2\2\2\u24e0\u24e2\3\2"+
		"\2\2\u24e1\u24e3\5\u025c\u012f\2\u24e2\u24e1\3\2\2\2\u24e2\u24e3\3\2\2"+
		"\2\u24e3\u053d\3\2\2\2\u24e4\u24e6\7\u0082\2\2\u24e5\u24e7\t@\2\2\u24e6"+
		"\u24e5\3\2\2\2\u24e6\u24e7\3\2\2\2\u24e7\u24ed\3\2\2\2\u24e8\u24ea\7l"+
		"\2\2\u24e9\u24eb\7\u00de\2\2\u24ea\u24e9\3\2\2\2\u24ea\u24eb\3\2\2\2\u24eb"+
		"\u24ec\3\2\2\2\u24ec\u24ee\7\u01b2\2\2\u24ed\u24e8\3\2\2\2\u24ed\u24ee"+
		"\3\2\2\2\u24ee\u053f\3\2\2\2\u24ef\u24f0\7\u0084\2\2\u24f0\u24f1\5\u013a"+
		"\u009e\2\u24f1\u0541\3\2\2\2\u24f2\u24f4\7\u019f\2\2\u24f3\u24f5\t@\2"+
		"\2\u24f4\u24f3\3\2\2\2\u24f4\u24f5\3\2\2\2\u24f5\u24fb\3\2\2\2\u24f6\u24f8"+
		"\7l\2\2\u24f7\u24f9\7\u00de\2\2\u24f8\u24f7\3\2\2\2\u24f8\u24f9\3\2\2"+
		"\2\u24f9\u24fa\3\2\2\2\u24fa\u24fc\7\u01b2\2\2\u24fb\u24f6\3\2\2\2\u24fb"+
		"\u24fc\3\2\2\2\u24fc\u0543\3\2\2\2\u24fd\u24fe\7\u00e5\2\2\u24fe\u2500"+
		"\7\u00e6\2\2\u24ff\u2501\5\u025c\u012f\2\u2500\u24ff\3\2\2\2\u2500\u2501"+
		"\3\2\2\2\u2501\u0545\3\2\2\2\u2502\u2504\7\u00ce\2\2\u2503\u2505\t@\2"+
		"\2\u2504\u2503\3\2\2\2\u2504\u2505\3\2\2\2\u2505\u250b\3\2\2\2\u2506\u2508"+
		"\7l\2\2\u2507\u2509\7\u00de\2\2\u2508\u2507\3\2\2\2\u2508\u2509\3\2\2"+
		"\2\u2509\u250a\3\2\2\2\u250a\u250c\7\u01b2\2\2\u250b\u2506\3\2\2\2\u250b"+
		"\u250c\3\2\2\2\u250c\u0547\3\2\2\2\u250d\u250f\7\u0083\2\2\u250e\u2510"+
		"\t@\2\2\u250f\u250e\3\2\2\2\u250f\u2510\3\2\2\2\u2510\u2516\3\2\2\2\u2511"+
		"\u2513\7l\2\2\u2512\u2514\7\u00de\2\2\u2513\u2512\3\2\2\2\u2513\u2514"+
		"\3\2\2\2\u2514\u2515\3\2\2\2\u2515\u2517\7\u01b2\2\2\u2516\u2511\3\2\2"+
		"\2\u2516\u2517\3\2\2\2\u2517\u0549\3\2\2\2\u2518\u251a\7\u0203\2\2\u2519"+
		"\u251b\7\u0084\2\2\u251a\u2519\3\2\2\2\u251a\u251b\3\2\2\2\u251b\u251c"+
		"\3\2\2\2\u251c\u251d\5\u013a\u009e\2\u251d\u054b\3\2\2\2\u251e\u2520\7"+
		"\u0083\2\2\u251f\u2521\t@\2\2\u2520\u251f\3\2\2\2\u2520\u2521\3\2\2\2"+
		"\u2521\u2522\3\2\2\2\u2522\u2524\7k\2\2\u2523\u2525\7\u0084\2\2\u2524"+
		"\u2523\3\2\2\2\u2524\u2525\3\2\2\2\u2525\u2526\3\2\2\2\u2526\u2527\5\u013a"+
		"\u009e\2\u2527\u054d\3\2\2\2\u2528\u2529\7\u01f1\2\2\u2529\u252a\7\u00e6"+
		"\2\2\u252a\u252b\7\u0224\2\2\u252b\u054f\3\2\2\2\u252c\u252d\7\u0082\2"+
		"\2\u252d\u252e\7\u01f6\2\2\u252e\u252f\7\u0224\2\2\u252f\u0551\3\2\2\2"+
		"\u2530\u2531\7\u0083\2\2\u2531\u2532\7\u01f6\2\2\u2532\u2533\7\u0224\2"+
		"\2\u2533\u0553\3\2\2\2\u2534\u2537\7>\2\2\u2535\u2538\5\u0558\u02ad\2"+
		"\u2536\u2538\5\u055a\u02ae\2\u2537\u2535\3\2\2\2\u2537\u2536\3\2\2\2\u2538"+
		"\u0555\3\2\2\2\u2539\u253b\7?\2\2\u253a\u253c\5\u055c\u02af\2\u253b\u253a"+
		"\3\2\2\2\u253b\u253c\3\2\2\2\u253c\u253f\3\2\2\2\u253d\u2540\5\u0558\u02ad"+
		"\2\u253e\u2540\5\u055a\u02ae\2\u253f\u253d\3\2\2\2\u253f\u253e\3\2\2\2"+
		"\u2540\u2542\3\2\2\2\u2541\u2543\t\35\2\2\u2542\u2541\3\2\2\2\u2542\u2543"+
		"\3\2\2\2\u2543\u0557\3\2\2\2\u2544\u2545\5\u055e\u02b0\2\u2545\u2546\7"+
		"f\2\2\u2546\u2547\5\u0562\u02b2\2\u2547\u2548\t\5\2\2\u2548\u254c\5\u0386"+
		"\u01c4\2\u2549\u254a\7R\2\2\u254a\u254b\7>\2\2\u254b\u254d\7\u00df\2\2"+
		"\u254c\u2549\3\2\2\2\u254c\u254d\3\2\2\2\u254d\u0559\3\2\2\2\u254e\u254f"+
		"\5\u038e\u01c8\2\u254f\u2550\t\5\2\2\u2550\u2554\5\u0256\u012c\2\u2551"+
		"\u2552\7R\2\2\u2552\u2553\7\u00d0\2\2\u2553\u2555\7\u00df\2\2\u2554\u2551"+
		"\3\2\2\2\u2554\u2555\3\2\2\2\u2555\u2559\3\2\2\2\u2556\u2557\7\u01d7\2"+
		"\2\u2557\u2558\7{\2\2\u2558\u255a\5\u0202\u0102\2\u2559\u2556\3\2\2\2"+
		"\u2559\u255a\3\2\2\2\u255a\u055b\3\2\2\2\u255b\u255c\tA\2\2\u255c\u255d"+
		"\7\u00df\2\2\u255d\u255e\7j\2\2\u255e\u055d\3\2\2\2\u255f\u2561\5\u0560"+
		"\u02b1\2\u2560\u2562\5\u00e4s\2\u2561\u2560\3\2\2\2\u2561\u2562\3\2\2"+
		"\2\u2562\u256a\3\2\2\2\u2563\u2564\7(\2\2\u2564\u2566\5\u0560\u02b1\2"+
		"\u2565\u2567\5\u00e4s\2\u2566\u2565\3\2\2\2\u2566\u2567\3\2\2\2\u2567"+
		"\u2569\3\2\2\2\u2568\u2563\3\2\2\2\u2569\u256c\3\2\2\2\u256a\u2568\3\2"+
		"\2\2\u256a\u256b\3\2\2\2\u256b\u055f\3\2\2\2\u256c\u256a\3\2\2\2\u256d"+
		"\u257f\7\65\2\2\u256e\u257f\7\66\2\2\u256f\u257f\7\67\2\2\u2570\u257f"+
		"\78\2\2\u2571\u257f\7<\2\2\u2572\u257f\7\u00e2\2\2\u2573\u257f\7M\2\2"+
		"\u2574\u257f\79\2\2\u2575\u257f\7\u00ef\2\2\u2576\u257f\7\u0132\2\2\u2577"+
		"\u257f\7\u0131\2\2\u2578\u257f\7\u00fa\2\2\u2579\u257f\7\u0135\2\2\u257a"+
		"\u257c\7v\2\2\u257b\u257d\7\u00e0\2\2\u257c\u257b\3\2\2\2\u257c\u257d"+
		"\3\2\2\2\u257d\u257f\3\2\2\2\u257e\u256d\3\2\2\2\u257e\u256e\3\2\2\2\u257e"+
		"\u256f\3\2\2\2\u257e\u2570\3\2\2\2\u257e\u2571\3\2\2\2\u257e\u2572\3\2"+
		"\2\2\u257e\u2573\3\2\2\2\u257e\u2574\3\2\2\2\u257e\u2575\3\2\2\2\u257e"+
		"\u2576\3\2\2\2\u257e\u2577\3\2\2\2\u257e\u2578\3\2\2\2\u257e\u2579\3\2"+
		"\2\2\u257e\u257a\3\2\2\2\u257f\u0561\3\2\2\2\u2580\u2581\7\u00f3\2\2\u2581"+
		"\u25bc\5\u01be\u00e0\2\u2582\u2583\7=\2\2\u2583\u25bc\5\u01be\u00e0\2"+
		"\u2584\u2585\7\u00f8\2\2\u2585\u25bc\5\u0400\u0201\2\u2586\u2587\7L\2"+
		"\2\u2587\u25bc\5\u04dc\u026f\2\u2588\u2589\7N\2\2\u2589\u25bc\5\u04dc"+
		"\u026f\2\u258a\u258b\7\u0126\2\2\u258b\u25bc\5\u04dc\u026f\2\u258c\u258d"+
		"\7\u010d\2\2\u258d\u25bc\5\u01be\u00e0\2\u258e\u258f\7\u010e\2\2\u258f"+
		"\u2590\7\u0117\2\2\u2590\u25bc\5\u0568\u02b5\2\u2591\u2592\7\u0130\2\2"+
		"\u2592\u25bc\5\u01be\u00e0\2\u2593\u2594\7\u00af\2\2\u2594\u25bc\5\u0400"+
		"\u0201\2\u2595\u2596\7\u0129\2\2\u2596\u25bc\5L\'\2\u2597\u2599\7B\2\2"+
		"\u2598\u2597\3\2\2\2\u2598\u2599\3\2\2\2\u2599\u259a\3\2\2\2\u259a\u25bc"+
		"\5\u0564\u02b3\2\u259b\u259c\7H\2\2\u259c\u259d\7\u00f2\2\2\u259d\u259e"+
		"\7\u021b\2\2\u259e\u25bc\5\u01be\u00e0\2\u259f\u25a0\7H\2\2\u25a0\u25a1"+
		"\7\u01fb\2\2\u25a1\u25bc\5\u01be\u00e0\2\u25a2\u25a3\7v\2\2\u25a3\u25a4"+
		"\7\u0209\2\2\u25a4\u25a5\7u\2\2\u25a5\u25a6\7=\2\2\u25a6\u25bc\5\u01be"+
		"\u00e0\2\u25a7\u25a8\7v\2\2\u25a8\u25a9\7\u01f8\2\2\u25a9\u25aa\7u\2\2"+
		"\u25aa\u25ab\7=\2\2\u25ab\u25bc\5\u01be\u00e0\2\u25ac\u25ad\7v\2\2\u25ad"+
		"\u25ae\7\u01d0\2\2\u25ae\u25af\7u\2\2\u25af\u25b0\7=\2\2\u25b0\u25bc\5"+
		"\u01be\u00e0\2\u25b1\u25b2\7v\2\2\u25b2\u25b3\7\u01e2\2\2\u25b3\u25b4"+
		"\7u\2\2\u25b4\u25b5\7=\2\2\u25b5\u25bc\5\u01be\u00e0\2\u25b6\u25b7\7v"+
		"\2\2\u25b7\u25b8\7\u01ed\2\2\u25b8\u25b9\7u\2\2\u25b9\u25ba\7=\2\2\u25ba"+
		"\u25bc\5\u01be\u00e0\2\u25bb\u2580\3\2\2\2\u25bb\u2582\3\2\2\2\u25bb\u2584"+
		"\3\2\2\2\u25bb\u2586\3\2\2\2\u25bb\u2588\3\2\2\2\u25bb\u258a\3\2\2\2\u25bb"+
		"\u258c\3\2\2\2\u25bb\u258e\3\2\2\2\u25bb\u2591\3\2\2\2\u25bb\u2593\3\2"+
		"\2\2\u25bb\u2595\3\2\2\2\u25bb\u2598\3\2\2\2\u25bb\u259b\3\2\2\2\u25bb"+
		"\u259f\3\2\2\2\u25bb\u25a2\3\2\2\2\u25bb\u25a7\3\2\2\2\u25bb\u25ac\3\2"+
		"\2\2\u25bb\u25b1\3\2\2\2\u25bb\u25b6\3\2\2\2\u25bc\u0563\3\2\2\2\u25bd"+
		"\u25c9\7\23\2\2\u25be\u25bf\7\23\2\2\u25bf\u25c9\7\27\2\2\u25c0\u25c1"+
		"\5\u00ceh\2\u25c1\u25c2\7\27\2\2\u25c2\u25c9\3\2\2\2\u25c3\u25c9\5\u00e2"+
		"r\2\u25c4\u25c5\5\u00d8m\2\u25c5\u25c6\7\26\2\2\u25c6\u25c7\5\u0566\u02b4"+
		"\2\u25c7\u25c9\3\2\2\2\u25c8\u25bd\3\2\2\2\u25c8\u25be\3\2\2\2\u25c8\u25c0"+
		"\3\2\2\2\u25c8\u25c3\3\2\2\2\u25c8\u25c4\3\2\2\2\u25c9\u0565\3\2\2\2\u25ca"+
		"\u25cb\5\u00ceh\2\u25cb\u0567\3\2\2\2\u25cc\u25d1\5\u020c\u0107\2\u25cd"+
		"\u25ce\7(\2\2\u25ce\u25d0\5\u020c\u0107\2\u25cf\u25cd\3\2\2\2\u25d0\u25d3"+
		"\3\2\2\2\u25d1\u25cf\3\2\2\2\u25d1\u25d2\3\2\2\2\u25d2\u0569\3\2\2\2\u25d3"+
		"\u25d1\3\2\2\2\u25d4\u25d5\79\2\2\u25d5\u25d6\7\u00e7\2\2\u25d6\u25d8"+
		"\5\u0202\u0102\2\u25d7\u25d9\7R\2\2\u25d8\u25d7\3\2\2\2\u25d8\u25d9\3"+
		"\2\2\2\u25d9\u25dd\3\2\2\2\u25da\u25dc\5\u056c\u02b7\2\u25db\u25da\3\2"+
		"\2\2\u25dc\u25df\3\2\2\2\u25dd\u25db\3\2\2\2\u25dd\u25de\3\2\2\2\u25de"+
		"\u056b\3\2\2\2\u25df\u25dd\3\2\2\2\u25e0\u25ee\5\u056e\u02b8\2\u25e1\u25e2"+
		"\7\u01f9\2\2\u25e2\u25ee\7\u0225\2\2\u25e3\u25e4\7\u00d0\2\2\u25e4\u25ee"+
		"\5\u0256\u012c\2\u25e5\u25e6\7\u00e3\2\2\u25e6\u25ee\5\u0256\u012c\2\u25e7"+
		"\u25e8\7u\2\2\u25e8\u25e9\7\u00e3\2\2\u25e9\u25ee\5\u0256\u012c\2\u25ea"+
		"\u25eb\7u\2\2\u25eb\u25ec\7z\2\2\u25ec\u25ee\5\u0256\u012c\2\u25ed\u25e0"+
		"\3\2\2\2\u25ed\u25e1\3\2\2\2\u25ed\u25e3\3\2\2\2\u25ed\u25e5\3\2\2\2\u25ed"+
		"\u25e7\3\2\2\2\u25ed\u25ea\3\2\2\2\u25ee\u056d\3\2\2\2\u25ef\u25f0\7\u01ea"+
		"\2\2\u25f0\u2604\7\u0224\2\2\u25f1\u25f2\7\u01ea\2\2\u25f2\u2604\7p\2"+
		"\2\u25f3\u25f4\7\u01e3\2\2\u25f4\u25f5\7\u01ea\2\2";
	private static final String _serializedATNSegment4 =
		"\u25f5\u2604\7\u0224\2\2\u25f6\u25f7\7\u020d\2\2\u25f7\u25f8\7\u01ea\2"+
		"\2\u25f8\u2604\7\u0224\2\2\u25f9\u2604\7\u0109\2\2\u25fa\u25fb\7\u01cb"+
		"\2\2\u25fb\u25fc\7\177\2\2\u25fc\u2604\5\u01f8\u00fd\2\u25fd\u25fe\7\u0136"+
		"\2\2\u25fe\u25ff\7\u0214\2\2\u25ff\u2604\7\u0224\2\2\u2600\u2601\7\u00e7"+
		"\2\2\u2601\u2604\5\u0256\u012c\2\u2602\u2604\5\u00ceh\2\u2603\u25ef\3"+
		"\2\2\2\u2603\u25f1\3\2\2\2\u2603\u25f3\3\2\2\2\u2603\u25f6\3\2\2\2\u2603"+
		"\u25f9\3\2\2\2\u2603\u25fa\3\2\2\2\u2603\u25fd\3\2\2\2\u2603\u2600\3\2"+
		"\2\2\u2603\u2602\3\2\2\2\u2604\u056f\3\2\2\2\u2605\u2606\7;\2\2\u2606"+
		"\u2609\7\u00e7\2\2\u2607\u2608\7g\2\2\u2608\u260a\7s\2\2\u2609\u2607\3"+
		"\2\2\2\u2609\u260a\3\2\2\2\u260a\u260b\3\2\2\2\u260b\u260c\5\u0256\u012c"+
		"\2\u260c\u0571\3\2\2\2\u260d\u260e\7:\2\2\u260e\u260f\7\u00e7\2\2\u260f"+
		"\u2610\5\u0574\u02bb\2\u2610\u0573\3\2\2\2\u2611\u2613\5\u0202\u0102\2"+
		"\u2612\u2614\7R\2\2\u2613\u2612\3\2\2\2\u2613\u2614\3\2\2\2\u2614\u2615"+
		"\3\2\2\2\u2615\u2616\5\u0576\u02bc\2\u2616\u262c\3\2\2\2\u2617\u261b\5"+
		"\u0202\u0102\2\u2618\u2619\7u\2\2\u2619\u261a\7\u00f3\2\2\u261a\u261c"+
		"\5\u00e0q\2\u261b\u2618\3\2\2\2\u261b\u261c\3\2\2\2\u261c\u261d\3\2\2"+
		"\2\u261d\u261e\5\u0258\u012d\2\u261e\u262c\3\2\2\2\u261f\u2623\7v\2\2"+
		"\u2620\u2621\7u\2\2\u2621\u2622\7\u00f3\2\2\u2622\u2624\5\u00e0q\2\u2623"+
		"\u2620\3\2\2\2\u2623\u2624\3\2\2\2\u2624\u2625\3\2\2\2\u2625\u262c\5\u0258"+
		"\u012d\2\u2626\u2627\5\u0202\u0102\2\u2627\u2628\7\u0121\2\2\u2628\u2629"+
		"\7k\2\2\u2629\u262a\5\u0202\u0102\2\u262a\u262c\3\2\2\2\u262b\u2611\3"+
		"\2\2\2\u262b\u2617\3\2\2\2\u262b\u261f\3\2\2\2\u262b\u2626\3\2\2\2\u262c"+
		"\u0575\3\2\2\2\u262d\u262f\5\u056e\u02b8\2\u262e\u262d\3\2\2\2\u262f\u2632"+
		"\3\2\2\2\u2630\u262e\3\2\2\2\u2630\u2631\3\2\2\2\u2631\u0577\3\2\2\2\u2632"+
		"\u2630\3\2\2\2\u2633\u2634\79\2\2\u2634\u2635\7\u00e3\2\2\u2635\u2637"+
		"\5\u0202\u0102\2\u2636\u2638\7R\2\2\u2637\u2636\3\2\2\2\u2637\u2638\3"+
		"\2\2\2\u2638\u263c\3\2\2\2\u2639\u263b\5\u056c\u02b7\2\u263a\u2639\3\2"+
		"\2\2\u263b\u263e\3\2\2\2\u263c\u263a\3\2\2\2\u263c\u263d\3\2\2\2\u263d"+
		"\u0579\3\2\2\2\u263e\u263c\3\2\2\2\u263f\u2640\7;\2\2\u2640\u2643\7\u00e3"+
		"\2\2\u2641\u2642\7g\2\2\u2642\u2644\7s\2\2\u2643\u2641\3\2\2\2\u2643\u2644"+
		"\3\2\2\2\u2644\u2645\3\2\2\2\u2645\u2646\5\u0256\u012c\2\u2646\u057b\3"+
		"\2\2\2\u2647\u2648\7:\2\2\u2648\u2649\7\u00e3\2\2\u2649\u264a\5\u0574"+
		"\u02bb\2\u264a\u057d\3\2\2\2\u264b\u264c\7:\2\2\u264c\u264d\7=\2\2\u264d"+
		"\u2654\5\u00e0q\2\u264e\u264f\7\u0121\2\2\u264f\u2650\7k\2\2\u2650\u2655"+
		"\5\u00e0q\2\u2651\u2652\7\u011c\2\2\u2652\u2653\7k\2\2\u2653\u2655\5\u0202"+
		"\u0102\2\u2654\u264e\3\2\2\2\u2654\u2651\3\2\2\2\u2655\u057f\3\2\2\2\u2656"+
		"\u2657\79\2\2\u2657\u2658\7z\2\2\u2658\u265a\5\u0202\u0102\2\u2659\u265b"+
		"\7R\2\2\u265a\u2659\3\2\2\2\u265a\u265b\3\2\2\2\u265b\u265f\3\2\2\2\u265c"+
		"\u265e\5\u056c\u02b7\2\u265d\u265c\3\2\2\2\u265e\u2661\3\2\2\2\u265f\u265d"+
		"\3\2\2\2\u265f\u2660\3\2\2\2\u2660\u0581\3\2\2\2\u2661\u265f\3\2\2\2\u2662"+
		"\u2663\79\2\2\u2663\u2667\7=\2\2\u2664\u2665\7g\2\2\u2665\u2666\7o\2\2"+
		"\u2666\u2668\7s\2\2\u2667\u2664\3\2\2\2\u2667\u2668\3\2\2\2\u2668\u2669"+
		"\3\2\2\2\u2669\u266a\5\u0584\u02c3\2\u266a\u0583\3\2\2\2\u266b\u266d\5"+
		"\u013a\u009e\2\u266c\u266b\3\2\2\2\u266c\u266d\3\2\2\2\u266d\u266e\3\2"+
		"\2\2\u266e\u266f\7\u021e\2\2\u266f\u2670\5\u0202\u0102\2\u2670\u2671\5"+
		"\u0586\u02c4\2\u2671\u2676\3\2\2\2\u2672\u2673\5\u013a\u009e\2\u2673\u2674"+
		"\5\u0586\u02c4\2\u2674\u2676\3\2\2\2\u2675\u266c\3\2\2\2\u2675\u2672\3"+
		"\2\2\2\u2676\u0585\3\2\2\2\u2677\u2679\5\u0588\u02c5\2\u2678\u2677\3\2"+
		"\2\2\u2679\u267c\3\2\2\2\u267a\u2678\3\2\2\2\u267a\u267b\3\2\2\2\u267b"+
		"\u0587\3\2\2\2\u267c\u267a\3\2\2\2\u267d\u2684\5\u0278\u013d\2\u267e\u2684"+
		"\5\u0294\u014b\2\u267f\u2684\5\u04aa\u0256\2\u2680\u2684\5\u048e\u0248"+
		"\2\u2681\u2684\5\u0554\u02ab\2\u2682\u2684\5\u029e\u0150\2\u2683\u267d"+
		"\3\2\2\2\u2683\u267e\3\2\2\2\u2683\u267f\3\2\2\2\u2683\u2680\3\2\2\2\u2683"+
		"\u2681\3\2\2\2\u2683\u2682\3\2\2\2\u2684\u0589\3\2\2\2\u2685\u2686\7;"+
		"\2\2\u2686\u2689\7z\2\2\u2687\u2688\7g\2\2\u2688\u268a\7s\2\2\u2689\u2687"+
		"\3\2\2\2\u2689\u268a\3\2\2\2\u268a\u268b\3\2\2\2\u268b\u268c\5\u0256\u012c"+
		"\2\u268c\u058b\3\2\2\2\u268d\u268e\7;\2\2\u268e\u2691\7=\2\2\u268f\u2690"+
		"\7g\2\2\u2690\u2692\7s\2\2\u2691\u268f\3\2\2\2\u2691\u2692\3\2\2\2\u2692"+
		"\u2693\3\2\2\2\u2693\u2695\5\u01be\u00e0\2\u2694\u2696\5\u0346\u01a4\2"+
		"\u2695\u2694\3\2\2\2\u2695\u2696\3\2\2\2\u2696\u058d\3\2\2\2\u2697\u2698"+
		"\7\u01fa\2\2\u2698\u2699\7\u011b\2\2\u2699\u269a\7{\2\2\u269a\u269b\5"+
		"\u0256\u012c\2\u269b\u269c\7k\2\2\u269c\u269d\5\u0202\u0102\2\u269d\u058f"+
		"\3\2\2\2\u269e\u26a8\7\u012c\2\2\u269f\u26a9\5\u0204\u0103\2\u26a0\u26a1"+
		"\7\u008c\2\2\u26a1\u26a9\7\u013a\2\2\u26a2\u26a3\7\u00e6\2\2\u26a3\u26a4"+
		"\7\u00dc\2\2\u26a4\u26a9\7\u00dd\2\2\u26a5\u26a6\7\u012a\2\2\u26a6\u26a9"+
		"\7\u021e\2\2\u26a7\u26a9\7v\2\2\u26a8\u269f\3\2\2\2\u26a8\u26a0\3\2\2"+
		"\2\u26a8\u26a2\3\2\2\2\u26a8\u26a5\3\2\2\2\u26a8\u26a7\3\2\2\2\u26a9\u0591"+
		"\3\2\2\2\u26aa\u26ac\7A\2\2\u26ab\u26ad\5\u0594\u02cb\2\u26ac\u26ab\3"+
		"\2\2\2\u26ac\u26ad\3\2\2\2\u26ad\u26ca\3\2\2\2\u26ae\u26cb\5\u0596\u02cc"+
		"\2\u26af\u26cb\5\u0598\u02cd\2\u26b0\u26b1\5\u0204\u0103\2\u26b1\u26b2"+
		"\7Z\2\2\u26b2\u26b3\7\u009a\2\2\u26b3\u26cb\3\2\2\2\u26b4\u26b5\7\u008c"+
		"\2\2\u26b5\u26b6\7\u013a\2\2\u26b6\u26cb\5\u020a\u0106\2\u26b7\u26b8\7"+
		"\u01b1\2\2\u26b8\u26cb\7\u0224\2\2\u26b9\u26ba\7=\2\2\u26ba\u26cb\7\u0224"+
		"\2\2\u26bb\u26bd\7\u00ab\2\2\u26bc\u26be\5\u0262\u0132\2\u26bd\u26bc\3"+
		"\2\2\2\u26bd\u26be\3\2\2\2\u26be\u26cb\3\2\2\2\u26bf\u26c0\7\u00e3\2\2"+
		"\u26c0\u26cb\5\u0252\u012a\2\u26c1\u26c2\7\u012a\2\2\u26c2\u26c3\7\u021e"+
		"\2\2\u26c3\u26cb\5\u0252\u012a\2\u26c4\u26c5\7\u012a\2\2\u26c5\u26c6\7"+
		"\u021e\2\2\u26c6\u26cb\7\u0099\2\2\u26c7\u26c8\7\u015c\2\2\u26c8\u26c9"+
		"\7\u00df\2\2\u26c9\u26cb\5\u01a6\u00d4\2\u26ca\u26ae\3\2\2\2\u26ca\u26af"+
		"\3\2\2\2\u26ca\u26b0\3\2\2\2\u26ca\u26b4\3\2\2\2\u26ca\u26b7\3\2\2\2\u26ca"+
		"\u26b9\3\2\2\2\u26ca\u26bb\3\2\2\2\u26ca\u26bf\3\2\2\2\u26ca\u26c1\3\2"+
		"\2\2\u26ca\u26c4\3\2\2\2\u26ca\u26c7\3\2\2\2\u26cb\u0593\3\2\2\2\u26cc"+
		"\u26cd\tB\2\2\u26cd\u0595\3\2\2\2\u26ce\u26cf\7\u008c\2\2\u26cf\u26d3"+
		"\7\u013a\2\2\u26d0\u26d4\5\u00caf\2\u26d1\u26d4\7\u00a5\2\2\u26d2\u26d4"+
		"\7\u0099\2\2\u26d3\u26d0\3\2\2\2\u26d3\u26d1\3\2\2\2\u26d3\u26d2\3\2\2"+
		"\2\u26d4\u0597\3\2\2\2\u26d5\u26d6\5\u0204\u0103\2\u26d6\u26d9\t\30\2"+
		"\2\u26d7\u26da\5\u0206\u0104\2\u26d8\u26da\7\u0099\2\2\u26d9\u26d7\3\2"+
		"\2\2\u26d9\u26d8\3\2\2\2\u26da\u0599\3\2\2\2\u26db\u26de\7\u0123\2\2\u26dc"+
		"\u26df\7v\2\2\u26dd\u26df\5\u00ceh\2\u26de\u26dc\3\2\2\2\u26de\u26dd\3"+
		"\2\2\2\u26df\u059b\3\2\2\2\u26e0\u26ea\7\u01be\2\2\u26e1\u26e3\5\u05a8"+
		"\u02d5\2\u26e2\u26e4\7\u021f\2\2\u26e3\u26e2\3\2\2\2\u26e3\u26e4\3\2\2"+
		"\2\u26e4\u26eb\3\2\2\2\u26e5\u26eb\7\u021f\2\2\u26e6\u26e7\7\"\2\2\u26e7"+
		"\u26e8\5\u05a0\u02d1\2\u26e8\u26e9\7#\2\2\u26e9\u26eb\3\2\2\2\u26ea\u26e1"+
		"\3\2\2\2\u26ea\u26e5\3\2\2\2\u26ea\u26e6\3\2\2\2\u26ea\u26eb\3\2\2\2\u26eb"+
		"\u26ec\3\2\2\2\u26ec\u26ed\5\u059e\u02d0\2\u26ed\u059d\3\2\2\2\u26ee\u26f7"+
		"\5&\24\2\u26ef\u26f7\5\4\3\2\u26f0\u26f7\5\24\13\2\u26f1\u26f7\5 \21\2"+
		"\u26f2\u26f7\5\u03c8\u01e5\2\u26f3\u26f7\5\2\2\2\u26f4\u26f7\5\u03ce\u01e8"+
		"\2\u26f5\u26f7\5\u03d2\u01ea\2\u26f6\u26ee\3\2\2\2\u26f6\u26ef\3\2\2\2"+
		"\u26f6\u26f0\3\2\2\2\u26f6\u26f1\3\2\2\2\u26f6\u26f2\3\2\2\2\u26f6\u26f3"+
		"\3\2\2\2\u26f6\u26f4\3\2\2\2\u26f6\u26f5\3\2\2\2\u26f7\u059f\3\2\2\2\u26f8"+
		"\u26fd\5\u05a2\u02d2\2\u26f9\u26fa\7(\2\2\u26fa\u26fc\5\u05a2\u02d2\2"+
		"\u26fb\u26f9\3\2\2\2\u26fc\u26ff\3\2\2\2\u26fd\u26fb\3\2\2\2\u26fd\u26fe"+
		"\3\2\2\2\u26fe\u05a1\3\2\2\2\u26ff\u26fd\3\2\2\2\u2700\u2702\5\u05a6\u02d4"+
		"\2\u2701\u2703\5\u05a4\u02d3\2\u2702\u2701\3\2\2\2\u2702\u2703\3\2\2\2"+
		"\u2703\u05a3\3\2\2\2\u2704\u2707\5\u01fa\u00fe\2\u2705\u2707\5\u020c\u0107"+
		"\2\u2706\u2704\3\2\2\2\u2706\u2705\3\2\2\2\u2707\u05a5\3\2\2\2\u2708\u270b"+
		"\5\u01fc\u00ff\2\u2709\u270b\5\u05a8\u02d5\2\u270a\u2708\3\2\2\2\u270a"+
		"\u2709\3\2\2\2\u270b\u05a7\3\2\2\2\u270c\u270d\tC\2\2\u270d\u05a9\3\2"+
		"\2\2\u270e\u270f\7A\2\2\u270f\u2710\7\u00f0\2\2\u2710\u2711\5\u05ae\u02d8"+
		"\2\u2711\u2712\5\u05ac\u02d7\2\u2712\u05ab\3\2\2\2\u2713\u2714\t!\2\2"+
		"\u2714\u05ad\3\2\2\2\u2715\u2718\7v\2\2\u2716\u2718\5L\'\2\u2717\u2715"+
		"\3\2\2\2\u2717\u2716\3\2\2\2\u2718\u05af\3\2\2\2\u2719\u2721\5\u05a8\u02d5"+
		"\2\u271a\u271c\7\u021f\2\2\u271b\u271a\3\2\2\2\u271b\u271c\3\2\2\2\u271c"+
		"\u2722\3\2\2\2\u271d\u271e\7\"\2\2\u271e\u271f\5\u05b6\u02dc\2\u271f\u2720"+
		"\7#\2\2\u2720\u2722\3\2\2\2\u2721\u271b\3\2\2\2\u2721\u271d\3\2\2\2\u2722"+
		"\u2724\3\2\2\2\u2723\u2725\5\u05b2\u02da\2\u2724\u2723\3\2\2\2\u2724\u2725"+
		"\3\2\2\2\u2725\u05b1\3\2\2\2\u2726\u272b\5\u05b4\u02db\2\u2727\u2728\7"+
		"(\2\2\u2728\u272a\5\u05b4\u02db\2\u2729\u2727\3\2\2\2\u272a\u272d\3\2"+
		"\2\2\u272b\u2729\3\2\2\2\u272b\u272c\3\2\2\2\u272c\u05b3\3\2\2\2\u272d"+
		"\u272b\3\2\2\2\u272e\u272f\5N(\2\u272f\u2730\5<\37\2\u2730\u05b5\3\2\2"+
		"\2\u2731\u2736\5\u05b8\u02dd\2\u2732\u2733\7(\2\2\u2733\u2735\5\u05b8"+
		"\u02dd\2\u2734\u2732\3\2\2\2\u2735\u2738\3\2\2\2\u2736\u2734\3\2\2\2\u2736"+
		"\u2737\3\2\2\2\u2737\u05b7\3\2\2\2\u2738\u2736\3\2\2\2\u2739\u273b\5\u05bc"+
		"\u02df\2\u273a\u273c\5\u05ba\u02de\2\u273b\u273a\3\2\2\2\u273b\u273c\3"+
		"\2\2\2\u273c\u05b9\3\2\2\2\u273d\u2740\5\u01fa\u00fe\2\u273e\u2740\5\u020c"+
		"\u0107\2\u273f\u273d\3\2\2\2\u273f\u273e\3\2\2\2\u2740\u05bb\3\2\2\2\u2741"+
		"\u2744\5\u01fc\u00ff\2\u2742\u2744\5\u05a8\u02d5\2\u2743\u2741\3\2\2\2"+
		"\u2743\u2742\3\2\2\2\u2744\u05bd\3\2\2\2\u2745\u2746\7\u01dc\2\2\u2746"+
		"\u2747\5\u0254\u012b\2\u2747\u05bf\3\2\2\2\u2748\u2759\7\u0215\2\2\u2749"+
		"\u274b\7]\2\2\u274a\u2749\3\2\2\2\u274a\u274b\3\2\2\2\u274b\u274d\3\2"+
		"\2\2\u274c\u274e\7\u021d\2\2\u274d\u274c\3\2\2\2\u274d\u274e\3\2\2\2\u274e"+
		"\u2750\3\2\2\2\u274f\u2751\7\u021f\2\2\u2750\u274f\3\2\2\2\u2750\u2751"+
		"\3\2\2\2\u2751\u2753\3\2\2\2\u2752\u2754\7\u019b\2\2\u2753\u2752\3\2\2"+
		"\2\u2753\u2754\3\2\2\2\u2754\u275a\3\2\2\2\u2755\u2756\7\"\2\2\u2756\u2757"+
		"\5\u05b6\u02dc\2\u2757\u2758\7#\2\2\u2758\u275a\3\2\2\2\u2759\u274a\3"+
		"\2\2\2\u2759\u2755\3\2\2\2\u275a\u275c\3\2\2\2\u275b\u275d\5\u05b2\u02da"+
		"\2\u275c\u275b\3\2\2\2\u275c\u275d\3\2\2\2\u275d\u05c1\3\2\2\2\u275e\u275f"+
		"\7\u009d\2\2\u275f\u2760\5\u0136\u009c\2\u2760\u2762\7\"\2\2\u2761\u2763"+
		"\5\u05c4\u02e3\2\u2762\u2761\3\2\2\2\u2762\u2763\3\2\2\2\u2763\u2764\3"+
		"\2\2\2\u2764\u2765\7#\2\2\u2765\u05c3\3\2\2\2\u2766\u2768\t\24\2\2\u2767"+
		"\u2766\3\2\2\2\u2767\u2768\3\2\2\2\u2768\u2769\3\2\2\2\u2769\u276b\5\u012c"+
		"\u0097\2\u276a\u276c\5\u01c8\u00e5\2\u276b\u276a\3\2\2\2\u276b\u276c\3"+
		"\2\2\2\u276c\u2779\3\2\2\2\u276d\u276e\7\u018d\2\2\u276e\u276f\5\u0130"+
		"\u0099\2\u276f\u2770\5\u01c8\u00e5\2\u2770\u2779\3\2\2\2\u2771\u2772\5"+
		"\u012c\u0097\2\u2772\u2773\7(\2\2\u2773\u2774\7\u018d\2\2\u2774\u2775"+
		"\5\u0130\u0099\2\u2775\u2776\5\u01c8\u00e5\2\u2776\u2779\3\2\2\2\u2777"+
		"\u2779\7\23\2\2\u2778\u2767\3\2\2\2\u2778\u276d\3\2\2\2\u2778\u2771\3"+
		"\2\2\2\u2778\u2777\3\2\2\2\u2779\u05c5\3\2\2\2\u03dd\u05f2\u05f5\u05f8"+
		"\u05ff\u0602\u0609\u0620\u062c\u063a\u0642\u0648\u064e\u0651\u0658\u065b"+
		"\u065e\u0668\u0675\u0682\u0689\u068f\u0692\u0695\u069f\u06a6\u06b0\u06b8"+
		"\u06bc\u06c0\u06c4\u06d0\u06d4\u06d9\u06dd\u06df\u06e4\u06e9\u06ef\u06f5"+
		"\u06f8\u06fa\u06ff\u0702\u0705\u0708\u070b\u070e\u0711\u0714\u071a\u071d"+
		"\u0720\u0723\u0726\u0729\u072e\u0735\u073c\u0741\u0747\u074d\u0753\u0759"+
		"\u075e\u0762\u0766\u0770\u077f\u0786\u078c\u0792\u079b\u07a0\u07a3\u07a8"+
		"\u07b5\u07c2\u07c9\u07d3\u07e3\u0805\u080d\u0811\u081a\u0828\u0837\u0842"+
		"\u084a\u086a\u0873\u0876\u0879\u087c\u0892\u089a\u08a8\u08b5\u08b9\u08c6"+
		"\u08cc\u08d0\u08d6\u08db\u08df\u08e4\u08e8\u08ed\u08f4\u08f6\u08fc\u0913"+
		"\u0917\u091b\u091f\u0922\u092d\u093a\u0944\u094f\u0954\u0958\u095f\u0962"+
		"\u0974\u097a\u0981\u0985\u0989\u098c\u0990\u0998\u099c\u09a0\u09a7\u09ae"+
		"\u09bb\u09c2\u09ca\u09d1\u09d6\u09dd\u09e2\u09f4\u09f7\u09fe\u0a02\u0a0c"+
		"\u0a11\u0a16\u0a1b\u0a21\u0a28\u0a2e\u0a34\u0a39\u0a3f\u0a46\u0a4b\u0a51"+
		"\u0a58\u0a5b\u0a5f\u0a64\u0a68\u0a6e\u0a72\u0a75\u0a86\u0a8d\u0a96\u0a9d"+
		"\u0aa1\u0aa9\u0ab0\u0ab5\u0ad1\u0b40\u0b4a\u0bc6\u0bc8\u0bd4\u0c00\u0c02"+
		"\u0c0a\u0c24\u0c2d\u0c35\u0c42\u0c46\u0c49\u0c52\u0c56\u0c5a\u0c61\u0c71"+
		"\u0c7b\u0c89\u0c8d\u0c92\u0c9c\u0ca5\u0cb1\u0cc1\u0ccb\u0cdf\u0ce6\u0cee"+
		"\u0cfc\u0d03\u0d0e\u0d17\u0d22\u0d2b\u0d34\u0d3d\u0d43\u0d4e\u0d56\u0d5d"+
		"\u0d61\u0d69\u0d6b\u0d82\u0d89\u0d97\u0da0\u0dab\u0db2\u0dbb\u0dbf\u0dc2"+
		"\u0dc5\u0dc8\u0dd8\u0e08\u0ea5\u0eb1\u0ece\u0edd\u0ee7\u0ef5\u0ef9\u0efe"+
		"\u0f00\u0f11\u0f15\u0f19\u0f21\u0f28\u0f2c\u0f33\u0f37\u0f3a\u0f42\u0f46"+
		"\u0f51\u0f55\u0f5b\u0f60\u0f64\u0f66\u0f6c\u0f77\u0f80\u0f84\u0f88\u0f90"+
		"\u0fb0\u0fba\u0fbc\u0fc4\u0fcf\u0fda\u0fea\u0ffc\u1008\u1010\u1021\u1027"+
		"\u1030\u1037\u1043\u104d\u105a\u1060\u1064\u106c\u107c\u1086\u109a\u10a2"+
		"\u10b4\u10bb\u10bf\u10c2\u10c4\u10ca\u10d3\u10db\u10e4\u10e8\u10ec\u10ef"+
		"\u10f2\u10f7\u10fa\u10fc\u1109\u1110\u111b\u112d\u1135\u1143\u1147\u114a"+
		"\u114d\u1156\u115b\u115e\u1160\u119c\u11a2\u11a9\u11b0\u11b7\u11bf\u11c6"+
		"\u11cc\u11d6\u11e0\u11e8\u11ed\u11fc\u1203\u120c\u1211\u1218\u1223\u122c"+
		"\u1234\u123b\u1243\u124c\u1259\u125c\u125f\u1261\u126a\u1275\u1288\u128e"+
		"\u1291\u129e\u12a4\u12b7\u12bf\u12c6\u12d0\u12e2\u12ea\u12f6\u1306\u131e"+
		"\u132f\u1337\u133e\u1343\u134c\u1352\u135c\u1360\u1365\u1372\u1382\u1394"+
		"\u139c\u13a9\u13ad\u13b4\u13da\u13df\u13ea\u13f1\u13fb\u1404\u1408\u140c"+
		"\u140f\u1412\u1415\u1418\u141d\u141f\u1425\u1427\u1447\u144e\u1459\u145e"+
		"\u1463\u146c\u1478\u147e\u1486\u148f\u1495\u149b\u149f\u14a2\u14a5\u14b1"+
		"\u14bb\u14c0\u14c6\u14c9\u14cc\u14d6\u14d9\u14dc\u14e0\u14e6\u14ea\u14f0"+
		"\u14f6\u14fb\u1505\u1515\u151b\u151d\u1525\u152f\u1539\u153f\u1544\u1547"+
		"\u154d\u1550\u1554\u1560\u1563\u156e\u1571\u1576\u157b\u157f\u1588\u159a"+
		"\u15a2\u15ac\u15b4\u15bb\u15be\u15c4\u15c8\u15cd\u15d1\u15d6\u15e8\u15ee"+
		"\u15f4\u15fc\u15ff\u1602\u1606\u160c\u161d\u1624\u162c\u1634\u163b\u163e"+
		"\u164a\u1658\u165c\u166a\u1670\u1673\u167a\u167d\u1682\u1685\u1687\u168b"+
		"\u168f\u1692\u1695\u169a\u169d\u16a1\u16a4\u16ae\u16b8\u16bf\u16d1\u16d7"+
		"\u16de\u16e3\u16ea\u16fe\u1705\u1715\u1718\u1732\u173e\u1751\u175b\u175d"+
		"\u1761\u1766\u176c\u1771\u1775\u177a\u177f\u1783\u1799\u17a1\u17a8\u17c6"+
		"\u17ca\u17d3\u17d6\u17da\u17dd\u17df\u17e6\u17f1\u17f4\u17f8\u17fc\u180b"+
		"\u181d\u1824\u182d\u1830\u183c\u1841\u1845\u184b\u1851\u1855\u185c\u1861"+
		"\u1866\u186b\u1872\u187b\u1884\u188d\u1895\u189d\u18a5\u18ae\u18b7\u18bb"+
		"\u18c2\u18ca\u18d4\u18da\u18de\u18e2\u18e6\u18ea\u18ef\u18f2\u18f6\u190b"+
		"\u1911\u1970\u1975\u1983\u198f\u1999\u19a6\u19ab\u19b3\u19ba\u19d1\u19de"+
		"\u19e5\u19ec\u19ef\u19f5\u19f8\u1a06\u1a0e\u1a20\u1a27\u1a2e\u1a35\u1a56"+
		"\u1a5d\u1a6b\u1a7d\u1a8d\u1a93\u1a9e\u1aa7\u1ab3\u1ab5\u1ac0\u1ac4\u1ad9"+
		"\u1ae0\u1ae5\u1ae9\u1aed\u1af1\u1af3\u1af8\u1b00\u1b16\u1b1a\u1b3a\u1b4d"+
		"\u1b75\u1bca\u1bd4\u1bdc\u1be4\u1bea\u1bf4\u1bfe\u1c03\u1c0d\u1c1f\u1c23"+
		"\u1c30\u1c32\u1c3d\u1c46\u1c53\u1c58\u1c60\u1c69\u1c7c\u1c7e\u1c88\u1c90"+
		"\u1c98\u1c9c\u1ca3\u1cad\u1cb1\u1cb6\u1cba\u1cc0\u1cc8\u1cce\u1cd7\u1cde"+
		"\u1ce6\u1ceb\u1cf4\u1cfa\u1d06\u1d0b\u1d14\u1d1a\u1d26\u1d36\u1d49\u1d56"+
		"\u1d66\u1d6f\u1d85\u1d98\u1d9f\u1da2\u1da9\u1db4\u1dc2\u1dd9\u1de1\u1dec"+
		"\u1df0\u1df7\u1e09\u1e17\u1e25\u1e30\u1e36\u1e43\u1e48\u1e58\u1e65\u1e6a"+
		"\u1e70\u1e78\u1e7e\u1e84\u1e89\u1e8c\u1e8e\u1e9b\u1ea1\u1eac\u1eb5\u1eba"+
		"\u1ebe\u1ec2\u1ec8\u1f40\u1f49\u1f54\u1f5a\u1f73\u1f83\u1f8b\u1f96\u1fa8"+
		"\u1fad\u1fb2\u1fb4\u1fba\u1fc1\u1fca\u1fce\u1fdd\u1fea\u1ff7\u2005\u200d"+
		"\u2011\u2018\u2022\u202a\u202d\u2037\u203c\u2044\u2049\u204e\u2058\u205e"+
		"\u2060\u2067\u206d\u2079\u2081\u2092\u2099\u20a2\u20ac\u20bb\u20bd\u20c3"+
		"\u20cc\u20d8\u20dd\u20e0\u20e3\u20eb\u20ee\u20f4\u2107\u210d\u2116\u211a"+
		"\u211e\u2125\u212d\u2132\u213d\u2141\u2149\u214e\u2159\u215d\u2167\u216e"+
		"\u2171\u2175\u2179\u2180\u218a\u218d\u2190\u2197\u21a0\u21ae\u21b5\u21bf"+
		"\u21c5\u21cc\u21d2\u21db\u21e5\u21ea\u21f6\u21fc\u2200\u2203\u2207\u220e"+
		"\u2213\u2216\u2223\u2235\u223c\u2242\u224e\u225f\u2264\u226b\u2271\u2278"+
		"\u2281\u2291\u2295\u229b\u229f\u22a6\u22ad\u22b5\u22bb\u22bf\u22c5\u22c9"+
		"\u22cf\u22d3\u22da\u22de\u22e4\u22e8\u22f0\u22f4\u22fb\u2302\u2306\u230c"+
		"\u2310\u2317\u231c\u2321\u2325\u232c\u2330\u2336\u233a\u2341\u2349\u234f"+
		"\u2356\u235c\u2363\u2369\u236f\u2375\u2379\u237f\u2383\u2389\u238d\u2393"+
		"\u2399\u239f\u23a3\u23a9\u23ad\u23b3\u23bb\u23bf\u23c5\u23cf\u23d3\u23d9"+
		"\u23e0\u23e6\u23ec\u23f2\u23f6\u23fd\u2408\u240c\u2413\u241b\u2425\u2430"+
		"\u243d\u2441\u2448\u244e\u2457\u2460\u2464\u246b\u2479\u2483\u248d\u2499"+
		"\u24a2\u24c8\u24cd\u24d3\u24db\u24df\u24e2\u24e6\u24ea\u24ed\u24f4\u24f8"+
		"\u24fb\u2500\u2504\u2508\u250b\u250f\u2513\u2516\u251a\u2520\u2524\u2537"+
		"\u253b\u253f\u2542\u254c\u2554\u2559\u2561\u2566\u256a\u257c\u257e\u2598"+
		"\u25bb\u25c8\u25d1\u25d8\u25dd\u25ed\u2603\u2609\u2613\u261b\u2623\u262b"+
		"\u2630\u2637\u263c\u2643\u2654\u265a\u265f\u2667\u266c\u2675\u267a\u2683"+
		"\u2689\u2691\u2695\u26a8\u26ac\u26bd\u26ca\u26d3\u26d9\u26de\u26e3\u26ea"+
		"\u26f6\u26fd\u2702\u2706\u270a\u2717\u271b\u2721\u2724\u272b\u2736\u273b"+
		"\u273f\u2743\u274a\u274d\u2750\u2753\u2759\u275c\u2762\u2767\u276b\u2778";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}